// Copyright 2021 Datafuse Labs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package meta;

message KVMeta {
  optional uint64 expire_at = 1;
}

message SeqV {
  uint64 seq = 1;
  bytes data = 2;
  optional KVMeta meta = 3;
}

// Request to get the seq and value by key
message TxnGetRequest {
  string key = 1;
}

message TxnGetResponse {
  string key = 1;

  optional SeqV value = 2;
}

// Return the value by key, then add the delta to the key.
//
// This operation assume the value bytes is a json encoded `uint64`,
// e.g. `1025` in bytes is `b"1025"`.
// If the result is negative, it will be set to zero.
message FetchAddU64 {

  // The key to fetch and add the delta.
  string key = 1;

  // The delta to add to the value.
  int64 delta = 2;
}

// Response for FetchAddU64, contains the value before and after `add`
message FetchAddU64Response {

  string key = 1;

  // The seq number of the record before update. `0` if the key does not exist.
  uint64 before_seq = 2;

  // The value before update.
  uint64 before = 3;

  // The seq number of the record after update. It should always be greater than `before_seq`.
  uint64 after_seq = 4;

  // The value after update.
  uint64 after = 5;
}

// Put request and response
message TxnPutRequest {
  string key = 1;

  bytes value = 2;

  // Whether or not to return the prev value
  // Not used anymore
  bool prev_value = 3;

  // Absolute expire time
  optional uint64 expire_at = 4;

  // Time to last in milliseconds.
  //
  // TTL is the relative expire time, since the raft-log applied.
  // If `ttl_ms` is set, `expire_at` is ignored.
  optional uint64 ttl_ms = 5;
}

message TxnPutResponse {
  string key = 1;

  // The value before put
  optional SeqV prev_value = 2;

  // The value after put
  optional SeqV current = 3;
}

// Delete request and response
message TxnDeleteRequest {
  string key = 1;

  // if or not return the prev value
  // Not used anymore
  bool prev_value = 2;

  // Delete only if the `seq` matches the specified value.
  // Such a condition skips changed record and does not result in a transaction failure.
  //
  // A key use case for this feature is to support `truncate-table`: the
  // deletion of only non-modified files from a snapshot view of copied
  // files.
  // 
  // A table contains associated `copied-files`. Suppose Process 1 updates
  // the table by modifying `f-3`, removing `f-4`, and adding `f-7`. In this
  // case, Process 2 can delete only the non-modified files:
  // 
  // ```
  // Process 1                       Process 2
  // // Add copied files             // Attempt to delete copied files
  // -------------------------------------------------------------
  // // 1. Initial
  // Table-A(seq:1):
  //     f-2(seq:2)
  //     f-3(seq:3)
  //     f-4(seq:4)
  //                                 // 2. Acquire a snapshot view
  //                                 Table-A(seq:1):
  //                                     f-2(seq:2)
  //                                     f-3(seq:3)
  //                                     f-4(seq:4)
  // 
  // // 3. Modify table and files
  // Table-A(seq:7):
  //     f-2(seq:2)
  //     f-3(seq:5) // updated
  //                // removed f-4
  //     f-7(seq:6) // added
  // 
  //                                 // 4. Sequence of table changed from 1 to 7
  //                                 //    Fetch table again
  //                                 Table-A(seq:7):
  // 
  // 
  //                                 // 5. Remove only unmodified file
  //                                 Table-A(seq:8):
  //                                                 // f-2 is the only file deleted
  //                                     f-3(seq:5)  // sequence number updated
  //                                     f-7(seq:6)  // sequence number updated
  // ```
  optional uint64 match_seq = 3;
}

message TxnDeleteResponse {
  string key = 1;
  bool success = 2;
  optional SeqV prev_value = 3;
}

// Delete by prefix request and response
message TxnDeleteByPrefixRequest {string prefix = 1;}

message TxnDeleteByPrefixResponse {
  string prefix = 1;
  uint32 count = 2;
}
