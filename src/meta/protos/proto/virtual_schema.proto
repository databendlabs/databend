// Copyright 2021 Datafuse Labs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// The identifier of a database by name. Names can be changed.
// There is no guarantee that two get-database request by name will return the
// same instance.

syntax = "proto3";

package databend_proto;

import "datatype.proto";

// VariantDataType is used to represent the data type that may be contained in VirtualDataField
message VariantDataType {
  oneof dt {
      Empty jsonb_t = 1;
      Empty bool_t = 2;
      Empty uint64_t = 3;
      Empty int64_t = 4;
      Empty float64_t = 5;
      Empty string_t = 6;
      VariantDataType array_t = 7;
  }
}

// VirtualDataField a single column type inferred from a Variant type Column
message VirtualDataField {
  // The name of this virtual column.
  string name = 1;
  // Virtual column data type, may have different data type in different block
  repeated VariantDataType data_types = 2;
  // The column id of source column
  uint32 source_column_id = 3;
  // The column id of this virtual column
  uint32 column_id = 4;
}

// VirtualDataSchema records all single columns inferred from the Variant type Column contained in the table
message VirtualDataSchema {
  uint64 ver = 100;
  uint64 min_reader_ver = 101;

  // Virtual Fields in the table
  repeated VirtualDataField fields = 1;
  // Other optional virutal columns info
  map<string, string> metadata = 2;
  // start from 3_000_000_001, Avoid conflicts with the column ids of normal columns
  uint32 next_column_id = 3;
  // Number of blocks have virtual columns
  uint64 number_of_blocks = 4;
}
