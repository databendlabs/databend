// Copyright 2022 Datafuse Labs.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package databend_proto;

// An enumeration of all supported data types.
message DataType {
  uint64 ver = 100;
  uint64 min_reader_ver = 101;

  oneof dt {
    Empty null_type = 22;
    NullableType nullable_type = 1;
    Empty bool_type = 2;
    Empty int8_type = 3;
    Empty int16_type = 4;
    Empty int32_type = 5;
    Empty int64_type = 6;
    Empty uint8_type = 7;
    Empty uint16_type = 8;
    Empty uint32_type = 9;
    Empty uint64_type = 10;
    Empty float32_type = 11;
    Empty float64_type = 12;
    Empty date_type = 13;
    Timestamp timestamp_type = 14;
    Empty string_type = 15;
    Struct struct_type = 16;
    Array array_type = 17;
    Variant variant_type = 18;
    VariantArray variant_array_type = 19;
    VariantObject variant_object_type = 20;
    IntervalType interval_type = 21;
  }

  // New Datatype version 24 since 2023-01-03 v0.8.178-nightly
  oneof dt24 {
    Empty    null_t        = 31;
    Empty    empty_array_t = 32;
    Empty    bool_t        = 33;
    Empty    binary_t      = 46;
    Empty    string_t      = 34;
    Number   number_t      = 35;
    Empty    timestamp_t   = 36;
    Empty    date_t        = 37;
    DataType nullable_t    = 38;
    DataType array_t       = 39;
    DataType map_t         = 40;
    Tuple    tuple_t       = 41;
    Empty    variant_t     = 42;
    Decimal  decimal_t     = 43;
    Empty    empty_map_t   = 44;
    Empty    bitmap_t      = 45;
    Empty    geometry_t    = 47;
    Empty    geography_t   = 48;
    Empty    interval_t    = 49;
    Vector   vector_t      = 50;
  }
}

// TODO: remove when MIN_MSG_VER becomes >=24
// A wrapper data type of another type.
// Such a column allows to contain `null` elements
message NullableType {
  uint64 ver = 100;
  uint64 min_reader_ver = 101;

  // The type for the non-null element.
  DataType inner = 1;
}

// TODO: remove when MIN_MSG_VER becomes >=24
// Timestamp data type with customizable precision and timezone: `tz`.
message Timestamp {
  uint64 ver = 100;
  uint64 min_reader_ver = 101;

  /// It's deprecated
  /// uint64 precision = 1;
  reserved 1;
}

// TODO: remove when MIN_MSG_VER becomes >=24
// Struct is similar to a `map` with fixed keys.
message Struct {
  uint64 ver = 100;
  uint64 min_reader_ver = 101;

  // Struct field names.
  repeated string names = 1;

  // The corresponding field types.
  repeated DataType types = 2;
}

// TODO: remove when MIN_MSG_VER becomes >=24
// Array contains multiple elements of the same type.
message Array {
  uint64 ver = 100;
  uint64 min_reader_ver = 101;

  // The type of the elements
  DataType inner = 1;
}

// TODO: remove when MIN_MSG_VER becomes >=24
message VariantArray {
  uint64 ver = 100;
  uint64 min_reader_ver = 101;
}

// TODO: remove when MIN_MSG_VER becomes >=24
message VariantObject {
  uint64 ver = 100;
  uint64 min_reader_ver = 101;
}

// TODO: remove when MIN_MSG_VER becomes >=24
enum IntervalKind {
  Year = 0;
  Month = 1;
  Day = 2;
  Hour = 3;
  Minute = 4;
  Second = 5;
  Doy = 6;
  Dow = 7;
  Quarter = 8;
}

// TODO: remove when MIN_MSG_VER becomes >=24
message IntervalType {
  uint64 ver = 100;
  uint64 min_reader_ver = 101;

  IntervalKind kind = 1;
}

// TODO: remove when MIN_MSG_VER becomes >=24
// Something under developing.:)
message Variant {
  uint64 ver = 100;
  uint64 min_reader_ver = 101;
}

// Tuple is similar to a `map` with fixed keys.
message Tuple {
  uint64 ver = 100;
  uint64 min_reader_ver = 101;

  // field names.
  repeated string field_names = 1;

  // The corresponding field types.
  repeated DataType field_types = 2;
}

// Enum of number types
message Number {
  uint64 ver = 100;
  uint64 min_reader_ver = 101;

  oneof num {
    Empty uint8_type   = 1;
    Empty uint16_type  = 2;
    Empty uint32_type  = 3;
    Empty uint64_type  = 4;
    Empty int8_type    = 5;
    Empty int16_type   = 6;
    Empty int32_type   = 7;
    Empty int64_type   = 8;
    Empty float32_type = 9;
    Empty float64_type = 10;
  }
}


message Decimal {
  uint64 ver = 100;
  uint64 min_reader_ver = 101;
  
  oneof decimal {
      DecimalSize decimal_128 = 1;
      DecimalSize decimal_256 = 2;
  }
}

message DecimalSize {
  uint64 ver = 100;
  uint64 min_reader_ver = 101;
  
  int32 precision = 1;
  int32 scale = 2;
}

message Vector {
  uint64 ver = 100;
  uint64 min_reader_ver = 101;

  Number num       = 1;
  uint64 dimension = 2;
}

// Place holder type for primitive types
message Empty {}
