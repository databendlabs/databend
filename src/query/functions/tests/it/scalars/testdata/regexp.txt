ast            : regexp_instr('dog cat dog', 'dog', 1)
raw expr       : regexp_instr('dog cat dog', 'dog', 1)
checked expr   : regexp_instr<String, String, Int64>("dog cat dog", "dog", to_int64<UInt8>(1_u8))
optimized expr : 1_u64
output type    : UInt64
output domain  : {1..=1}
output         : 1


ast            : regexp_instr('aa aaa aaaa aa aaa aaaa', 'a{2}', 1)
raw expr       : regexp_instr('aa aaa aaaa aa aaa aaaa', 'a{2}', 1)
checked expr   : regexp_instr<String, String, Int64>("aa aaa aaaa aa aaa aaaa", "a{2}", to_int64<UInt8>(1_u8))
optimized expr : 1_u64
output type    : UInt64
output domain  : {1..=1}
output         : 1


ast            : regexp_instr('aa aaa aaaa aa aaa aaaa', NULL, 2)
raw expr       : regexp_instr('aa aaa aaaa aa aaa aaaa', NULL, 2)
checked expr   : regexp_instr<String NULL, String NULL, Int64 NULL>(CAST("aa aaa aaaa aa aaa aaaa" AS String NULL), CAST(NULL AS String NULL), CAST(2_u8 AS Int64 NULL))
optimized expr : NULL
output type    : UInt64 NULL
output domain  : {NULL}
output         : NULL


ast            : regexp_instr('', '', 1)
raw expr       : regexp_instr('', '', 1)
checked expr   : regexp_instr<String, String, Int64>("", "", to_int64<UInt8>(1_u8))
optimized expr : 0_u64
output type    : UInt64
output domain  : {0..=0}
output         : 0


error: 
  --> SQL:1:1
  |
1 | regexp_instr('', '', 0)
  | ^^^^^^^^^^^^^^^^^^^^^^^ Incorrect arguments to regexp_instr: position must be positive, but got 0 while evaluating function `regexp_instr('', '', 0)` in expr `regexp_instr('', '', to_int64(0))`



ast            : regexp_instr(source, pat)
raw expr       : regexp_instr(source::String, pat::String)
checked expr   : regexp_instr<String, String>(source, pat)
evaluation:
+--------+---------------------------+--------------+---------+
|        | source                    | pat          | Output  |
+--------+---------------------------+--------------+---------+
| Type   | String                    | String       | UInt64  |
| Domain | {""..="dog cat dog"}      | {""..="dog"} | Unknown |
| Row 0  | 'dog cat dog'             | 'dog'        | 1       |
| Row 1  | 'aa aaa aaaa aa aaa aaaa' | 'a{2}'       | 1       |
| Row 2  | ''                        | ''           | 0       |
+--------+---------------------------+--------------+---------+
evaluation (internal):
+--------+------------------------------------------------------+
| Column | Data                                                 |
+--------+------------------------------------------------------+
| source | StringColumn[dog cat dog, aa aaa aaaa aa aaa aaaa, ] |
| pat    | StringColumn[dog, a{2}, ]                            |
| Output | UInt64([1, 1, 0])                                    |
+--------+------------------------------------------------------+


ast            : regexp_instr(source, pat, pos)
raw expr       : regexp_instr(source::String, pat::String, pos::Int64)
checked expr   : regexp_instr<String, String, Int64>(source, pat, pos)
evaluation:
+--------+---------------------------+--------------+---------+---------+
|        | source                    | pat          | pos     | Output  |
+--------+---------------------------+--------------+---------+---------+
| Type   | String                    | String       | Int64   | UInt64  |
| Domain | {""..="dog cat dog"}      | {""..="dog"} | {1..=2} | Unknown |
| Row 0  | 'dog cat dog'             | 'dog'        | 1       | 1       |
| Row 1  | 'aa aaa aaaa aa aaa aaaa' | 'a{2}'       | 2       | 4       |
| Row 2  | ''                        | ''           | 1       | 0       |
+--------+---------------------------+--------------+---------+---------+
evaluation (internal):
+--------+------------------------------------------------------+
| Column | Data                                                 |
+--------+------------------------------------------------------+
| source | StringColumn[dog cat dog, aa aaa aaaa aa aaa aaaa, ] |
| pat    | StringColumn[dog, a{2}, ]                            |
| pos    | Int64([1, 2, 1])                                     |
| Output | UInt64([1, 4, 0])                                    |
+--------+------------------------------------------------------+


ast            : regexp_instr(source, pat, pos, occur)
raw expr       : regexp_instr(source::String, pat::String, pos::Int64, occur::Int64)
checked expr   : regexp_instr<String, String, Int64, Int64>(source, pat, pos, occur)
evaluation:
+--------+---------------------------------------------+------------------+---------+---------+---------+
|        | source                                      | pat              | pos     | occur   | Output  |
+--------+---------------------------------------------+------------------+---------+---------+---------+
| Type   | String                                      | String           | Int64   | Int64   | UInt64  |
| Domain | {"aa aa aa aaaa aaaa aaaa"..="dog cat dog"} | {"a{2}"..="dog"} | {1..=9} | {2..=3} | Unknown |
| Row 0  | 'dog cat dog'                               | 'dog'            | 1       | 2       | 9       |
| Row 1  | 'aa aaa aaaa aa aaa aaaa'                   | 'a{2}'           | 1       | 3       | 8       |
| Row 2  | 'aa aa aa aaaa aaaa aaaa'                   | 'a{4}'           | 9       | 2       | 15      |
+--------+---------------------------------------------+------------------+---------+---------+---------+
evaluation (internal):
+--------+-----------------------------------------------------------------------------+
| Column | Data                                                                        |
+--------+-----------------------------------------------------------------------------+
| source | StringColumn[dog cat dog, aa aaa aaaa aa aaa aaaa, aa aa aa aaaa aaaa aaaa] |
| pat    | StringColumn[dog, a{2}, a{4}]                                               |
| pos    | Int64([1, 1, 9])                                                            |
| occur  | Int64([2, 3, 2])                                                            |
| Output | UInt64([9, 8, 15])                                                          |
+--------+-----------------------------------------------------------------------------+


ast            : regexp_instr(source, pat, pos, occur, ro)
raw expr       : regexp_instr(source::String, pat::String, pos::Int64, occur::Int64, ro::Int64)
checked expr   : regexp_instr<String, String, Int64, Int64, Int64>(source, pat, pos, occur, ro)
optimized expr : regexp_instr<String, String, Int64, Int64, Int64>(source, pat, pos, 2_i64, ro)
evaluation:
+--------+---------------------------------------------+------------------+---------+---------+---------+---------+
|        | source                                      | pat              | pos     | occur   | ro      | Output  |
+--------+---------------------------------------------+------------------+---------+---------+---------+---------+
| Type   | String                                      | String           | Int64   | Int64   | Int64   | UInt64  |
| Domain | {"aa aa aa aaaa aaaa aaaa"..="dog cat dog"} | {"a{2}"..="dog"} | {1..=2} | {2..=2} | {0..=1} | Unknown |
| Row 0  | 'dog cat dog'                               | 'dog'            | 1       | 2       | 0       | 9       |
| Row 1  | 'aa aaa aaaa aa aaa aaaa'                   | 'a{2}'           | 2       | 2       | 1       | 10      |
| Row 2  | 'aa aa aa aaaa aaaa aaaa'                   | 'a{4}'           | 1       | 2       | 1       | 19      |
+--------+---------------------------------------------+------------------+---------+---------+---------+---------+
evaluation (internal):
+--------+-----------------------------------------------------------------------------+
| Column | Data                                                                        |
+--------+-----------------------------------------------------------------------------+
| source | StringColumn[dog cat dog, aa aaa aaaa aa aaa aaaa, aa aa aa aaaa aaaa aaaa] |
| pat    | StringColumn[dog, a{2}, a{4}]                                               |
| pos    | Int64([1, 2, 1])                                                            |
| occur  | Int64([2, 2, 2])                                                            |
| ro     | Int64([0, 1, 1])                                                            |
| Output | UInt64([9, 10, 19])                                                         |
+--------+-----------------------------------------------------------------------------+


ast            : regexp_instr(source, pat, pos, occur, ro, mt)
raw expr       : regexp_instr(source::String, pat::String, pos::Int64, occur::Int64, ro::Int64, mt::String)
checked expr   : regexp_instr<String, String, Int64, Int64, Int64, String>(source, pat, pos, occur, ro, mt)
optimized expr : regexp_instr<String, String, Int64, Int64, Int64, String>(source, pat, pos, 2_i64, ro, mt)
evaluation:
+--------+---------------------------------------------+------------------+---------+---------+---------+-------------+---------+
|        | source                                      | pat              | pos     | occur   | ro      | mt          | Output  |
+--------+---------------------------------------------+------------------+---------+---------+---------+-------------+---------+
| Type   | String                                      | String           | Int64   | Int64   | Int64   | String      | UInt64  |
| Domain | {"aa aa aa aaaa aaaa aaaa"..="dog cat dog"} | {"A{2}"..="dog"} | {1..=2} | {2..=2} | {0..=1} | {"c"..="i"} | Unknown |
| Row 0  | 'dog cat dog'                               | 'dog'            | 1       | 2       | 0       | 'i'         | 9       |
| Row 1  | 'aa aaa aaaa aa aaa aaaa'                   | 'A{2}'           | 2       | 2       | 1       | 'c'         | 0       |
| Row 2  | 'aa aa aa aaaa aaaa aaaa'                   | 'A{4}'           | 1       | 2       | 1       | 'i'         | 19      |
+--------+---------------------------------------------+------------------+---------+---------+---------+-------------+---------+
evaluation (internal):
+--------+-----------------------------------------------------------------------------+
| Column | Data                                                                        |
+--------+-----------------------------------------------------------------------------+
| source | StringColumn[dog cat dog, aa aaa aaaa aa aaa aaaa, aa aa aa aaaa aaaa aaaa] |
| pat    | StringColumn[dog, A{2}, A{4}]                                               |
| pos    | Int64([1, 2, 1])                                                            |
| occur  | Int64([2, 2, 2])                                                            |
| ro     | Int64([0, 1, 1])                                                            |
| mt     | StringColumn[i, c, i]                                                       |
| Output | UInt64([9, 0, 19])                                                          |
+--------+-----------------------------------------------------------------------------+


ast            : regexp_instr(source, pat, pos, occur, ro)
raw expr       : regexp_instr(source::String NULL, pat::String NULL, pos::Int64, occur::Int64, ro::Int64)
checked expr   : regexp_instr<String NULL, String NULL, Int64 NULL, Int64 NULL, Int64 NULL>(source, pat, CAST(pos AS Int64 NULL), CAST(occur AS Int64 NULL), CAST(ro AS Int64 NULL))
evaluation:
+--------+------------------------------------------------------+---------------------------+---------+---------+---------+-------------+
|        | source                                               | pat                       | pos     | occur   | ro      | Output      |
+--------+------------------------------------------------------+---------------------------+---------+---------+---------+-------------+
| Type   | String NULL                                          | String NULL               | Int64   | Int64   | Int64   | UInt64 NULL |
| Domain | {"aa aa aa aaaa aaaa aaaa"..="dog cat dog"} ∪ {NULL} | {"A{4}"..="dog"} ∪ {NULL} | {1..=2} | {1..=2} | {0..=1} | Unknown     |
| Row 0  | 'dog cat dog'                                        | 'dog'                     | 1       | 2       | 0       | 9           |
| Row 1  | 'aa aaa aaaa aa aaa aaaa'                            | NULL                      | 2       | 2       | 1       | NULL        |
| Row 2  | NULL                                                 | NULL                      | 1       | 2       | 1       | NULL        |
| Row 3  | 'aa aa aa aaaa aaaa aaaa'                            | 'A{4}'                    | 1       | 1       | 1       | 14          |
+--------+------------------------------------------------------+---------------------------+---------+---------+---------+-------------+
evaluation (internal):
+--------+----------------------------------------------------------------------------------------------------------------------------------+
| Column | Data                                                                                                                             |
+--------+----------------------------------------------------------------------------------------------------------------------------------+
| source | NullableColumn { column: StringColumn[dog cat dog, aa aaa aaaa aa aaa aaaa, , aa aa aa aaaa aaaa aaaa], validity: [0b____1011] } |
| pat    | NullableColumn { column: StringColumn[dog, , , A{4}], validity: [0b____1001] }                                                   |
| pos    | Int64([1, 2, 1, 1])                                                                                                              |
| occur  | Int64([2, 2, 2, 1])                                                                                                              |
| ro     | Int64([0, 1, 1, 1])                                                                                                              |
| Output | NullableColumn { column: UInt64([9, 0, 0, 14]), validity: [0b____1001] }                                                         |
+--------+----------------------------------------------------------------------------------------------------------------------------------+


ast            : regexp_instr(source, pat, pos, occur, ro, mt)
raw expr       : regexp_instr(source::String NULL, pat::String NULL, pos::Int64, occur::Int64, ro::Int64, mt::String)
checked expr   : regexp_instr<String NULL, String NULL, Int64 NULL, Int64 NULL, Int64 NULL, String NULL>(source, pat, CAST(pos AS Int64 NULL), CAST(occur AS Int64 NULL), CAST(ro AS Int64 NULL), CAST(mt AS String NULL))
evaluation:
+--------+------------------------------------------------------+---------------------------+---------+---------+---------+-------------+-------------+
|        | source                                               | pat                       | pos     | occur   | ro      | mt          | Output      |
+--------+------------------------------------------------------+---------------------------+---------+---------+---------+-------------+-------------+
| Type   | String NULL                                          | String NULL               | Int64   | Int64   | Int64   | String      | UInt64 NULL |
| Domain | {"aa aa aa aaaa aaaa aaaa"..="dog cat dog"} ∪ {NULL} | {"A{4}"..="dog"} ∪ {NULL} | {1..=2} | {1..=2} | {0..=1} | {"c"..="i"} | Unknown     |
| Row 0  | 'dog cat dog'                                        | 'dog'                     | 1       | 2       | 0       | 'i'         | 9           |
| Row 1  | 'aa aaa aaaa aa aaa aaaa'                            | NULL                      | 2       | 2       | 1       | 'c'         | NULL        |
| Row 2  | NULL                                                 | NULL                      | 1       | 2       | 1       | 'i'         | NULL        |
| Row 3  | 'aa aa aa aaaa aaaa aaaa'                            | 'A{4}'                    | 1       | 1       | 1       | 'i'         | 14          |
+--------+------------------------------------------------------+---------------------------+---------+---------+---------+-------------+-------------+
evaluation (internal):
+--------+----------------------------------------------------------------------------------------------------------------------------------+
| Column | Data                                                                                                                             |
+--------+----------------------------------------------------------------------------------------------------------------------------------+
| source | NullableColumn { column: StringColumn[dog cat dog, aa aaa aaaa aa aaa aaaa, , aa aa aa aaaa aaaa aaaa], validity: [0b____1011] } |
| pat    | NullableColumn { column: StringColumn[dog, , , A{4}], validity: [0b____1001] }                                                   |
| pos    | Int64([1, 2, 1, 1])                                                                                                              |
| occur  | Int64([2, 2, 2, 1])                                                                                                              |
| ro     | Int64([0, 1, 1, 1])                                                                                                              |
| mt     | StringColumn[i, c, i, i]                                                                                                         |
| Output | NullableColumn { column: UInt64([9, 0, 0, 14]), validity: [0b____1001] }                                                         |
+--------+----------------------------------------------------------------------------------------------------------------------------------+


ast            : regexp_instr(source, pat, pos, occur, ro)
raw expr       : regexp_instr(source::String, pat::String, pos::Int64, occur::Int64, ro::Int64)
checked expr   : regexp_instr<String, String, Int64, Int64, Int64>(source, pat, pos, occur, ro)
optimized expr : regexp_instr<String, String, Int64, Int64, Int64>("周 周周 周周周 周周周周", "周+", pos, occur, ro)
evaluation:
+--------+---------------------------------------------------------+-----------------+---------+---------+---------+---------+
|        | source                                                  | pat             | pos     | occur   | ro      | Output  |
+--------+---------------------------------------------------------+-----------------+---------+---------+---------+---------+
| Type   | String                                                  | String          | Int64   | Int64   | Int64   | UInt64  |
| Domain | {"周 周周 周周周 周周周周"..="周 周周 周周周 周周周周"} | {"周+"..="周+"} | {1..=5} | {1..=3} | {0..=1} | Unknown |
| Row 0  | '周 周周 周周周 周周周周'                               | '周+'           | 1       | 2       | 0       | 3       |
| Row 1  | '周 周周 周周周 周周周周'                               | '周+'           | 2       | 2       | 1       | 9       |
| Row 2  | '周 周周 周周周 周周周周'                               | '周+'           | 3       | 3       | 1       | 14      |
| Row 3  | '周 周周 周周周 周周周周'                               | '周+'           | 5       | 1       | 1       | 9       |
+--------+---------------------------------------------------------+-----------------+---------+---------+---------+---------+
evaluation (internal):
+--------+------------------------------------------------------------------------------------------------------------------+
| Column | Data                                                                                                             |
+--------+------------------------------------------------------------------------------------------------------------------+
| source | StringColumn[周 周周 周周周 周周周周, 周 周周 周周周 周周周周, 周 周周 周周周 周周周周, 周 周周 周周周 周周周周] |
| pat    | StringColumn[周+, 周+, 周+, 周+]                                                                                 |
| pos    | Int64([1, 2, 3, 5])                                                                                              |
| occur  | Int64([2, 2, 3, 1])                                                                                              |
| ro     | Int64([0, 1, 1, 1])                                                                                              |
| Output | UInt64([3, 9, 14, 9])                                                                                            |
+--------+------------------------------------------------------------------------------------------------------------------+


error: 
  --> SQL:1:1
  |
1 | regexp_instr(source, pat, pos, occur, ro)
  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Incorrect arguments to regexp_instr: position must be positive, but got 0 while evaluating function `regexp_instr('dog cat dog', 'dog', 0, 1, 0)` in expr `regexp_instr(source, pat, pos, occur, ro)`



error: 
  --> SQL:1:1
  |
1 | regexp_instr(source, pat, pos, occur, ro)
  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Incorrect arguments to regexp_instr: return_option must be 1 or 0, but got 2 while evaluating function `regexp_instr('aa aaa aaaa aa aaa aaaa', 'A{2}', 2, 2, 2)` in expr `regexp_instr(source, pat, pos, occur, ro)`



error: 
  --> SQL:1:1
  |
1 | regexp_instr(source, pat, pos, occur, ro, mt)
  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Incorrect arguments to regexp_instr match type: - while evaluating function `regexp_instr('aa aaa aaaa aa aaa aaaa', 'A{4}', 1, 1, 1, '-i')` in expr `regexp_instr(source, pat, pos, occur, ro, mt)`



ast            : regexp_like('Michael!', '.*')
raw expr       : regexp_like('Michael!', '.*')
checked expr   : regexp_like<String, String>("Michael!", ".*")
optimized expr : true
output type    : Boolean
output domain  : {TRUE}
output         : true


ast            : regexp_like('a', '^[a-d]')
raw expr       : regexp_like('a', '^[a-d]')
checked expr   : regexp_like<String, String>("a", "^[a-d]")
optimized expr : true
output type    : Boolean
output domain  : {TRUE}
output         : true


ast            : regexp_like('abc', 'ABC')
raw expr       : regexp_like('abc', 'ABC')
checked expr   : regexp_like<String, String>("abc", "ABC")
optimized expr : true
output type    : Boolean
output domain  : {TRUE}
output         : true


ast            : regexp_like('abc', 'ABC', 'c')
raw expr       : regexp_like('abc', 'ABC', 'c')
checked expr   : regexp_like<String, String, String>("abc", "ABC", "c")
optimized expr : false
output type    : Boolean
output domain  : {FALSE}
output         : false


ast            : regexp_like('abc', 'ABC', NULL)
raw expr       : regexp_like('abc', 'ABC', NULL)
checked expr   : regexp_like<String NULL, String NULL, String NULL>(CAST("abc" AS String NULL), CAST("ABC" AS String NULL), CAST(NULL AS String NULL))
optimized expr : NULL
output type    : Boolean NULL
output domain  : {NULL}
output         : NULL


ast            : regexp_like('', '', 'c')
raw expr       : regexp_like('', '', 'c')
checked expr   : regexp_like<String, String, String>("", "", "c")
optimized expr : true
output type    : Boolean
output domain  : {TRUE}
output         : true


ast            : regexp_like(source, pat)
raw expr       : regexp_like(source::String, pat::String)
checked expr   : regexp_like<String, String>(source, pat)
evaluation:
+--------+----------------------+-------------------------+---------+
|        | source               | pat                     | Output  |
+--------+----------------------+-------------------------+---------+
| Type   | String               | String                  | Boolean |
| Domain | {""..="new*\n*line"} | {""..="new\\*.\\*line"} | Unknown |
| Row 0  | 'abc'                | '^a'                    | true    |
| Row 1  | 'abd'                | 'Ab'                    | true    |
| Row 2  | 'Abe'                | 'abe'                   | true    |
| Row 3  | 'new*                | 'new\*.\*line'          | false   |
|        | *line'               |                         |         |
| Row 4  | 'fo                  | '^fo$'                  | false   |
|        | fo'                  |                         |         |
| Row 5  | ''                   | ''                      | true    |
+--------+----------------------+-------------------------+---------+
evaluation (internal):
+--------+-------------------------------------------------+
| Column | Data                                            |
+--------+-------------------------------------------------+
| source | StringColumn[abc, abd, Abe, new*                |
|        | *line, fo                                       |
|        | fo, ]                                           |
| pat    | StringColumn[^a, Ab, abe, new\*.\*line, ^fo$, ] |
| Output | Boolean([0b__100111])                           |
+--------+-------------------------------------------------+


ast            : regexp_like(source, pat, mt)
raw expr       : regexp_like(source::String, pat::String, mt::String)
checked expr   : regexp_like<String, String, String>(source, pat, mt)
evaluation:
+--------+----------------------+-------------------------+------------+---------+
|        | source               | pat                     | mt         | Output  |
+--------+----------------------+-------------------------+------------+---------+
| Type   | String               | String                  | String     | Boolean |
| Domain | {""..="new*\n*line"} | {""..="new\\*.\\*line"} | {""..="n"} | Unknown |
| Row 0  | 'abc'                | '^a'                    | ''         | true    |
| Row 1  | 'abd'                | 'Ab'                    | 'c'        | false   |
| Row 2  | 'Abe'                | 'abe'                   | 'i'        | true    |
| Row 3  | 'new*                | 'new\*.\*line'          | 'n'        | true    |
|        | *line'               |                         |            |         |
| Row 4  | 'fo                  | '^fo$'                  | 'm'        | true    |
|        | fo'                  |                         |            |         |
| Row 5  | ''                   | ''                      | 'c'        | true    |
+--------+----------------------+-------------------------+------------+---------+
evaluation (internal):
+--------+-------------------------------------------------+
| Column | Data                                            |
+--------+-------------------------------------------------+
| source | StringColumn[abc, abd, Abe, new*                |
|        | *line, fo                                       |
|        | fo, ]                                           |
| pat    | StringColumn[^a, Ab, abe, new\*.\*line, ^fo$, ] |
| mt     | StringColumn[, c, i, n, m, c]                   |
| Output | Boolean([0b__111101])                           |
+--------+-------------------------------------------------+


ast            : regexp_like(source, pat, mt)
raw expr       : regexp_like(source::String NULL, pat::String NULL, mt::String NULL)
checked expr   : regexp_like<String NULL, String NULL, String NULL>(source, pat, mt)
evaluation:
+--------+--------------------------+--------------------------+---------------------+--------------+
|        | source                   | pat                      | mt                  | Output       |
+--------+--------------------------+--------------------------+---------------------+--------------+
| Type   | String NULL              | String NULL              | String NULL         | Boolean NULL |
| Domain | {"abc"..="abc"} ∪ {NULL} | {"abc"..="abc"} ∪ {NULL} | {""..="i"} ∪ {NULL} | Unknown      |
| Row 0  | 'abc'                    | 'abc'                    | ''                  | true         |
| Row 1  | 'abc'                    | NULL                     | 'i'                 | NULL         |
| Row 2  | NULL                     | NULL                     | 'i'                 | NULL         |
| Row 3  | 'abc'                    | 'abc'                    | NULL                | NULL         |
+--------+--------------------------+--------------------------+---------------------+--------------+
evaluation (internal):
+--------+----------------------------------------------------------------------------------+
| Column | Data                                                                             |
+--------+----------------------------------------------------------------------------------+
| source | NullableColumn { column: StringColumn[abc, abc, , abc], validity: [0b____1011] } |
| pat    | NullableColumn { column: StringColumn[abc, , , abc], validity: [0b____1001] }    |
| mt     | NullableColumn { column: StringColumn[, i, i, ], validity: [0b____0111] }        |
| Output | NullableColumn { column: Boolean([0b____1101]), validity: [0b____0001] }         |
+--------+----------------------------------------------------------------------------------+


error: 
  --> SQL:1:1
  |
1 | regexp_like(source, pat)
  | ^^^^^^^^^^^^^^^^^^^^^^^^ no function matches signature `regexp_like(String, Int64)`, you might need to add explicit type casts.

candidate functions:
  regexp_like(String, String) :: Boolean  : unable to unify `Int64` with `String`



error: 
  --> SQL:1:1
  |
1 | regexp_like(source, pat, mt)
  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Incorrect arguments to regexp_like match type: x while evaluating function `regexp_like('abc', 'abc', 'x')` in expr `regexp_like(source, pat, mt)`



error: 
  --> SQL:1:1
  |
1 | regexp_like(source, pat, mt)
  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Unsupported arguments to regexp_like match type: u while evaluating function `regexp_like('abc', 'abc', 'u')` in expr `regexp_like(source, pat, mt)`



error: 
  --> SQL:1:1
  |
1 | regexp_like(source, pat, mt)
  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Incorrect arguments to regexp_like match type: - while evaluating function `regexp_like('Abc-', 'abc', '-i')` in expr `regexp_like(source, pat, mt)`



error: 
  --> SQL:1:1
  |
1 | regexp_like(source, pat, mt)
  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Incorrect arguments to regexp_like match type: - while evaluating function `regexp_like('Abc--', 'abc-', '-')` in expr `regexp_like(source, pat, mt)`



ast            : regexp_replace('a b c', 'b', 'X')
raw expr       : regexp_replace('a b c', 'b', 'X')
checked expr   : regexp_replace<String, String, String>("a b c", "b", "X")
optimized expr : "a X c"
output type    : String
output domain  : {"a X c"..="a X c"}
output         : 'a X c'


ast            : regexp_replace('a b c', '', 'X')
raw expr       : regexp_replace('a b c', '', 'X')
checked expr   : regexp_replace<String, String, String>("a b c", "", "X")
optimized expr : "a b c"
output type    : String
output domain  : {"a b c"..="a b c"}
output         : 'a b c'


ast            : regexp_replace('', 'b', 'X')
raw expr       : regexp_replace('', 'b', 'X')
checked expr   : regexp_replace<String, String, String>("", "b", "X")
optimized expr : ""
output type    : String
output domain  : {""..=""}
output         : ''


ast            : regexp_replace('a b c', 'b', NULL)
raw expr       : regexp_replace('a b c', 'b', NULL)
checked expr   : regexp_replace<String NULL, String NULL, String NULL>(CAST("a b c" AS String NULL), CAST("b" AS String NULL), CAST(NULL AS String NULL))
optimized expr : NULL
output type    : String NULL
output domain  : {NULL}
output         : NULL


ast            : regexp_replace('abc def ghi', '[a-z]+', 'X', 1, 3)
raw expr       : regexp_replace('abc def ghi', '[a-z]+', 'X', 1, 3)
checked expr   : regexp_replace<String, String, String, Int64, Int64>("abc def ghi", "[a-z]+", "X", to_int64<UInt8>(1_u8), to_int64<UInt8>(3_u8))
optimized expr : "abc def X"
output type    : String
output domain  : {"abc def X"..="abc def X"}
output         : 'abc def X'


ast            : regexp_replace(source, pat, repl)
raw expr       : regexp_replace(source::String, pat::String, repl::String)
checked expr   : regexp_replace<String, String, String>(source, pat, repl)
optimized expr : regexp_replace<String, String, String>(source, pat, "X")
evaluation:
+--------+----------------+------------+-------------+---------+
|        | source         | pat        | repl        | Output  |
+--------+----------------+------------+-------------+---------+
| Type   | String         | String     | String      | String  |
| Domain | {""..="a b c"} | {""..="x"} | {"X"..="X"} | Unknown |
| Row 0  | 'a b c'        | 'b'        | 'X'         | 'a X c' |
| Row 1  | 'a b c'        | 'x'        | 'X'         | 'a b c' |
| Row 2  | 'a b c'        | ''         | 'X'         | 'a b c' |
| Row 3  | ''             | 'b'        | 'X'         | ''      |
+--------+----------------+------------+-------------+---------+
evaluation (internal):
+--------+-------------------------------------+
| Column | Data                                |
+--------+-------------------------------------+
| source | StringColumn[a b c, a b c, a b c, ] |
| pat    | StringColumn[b, x, , b]             |
| repl   | StringColumn[X, X, X, X]            |
| Output | StringColumn[a X c, a b c, a b c, ] |
+--------+-------------------------------------+


ast            : regexp_replace(source, pat, repl, pos)
raw expr       : regexp_replace(source::String, pat::String, repl::String, pos::Int64)
checked expr   : regexp_replace<String, String, String, Int64>(source, pat, repl, pos)
optimized expr : regexp_replace<String, String, String, Int64>("abc def ghi", "[a-z]+", "X", pos)
evaluation:
+--------+---------------------------------+-----------------------+-------------+----------+---------------+
|        | source                          | pat                   | repl        | pos      | Output        |
+--------+---------------------------------+-----------------------+-------------+----------+---------------+
| Type   | String                          | String                | String      | Int64    | String        |
| Domain | {"abc def ghi"..="abc def ghi"} | {"[a-z]+"..="[a-z]+"} | {"X"..="X"} | {1..=12} | Unknown       |
| Row 0  | 'abc def ghi'                   | '[a-z]+'              | 'X'         | 1        | 'X X X'       |
| Row 1  | 'abc def ghi'                   | '[a-z]+'              | 'X'         | 4        | 'abc X X'     |
| Row 2  | 'abc def ghi'                   | '[a-z]+'              | 'X'         | 8        | 'abc def X'   |
| Row 3  | 'abc def ghi'                   | '[a-z]+'              | 'X'         | 12       | 'abc def ghi' |
+--------+---------------------------------+-----------------------+-------------+----------+---------------+
evaluation (internal):
+--------+------------------------------------------------------------------+
| Column | Data                                                             |
+--------+------------------------------------------------------------------+
| source | StringColumn[abc def ghi, abc def ghi, abc def ghi, abc def ghi] |
| pat    | StringColumn[[a-z]+, [a-z]+, [a-z]+, [a-z]+]                     |
| repl   | StringColumn[X, X, X, X]                                         |
| pos    | Int64([1, 4, 8, 12])                                             |
| Output | StringColumn[X X X, abc X X, abc def X, abc def ghi]             |
+--------+------------------------------------------------------------------+


ast            : regexp_replace(source, pat, repl, pos, occur)
raw expr       : regexp_replace(source::String, pat::String, repl::String, pos::Int64, occur::Int64)
checked expr   : regexp_replace<String, String, String, Int64, Int64>(source, pat, repl, pos, occur)
optimized expr : regexp_replace<String, String, String, Int64, Int64>("abc def ghi", "[a-z]+", "X", pos, occur)
evaluation:
+--------+---------------------------------+-----------------------+-------------+---------+---------+---------------+
|        | source                          | pat                   | repl        | pos     | occur   | Output        |
+--------+---------------------------------+-----------------------+-------------+---------+---------+---------------+
| Type   | String                          | String                | String      | Int64   | Int64   | String        |
| Domain | {"abc def ghi"..="abc def ghi"} | {"[a-z]+"..="[a-z]+"} | {"X"..="X"} | {1..=4} | {0..=3} | Unknown       |
| Row 0  | 'abc def ghi'                   | '[a-z]+'              | 'X'         | 1       | 0       | 'X X X'       |
| Row 1  | 'abc def ghi'                   | '[a-z]+'              | 'X'         | 1       | 1       | 'X def ghi'   |
| Row 2  | 'abc def ghi'                   | '[a-z]+'              | 'X'         | 4       | 2       | 'abc def X'   |
| Row 3  | 'abc def ghi'                   | '[a-z]+'              | 'X'         | 4       | 3       | 'abc def ghi' |
+--------+---------------------------------+-----------------------+-------------+---------+---------+---------------+
evaluation (internal):
+--------+------------------------------------------------------------------+
| Column | Data                                                             |
+--------+------------------------------------------------------------------+
| source | StringColumn[abc def ghi, abc def ghi, abc def ghi, abc def ghi] |
| pat    | StringColumn[[a-z]+, [a-z]+, [a-z]+, [a-z]+]                     |
| repl   | StringColumn[X, X, X, X]                                         |
| pos    | Int64([1, 1, 4, 4])                                              |
| occur  | Int64([0, 1, 2, 3])                                              |
| Output | StringColumn[X X X, X def ghi, abc def X, abc def ghi]           |
+--------+------------------------------------------------------------------+


ast            : regexp_replace(source, pat, repl, pos, occur, mt)
raw expr       : regexp_replace(source::String, pat::String, repl::String, pos::Int64, occur::Int64, mt::String)
checked expr   : regexp_replace<String, String, String, Int64, Int64, String>(source, pat, repl, pos, occur, mt)
optimized expr : regexp_replace<String, String, String, Int64, Int64, String>(source, "[a-z]+", "X", pos, occur, mt)
evaluation:
+--------+---------------------------------+-----------------------+-------------+---------+---------+------------+-------------+
|        | source                          | pat                   | repl        | pos     | occur   | mt         | Output      |
+--------+---------------------------------+-----------------------+-------------+---------+---------+------------+-------------+
| Type   | String                          | String                | String      | Int64   | Int64   | String     | String      |
| Domain | {"abc DEF ghi"..="abc def ghi"} | {"[a-z]+"..="[a-z]+"} | {"X"..="X"} | {1..=4} | {0..=2} | {""..="i"} | Unknown     |
| Row 0  | 'abc def ghi'                   | '[a-z]+'              | 'X'         | 1       | 0       | ''         | 'X X X'     |
| Row 1  | 'abc DEF ghi'                   | '[a-z]+'              | 'X'         | 1       | 2       | 'c'        | 'abc DEF X' |
| Row 2  | 'abc DEF ghi'                   | '[a-z]+'              | 'X'         | 4       | 1       | 'i'        | 'abc X ghi' |
+--------+---------------------------------+-----------------------+-------------+---------+---------+------------+-------------+
evaluation (internal):
+--------+-----------------------------------------------------+
| Column | Data                                                |
+--------+-----------------------------------------------------+
| source | StringColumn[abc def ghi, abc DEF ghi, abc DEF ghi] |
| pat    | StringColumn[[a-z]+, [a-z]+, [a-z]+]                |
| repl   | StringColumn[X, X, X]                               |
| pos    | Int64([1, 1, 4])                                    |
| occur  | Int64([0, 2, 1])                                    |
| mt     | StringColumn[, c, i]                                |
| Output | StringColumn[X X X, abc DEF X, abc X ghi]           |
+--------+-----------------------------------------------------+


ast            : regexp_replace(source, pat, repl, pos, occur)
raw expr       : regexp_replace(source::String NULL, pat::String NULL, repl::String, pos::Int64, occur::Int64)
checked expr   : regexp_replace<String NULL, String NULL, String NULL, Int64 NULL, Int64 NULL>(source, pat, CAST(repl AS String NULL), CAST(pos AS Int64 NULL), CAST(occur AS Int64 NULL))
optimized expr : regexp_replace<String NULL, String NULL, String NULL, Int64 NULL, Int64 NULL>(source, pat, "X", CAST(pos AS Int64 NULL), CAST(occur AS Int64 NULL))
evaluation:
+--------+------------------------------------------+--------------------------------+-------------+---------+---------+-------------+
|        | source                                   | pat                            | repl        | pos     | occur   | Output      |
+--------+------------------------------------------+--------------------------------+-------------+---------+---------+-------------+
| Type   | String NULL                              | String NULL                    | String      | Int64   | Int64   | String NULL |
| Domain | {"abc DEF ghi"..="abc def ghi"} ∪ {NULL} | {"[a-z]+"..="[a-z]+"} ∪ {NULL} | {"X"..="X"} | {1..=4} | {0..=2} | Unknown     |
| Row 0  | 'abc def ghi'                            | '[a-z]+'                       | 'X'         | 1       | 0       | 'X X X'     |
| Row 1  | 'abc DEF ghi'                            | NULL                           | 'X'         | 1       | 2       | NULL        |
| Row 2  | NULL                                     | NULL                           | 'X'         | 4       | 1       | NULL        |
| Row 3  | 'abc DEF ghi'                            | '[a-z]+'                       | 'X'         | 4       | 1       | 'abc X ghi' |
+--------+------------------------------------------+--------------------------------+-------------+---------+---------+-------------+
evaluation (internal):
+--------+----------------------------------------------------------------------------------------------------------+
| Column | Data                                                                                                     |
+--------+----------------------------------------------------------------------------------------------------------+
| source | NullableColumn { column: StringColumn[abc def ghi, abc DEF ghi, , abc DEF ghi], validity: [0b____1011] } |
| pat    | NullableColumn { column: StringColumn[[a-z]+, , , [a-z]+], validity: [0b____1001] }                      |
| repl   | StringColumn[X, X, X, X]                                                                                 |
| pos    | Int64([1, 1, 4, 4])                                                                                      |
| occur  | Int64([0, 2, 1, 1])                                                                                      |
| Output | NullableColumn { column: StringColumn[X X X, abc DEF ghi, , abc X ghi], validity: [0b____1001] }         |
+--------+----------------------------------------------------------------------------------------------------------+


ast            : regexp_replace(source, pat, repl, pos, occur, mt)
raw expr       : regexp_replace(source::String NULL, pat::String NULL, repl::String, pos::Int64, occur::Int64, mt::String)
checked expr   : regexp_replace<String NULL, String NULL, String NULL, Int64 NULL, Int64 NULL, String NULL>(source, pat, CAST(repl AS String NULL), CAST(pos AS Int64 NULL), CAST(occur AS Int64 NULL), CAST(mt AS String NULL))
optimized expr : regexp_replace<String NULL, String NULL, String NULL, Int64 NULL, Int64 NULL, String NULL>(source, pat, "X", CAST(pos AS Int64 NULL), CAST(occur AS Int64 NULL), CAST(mt AS String NULL))
evaluation:
+--------+------------------------------------------+--------------------------------+-------------+---------+---------+------------+-------------+
|        | source                                   | pat                            | repl        | pos     | occur   | mt         | Output      |
+--------+------------------------------------------+--------------------------------+-------------+---------+---------+------------+-------------+
| Type   | String NULL                              | String NULL                    | String      | Int64   | Int64   | String     | String NULL |
| Domain | {"abc DEF ghi"..="abc def ghi"} ∪ {NULL} | {"[a-z]+"..="[a-z]+"} ∪ {NULL} | {"X"..="X"} | {1..=4} | {0..=2} | {""..="i"} | Unknown     |
| Row 0  | 'abc def ghi'                            | '[a-z]+'                       | 'X'         | 1       | 0       | ''         | 'X X X'     |
| Row 1  | 'abc DEF ghi'                            | NULL                           | 'X'         | 1       | 2       | 'c'        | NULL        |
| Row 2  | NULL                                     | NULL                           | 'X'         | 4       | 1       | 'i'        | NULL        |
| Row 3  | 'abc DEF ghi'                            | '[a-z]+'                       | 'X'         | 4       | 1       | 'i'        | 'abc X ghi' |
+--------+------------------------------------------+--------------------------------+-------------+---------+---------+------------+-------------+
evaluation (internal):
+--------+----------------------------------------------------------------------------------------------------------+
| Column | Data                                                                                                     |
+--------+----------------------------------------------------------------------------------------------------------+
| source | NullableColumn { column: StringColumn[abc def ghi, abc DEF ghi, , abc DEF ghi], validity: [0b____1011] } |
| pat    | NullableColumn { column: StringColumn[[a-z]+, , , [a-z]+], validity: [0b____1001] }                      |
| repl   | StringColumn[X, X, X, X]                                                                                 |
| pos    | Int64([1, 1, 4, 4])                                                                                      |
| occur  | Int64([0, 2, 1, 1])                                                                                      |
| mt     | StringColumn[, c, i, i]                                                                                  |
| Output | NullableColumn { column: StringColumn[X X X, abc DEF ghi, , abc X ghi], validity: [0b____1001] }         |
+--------+----------------------------------------------------------------------------------------------------------+


ast            : regexp_replace(source, pat, repl, pos, occur)
raw expr       : regexp_replace(source::String, pat::String, repl::String, pos::Int64, occur::Int64)
checked expr   : regexp_replace<String, String, String, Int64, Int64>(source, pat, repl, pos, occur)
optimized expr : regexp_replace<String, String, String, Int64, Int64>("周 周周 周周周 周周周周", "周+", "唐", pos, occur)
evaluation:
+--------+---------------------------------------------------------+-----------------+---------------+---------+---------+-------------------------+
|        | source                                                  | pat             | repl          | pos     | occur   | Output                  |
+--------+---------------------------------------------------------+-----------------+---------------+---------+---------+-------------------------+
| Type   | String                                                  | String          | String        | Int64   | Int64   | String                  |
| Domain | {"周 周周 周周周 周周周周"..="周 周周 周周周 周周周周"} | {"周+"..="周+"} | {"唐"..="唐"} | {1..=5} | {0..=3} | Unknown                 |
| Row 0  | '周 周周 周周周 周周周周'                               | '周+'           | '唐'          | 1       | 0       | '唐 唐 唐 唐'           |
| Row 1  | '周 周周 周周周 周周周周'                               | '周+'           | '唐'          | 2       | 1       | '周 唐 周周周 周周周周' |
| Row 2  | '周 周周 周周周 周周周周'                               | '周+'           | '唐'          | 3       | 3       | '周 周周 周周周 唐'     |
| Row 3  | '周 周周 周周周 周周周周'                               | '周+'           | '唐'          | 5       | 1       | '周 周周 唐 周周周周'   |
+--------+---------------------------------------------------------+-----------------+---------------+---------+---------+-------------------------+
evaluation (internal):
+--------+------------------------------------------------------------------------------------------------------------------+
| Column | Data                                                                                                             |
+--------+------------------------------------------------------------------------------------------------------------------+
| source | StringColumn[周 周周 周周周 周周周周, 周 周周 周周周 周周周周, 周 周周 周周周 周周周周, 周 周周 周周周 周周周周] |
| pat    | StringColumn[周+, 周+, 周+, 周+]                                                                                 |
| repl   | StringColumn[唐, 唐, 唐, 唐]                                                                                     |
| pos    | Int64([1, 2, 3, 5])                                                                                              |
| occur  | Int64([0, 1, 3, 1])                                                                                              |
| Output | StringColumn[唐 唐 唐 唐, 周 唐 周周周 周周周周, 周 周周 周周周 唐, 周 周周 唐 周周周周]                         |
+--------+------------------------------------------------------------------------------------------------------------------+


error: 
  --> SQL:1:1
  |
1 | regexp_replace(source, pat, repl, pos)
  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Incorrect arguments to regexp_replace: position must be positive, but got 0 while evaluating function `regexp_replace('abc', 'b', 'X', 0)` in expr `regexp_replace(source, pat, repl, pos)`



error: 
  --> SQL:1:1
  |
1 | regexp_replace(source, pat, repl, pos, occur)
  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Incorrect arguments to regexp_replace: occurrence must not be negative, but got -1 while evaluating function `regexp_replace('a b c', 'b', 'X', 1, -1)` in expr `regexp_replace(source, pat, repl, pos, occur)`



error: 
  --> SQL:1:1
  |
1 | regexp_replace(source, pat, repl, pos, occur, mt)
  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Incorrect arguments to regexp_replace match type: - while evaluating function `regexp_replace('a b c', 'b', 'X', 1, 0, '-c')` in expr `regexp_replace(source, pat, repl, pos, occur, mt)`



ast            : regexp_substr('abc def ghi', '[a-z]+')
raw expr       : regexp_substr('abc def ghi', '[a-z]+')
checked expr   : regexp_substr<String, String>("abc def ghi", "[a-z]+")
optimized expr : "abc"
output type    : String NULL
output domain  : {"abc"..="abc"}
output         : 'abc'


ast            : regexp_substr('abc def ghi', '[a-z]+', 1, 3)
raw expr       : regexp_substr('abc def ghi', '[a-z]+', 1, 3)
checked expr   : regexp_substr<String, String, Int64, Int64>("abc def ghi", "[a-z]+", to_int64<UInt8>(1_u8), to_int64<UInt8>(3_u8))
optimized expr : "ghi"
output type    : String NULL
output domain  : {"ghi"..="ghi"}
output         : 'ghi'


ast            : regexp_substr('abc def ghi', '[a-z]+', NULL)
raw expr       : regexp_substr('abc def ghi', '[a-z]+', NULL)
checked expr   : regexp_substr<String NULL, String NULL, Int64 NULL>(CAST("abc def ghi" AS String NULL), CAST("[a-z]+" AS String NULL), CAST(NULL AS Int64 NULL))
optimized expr : NULL
output type    : String NULL
output domain  : {NULL}
output         : NULL


ast            : regexp_substr('abc def ghi', '')
raw expr       : regexp_substr('abc def ghi', '')
checked expr   : regexp_substr<String, String>("abc def ghi", "")
optimized expr : NULL
output type    : String NULL
output domain  : {NULL}
output         : NULL


ast            : regexp_substr('', NULL)
raw expr       : regexp_substr('', NULL)
checked expr   : regexp_substr<String NULL, String NULL>(CAST("" AS String NULL), CAST(NULL AS String NULL))
optimized expr : NULL
output type    : String NULL
output domain  : {NULL}
output         : NULL


ast            : regexp_substr('', '', 1, 3)
raw expr       : regexp_substr('', '', 1, 3)
checked expr   : regexp_substr<String, String, Int64, Int64>("", "", to_int64<UInt8>(1_u8), to_int64<UInt8>(3_u8))
optimized expr : NULL
output type    : String NULL
output domain  : {NULL}
output         : NULL


ast            : regexp_substr(source, pat)
raw expr       : regexp_substr(source::String, pat::String)
checked expr   : regexp_substr<String, String>(source, pat)
evaluation:
+--------+----------------------+--------------+-------------+
|        | source               | pat          | Output      |
+--------+----------------------+--------------+-------------+
| Type   | String               | String       | String NULL |
| Domain | {""..="abc def ghi"} | {""..="xxx"} | Unknown     |
| Row 0  | 'abc def ghi'        | '[a-z]+'     | 'abc'       |
| Row 1  | 'abc def ghi'        | 'xxx'        | NULL        |
| Row 2  | ''                   | ''           | NULL        |
+--------+----------------------+--------------+-------------+
evaluation (internal):
+--------+--------------------------------------------------------------------------+
| Column | Data                                                                     |
+--------+--------------------------------------------------------------------------+
| source | StringColumn[abc def ghi, abc def ghi, ]                                 |
| pat    | StringColumn[[a-z]+, xxx, ]                                              |
| Output | NullableColumn { column: StringColumn[abc, , ], validity: [0b_____001] } |
+--------+--------------------------------------------------------------------------+


ast            : regexp_substr(source, pat, pos)
raw expr       : regexp_substr(source::String, pat::String, pos::Int64)
checked expr   : regexp_substr<String, String, Int64>(source, pat, pos)
optimized expr : regexp_substr<String, String, Int64>("abc def ghi", "[a-z]+", pos)
evaluation:
+--------+---------------------------------+-----------------------+----------+-------------+
|        | source                          | pat                   | pos      | Output      |
+--------+---------------------------------+-----------------------+----------+-------------+
| Type   | String                          | String                | Int64    | String NULL |
| Domain | {"abc def ghi"..="abc def ghi"} | {"[a-z]+"..="[a-z]+"} | {1..=12} | Unknown     |
| Row 0  | 'abc def ghi'                   | '[a-z]+'              | 1        | 'abc'       |
| Row 1  | 'abc def ghi'                   | '[a-z]+'              | 4        | 'def'       |
| Row 2  | 'abc def ghi'                   | '[a-z]+'              | 12       | NULL        |
+--------+---------------------------------+-----------------------+----------+-------------+
evaluation (internal):
+--------+-----------------------------------------------------------------------------+
| Column | Data                                                                        |
+--------+-----------------------------------------------------------------------------+
| source | StringColumn[abc def ghi, abc def ghi, abc def ghi]                         |
| pat    | StringColumn[[a-z]+, [a-z]+, [a-z]+]                                        |
| pos    | Int64([1, 4, 12])                                                           |
| Output | NullableColumn { column: StringColumn[abc, def, ], validity: [0b_____011] } |
+--------+-----------------------------------------------------------------------------+


ast            : regexp_substr(source, pat, pos, occur)
raw expr       : regexp_substr(source::String, pat::String, pos::Int64, occur::Int64)
checked expr   : regexp_substr<String, String, Int64, Int64>(source, pat, pos, occur)
optimized expr : regexp_substr<String, String, Int64, Int64>("abc def ghi", "[a-z]+", pos, occur)
evaluation:
+--------+---------------------------------+-----------------------+----------+---------+-------------+
|        | source                          | pat                   | pos      | occur   | Output      |
+--------+---------------------------------+-----------------------+----------+---------+-------------+
| Type   | String                          | String                | Int64    | Int64   | String NULL |
| Domain | {"abc def ghi"..="abc def ghi"} | {"[a-z]+"..="[a-z]+"} | {1..=12} | {2..=3} | Unknown     |
| Row 0  | 'abc def ghi'                   | '[a-z]+'              | 1        | 3       | 'ghi'       |
| Row 1  | 'abc def ghi'                   | '[a-z]+'              | 4        | 2       | 'ghi'       |
| Row 2  | 'abc def ghi'                   | '[a-z]+'              | 12       | 3       | NULL        |
+--------+---------------------------------+-----------------------+----------+---------+-------------+
evaluation (internal):
+--------+-----------------------------------------------------------------------------+
| Column | Data                                                                        |
+--------+-----------------------------------------------------------------------------+
| source | StringColumn[abc def ghi, abc def ghi, abc def ghi]                         |
| pat    | StringColumn[[a-z]+, [a-z]+, [a-z]+]                                        |
| pos    | Int64([1, 4, 12])                                                           |
| occur  | Int64([3, 2, 3])                                                            |
| Output | NullableColumn { column: StringColumn[ghi, ghi, ], validity: [0b_____011] } |
+--------+-----------------------------------------------------------------------------+


ast            : regexp_substr(source, pat, pos, occur, mt)
raw expr       : regexp_substr(source::String, pat::String, pos::Int64, occur::Int64, mt::String)
checked expr   : regexp_substr<String, String, Int64, Int64, String>(source, pat, pos, occur, mt)
optimized expr : regexp_substr<String, String, Int64, Int64, String>(source, "[a-z]+", pos, occur, mt)
evaluation:
+--------+---------------------------------+-----------------------+----------+---------+-------------+-------------+
|        | source                          | pat                   | pos      | occur   | mt          | Output      |
+--------+---------------------------------+-----------------------+----------+---------+-------------+-------------+
| Type   | String                          | String                | Int64    | Int64   | String      | String NULL |
| Domain | {"ABC def ghi"..="abc def GHI"} | {"[a-z]+"..="[a-z]+"} | {1..=12} | {2..=3} | {"c"..="i"} | Unknown     |
| Row 0  | 'ABC def ghi'                   | '[a-z]+'              | 1        | 3       | 'c'         | NULL        |
| Row 1  | 'abc def GHI'                   | '[a-z]+'              | 4        | 2       | 'i'         | 'GHI'       |
| Row 2  | 'abc DEF ghi'                   | '[a-z]+'              | 12       | 3       | 'i'         | NULL        |
+--------+---------------------------------+-----------------------+----------+---------+-------------+-------------+
evaluation (internal):
+--------+--------------------------------------------------------------------------+
| Column | Data                                                                     |
+--------+--------------------------------------------------------------------------+
| source | StringColumn[ABC def ghi, abc def GHI, abc DEF ghi]                      |
| pat    | StringColumn[[a-z]+, [a-z]+, [a-z]+]                                     |
| pos    | Int64([1, 4, 12])                                                        |
| occur  | Int64([3, 2, 3])                                                         |
| mt     | StringColumn[c, i, i]                                                    |
| Output | NullableColumn { column: StringColumn[, GHI, ], validity: [0b_____010] } |
+--------+--------------------------------------------------------------------------+


ast            : regexp_substr(source, pat, pos, occur, mt)
raw expr       : regexp_substr(source::String NULL, pat::String NULL, pos::Int64, occur::Int64, mt::String)
checked expr   : regexp_substr<String NULL, String NULL, Int64 NULL, Int64 NULL, String NULL>(source, pat, CAST(pos AS Int64 NULL), CAST(occur AS Int64 NULL), CAST(mt AS String NULL))
evaluation:
+--------+------------------------------------------+--------------------------------+---------+---------+------------+-------------+
|        | source                                   | pat                            | pos     | occur   | mt         | Output      |
+--------+------------------------------------------+--------------------------------+---------+---------+------------+-------------+
| Type   | String NULL                              | String NULL                    | Int64   | Int64   | String     | String NULL |
| Domain | {"abc DEF ghi"..="abc def ghi"} ∪ {NULL} | {"[a-z]+"..="[a-z]+"} ∪ {NULL} | {1..=4} | {1..=2} | {""..="i"} | Unknown     |
| Row 0  | 'abc def ghi'                            | '[a-z]+'                       | 1       | 1       | ''         | 'abc'       |
| Row 1  | 'abc DEF ghi'                            | NULL                           | 1       | 2       | 'c'        | NULL        |
| Row 2  | NULL                                     | NULL                           | 4       | 1       | 'i'        | NULL        |
| Row 3  | 'abc DEF ghi'                            | '[a-z]+'                       | 4       | 1       | 'i'        | 'DEF'       |
+--------+------------------------------------------+--------------------------------+---------+---------+------------+-------------+
evaluation (internal):
+--------+----------------------------------------------------------------------------------------------------------+
| Column | Data                                                                                                     |
+--------+----------------------------------------------------------------------------------------------------------+
| source | NullableColumn { column: StringColumn[abc def ghi, abc DEF ghi, , abc DEF ghi], validity: [0b____1011] } |
| pat    | NullableColumn { column: StringColumn[[a-z]+, , , [a-z]+], validity: [0b____1001] }                      |
| pos    | Int64([1, 1, 4, 4])                                                                                      |
| occur  | Int64([1, 2, 1, 1])                                                                                      |
| mt     | StringColumn[, c, i, i]                                                                                  |
| Output | NullableColumn { column: StringColumn[abc, , , DEF], validity: [0b____1001] }                            |
+--------+----------------------------------------------------------------------------------------------------------+


ast            : regexp_substr(source, pat, pos, occur)
raw expr       : regexp_substr(source::String, pat::String, pos::Int64, occur::Int64)
checked expr   : regexp_substr<String, String, Int64, Int64>(source, pat, pos, occur)
optimized expr : regexp_substr<String, String, Int64, Int64>("周 周周 周周周 周周周周", "周+", pos, occur)
evaluation:
+--------+---------------------------------------------------------+-----------------+----------+---------+-------------+
|        | source                                                  | pat             | pos      | occur   | Output      |
+--------+---------------------------------------------------------+-----------------+----------+---------+-------------+
| Type   | String                                                  | String          | Int64    | Int64   | String NULL |
| Domain | {"周 周周 周周周 周周周周"..="周 周周 周周周 周周周周"} | {"周+"..="周+"} | {1..=14} | {1..=2} | Unknown     |
| Row 0  | '周 周周 周周周 周周周周'                               | '周+'           | 1        | 1       | '周'        |
| Row 1  | '周 周周 周周周 周周周周'                               | '周+'           | 2        | 2       | '周周周'    |
| Row 2  | '周 周周 周周周 周周周周'                               | '周+'           | 14       | 1       | NULL        |
+--------+---------------------------------------------------------+-----------------+----------+---------+-------------+
evaluation (internal):
+--------+-----------------------------------------------------------------------------------------+
| Column | Data                                                                                    |
+--------+-----------------------------------------------------------------------------------------+
| source | StringColumn[周 周周 周周周 周周周周, 周 周周 周周周 周周周周, 周 周周 周周周 周周周周] |
| pat    | StringColumn[周+, 周+, 周+]                                                             |
| pos    | Int64([1, 2, 14])                                                                       |
| occur  | Int64([1, 2, 1])                                                                        |
| Output | NullableColumn { column: StringColumn[周, 周周周, ], validity: [0b_____011] }           |
+--------+-----------------------------------------------------------------------------------------+


error: 
  --> SQL:1:1
  |
1 | regexp_substr(source, pat, pos, occur, mt)
  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Incorrect arguments to regexp_substr: occurrence must be positive, but got 0 while evaluating function `regexp_substr('a b c', 'b', 1, 0, '-c')` in expr `regexp_substr(source, pat, pos, occur, mt)`



