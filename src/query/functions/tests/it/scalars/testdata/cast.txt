ast            : CAST(0 AS UINT8)
raw expr       : CAST(0 AS UInt8)
checked expr   : 0_u8
output type    : UInt8
output domain  : {0..=0}
output         : 0


ast            : CAST(0 AS UINT8 NULL)
raw expr       : CAST(0 AS UInt8 NULL)
checked expr   : CAST(0_u8 AS UInt8 NULL)
optimized expr : 0_u8
output type    : UInt8 NULL
output domain  : {0..=0}
output         : 0


ast            : CAST('str' AS STRING)
raw expr       : CAST('str' AS String)
checked expr   : "str"
output type    : String
output domain  : {"str"..="str"}
output         : 'str'


ast            : CAST('str' AS STRING NULL)
raw expr       : CAST('str' AS String NULL)
checked expr   : CAST("str" AS String NULL)
optimized expr : "str"
output type    : String NULL
output domain  : {"str"..="str"}
output         : 'str'


error: 
  --> SQL:1:1
  |
1 | CAST(NULL AS UINT8)
  | ^^^^^^^^^^^^^^^^^^^ unable to cast type `NULL` to type `UInt8`, during run expr: `CAST(NULL AS UInt8)`



ast            : CAST(NULL AS UINT8 NULL)
raw expr       : CAST(NULL AS UInt8 NULL)
checked expr   : CAST(NULL AS UInt8 NULL)
optimized expr : NULL
output type    : UInt8 NULL
output domain  : {NULL}
output         : NULL


error: 
  --> SQL:1:1
  |
1 | CAST(NULL AS STRING)
  | ^^^^^^^^^^^^^^^^^^^^ unable to cast type `NULL` to type `String`, during run expr: `CAST(NULL AS String)`



ast            : CAST(NULL AS STRING NULL)
raw expr       : CAST(NULL AS String NULL)
checked expr   : CAST(NULL AS String NULL)
optimized expr : NULL
output type    : String NULL
output domain  : {NULL}
output         : NULL


error: 
  --> SQL:1:1
  |
1 | CAST(1024 AS UINT8)
  | ^^^^^^^^^^^^^^^^^^^ number overflowed while evaluating function `to_uint8(1024)` in expr `to_uint8(1024)`



error: 
  --> SQL:1:1
  |
1 | CAST(a AS UINT8)
  | ^^^^^^^^^^^^^^^^ number overflowed while evaluating function `to_uint8(512)` in expr `to_uint8(a)`



error: 
  --> SQL:1:1
  |
1 | CAST(a AS UINT16)
  | ^^^^^^^^^^^^^^^^^ number overflowed while evaluating function `to_uint16(-4)` in expr `to_uint16(a)`



ast            : CAST(a AS INT64)
raw expr       : CAST(a::Int16 AS Int64)
checked expr   : to_int64<Int16>(a)
evaluation:
+--------+----------+----------+
|        | a        | Output   |
+--------+----------+----------+
| Type   | Int16    | Int64    |
| Domain | {-4..=3} | {-4..=3} |
| Row 0  | 0        | 0        |
| Row 1  | 1        | 1        |
| Row 2  | 2        | 2        |
| Row 3  | 3        | 3        |
| Row 4  | -4       | -4       |
+--------+----------+----------+
evaluation (internal):
+--------+-------------------------+
| Column | Data                    |
+--------+-------------------------+
| a      | Int16([0, 1, 2, 3, -4]) |
| Output | Int64([0, 1, 2, 3, -4]) |
+--------+-------------------------+


error: 
  --> SQL:1:22
  |
1 | (CAST(a AS FLOAT32), CAST(a AS INT32), CAST(b AS FLOAT32), CAST(b AS INT32))
  |                      ^^^^^^^^^^^^^^^^ number overflowed while evaluating function `to_int32(4294967295)` in expr `to_int32(a)`, during run expr: `tuple(to_float32(a), to_int32(a), to_float32(b), to_int32(b))`



error: 
  --> SQL:1:1
  |
1 | CAST([[a, b], NULL, NULL] AS Array(Array(Int8)))
  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ unable to cast `NULL` to type `Array(Int8)`, during run expr: `CAST(array(CAST(array(a, b) AS Array(Int16) NULL), CAST(NULL AS Array(Int16) NULL), CAST(NULL AS Array(Int16) NULL)) AS Array(Array(Int8)))`



error: 
  --> SQL:1:1
  |
1 | CAST((a, b, NULL) AS TUPLE(Int8, UInt8, Boolean NULL))
  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ number overflowed while evaluating function `to_int8(256)` in expr `to_int8()`, during run expr: `CAST(tuple(a, b, NULL) AS Tuple(Int8, UInt8, Boolean NULL))`



ast            : CAST(a AS INT16)
raw expr       : CAST(a::Float64 AS Int16)
checked expr   : to_int16<Float64>(a)
evaluation:
+--------+--------------+----------+
|        | a            | Output   |
+--------+--------------+----------+
| Type   | Float64      | Int16    |
| Domain | {-4.4..=3.3} | {-4..=3} |
| Row 0  | 0            | 0        |
| Row 1  | 1.1          | 1        |
| Row 2  | 2.2          | 2        |
| Row 3  | 3.3          | 3        |
| Row 4  | -4.4         | -4       |
+--------+--------------+----------+
evaluation (internal):
+--------+-----------------------------------+
| Column | Data                              |
+--------+-----------------------------------+
| a      | Float64([0, 1.1, 2.2, 3.3, -4.4]) |
| Output | Int16([0, 1, 2, 3, -4])           |
+--------+-----------------------------------+


ast            : CAST(b AS INT16)
raw expr       : CAST(b::Int8 AS Int16)
checked expr   : to_int16<Int8>(b)
evaluation:
+--------+----------+----------+
|        | b        | Output   |
+--------+----------+----------+
| Type   | Int8     | Int16    |
| Domain | {-4..=3} | {-4..=3} |
| Row 0  | 0        | 0        |
| Row 1  | 1        | 1        |
| Row 2  | 2        | 2        |
| Row 3  | 3        | 3        |
| Row 4  | -4       | -4       |
+--------+----------+----------+
evaluation (internal):
+--------+-------------------------+
| Column | Data                    |
+--------+-------------------------+
| b      | Int8([0, 1, 2, 3, -4])  |
| Output | Int16([0, 1, 2, 3, -4]) |
+--------+-------------------------+


error: 
  --> SQL:1:1
  |
1 | CAST(a AS UINT16)
  | ^^^^^^^^^^^^^^^^^ number overflowed while evaluating function `to_uint16(-4)` in expr `to_uint16(a)`



error: 
  --> SQL:1:1
  |
1 | CAST(c AS INT16)
  | ^^^^^^^^^^^^^^^^ number overflowed while evaluating function `to_int16(11111111111)` in expr `to_int16(c)`



error: 
  --> SQL:1:1
  |
1 | CAST(NULL AS VARIANT)
  | ^^^^^^^^^^^^^^^^^^^^^ unable to cast type `NULL` to type `Variant`, during run expr: `CAST(NULL AS Variant)`



ast            : CAST(0 AS VARIANT)
raw expr       : CAST(0 AS Variant)
checked expr   : to_variant<T0=UInt8><T0>(0_u8)
optimized expr : 0x200000002000000100
output type    : Variant
output domain  : Undefined
output         : '0'


ast            : CAST(-1 AS VARIANT)
raw expr       : CAST(minus(1) AS Variant)
checked expr   : to_variant<T0=Int16><T0>(minus<UInt8>(1_u8))
optimized expr : 0x200000002000000240ff
output type    : Variant
output domain  : Undefined
output         : '-1'


ast            : CAST(1.1 AS VARIANT)
raw expr       : CAST(1.1 AS Variant)
checked expr   : to_variant<T0=Decimal(2, 1)><T0>(1.1_d128(2,1))
optimized expr : 0x2000000020000009603ff199999999999a
output type    : Variant
output domain  : Undefined
output         : '1.1'


error: 
  --> SQL:1:1
  |
1 | CAST('üç¶ „ÅåÁæéÂë≥„Åó„ÅÑ' AS VARIANT)
  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected value, pos 1 while evaluating function `parse_json('üç¶ „ÅåÁæéÂë≥„Åó„ÅÑ')` in expr `parse_json('üç¶ „ÅåÁæéÂë≥„Åó„ÅÑ')`



ast            : CAST([0, 1, 2] AS VARIANT)
raw expr       : CAST(array(0, 1, 2) AS Variant)
checked expr   : to_variant<T0=Array(UInt8)><T0>(array<T0=UInt8><T0, T0, T0>(0_u8, 1_u8, 2_u8))
optimized expr : 0x800000032000000120000002200000020050015002
output type    : Variant
output domain  : Undefined
output         : '[0,1,2]'


ast            : CAST([0::VARIANT, '"a"'::VARIANT] AS VARIANT)
raw expr       : CAST(array(CAST(0 AS Variant), CAST('"a"' AS Variant)) AS Variant)
checked expr   : to_variant<T0=Array(Variant)><T0>(array<T0=Variant><T0, T0>(to_variant<T0=UInt8><T0>(0_u8), parse_json<String>("\"a\"")))
optimized expr : 0x8000000220000001100000010061
output type    : Variant
output domain  : Undefined
output         : '[0,"a"]'


ast            : CAST(to_timestamp(1000000) AS VARIANT)
raw expr       : CAST(to_timestamp(1000000) AS Variant)
checked expr   : to_variant<T0=Timestamp><T0>(to_timestamp<Int64>(to_int64<UInt32>(1000000_u32)))
optimized expr : 0x200000001000001a313937302d30312d31322031333a34363a34302e303030303030
output type    : Variant
output domain  : Undefined
output         : '"1970-01-12 13:46:40.000000"'


ast            : CAST(false AS VARIANT)
raw expr       : CAST(false AS Variant)
checked expr   : to_variant<T0=Boolean><T0>(false)
optimized expr : 0x2000000030000000
output type    : Variant
output domain  : Undefined
output         : 'false'


ast            : CAST(true AS VARIANT)
raw expr       : CAST(true AS Variant)
checked expr   : to_variant<T0=Boolean><T0>(true)
optimized expr : 0x2000000040000000
output type    : Variant
output domain  : Undefined
output         : 'true'


ast            : CAST(CAST('"üç¶ „ÅåÁæéÂë≥„Åó„ÅÑ"' AS VARIANT) AS VARIANT)
raw expr       : CAST(CAST('"üç¶ „ÅåÁæéÂë≥„Åó„ÅÑ"' AS Variant) AS Variant)
checked expr   : parse_json<String>("\"üç¶ „ÅåÁæéÂë≥„Åó„ÅÑ\"")
optimized expr : 0x2000000010000014f09f8da620e3818ce7be8ee591b3e38197e38184
output type    : Variant
output domain  : Undefined
output         : '"üç¶ „ÅåÁæéÂë≥„Åó„ÅÑ"'


ast            : CAST((1,) AS VARIANT)
raw expr       : CAST(tuple(1) AS Variant)
checked expr   : to_variant<T0=Tuple(UInt8,)><T0>(tuple<UInt8>(1_u8))
optimized expr : 0x400000011000000120000002315001
output type    : Variant
output domain  : Undefined
output         : '{"1":1}'


ast            : CAST((1, 2) AS VARIANT)
raw expr       : CAST(tuple(1, 2) AS Variant)
checked expr   : to_variant<T0=Tuple(UInt8, UInt8)><T0>(tuple<UInt8, UInt8>(1_u8, 2_u8))
optimized expr : 0x4000000210000001100000012000000220000002313250015002
output type    : Variant
output domain  : Undefined
output         : '{"1":1,"2":2}'


ast            : CAST((false, true) AS VARIANT)
raw expr       : CAST(tuple(false, true) AS Variant)
checked expr   : to_variant<T0=Tuple(Boolean, Boolean)><T0>(tuple<Boolean, Boolean>(false, true))
optimized expr : 0x40000002100000011000000130000000400000003132
output type    : Variant
output domain  : Undefined
output         : '{"1":false,"2":true}'


ast            : CAST(('a',) AS VARIANT)
raw expr       : CAST(tuple('a') AS Variant)
checked expr   : to_variant<T0=Tuple(String,)><T0>(tuple<String>("a"))
optimized expr : 0x4000000110000001100000013161
output type    : Variant
output domain  : Undefined
output         : '{"1":"a"}'


ast            : CAST((1, 2, (false, true, ('a',))) AS VARIANT)
raw expr       : CAST(tuple(1, 2, tuple(false, true, tuple('a'))) AS Variant)
checked expr   : to_variant<T0=Tuple(UInt8, UInt8, Tuple(Boolean, Boolean, Tuple(String,)))><T0>(tuple<UInt8, UInt8, Tuple(Boolean, Boolean, Tuple(String,))>(1_u8, 2_u8, tuple<Boolean, Boolean, Tuple(String,)>(false, true, tuple<String>("a"))))
optimized expr : 0x4000000310000001100000011000000120000002200000025000002d313233500150024000000310000001100000011000000130000000400000005000000e3132334000000110000001100000013161
output type    : Variant
output domain  : Undefined
output         : '{"1":1,"2":2,"3":{"1":false,"2":true,"3":{"1":"a"}}}'


error: 
  --> SQL:1:1
  |
1 | CAST(a AS VARIANT)
  | ^^^^^^^^^^^^^^^^^^ unable to cast `NULL` to type `Variant`, during run expr: `CAST(a AS Variant)`



ast            : CAST(a AS VARIANT)
raw expr       : CAST(a::Bitmap AS Variant)
checked expr   : to_variant<T0=Bitmap><T0>(a)
evaluation:
+--------+-------------+---------------+
|        | a           | Output        |
+--------+-------------+---------------+
| Type   | Bitmap      | Variant       |
| Domain | Undefined   | Undefined     |
| Row 0  | '0,1,2,3,4' | '[0,1,2,3,4]' |
| Row 1  | '1,2,3,4,5' | '[1,2,3,4,5]' |
| Row 2  | '2,3,4,5,6' | '[2,3,4,5,6]' |
| Row 3  | '3,4,5,6,7' | '[3,4,5,6,7]' |
+--------+-------------+---------------+
evaluation (internal):
+--------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| Column | Data                                                                                                                                                                                                                                                                                                                                                                      |
+--------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| a      | BinaryColumn { data: 0x0100000000000000000000003a300000010000000000040010000000000001000200030004000100000000000000000000003a300000010000000000040010000000010002000300040005000100000000000000000000003a300000010000000000040010000000020003000400050006000100000000000000000000003a30000001000000000004001000000003000400050006000700, offsets: [0, 38, 76, 114, 152] } |
| Output | BinaryColumn { data: 0x800000052000000120000002200000022000000220000002005001500250035004800000052000000220000002200000022000000220000002500150025003500450058000000520000002200000022000000220000002200000025002500350045005500680000005200000022000000220000002200000022000000250035004500550065007, offsets: [0, 33, 67, 101, 135] }                                   |
+--------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+


ast            : CAST(-30610224000000001 AS TIMESTAMP)
raw expr       : CAST(minus(30610224000000001) AS Timestamp)
checked expr   : to_timestamp<Int64>(minus<UInt64>(30610224000000001_u64))
optimized expr : -30610224000000001
output type    : Timestamp
output domain  : {-30610224000000001..=-30610224000000001}
output         : '0999-12-31 23:59:59.999999'


ast            : CAST(-315360000000000 AS TIMESTAMP)
raw expr       : CAST(minus(315360000000000) AS Timestamp)
checked expr   : to_timestamp<Int64>(minus<UInt64>(315360000000000_u64))
optimized expr : -315360000000000
output type    : Timestamp
output domain  : {-315360000000000..=-315360000000000}
output         : '1960-01-04 00:00:00.000000'


ast            : CAST(-315360000000 AS TIMESTAMP)
raw expr       : CAST(minus(315360000000) AS Timestamp)
checked expr   : to_timestamp<Int64>(minus<UInt64>(315360000000_u64))
optimized expr : -315360000000000
output type    : Timestamp
output domain  : {-315360000000000..=-315360000000000}
output         : '1960-01-04 00:00:00.000000'


ast            : CAST(-100 AS TIMESTAMP)
raw expr       : CAST(minus(100) AS Timestamp)
checked expr   : to_timestamp<Int64>(to_int64<Int16>(minus<UInt8>(100_u8)))
optimized expr : -100000000
output type    : Timestamp
output domain  : {-100000000..=-100000000}
output         : '1969-12-31 23:58:20.000000'


ast            : CAST(-0 AS TIMESTAMP)
raw expr       : CAST(minus(0) AS Timestamp)
checked expr   : to_timestamp<Int64>(to_int64<Int16>(minus<UInt8>(0_u8)))
optimized expr : 0
output type    : Timestamp
output domain  : {0..=0}
output         : '1970-01-01 00:00:00.000000'


ast            : CAST(0 AS TIMESTAMP)
raw expr       : CAST(0 AS Timestamp)
checked expr   : to_timestamp<Int64>(to_int64<UInt8>(0_u8))
optimized expr : 0
output type    : Timestamp
output domain  : {0..=0}
output         : '1970-01-01 00:00:00.000000'


ast            : CAST(100 AS TIMESTAMP)
raw expr       : CAST(100 AS Timestamp)
checked expr   : to_timestamp<Int64>(to_int64<UInt8>(100_u8))
optimized expr : 100000000
output type    : Timestamp
output domain  : {100000000..=100000000}
output         : '1970-01-01 00:01:40.000000'


ast            : CAST(315360000000 AS TIMESTAMP)
raw expr       : CAST(315360000000 AS Timestamp)
checked expr   : to_timestamp<Int64>(to_int64<UInt64>(315360000000_u64))
optimized expr : 315360000000000
output type    : Timestamp
output domain  : {315360000000000..=315360000000000}
output         : '1979-12-30 00:00:00.000000'


ast            : CAST(315360000000000 AS TIMESTAMP)
raw expr       : CAST(315360000000000 AS Timestamp)
checked expr   : to_timestamp<Int64>(to_int64<UInt64>(315360000000000_u64))
optimized expr : 315360000000000
output type    : Timestamp
output domain  : {315360000000000..=315360000000000}
output         : '1979-12-30 00:00:00.000000'


ast            : CAST(253402300800000000 AS TIMESTAMP)
raw expr       : CAST(253402300800000000 AS Timestamp)
checked expr   : to_timestamp<Int64>(to_int64<UInt64>(253402300800000000_u64))
optimized expr : -62135596800000000
output type    : Timestamp
output domain  : {-62135596800000000..=-62135596800000000}
output         : '0001-01-01 00:00:00.000000'


ast            : CAST(a AS TIMESTAMP)
raw expr       : CAST(a::Int64 AS Timestamp)
checked expr   : to_timestamp<Int64>(a)
evaluation:
+--------+--------------------------------------+--------------------------------------+
|        | a                                    | Output                               |
+--------+--------------------------------------+--------------------------------------+
| Type   | Int64                                | Timestamp                            |
| Domain | {-315360000000000..=315360000000000} | {-315360000000000..=315360000000000} |
| Row 0  | -315360000000000                     | '1960-01-04 00:00:00.000000'         |
| Row 1  | -315360000000                        | '1960-01-04 00:00:00.000000'         |
| Row 2  | -100                                 | '1969-12-31 23:58:20.000000'         |
| Row 3  | 0                                    | '1970-01-01 00:00:00.000000'         |
| Row 4  | 100                                  | '1970-01-01 00:01:40.000000'         |
| Row 5  | 315360000000                         | '1979-12-30 00:00:00.000000'         |
| Row 6  | 315360000000000                      | '1979-12-30 00:00:00.000000'         |
+--------+--------------------------------------+--------------------------------------+
evaluation (internal):
+--------+--------------------------------------------------------------------------------------------------+
| Column | Data                                                                                             |
+--------+--------------------------------------------------------------------------------------------------+
| a      | Int64([-315360000000000, -315360000000, -100, 0, 100, 315360000000, 315360000000000])            |
| Output | [-315360000000000, -315360000000000, -100000000, 0, 100000000, 315360000000000, 315360000000000] |
+--------+--------------------------------------------------------------------------------------------------+


ast            : CAST(TO_TIMESTAMP(-315360000000000) AS INT64)
raw expr       : CAST(TO_TIMESTAMP(minus(315360000000000)) AS Int64)
checked expr   : to_int64<Timestamp>(to_timestamp<Int64>(minus<UInt64>(315360000000000_u64)))
optimized expr : -315360000000000_i64
output type    : Int64
output domain  : {-315360000000000..=-315360000000000}
output         : -315360000000000


ast            : CAST(TO_TIMESTAMP(-315360000000) AS INT64)
raw expr       : CAST(TO_TIMESTAMP(minus(315360000000)) AS Int64)
checked expr   : to_int64<Timestamp>(to_timestamp<Int64>(minus<UInt64>(315360000000_u64)))
optimized expr : -315360000000000_i64
output type    : Int64
output domain  : {-315360000000000..=-315360000000000}
output         : -315360000000000


ast            : CAST(TO_TIMESTAMP(-100) AS INT64)
raw expr       : CAST(TO_TIMESTAMP(minus(100)) AS Int64)
checked expr   : to_int64<Timestamp>(to_timestamp<Int64>(to_int64<Int16>(minus<UInt8>(100_u8))))
optimized expr : -100000000_i64
output type    : Int64
output domain  : {-100000000..=-100000000}
output         : -100000000


ast            : CAST(TO_TIMESTAMP(-0) AS INT64)
raw expr       : CAST(TO_TIMESTAMP(minus(0)) AS Int64)
checked expr   : to_int64<Timestamp>(to_timestamp<Int64>(to_int64<Int16>(minus<UInt8>(0_u8))))
optimized expr : 0_i64
output type    : Int64
output domain  : {0..=0}
output         : 0


ast            : CAST(TO_TIMESTAMP(0) AS INT64)
raw expr       : CAST(TO_TIMESTAMP(0) AS Int64)
checked expr   : to_int64<Timestamp>(to_timestamp<Int64>(to_int64<UInt8>(0_u8)))
optimized expr : 0_i64
output type    : Int64
output domain  : {0..=0}
output         : 0


ast            : CAST(TO_TIMESTAMP(100) AS INT64)
raw expr       : CAST(TO_TIMESTAMP(100) AS Int64)
checked expr   : to_int64<Timestamp>(to_timestamp<Int64>(to_int64<UInt8>(100_u8)))
optimized expr : 100000000_i64
output type    : Int64
output domain  : {100000000..=100000000}
output         : 100000000


ast            : CAST(TO_TIMESTAMP(315360000000) AS INT64)
raw expr       : CAST(TO_TIMESTAMP(315360000000) AS Int64)
checked expr   : to_int64<Timestamp>(to_timestamp<Int64>(to_int64<UInt64>(315360000000_u64)))
optimized expr : 315360000000000_i64
output type    : Int64
output domain  : {315360000000000..=315360000000000}
output         : 315360000000000


ast            : CAST(TO_TIMESTAMP(315360000000000) AS INT64)
raw expr       : CAST(TO_TIMESTAMP(315360000000000) AS Int64)
checked expr   : to_int64<Timestamp>(to_timestamp<Int64>(to_int64<UInt64>(315360000000000_u64)))
optimized expr : 315360000000000_i64
output type    : Int64
output domain  : {315360000000000..=315360000000000}
output         : 315360000000000


ast            : CAST(a AS INT64)
raw expr       : CAST(a::Timestamp AS Int64)
checked expr   : to_int64<Timestamp>(a)
evaluation:
+--------+--------------------------------------+--------------------------------------+
|        | a                                    | Output                               |
+--------+--------------------------------------+--------------------------------------+
| Type   | Timestamp                            | Int64                                |
| Domain | {-315360000000000..=315360000000000} | {-315360000000000..=315360000000000} |
| Row 0  | '1960-01-04 00:00:00.000000'         | -315360000000000                     |
| Row 1  | '1969-12-28 08:24:00.000000'         | -315360000000                        |
| Row 2  | '1969-12-31 23:59:59.999900'         | -100                                 |
| Row 3  | '1970-01-01 00:00:00.000000'         | 0                                    |
| Row 4  | '1970-01-01 00:00:00.000100'         | 100                                  |
| Row 5  | '1970-01-04 15:36:00.000000'         | 315360000000                         |
| Row 6  | '1979-12-30 00:00:00.000000'         | 315360000000000                      |
+--------+--------------------------------------+--------------------------------------+
evaluation (internal):
+--------+---------------------------------------------------------------------------------------+
| Column | Data                                                                                  |
+--------+---------------------------------------------------------------------------------------+
| a      | [-315360000000000, -315360000000, -100, 0, 100, 315360000000, 315360000000000]        |
| Output | Int64([-315360000000000, -315360000000, -100, 0, 100, 315360000000, 315360000000000]) |
+--------+---------------------------------------------------------------------------------------+


ast            : CAST(-354286 AS DATE)
raw expr       : CAST(minus(354286) AS Date)
checked expr   : to_date<Int64>(minus<UInt32>(354286_u32))
optimized expr : -354286
output type    : Date
output domain  : {-354286..=-354286}
output         : '0999-12-31'


ast            : CAST(-354285 AS DATE)
raw expr       : CAST(minus(354285) AS Date)
checked expr   : to_date<Int64>(minus<UInt32>(354285_u32))
optimized expr : -354285
output type    : Date
output domain  : {-354285..=-354285}
output         : '1000-01-01'


ast            : CAST(-100 AS DATE)
raw expr       : CAST(minus(100) AS Date)
checked expr   : to_date<Int64>(to_int64<Int16>(minus<UInt8>(100_u8)))
optimized expr : -100
output type    : Date
output domain  : {-100..=-100}
output         : '1969-09-23'


ast            : CAST(-0 AS DATE)
raw expr       : CAST(minus(0) AS Date)
checked expr   : to_date<Int64>(to_int64<Int16>(minus<UInt8>(0_u8)))
optimized expr : 0
output type    : Date
output domain  : {0..=0}
output         : '1970-01-01'


ast            : CAST(0 AS DATE)
raw expr       : CAST(0 AS Date)
checked expr   : to_date<Int64>(to_int64<UInt8>(0_u8))
optimized expr : 0
output type    : Date
output domain  : {0..=0}
output         : '1970-01-01'


ast            : CAST(100 AS DATE)
raw expr       : CAST(100 AS Date)
checked expr   : to_date<Int64>(to_int64<UInt8>(100_u8))
optimized expr : 100
output type    : Date
output domain  : {100..=100}
output         : '1970-04-11'


ast            : CAST(2932896 AS DATE)
raw expr       : CAST(2932896 AS Date)
checked expr   : to_date<Int64>(to_int64<UInt32>(2932896_u32))
optimized expr : 2932896
output type    : Date
output domain  : {2932896..=2932896}
output         : '9999-12-31'


ast            : CAST(2932897 AS DATE)
raw expr       : CAST(2932897 AS Date)
checked expr   : to_date<Int64>(to_int64<UInt32>(2932897_u32))
optimized expr : -719162
output type    : Date
output domain  : {-719162..=-719162}
output         : '0001-01-01'


ast            : CAST(a AS DATE)
raw expr       : CAST(a::Int32 AS Date)
checked expr   : to_date<Int64>(to_int64<Int32>(a))
evaluation:
+--------+---------------------+---------------------+
|        | a                   | Output              |
+--------+---------------------+---------------------+
| Type   | Int32               | Date                |
| Domain | {-354285..=2932896} | {-354285..=2932896} |
| Row 0  | -354285             | '1000-01-01'        |
| Row 1  | -100                | '1969-09-23'        |
| Row 2  | 0                   | '1970-01-01'        |
| Row 3  | 100                 | '1970-04-11'        |
| Row 4  | 2932896             | '9999-12-31'        |
+--------+---------------------+---------------------+
evaluation (internal):
+--------+-----------------------------------------+
| Column | Data                                    |
+--------+-----------------------------------------+
| a      | Int32([-354285, -100, 0, 100, 2932896]) |
| Output | [-354285, -100, 0, 100, 2932896]        |
+--------+-----------------------------------------+


ast            : CAST(TO_DATE(-354285) AS INT64)
raw expr       : CAST(TO_DATE(minus(354285)) AS Int64)
checked expr   : to_int64<Date>(to_date<Int64>(minus<UInt32>(354285_u32)))
optimized expr : -354285_i64
output type    : Int64
output domain  : {-354285..=-354285}
output         : -354285


ast            : CAST(TO_DATE(-100) AS INT64)
raw expr       : CAST(TO_DATE(minus(100)) AS Int64)
checked expr   : to_int64<Date>(to_date<Int64>(to_int64<Int16>(minus<UInt8>(100_u8))))
optimized expr : -100_i64
output type    : Int64
output domain  : {-100..=-100}
output         : -100


ast            : CAST(TO_DATE(-0) AS INT64)
raw expr       : CAST(TO_DATE(minus(0)) AS Int64)
checked expr   : to_int64<Date>(to_date<Int64>(to_int64<Int16>(minus<UInt8>(0_u8))))
optimized expr : 0_i64
output type    : Int64
output domain  : {0..=0}
output         : 0


ast            : CAST(TO_DATE(0) AS INT64)
raw expr       : CAST(TO_DATE(0) AS Int64)
checked expr   : to_int64<Date>(to_date<Int64>(to_int64<UInt8>(0_u8)))
optimized expr : 0_i64
output type    : Int64
output domain  : {0..=0}
output         : 0


ast            : CAST(TO_DATE(100) AS INT64)
raw expr       : CAST(TO_DATE(100) AS Int64)
checked expr   : to_int64<Date>(to_date<Int64>(to_int64<UInt8>(100_u8)))
optimized expr : 100_i64
output type    : Int64
output domain  : {100..=100}
output         : 100


ast            : CAST(TO_DATE(2932896) AS INT64)
raw expr       : CAST(TO_DATE(2932896) AS Int64)
checked expr   : to_int64<Date>(to_date<Int64>(to_int64<UInt32>(2932896_u32)))
optimized expr : 2932896_i64
output type    : Int64
output domain  : {2932896..=2932896}
output         : 2932896


ast            : CAST(a AS INT64)
raw expr       : CAST(a::Date AS Int64)
checked expr   : to_int64<Date>(a)
evaluation:
+--------+---------------------+---------------------+
|        | a                   | Output              |
+--------+---------------------+---------------------+
| Type   | Date                | Int64               |
| Domain | {-354285..=2932896} | {-354285..=2932896} |
| Row 0  | '1000-01-01'        | -354285             |
| Row 1  | '1969-09-23'        | -100                |
| Row 2  | '1970-01-01'        | 0                   |
| Row 3  | '1970-04-11'        | 100                 |
| Row 4  | '9999-12-31'        | 2932896             |
+--------+---------------------+---------------------+
evaluation (internal):
+--------+-----------------------------------------+
| Column | Data                                    |
+--------+-----------------------------------------+
| a      | [-354285, -100, 0, 100, 2932896]        |
| Output | Int64([-354285, -100, 0, 100, 2932896]) |
+--------+-----------------------------------------+


error: 
  --> SQL:1:1
  |
1 | CAST('foo' AS UINT64)
  | ^^^^^^^^^^^^^^^^^^^^^ invalid digit found in string while evaluating function `to_uint64('foo')` in expr `to_uint64('foo')`



error: 
  --> SQL:1:1
  |
1 | CAST('1foo' AS INT32)
  | ^^^^^^^^^^^^^^^^^^^^^ invalid digit found in string while evaluating function `to_int32('1foo')` in expr `to_int32('1foo')`



error: 
  --> SQL:1:1
  |
1 | CAST('-1' AS UINT64)
  | ^^^^^^^^^^^^^^^^^^^^ invalid digit found in string while evaluating function `to_uint64('-1')` in expr `to_uint64('-1')`



error: 
  --> SQL:1:1
  |
1 | CAST('256' AS UINT8)
  | ^^^^^^^^^^^^^^^^^^^^ number too large to fit in target type while evaluating function `to_uint8('256')` in expr `to_uint8('256')`



ast            : CAST('1' AS UINT64)
raw expr       : CAST('1' AS UInt64)
checked expr   : to_uint64<String>("1")
optimized expr : 1_u64
output type    : UInt64
output domain  : {1..=1}
output         : 1


ast            : CAST(str AS INT64)
raw expr       : CAST(str::String AS Int64)
checked expr   : to_int64<String>(str)
evaluation:
+--------+--------------------------------+----------------------+
|        | str                            | Output               |
+--------+--------------------------------+----------------------+
| Type   | String                         | Int64                |
| Domain | {"-1"..="9223372036854775807"} | Unknown              |
| Row 0  | '-9223372036854775808'         | -9223372036854775808 |
| Row 1  | '-1'                           | -1                   |
| Row 2  | '0'                            | 0                    |
| Row 3  | '1'                            | 1                    |
| Row 4  | '9223372036854775807'          | 9223372036854775807  |
+--------+--------------------------------+----------------------+
evaluation (internal):
+--------+-------------------------------------------------------------------+
| Column | Data                                                              |
+--------+-------------------------------------------------------------------+
| str    | StringColumn[-9223372036854775808, -1, 0, 1, 9223372036854775807] |
| Output | Int64([-9223372036854775808, -1, 0, 1, 9223372036854775807])      |
+--------+-------------------------------------------------------------------+


error: 
  --> SQL:1:1
  |
1 | CAST(str AS INT64)
  | ^^^^^^^^^^^^^^^^^^ unable to cast `NULL` to type `Int64`, during run expr: `CAST(str AS Int64)`



ast            : CAST(num AS STRING)
raw expr       : CAST(num::Int64 AS String)
checked expr   : to_string<Int64>(num)
evaluation:
+--------+----------------------------------------------+------------------------+
|        | num                                          | Output                 |
+--------+----------------------------------------------+------------------------+
| Type   | Int64                                        | String                 |
| Domain | {-9223372036854775808..=9223372036854775807} | {""..}                 |
| Row 0  | -9223372036854775808                         | '-9223372036854775808' |
| Row 1  | -1                                           | '-1'                   |
| Row 2  | 0                                            | '0'                    |
| Row 3  | 1                                            | '1'                    |
| Row 4  | 9223372036854775807                          | '9223372036854775807'  |
+--------+----------------------------------------------+------------------------+
evaluation (internal):
+--------+-------------------------------------------------------------------+
| Column | Data                                                              |
+--------+-------------------------------------------------------------------+
| num    | Int64([-9223372036854775808, -1, 0, 1, 9223372036854775807])      |
| Output | StringColumn[-9223372036854775808, -1, 0, 1, 9223372036854775807] |
+--------+-------------------------------------------------------------------+


ast            : CAST(num AS STRING)
raw expr       : CAST(num::UInt64 AS String)
checked expr   : to_string<UInt64>(num)
evaluation:
+--------+----------------------------+------------------------+
|        | num                        | Output                 |
+--------+----------------------------+------------------------+
| Type   | UInt64                     | String                 |
| Domain | {0..=18446744073709551615} | {""..}                 |
| Row 0  | 0                          | '0'                    |
| Row 1  | 1                          | '1'                    |
| Row 2  | 18446744073709551615       | '18446744073709551615' |
+--------+----------------------------+------------------------+
evaluation (internal):
+--------+------------------------------------------+
| Column | Data                                     |
+--------+------------------------------------------+
| num    | UInt64([0, 1, 18446744073709551615])     |
| Output | StringColumn[0, 1, 18446744073709551615] |
+--------+------------------------------------------+


error: 
  --> SQL:1:1
  |
1 | CAST('t' AS BOOLEAN)
  | ^^^^^^^^^^^^^^^^^^^^ cannot parse to type `BOOLEAN` while evaluating function `to_boolean('t')` in expr `to_boolean('t')`



error: 
  --> SQL:1:1
  |
1 | CAST('f' AS BOOLEAN)
  | ^^^^^^^^^^^^^^^^^^^^ cannot parse to type `BOOLEAN` while evaluating function `to_boolean('f')` in expr `to_boolean('f')`



error: 
  --> SQL:1:1
  |
1 | CAST('0' AS BOOLEAN)
  | ^^^^^^^^^^^^^^^^^^^^ cannot parse to type `BOOLEAN` while evaluating function `to_boolean('0')` in expr `to_boolean('0')`



error: 
  --> SQL:1:1
  |
1 | CAST('1' AS BOOLEAN)
  | ^^^^^^^^^^^^^^^^^^^^ cannot parse to type `BOOLEAN` while evaluating function `to_boolean('1')` in expr `to_boolean('1')`



ast            : CAST('true' AS BOOLEAN)
raw expr       : CAST('true' AS Boolean)
checked expr   : to_boolean<String>("true")
optimized expr : true
output type    : Boolean
output domain  : {TRUE}
output         : true


ast            : CAST('false' AS BOOLEAN)
raw expr       : CAST('false' AS Boolean)
checked expr   : to_boolean<String>("false")
optimized expr : false
output type    : Boolean
output domain  : {FALSE}
output         : false


ast            : CAST('TRUE' AS BOOLEAN)
raw expr       : CAST('TRUE' AS Boolean)
checked expr   : to_boolean<String>("TRUE")
optimized expr : true
output type    : Boolean
output domain  : {TRUE}
output         : true


ast            : CAST('FaLse' AS BOOLEAN)
raw expr       : CAST('FaLse' AS Boolean)
checked expr   : to_boolean<String>("FaLse")
optimized expr : false
output type    : Boolean
output domain  : {FALSE}
output         : false


ast            : CAST(bool AS STRING)
raw expr       : CAST(bool::Boolean AS String)
checked expr   : to_string<Boolean>(bool)
evaluation:
+--------+---------------+---------+
|        | bool          | Output  |
+--------+---------------+---------+
| Type   | Boolean       | String  |
| Domain | {FALSE, TRUE} | {""..}  |
| Row 0  | false         | 'false' |
| Row 1  | true          | 'true'  |
+--------+---------------+---------+
evaluation (internal):
+--------+---------------------------+
| Column | Data                      |
+--------+---------------------------+
| bool   | Boolean([0b______10])     |
| Output | StringColumn[false, true] |
+--------+---------------------------+


ast            : CAST('010.010' AS DECIMAL(5,3))
raw expr       : CAST('010.010' AS Decimal(5, 3))
checked expr   : to_decimal<String>(5, 3)("010.010")
optimized expr : 10.010_d128(5,3)
output type    : Decimal(5, 3)
output domain  : {10.010..=10.010}
output         : 10.010


error: 
  --> SQL:1:1
  |
1 | CAST('010.010' AS DECIMAL(5,4))
  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Decimal overflow while evaluating function `to_decimal(5, 4)('010.010')` in expr `to_decimal(5, 4)('010.010')`



ast            : CAST('010.010' AS DECIMAL(5,2))
raw expr       : CAST('010.010' AS Decimal(5, 2))
checked expr   : to_decimal<String>(5, 2)("010.010")
optimized expr : 10.01_d128(5,2)
output type    : Decimal(5, 2)
output domain  : {10.01..=10.01}
output         : 10.01


error: 
  --> SQL:1:1
  |
1 | CAST('010.010' AS DECIMAL(4,3))
  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Decimal overflow while evaluating function `to_decimal(4, 3)('010.010')` in expr `to_decimal(4, 3)('010.010')`



ast            : CAST('010.010' AS DECIMAL(4,2))
raw expr       : CAST('010.010' AS Decimal(4, 2))
checked expr   : to_decimal<String>(4, 2)("010.010")
optimized expr : 10.01_d128(4,2)
output type    : Decimal(4, 2)
output domain  : {10.01..=10.01}
output         : 10.01


ast            : CAST('-1010.010' AS DECIMAL(7,3))
raw expr       : CAST('-1010.010' AS Decimal(7, 3))
checked expr   : to_decimal<String>(7, 3)("-1010.010")
optimized expr : -1010.010_d128(7,3)
output type    : Decimal(7, 3)
output domain  : {-1010.010..=-1010.010}
output         : -1010.010


ast            : CAST('00' AS DECIMAL(2,1))
raw expr       : CAST('00' AS Decimal(2, 1))
checked expr   : to_decimal<String>(2, 1)("00")
optimized expr : 0.0_d128(2,1)
output type    : Decimal(2, 1)
output domain  : {0.0..=0.0}
output         : 0.0


ast            : CAST('0.0' AS DECIMAL(2,0))
raw expr       : CAST('0.0' AS Decimal(2, 0))
checked expr   : to_decimal<String>(2, 0)("0.0")
optimized expr : 0_d128(2,0)
output type    : Decimal(2, 0)
output domain  : {0..=0}
output         : 0


ast            : CAST('.0' AS DECIMAL(1,0))
raw expr       : CAST('.0' AS Decimal(1, 0))
checked expr   : to_decimal<String>(1, 0)(".0")
optimized expr : 0_d128(1,0)
output type    : Decimal(1, 0)
output domain  : {0..=0}
output         : 0


ast            : CAST('+1.0e-10' AS DECIMAL(11, 10))
raw expr       : CAST('+1.0e-10' AS Decimal(11, 10))
checked expr   : to_decimal<String>(11, 10)("+1.0e-10")
optimized expr : 0.0000000001_d128(11,10)
output type    : Decimal(11, 10)
output domain  : {0.0000000001..=0.0000000001}
output         : 0.0000000001


ast            : CAST('-1.0e+10' AS DECIMAL(11, 0))
raw expr       : CAST('-1.0e+10' AS Decimal(11, 0))
checked expr   : to_decimal<String>(11, 0)("-1.0e+10")
optimized expr : -10000000000_d128(11,0)
output type    : Decimal(11, 0)
output domain  : {-10000000000..=-10000000000}
output         : -10000000000


ast            : CAST('-0.000000' AS DECIMAL(11, 0))
raw expr       : CAST('-0.000000' AS Decimal(11, 0))
checked expr   : to_decimal<String>(11, 0)("-0.000000")
optimized expr : 0_d128(11,0)
output type    : Decimal(11, 0)
output domain  : {0..=0}
output         : 0


ast            : CAST(0 AS BOOLEAN)
raw expr       : CAST(0 AS Boolean)
checked expr   : to_boolean<UInt8>(0_u8)
optimized expr : false
output type    : Boolean
output domain  : {FALSE}
output         : false


ast            : CAST(1 AS BOOLEAN)
raw expr       : CAST(1 AS Boolean)
checked expr   : to_boolean<UInt8>(1_u8)
optimized expr : true
output type    : Boolean
output domain  : {TRUE}
output         : true


ast            : CAST(false AS UINT64)
raw expr       : CAST(false AS UInt64)
checked expr   : to_uint64<Boolean>(false)
optimized expr : 0_u64
output type    : UInt64
output domain  : {0..=0}
output         : 0


ast            : CAST(true AS INT64)
raw expr       : CAST(true AS Int64)
checked expr   : to_int64<Boolean>(true)
optimized expr : 1_i64
output type    : Int64
output domain  : {1..=1}
output         : 1


ast            : CAST(0.0 AS BOOLEAN)
raw expr       : CAST(0.0 AS Boolean)
checked expr   : to_boolean<Float64>(to_float64<Decimal(1, 1)>(0.0_d128(1,1)))
optimized expr : false
output type    : Boolean
output domain  : {FALSE}
output         : false


ast            : CAST(1.0 AS BOOLEAN)
raw expr       : CAST(1.0 AS Boolean)
checked expr   : to_boolean<Float64>(to_float64<Decimal(2, 1)>(1.0_d128(2,1)))
optimized expr : true
output type    : Boolean
output domain  : {TRUE}
output         : true


ast            : CAST(false AS FLOAT32)
raw expr       : CAST(false AS Float32)
checked expr   : to_float32<Boolean>(false)
optimized expr : 0_f32
output type    : Float32
output domain  : {0..=0}
output         : 0


ast            : CAST(true AS FLOAT64)
raw expr       : CAST(true AS Float64)
checked expr   : to_float64<Boolean>(true)
optimized expr : 1_f64
output type    : Float64
output domain  : {1..=1}
output         : 1


ast            : CAST(false AS DECIMAL(4,3))
raw expr       : CAST(false AS Decimal(4, 3))
checked expr   : to_decimal<Boolean>(4, 3)(false)
optimized expr : 0.000_d128(4,3)
output type    : Decimal(4, 3)
output domain  : {0.000..=0.000}
output         : 0.000


ast            : CAST(true AS DECIMAL(4,2))
raw expr       : CAST(true AS Decimal(4, 2))
checked expr   : to_decimal<Boolean>(4, 2)(true)
optimized expr : 1.00_d128(4,2)
output type    : Decimal(4, 2)
output domain  : {1.00..=1.00}
output         : 1.00


ast            : CAST(num AS BOOLEAN)
raw expr       : CAST(num::Int64 AS Boolean)
checked expr   : to_boolean<Int64>(num)
evaluation:
+--------+----------+---------------+
|        | num      | Output        |
+--------+----------+---------------+
| Type   | Int64    | Boolean       |
| Domain | {-1..=2} | {FALSE, TRUE} |
| Row 0  | 0        | false         |
| Row 1  | -1       | true          |
| Row 2  | 1        | true          |
| Row 3  | 2        | true          |
+--------+----------+---------------+
evaluation (internal):
+--------+-----------------------+
| Column | Data                  |
+--------+-----------------------+
| num    | Int64([0, -1, 1, 2])  |
| Output | Boolean([0b____1110]) |
+--------+-----------------------+


ast            : CAST(num AS BOOLEAN)
raw expr       : CAST(num::UInt64 AS Boolean)
checked expr   : to_boolean<UInt64>(num)
evaluation:
+--------+---------+---------------+
|        | num     | Output        |
+--------+---------+---------------+
| Type   | UInt64  | Boolean       |
| Domain | {0..=2} | {FALSE, TRUE} |
| Row 0  | 0       | false         |
| Row 1  | 1       | true          |
| Row 2  | 2       | true          |
+--------+---------+---------------+
evaluation (internal):
+--------+-----------------------+
| Column | Data                  |
+--------+-----------------------+
| num    | UInt64([0, 1, 2])     |
| Output | Boolean([0b_____110]) |
+--------+-----------------------+


ast            : CAST(bool AS UINT64)
raw expr       : CAST(bool::Boolean AS UInt64)
checked expr   : to_uint64<Boolean>(bool)
evaluation:
+--------+---------------+---------+
|        | bool          | Output  |
+--------+---------------+---------+
| Type   | Boolean       | UInt64  |
| Domain | {FALSE, TRUE} | {0..=1} |
| Row 0  | false         | 0       |
| Row 1  | true          | 1       |
+--------+---------------+---------+
evaluation (internal):
+--------+-----------------------+
| Column | Data                  |
+--------+-----------------------+
| bool   | Boolean([0b______10]) |
| Output | UInt64([0, 1])        |
+--------+-----------------------+


ast            : CAST(bool AS INT64)
raw expr       : CAST(bool::Boolean AS Int64)
checked expr   : to_int64<Boolean>(bool)
evaluation:
+--------+---------------+---------+
|        | bool          | Output  |
+--------+---------------+---------+
| Type   | Boolean       | Int64   |
| Domain | {FALSE, TRUE} | {0..=1} |
| Row 0  | false         | 0       |
| Row 1  | true          | 1       |
+--------+---------------+---------+
evaluation (internal):
+--------+-----------------------+
| Column | Data                  |
+--------+-----------------------+
| bool   | Boolean([0b______10]) |
| Output | Int64([0, 1])         |
+--------+-----------------------+


ast            : CAST(TO_DATE(1) AS TIMESTAMP)
raw expr       : CAST(TO_DATE(1) AS Timestamp)
checked expr   : to_timestamp<Date>(to_date<Int64>(to_int64<UInt8>(1_u8)))
optimized expr : 86400000000
output type    : Timestamp
output domain  : {86400000000..=86400000000}
output         : '1970-01-02 00:00:00.000000'


ast            : CAST(TO_TIMESTAMP(1) AS DATE)
raw expr       : CAST(TO_TIMESTAMP(1) AS Date)
checked expr   : to_date<Timestamp>(to_timestamp<Int64>(to_int64<UInt8>(1_u8)))
optimized expr : 0
output type    : Date
output domain  : {0..=0}
output         : '1970-01-01'


ast            : CAST(a AS DATE)
raw expr       : CAST(a::Timestamp AS Date)
checked expr   : to_date<Timestamp>(a)
evaluation:
+--------+--------------------------------------+----------------+
|        | a                                    | Output         |
+--------+--------------------------------------+----------------+
| Type   | Timestamp                            | Date           |
| Domain | {-315360000000000..=315360000000000} | {-3650..=3650} |
| Row 0  | '1960-01-04 00:00:00.000000'         | '1960-01-04'   |
| Row 1  | '1969-12-28 08:24:00.000000'         | '1969-12-28'   |
| Row 2  | '1969-12-31 23:59:59.999900'         | '1969-12-31'   |
| Row 3  | '1970-01-01 00:00:00.000000'         | '1970-01-01'   |
| Row 4  | '1970-01-01 00:00:00.000100'         | '1970-01-01'   |
| Row 5  | '1970-01-04 15:36:00.000000'         | '1970-01-04'   |
| Row 6  | '1979-12-30 00:00:00.000000'         | '1979-12-30'   |
+--------+--------------------------------------+----------------+
evaluation (internal):
+--------+--------------------------------------------------------------------------------+
| Column | Data                                                                           |
+--------+--------------------------------------------------------------------------------+
| a      | [-315360000000000, -315360000000, -100, 0, 100, 315360000000, 315360000000000] |
| Output | [-3650, -4, -1, 0, 0, 3, 3650]                                                 |
+--------+--------------------------------------------------------------------------------+


ast            : CAST(a AS TIMESTAMP)
raw expr       : CAST(a::Date AS Timestamp)
checked expr   : to_timestamp<Date>(a)
evaluation:
+--------+---------------------+-------------------------------------------+
|        | a                   | Output                                    |
+--------+---------------------+-------------------------------------------+
| Type   | Date                | Timestamp                                 |
| Domain | {-354285..=2932896} | {-30610224000000000..=253402214400000000} |
| Row 0  | '1000-01-01'        | '1000-01-01 00:00:00.000000'              |
| Row 1  | '1969-09-23'        | '1969-09-23 00:00:00.000000'              |
| Row 2  | '1970-01-01'        | '1970-01-01 00:00:00.000000'              |
| Row 3  | '1970-04-11'        | '1970-04-11 00:00:00.000000'              |
| Row 4  | '9999-12-31'        | '9999-12-30 22:00:00.000000'              |
+--------+---------------------+-------------------------------------------+
evaluation (internal):
+--------+----------------------------------------------------------------------------+
| Column | Data                                                                       |
+--------+----------------------------------------------------------------------------+
| a      | [-354285, -100, 0, 100, 2932896]                                           |
| Output | [-30610224000000000, -8640000000000, 0, 8640000000000, 253402214400000000] |
+--------+----------------------------------------------------------------------------+


ast            : CAST(TO_DATE(a) AS TIMESTAMP)
raw expr       : CAST(TO_DATE(a::Int32) AS Timestamp)
checked expr   : to_timestamp<Date>(to_date<Int64>(to_int64<Int32>(a)))
evaluation:
+--------+---------------------+-------------------------------------------+
|        | a                   | Output                                    |
+--------+---------------------+-------------------------------------------+
| Type   | Int32               | Timestamp                                 |
| Domain | {-354285..=2932896} | {-30610224000000000..=253402214400000000} |
| Row 0  | -354285             | '1000-01-01 00:00:00.000000'              |
| Row 1  | -100                | '1969-09-23 00:00:00.000000'              |
| Row 2  | 0                   | '1970-01-01 00:00:00.000000'              |
| Row 3  | 100                 | '1970-04-11 00:00:00.000000'              |
| Row 4  | 2932896             | '9999-12-30 22:00:00.000000'              |
+--------+---------------------+-------------------------------------------+
evaluation (internal):
+--------+----------------------------------------------------------------------------+
| Column | Data                                                                       |
+--------+----------------------------------------------------------------------------+
| a      | Int32([-354285, -100, 0, 100, 2932896])                                    |
| Output | [-30610224000000000, -8640000000000, 0, 8640000000000, 253402214400000000] |
+--------+----------------------------------------------------------------------------+


ast            : CAST(a AS TIMESTAMP)
raw expr       : CAST(a::Int64 AS Timestamp)
checked expr   : to_timestamp<Int64>(a)
optimized expr : -62135596800000000
evaluation:
+--------+---------------------------------------------+-------------------------------------------+
|        | a                                           | Output                                    |
+--------+---------------------------------------------+-------------------------------------------+
| Type   | Int64                                       | Timestamp                                 |
| Domain | {9223372036854775807..=9223372036854775807} | {-62135596800000000..=-62135596800000000} |
| Row 0  | 9223372036854775807                         | '0001-01-01 00:00:00.000000'              |
+--------+---------------------------------------------+-------------------------------------------+
evaluation (internal):
+--------+------------------------------+
| Column | Data                         |
+--------+------------------------------+
| a      | Int64([9223372036854775807]) |
| Output | [-62135596800000000]         |
+--------+------------------------------+


ast            : CAST(a AS DATE)
raw expr       : CAST(a::Int64 AS Date)
checked expr   : to_date<Int64>(a)
optimized expr : -719162
evaluation:
+--------+---------------------------------------------+---------------------+
|        | a                                           | Output              |
+--------+---------------------------------------------+---------------------+
| Type   | Int64                                       | Date                |
| Domain | {9223372036854775807..=9223372036854775807} | {-719162..=-719162} |
| Row 0  | 9223372036854775807                         | '0001-01-01'        |
+--------+---------------------------------------------+---------------------+
evaluation (internal):
+--------+------------------------------+
| Column | Data                         |
+--------+------------------------------+
| a      | Int64([9223372036854775807]) |
| Output | [-719162]                    |
+--------+------------------------------+


error: 
  --> SQL:1:1
  |
1 | TO_TIMESTAMP('2022')
  | ^^^^^^^^^^^^^^^^^^^^ cannot parse to type `TIMESTAMP`. BadArguments. Code: 1006, Text = unexpected argument. while evaluating function `to_timestamp('2022')` in expr `to_timestamp('2022')`



error: 
  --> SQL:1:1
  |
1 | TO_TIMESTAMP('2022-01')
  | ^^^^^^^^^^^^^^^^^^^^^^^ cannot parse to type `TIMESTAMP`. BadArguments. Code: 1006, Text = unexpected argument. while evaluating function `to_timestamp('2022-01')` in expr `to_timestamp('2022-01')`



ast            : TO_TIMESTAMP('2022-01-02')
raw expr       : TO_TIMESTAMP('2022-01-02')
checked expr   : to_timestamp<String>("2022-01-02")
optimized expr : 1641081600000000
output type    : Timestamp
output domain  : {1641081600000000..=1641081600000000}
output         : '2022-01-02 00:00:00.000000'


error: 
  --> SQL:1:1
  |
1 | TO_TIMESTAMP('A NON-TIMESTAMP STR')
  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ cannot parse to type `TIMESTAMP`. BadBytes. Code: 1046, Text = Date Parsing Error: The value 'A NON-TIME' could not be parsed into a valid Date, cause: failed to parse year in date "A NON-TIME": failed to parse "A NO" as year (a four digit integer): invalid digit, expected 0-9 but got A. while evaluating function `to_timestamp('A NON-TIMESTAMP STR')` in expr `to_timestamp('A NON-TIMESTAMP STR')`



ast            : TO_TIMESTAMP('2022-01-02T03:25:02.868894-07:00')
raw expr       : TO_TIMESTAMP('2022-01-02T03:25:02.868894-07:00')
checked expr   : to_timestamp<String>("2022-01-02T03:25:02.868894-07:00")
optimized expr : 1641119102868894
output type    : Timestamp
output domain  : {1641119102868894..=1641119102868894}
output         : '2022-01-02 10:25:02.868894'


ast            : TO_TIMESTAMP('2022-01-02 02:00:11')
raw expr       : TO_TIMESTAMP('2022-01-02 02:00:11')
checked expr   : to_timestamp<String>("2022-01-02 02:00:11")
optimized expr : 1641088811000000
output type    : Timestamp
output domain  : {1641088811000000..=1641088811000000}
output         : '2022-01-02 02:00:11.000000'


ast            : TO_TIMESTAMP('2022-01-02T02:00:22')
raw expr       : TO_TIMESTAMP('2022-01-02T02:00:22')
checked expr   : to_timestamp<String>("2022-01-02T02:00:22")
optimized expr : 1641088822000000
output type    : Timestamp
output domain  : {1641088822000000..=1641088822000000}
output         : '2022-01-02 02:00:22.000000'


ast            : TO_TIMESTAMP('2022-01-02T01:12:00-07:00')
raw expr       : TO_TIMESTAMP('2022-01-02T01:12:00-07:00')
checked expr   : to_timestamp<String>("2022-01-02T01:12:00-07:00")
optimized expr : 1641111120000000
output type    : Timestamp
output domain  : {1641111120000000..=1641111120000000}
output         : '2022-01-02 08:12:00.000000'


ast            : TO_TIMESTAMP('2022-01-02T01')
raw expr       : TO_TIMESTAMP('2022-01-02T01')
checked expr   : to_timestamp<String>("2022-01-02T01")
optimized expr : 1641085200000000
output type    : Timestamp
output domain  : {1641085200000000..=1641085200000000}
output         : '2022-01-02 01:00:00.000000'


ast            : TO_TIMESTAMP(a)
raw expr       : TO_TIMESTAMP(a::String)
checked expr   : to_timestamp<String>(a)
evaluation:
+--------+-----------------------------------------------------+---------------------------------------+
|        | a                                                   | Output                                |
+--------+-----------------------------------------------------+---------------------------------------+
| Type   | String                                              | Timestamp                             |
| Domain | {"2022-01-02"..="2022-01-02T03:25:02.868894-07:00"} | {1641081600000000..=1641119102868894} |
| Row 0  | '2022-01-02'                                        | '2022-01-02 00:00:00.000000'          |
| Row 1  | '2022-01-02T03:25:02.868894-07:00'                  | '2022-01-02 10:25:02.868894'          |
| Row 2  | '2022-01-02 02:00:11'                               | '2022-01-02 02:00:11.000000'          |
| Row 3  | '2022-01-02T01:12:00-07:00'                         | '2022-01-02 08:12:00.000000'          |
| Row 4  | '2022-01-02T01'                                     | '2022-01-02 01:00:00.000000'          |
+--------+-----------------------------------------------------+---------------------------------------+
evaluation (internal):
+--------+---------------------------------------------------------------------------------------------------------------------------+
| Column | Data                                                                                                                      |
+--------+---------------------------------------------------------------------------------------------------------------------------+
| a      | StringColumn[2022-01-02, 2022-01-02T03:25:02.868894-07:00, 2022-01-02 02:00:11, 2022-01-02T01:12:00-07:00, 2022-01-02T01] |
| Output | [1641081600000000, 1641119102868894, 1641088811000000, 1641111120000000, 1641085200000000]                                |
+--------+---------------------------------------------------------------------------------------------------------------------------+


ast            : CAST(TO_TIMESTAMP(-315360000000000) AS VARCHAR)
raw expr       : CAST(TO_TIMESTAMP(minus(315360000000000)) AS String)
checked expr   : to_string<Timestamp>(to_timestamp<Int64>(minus<UInt64>(315360000000000_u64)))
optimized expr : "1960-01-04 00:00:00.000000"
output type    : String
output domain  : {"1960-01-04 00:00:00.000000"..="1960-01-04 00:00:00.000000"}
output         : '1960-01-04 00:00:00.000000'


ast            : CAST(TO_TIMESTAMP(-315360000000) AS VARCHAR)
raw expr       : CAST(TO_TIMESTAMP(minus(315360000000)) AS String)
checked expr   : to_string<Timestamp>(to_timestamp<Int64>(minus<UInt64>(315360000000_u64)))
optimized expr : "1960-01-04 00:00:00.000000"
output type    : String
output domain  : {"1960-01-04 00:00:00.000000"..="1960-01-04 00:00:00.000000"}
output         : '1960-01-04 00:00:00.000000'


ast            : CAST(TO_TIMESTAMP(-100) AS VARCHAR)
raw expr       : CAST(TO_TIMESTAMP(minus(100)) AS String)
checked expr   : to_string<Timestamp>(to_timestamp<Int64>(to_int64<Int16>(minus<UInt8>(100_u8))))
optimized expr : "1969-12-31 23:58:20.000000"
output type    : String
output domain  : {"1969-12-31 23:58:20.000000"..="1969-12-31 23:58:20.000000"}
output         : '1969-12-31 23:58:20.000000'


ast            : CAST(TO_TIMESTAMP(-0) AS VARCHAR)
raw expr       : CAST(TO_TIMESTAMP(minus(0)) AS String)
checked expr   : to_string<Timestamp>(to_timestamp<Int64>(to_int64<Int16>(minus<UInt8>(0_u8))))
optimized expr : "1970-01-01 00:00:00.000000"
output type    : String
output domain  : {"1970-01-01 00:00:00.000000"..="1970-01-01 00:00:00.000000"}
output         : '1970-01-01 00:00:00.000000'


ast            : CAST(TO_TIMESTAMP(0) AS VARCHAR)
raw expr       : CAST(TO_TIMESTAMP(0) AS String)
checked expr   : to_string<Timestamp>(to_timestamp<Int64>(to_int64<UInt8>(0_u8)))
optimized expr : "1970-01-01 00:00:00.000000"
output type    : String
output domain  : {"1970-01-01 00:00:00.000000"..="1970-01-01 00:00:00.000000"}
output         : '1970-01-01 00:00:00.000000'


ast            : CAST(TO_TIMESTAMP(100) AS VARCHAR)
raw expr       : CAST(TO_TIMESTAMP(100) AS String)
checked expr   : to_string<Timestamp>(to_timestamp<Int64>(to_int64<UInt8>(100_u8)))
optimized expr : "1970-01-01 00:01:40.000000"
output type    : String
output domain  : {"1970-01-01 00:01:40.000000"..="1970-01-01 00:01:40.000000"}
output         : '1970-01-01 00:01:40.000000'


ast            : CAST(TO_TIMESTAMP(315360000000) AS VARCHAR)
raw expr       : CAST(TO_TIMESTAMP(315360000000) AS String)
checked expr   : to_string<Timestamp>(to_timestamp<Int64>(to_int64<UInt64>(315360000000_u64)))
optimized expr : "1979-12-30 00:00:00.000000"
output type    : String
output domain  : {"1979-12-30 00:00:00.000000"..="1979-12-30 00:00:00.000000"}
output         : '1979-12-30 00:00:00.000000'


ast            : CAST(TO_TIMESTAMP(315360000000000) AS VARCHAR)
raw expr       : CAST(TO_TIMESTAMP(315360000000000) AS String)
checked expr   : to_string<Timestamp>(to_timestamp<Int64>(to_int64<UInt64>(315360000000000_u64)))
optimized expr : "1979-12-30 00:00:00.000000"
output type    : String
output domain  : {"1979-12-30 00:00:00.000000"..="1979-12-30 00:00:00.000000"}
output         : '1979-12-30 00:00:00.000000'


ast            : CAST(a AS VARCHAR)
raw expr       : CAST(a::Timestamp AS String)
checked expr   : to_string<Timestamp>(a)
evaluation:
+--------+--------------------------------------+------------------------------+
|        | a                                    | Output                       |
+--------+--------------------------------------+------------------------------+
| Type   | Timestamp                            | String                       |
| Domain | {-315360000000000..=315360000000000} | {""..}                       |
| Row 0  | '1960-01-04 00:00:00.000000'         | '1960-01-04 00:00:00.000000' |
| Row 1  | '1969-12-28 08:24:00.000000'         | '1969-12-28 08:24:00.000000' |
| Row 2  | '1969-12-31 23:59:59.999900'         | '1969-12-31 23:59:59.999900' |
| Row 3  | '1970-01-01 00:00:00.000000'         | '1970-01-01 00:00:00.000000' |
| Row 4  | '1970-01-01 00:00:00.000100'         | '1970-01-01 00:00:00.000100' |
| Row 5  | '1970-01-04 15:36:00.000000'         | '1970-01-04 15:36:00.000000' |
| Row 6  | '1979-12-30 00:00:00.000000'         | '1979-12-30 00:00:00.000000' |
+--------+--------------------------------------+------------------------------+
evaluation (internal):
+--------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| Column | Data                                                                                                                                                                                                             |
+--------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| a      | [-315360000000000, -315360000000, -100, 0, 100, 315360000000, 315360000000000]                                                                                                                                   |
| Output | StringColumn[1960-01-04 00:00:00.000000, 1969-12-28 08:24:00.000000, 1969-12-31 23:59:59.999900, 1970-01-01 00:00:00.000000, 1970-01-01 00:00:00.000100, 1970-01-04 15:36:00.000000, 1979-12-30 00:00:00.000000] |
+--------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+


error: 
  --> SQL:1:1
  |
1 | TO_DATE('2022')
  | ^^^^^^^^^^^^^^^ cannot parse to type `DATE`. BadArguments. Code: 1006, Text = unexpected argument. while evaluating function `to_date('2022')` in expr `to_date('2022')`



error: 
  --> SQL:1:1
  |
1 | TO_DATE('2022-01')
  | ^^^^^^^^^^^^^^^^^^ cannot parse to type `DATE`. BadArguments. Code: 1006, Text = unexpected argument. while evaluating function `to_date('2022-01')` in expr `to_date('2022-01')`



ast            : TO_DATE('2022-01-02')
raw expr       : TO_DATE('2022-01-02')
checked expr   : to_date<String>("2022-01-02")
optimized expr : 18994
output type    : Date
output domain  : {18994..=18994}
output         : '2022-01-02'


error: 
  --> SQL:1:1
  |
1 | TO_DATE('A NON-DATE STR')
  | ^^^^^^^^^^^^^^^^^^^^^^^^^ cannot parse to type `DATE`. BadBytes. Code: 1046, Text = Date Parsing Error: The value 'A NON-DATE' could not be parsed into a valid Date, cause: failed to parse year in date "A NON-DATE": failed to parse "A NO" as year (a four digit integer): invalid digit, expected 0-9 but got A. while evaluating function `to_date('A NON-DATE STR')` in expr `to_date('A NON-DATE STR')`



ast            : TO_DATE('2022-01-02T03:25:02.868894-07:00')
raw expr       : TO_DATE('2022-01-02T03:25:02.868894-07:00')
checked expr   : to_date<String>("2022-01-02T03:25:02.868894-07:00")
optimized expr : 18994
output type    : Date
output domain  : {18994..=18994}
output         : '2022-01-02'


ast            : TO_DATE('2022-01-02 02:00:11')
raw expr       : TO_DATE('2022-01-02 02:00:11')
checked expr   : to_date<String>("2022-01-02 02:00:11")
optimized expr : 18994
output type    : Date
output domain  : {18994..=18994}
output         : '2022-01-02'


ast            : TO_DATE('2022-01-02T02:00:22')
raw expr       : TO_DATE('2022-01-02T02:00:22')
checked expr   : to_date<String>("2022-01-02T02:00:22")
optimized expr : 18994
output type    : Date
output domain  : {18994..=18994}
output         : '2022-01-02'


ast            : TO_DATE('2022-01-02T01:12:00-07:00')
raw expr       : TO_DATE('2022-01-02T01:12:00-07:00')
checked expr   : to_date<String>("2022-01-02T01:12:00-07:00")
optimized expr : 18994
output type    : Date
output domain  : {18994..=18994}
output         : '2022-01-02'


ast            : TO_DATE('2022-01-02T01')
raw expr       : TO_DATE('2022-01-02T01')
checked expr   : to_date<String>("2022-01-02T01")
optimized expr : 18994
output type    : Date
output domain  : {18994..=18994}
output         : '2022-01-02'


ast            : TO_DATE(a)
raw expr       : TO_DATE(a::String)
checked expr   : to_date<String>(a)
optimized expr : 18994
evaluation:
+--------+-----------------------------------------------------+-----------------+
|        | a                                                   | Output          |
+--------+-----------------------------------------------------+-----------------+
| Type   | String                                              | Date            |
| Domain | {"2022-01-02"..="2022-01-02T03:25:02.868894-07:00"} | {18994..=18994} |
| Row 0  | '2022-01-02'                                        | '2022-01-02'    |
| Row 1  | '2022-01-02T03:25:02.868894-07:00'                  | '2022-01-02'    |
| Row 2  | '2022-01-02 02:00:11'                               | '2022-01-02'    |
| Row 3  | '2022-01-02T01:12:00-07:00'                         | '2022-01-02'    |
| Row 4  | '2022-01-02T01'                                     | '2022-01-02'    |
+--------+-----------------------------------------------------+-----------------+
evaluation (internal):
+--------+---------------------------------------------------------------------------------------------------------------------------+
| Column | Data                                                                                                                      |
+--------+---------------------------------------------------------------------------------------------------------------------------+
| a      | StringColumn[2022-01-02, 2022-01-02T03:25:02.868894-07:00, 2022-01-02 02:00:11, 2022-01-02T01:12:00-07:00, 2022-01-02T01] |
| Output | [18994, 18994, 18994, 18994, 18994]                                                                                       |
+--------+---------------------------------------------------------------------------------------------------------------------------+


ast            : CAST(TO_DATE(-354285) AS VARCHAR)
raw expr       : CAST(TO_DATE(minus(354285)) AS String)
checked expr   : to_string<Date>(to_date<Int64>(minus<UInt32>(354285_u32)))
optimized expr : "1000-01-01"
output type    : String
output domain  : {"1000-01-01"..="1000-01-01"}
output         : '1000-01-01'


ast            : CAST(TO_DATE(-100) AS VARCHAR)
raw expr       : CAST(TO_DATE(minus(100)) AS String)
checked expr   : to_string<Date>(to_date<Int64>(to_int64<Int16>(minus<UInt8>(100_u8))))
optimized expr : "1969-09-23"
output type    : String
output domain  : {"1969-09-23"..="1969-09-23"}
output         : '1969-09-23'


ast            : CAST(TO_DATE(-0) AS VARCHAR)
raw expr       : CAST(TO_DATE(minus(0)) AS String)
checked expr   : to_string<Date>(to_date<Int64>(to_int64<Int16>(minus<UInt8>(0_u8))))
optimized expr : "1970-01-01"
output type    : String
output domain  : {"1970-01-01"..="1970-01-01"}
output         : '1970-01-01'


ast            : CAST(TO_DATE(0) AS VARCHAR)
raw expr       : CAST(TO_DATE(0) AS String)
checked expr   : to_string<Date>(to_date<Int64>(to_int64<UInt8>(0_u8)))
optimized expr : "1970-01-01"
output type    : String
output domain  : {"1970-01-01"..="1970-01-01"}
output         : '1970-01-01'


ast            : CAST(TO_DATE(100) AS VARCHAR)
raw expr       : CAST(TO_DATE(100) AS String)
checked expr   : to_string<Date>(to_date<Int64>(to_int64<UInt8>(100_u8)))
optimized expr : "1970-04-11"
output type    : String
output domain  : {"1970-04-11"..="1970-04-11"}
output         : '1970-04-11'


ast            : CAST(TO_DATE(2932896) AS VARCHAR)
raw expr       : CAST(TO_DATE(2932896) AS String)
checked expr   : to_string<Date>(to_date<Int64>(to_int64<UInt32>(2932896_u32)))
optimized expr : "9999-12-31"
output type    : String
output domain  : {"9999-12-31"..="9999-12-31"}
output         : '9999-12-31'


ast            : CAST(a AS VARCHAR)
raw expr       : CAST(a::Date AS String)
checked expr   : to_string<Date>(a)
evaluation:
+--------+---------------------+-------------------------------+
|        | a                   | Output                        |
+--------+---------------------+-------------------------------+
| Type   | Date                | String                        |
| Domain | {-354285..=2932896} | {"1000-01-01"..="9999-12-31"} |
| Row 0  | '1000-01-01'        | '1000-01-01'                  |
| Row 1  | '1969-09-23'        | '1969-09-23'                  |
| Row 2  | '1970-01-01'        | '1970-01-01'                  |
| Row 3  | '1970-04-11'        | '1970-04-11'                  |
| Row 4  | '9999-12-31'        | '9999-12-31'                  |
+--------+---------------------+-------------------------------+
evaluation (internal):
+--------+--------------------------------------------------------------------------+
| Column | Data                                                                     |
+--------+--------------------------------------------------------------------------+
| a      | [-354285, -100, 0, 100, 2932896]                                         |
| Output | StringColumn[1000-01-01, 1969-09-23, 1970-01-01, 1970-04-11, 9999-12-31] |
+--------+--------------------------------------------------------------------------+


error: 
  --> SQL:1:1
  |
1 | CAST((1, TRUE) AS Tuple(STRING))
  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ unable to cast type `Tuple(UInt8, Boolean)` to type `Tuple(String,)`



error: 
  --> SQL:1:1
  |
1 | CAST(('a',) AS Tuple(INT))
  | ^^^^^^^^^^^^^^^^^^^^^^^^^^ invalid digit found in string while evaluating function `to_int32('a')` in expr `to_int32()`, during run expr: `CAST(tuple('a') AS Tuple(Int32,))`



ast            : CAST(((1, TRUE), 1) AS Tuple(Tuple(INT, INT), INT))
raw expr       : CAST(tuple(tuple(1, true), 1) AS Tuple(Tuple(Int32, Int32), Int32))
checked expr   : CAST(tuple<Tuple(UInt8, Boolean), UInt8>(tuple<UInt8, Boolean>(1_u8, true), 1_u8) AS Tuple(Tuple(Int32, Int32), Int32))
optimized expr : ((1_i32, 1_i32), 1_i32)
output type    : Tuple(Tuple(Int32, Int32), Int32)
output domain  : (({1..=1}, {1..=1}), {1..=1})
output         : ((1, 1), 1)


ast            : CAST(TRY_CAST(1 AS INT32) AS INT32)
raw expr       : CAST(TRY_CAST(1 AS Int32) AS Int32)
checked expr   : CAST(try_to_int32<UInt8>(1_u8) AS Int32)
optimized expr : 1_i32
output type    : Int32
output domain  : {1..=1}
output         : 1


error: 
  --> SQL:1:1
  |
1 | CAST(((1, 'a'), 1) AS Tuple(Tuple(INT, INT NULL), INT))
  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ invalid digit found in string while evaluating function `to_int32('a')` in expr `to_int32()`, during run expr: `CAST(tuple(tuple(1, 'a'), 1) AS Tuple(Tuple(Int32, Int32 NULL), Int32))`



error: 
  --> SQL:1:1
  |
1 | CAST(((1, 'a'), 1) AS Tuple(Tuple(INT, INT), INT) NULL)
  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ invalid digit found in string while evaluating function `to_int32('a')` in expr `to_int32()`, during run expr: `CAST(tuple(tuple(1, 'a'), 1) AS Tuple(Tuple(Int32, Int32), Int32) NULL)`



ast            : CAST([(1,TRUE),(2,FALSE)] AS Array(Tuple(INT, INT)))
raw expr       : CAST(array(tuple(1, true), tuple(2, false)) AS Array(Tuple(Int32, Int32)))
checked expr   : CAST(array<T0=Tuple(UInt8, Boolean)><T0, T0>(tuple<UInt8, Boolean>(1_u8, true), tuple<UInt8, Boolean>(2_u8, false)) AS Array(Tuple(Int32, Int32)))
optimized expr : [(1, 1), (2, 0)]
output type    : Array(Tuple(Int32, Int32))
output domain  : [({1..=2}, {0..=1})]
output         : [(1, 1), (2, 0)]


error: 
  --> SQL:1:1
  |
1 | CAST([(1,'a'),(2,'a')] AS Array(Tuple(INT, INT)) NULL)
  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ invalid digit found in string while evaluating function `to_int32('a')` in expr `to_int32()`, during run expr: `CAST(array(tuple(1, 'a'), tuple(2, 'a')) AS Array(Tuple(Int32, Int32)) NULL)`



error: 
  --> SQL:1:1
  |
1 | CAST([(1,'a'),(2,'a')] AS Array(Tuple(INT, INT NULL)))
  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ invalid digit found in string while evaluating function `to_int32('a')` in expr `to_int32()`, during run expr: `CAST(array(tuple(1, 'a'), tuple(2, 'a')) AS Array(Tuple(Int32, Int32 NULL)))`



ast            : CAST([[TRUE], [FALSE, TRUE]] AS Array(Array(INT)))
raw expr       : CAST(array(array(true), array(false, true)) AS Array(Array(Int32)))
checked expr   : CAST(array<T0=Array(Boolean)><T0, T0>(array<T0=Boolean><T0>(true), array<T0=Boolean><T0, T0>(false, true)) AS Array(Array(Int32)))
optimized expr : [[1], [0, 1]]
output type    : Array(Array(Int32))
output domain  : [[{0..=1}]]
output         : [[1], [0, 1]]


error: 
  --> SQL:1:1
  |
1 | CAST([['a'], ['b', 'c']] AS Array(Array(INT) NULL))
  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ invalid digit found in string while evaluating function `to_int32('a')` in expr `to_int32()`, during run expr: `CAST(array(array('a'), array('b', 'c')) AS Array(Array(Int32) NULL))`



ast            : CAST('Abc' AS BINARY)
raw expr       : CAST('Abc' AS Binary)
checked expr   : to_binary<String>("Abc")
optimized expr : 416263
output type    : Binary
output domain  : Undefined
output         : 416263


ast            : CAST('Dobr√Ω den' AS BINARY)
raw expr       : CAST('Dobr√Ω den' AS Binary)
checked expr   : to_binary<String>("Dobr√Ω den")
optimized expr : 446F6272C3BD2064656E
output type    : Binary
output domain  : Undefined
output         : 446F6272C3BD2064656E


ast            : CAST('√üüòÄÂ±±' AS BINARY)
raw expr       : CAST('√üüòÄÂ±±' AS Binary)
checked expr   : to_binary<String>("√üüòÄÂ±±")
optimized expr : C39FF09F9880E5B1B1
output type    : Binary
output domain  : Undefined
output         : C39FF09F9880E5B1B1


error: 
  --> SQL:1:1
  |
1 | CAST(NULL AS BINARY)
  | ^^^^^^^^^^^^^^^^^^^^ unable to cast type `NULL` to type `Binary`, during run expr: `CAST(NULL AS Binary)`



ast            : CAST(NULL AS BINARY NULL)
raw expr       : CAST(NULL AS Binary NULL)
checked expr   : CAST(NULL AS Binary NULL)
optimized expr : NULL
output type    : Binary NULL
output domain  : {NULL}
output         : NULL


ast            : CAST(a AS BINARY)
raw expr       : CAST(a::String AS Binary)
checked expr   : to_binary<String>(a)
evaluation:
+--------+-------------------+----------------------+
|        | a                 | Output               |
+--------+-------------------+----------------------+
| Type   | String            | Binary               |
| Domain | {"Abc"..="√üüòÄÂ±±"} | Undefined            |
| Row 0  | 'Abc'             | 416263               |
| Row 1  | 'Dobr√Ω den'       | 446F6272C3BD2064656E |
| Row 2  | '√üüòÄÂ±±'           | C39FF09F9880E5B1B1   |
+--------+-------------------+----------------------+
evaluation (internal):
+--------+------------------------------------------------------------------------------------------------+
| Column | Data                                                                                           |
+--------+------------------------------------------------------------------------------------------------+
| a      | StringColumn[Abc, Dobr√Ω den, √üüòÄÂ±±]                                                            |
| Output | BinaryColumn { data: 0x416263446f6272c3bd2064656ec39ff09f9880e5b1b1, offsets: [0, 3, 13, 22] } |
+--------+------------------------------------------------------------------------------------------------+


error: 
  --> SQL:1:1
  |
1 | CAST(a AS BINARY)
  | ^^^^^^^^^^^^^^^^^ unable to cast `NULL` to type `Binary`, during run expr: `CAST(a AS Binary)`



ast            : CAST(a AS BINARY NULL)
raw expr       : CAST(a::String NULL AS Binary NULL)
checked expr   : CAST(a AS Binary NULL)
evaluation:
+--------+--------------------------------+----------------------+
|        | a                              | Output               |
+--------+--------------------------------+----------------------+
| Type   | String NULL                    | Binary NULL          |
| Domain | {"Abc"..="Dobr√Ω den"} ‚à™ {NULL} | Undefined ‚à™ {NULL}   |
| Row 0  | 'Abc'                          | 416263               |
| Row 1  | 'Dobr√Ω den'                    | 446F6272C3BD2064656E |
| Row 2  | NULL                           | NULL                 |
+--------+--------------------------------+----------------------+
evaluation (internal):
+--------+---------------------------------------------------------------------------------------------------------------------------------------------------+
| Column | Data                                                                                                                                              |
+--------+---------------------------------------------------------------------------------------------------------------------------------------------------+
| a      | NullableColumn { column: StringColumn[Abc, Dobr√Ω den, √üüòÄÂ±±], validity: [0b_____011] }                                                            |
| Output | NullableColumn { column: BinaryColumn { data: 0x416263446f6272c3bd2064656ec39ff09f9880e5b1b1, offsets: [0, 3, 13, 22] }, validity: [0b_____011] } |
+--------+---------------------------------------------------------------------------------------------------------------------------------------------------+


ast            : CAST(CAST('Abc' AS BINARY) AS STRING)
raw expr       : CAST(CAST('Abc' AS Binary) AS String)
checked expr   : to_string<Binary>(to_binary<String>("Abc"))
optimized expr : "Abc"
output type    : String
output domain  : {"Abc"..="Abc"}
output         : 'Abc'


ast            : CAST(CAST('Dobr√Ω den' AS BINARY) AS STRING)
raw expr       : CAST(CAST('Dobr√Ω den' AS Binary) AS String)
checked expr   : to_string<Binary>(to_binary<String>("Dobr√Ω den"))
optimized expr : "Dobr√Ω den"
output type    : String
output domain  : {"Dobr√Ω den"..="Dobr√Ω den"}
output         : 'Dobr√Ω den'


ast            : CAST(CAST('√üüòÄÂ±±' AS BINARY) AS STRING)
raw expr       : CAST(CAST('√üüòÄÂ±±' AS Binary) AS String)
checked expr   : to_string<Binary>(to_binary<String>("√üüòÄÂ±±"))
optimized expr : "√üüòÄÂ±±"
output type    : String
output domain  : {"√üüòÄÂ±±"..="√üüòÄÂ±±"}
output         : '√üüòÄÂ±±'


error: 
  --> SQL:1:6
  |
1 | CAST(CAST(NULL AS BINARY) AS STRING)
  |      ^^^^^^^^^^^^^^^^^^^^ unable to cast type `NULL` to type `Binary`, during run expr: `to_string(CAST(NULL AS Binary))`



ast            : CAST(CAST(NULL AS BINARY NULL) AS STRING NULL)
raw expr       : CAST(CAST(NULL AS Binary NULL) AS String NULL)
checked expr   : CAST(CAST(NULL AS Binary NULL) AS String NULL)
optimized expr : NULL
output type    : String NULL
output domain  : {NULL}
output         : NULL


ast            : CAST(CAST(a AS BINARY) AS STRING)
raw expr       : CAST(CAST(a::String AS Binary) AS String)
checked expr   : to_string<Binary>(to_binary<String>(a))
evaluation:
+--------+-------------------+-------------+
|        | a                 | Output      |
+--------+-------------------+-------------+
| Type   | String            | String      |
| Domain | {"Abc"..="√üüòÄÂ±±"} | Unknown     |
| Row 0  | 'Abc'             | 'Abc'       |
| Row 1  | 'Dobr√Ω den'       | 'Dobr√Ω den' |
| Row 2  | '√üüòÄÂ±±'           | '√üüòÄÂ±±'     |
+--------+-------------------+-------------+
evaluation (internal):
+--------+-------------------------------------+
| Column | Data                                |
+--------+-------------------------------------+
| a      | StringColumn[Abc, Dobr√Ω den, √üüòÄÂ±±] |
| Output | StringColumn[Abc, Dobr√Ω den, √üüòÄÂ±±] |
+--------+-------------------------------------+


error: 
  --> SQL:1:6
  |
1 | CAST(CAST(a AS BINARY) AS STRING)
  |      ^^^^^^^^^^^^^^^^^ unable to cast `NULL` to type `Binary`, during run expr: `to_string(CAST(a AS Binary))`



ast            : CAST(CAST(a AS BINARY NULL) AS STRING NULL)
raw expr       : CAST(CAST(a::String NULL AS Binary NULL) AS String NULL)
checked expr   : CAST(CAST(a AS Binary NULL) AS String NULL)
evaluation:
+--------+--------------------------------+-------------+
|        | a                              | Output      |
+--------+--------------------------------+-------------+
| Type   | String NULL                    | String NULL |
| Domain | {"Abc"..="Dobr√Ω den"} ‚à™ {NULL} | Unknown     |
| Row 0  | 'Abc'                          | 'Abc'       |
| Row 1  | 'Dobr√Ω den'                    | 'Dobr√Ω den' |
| Row 2  | NULL                           | NULL        |
+--------+--------------------------------+-------------+
evaluation (internal):
+--------+----------------------------------------------------------------------------------------+
| Column | Data                                                                                   |
+--------+----------------------------------------------------------------------------------------+
| a      | NullableColumn { column: StringColumn[Abc, Dobr√Ω den, √üüòÄÂ±±], validity: [0b_____011] } |
| Output | NullableColumn { column: StringColumn[Abc, Dobr√Ω den, √üüòÄÂ±±], validity: [0b_____011] } |
+--------+----------------------------------------------------------------------------------------+


ast            : TRY_CAST(0 AS UINT8)
raw expr       : TRY_CAST(0 AS UInt8)
checked expr   : TRY_CAST(0_u8 AS UInt8 NULL)
optimized expr : 0_u8
output type    : UInt8 NULL
output domain  : {0..=0}
output         : 0


ast            : TRY_CAST(0 AS UINT8 NULL)
raw expr       : TRY_CAST(0 AS UInt8 NULL)
checked expr   : TRY_CAST(0_u8 AS UInt8 NULL)
optimized expr : 0_u8
output type    : UInt8 NULL
output domain  : {0..=0}
output         : 0


ast            : TRY_CAST('str' AS STRING)
raw expr       : TRY_CAST('str' AS String)
checked expr   : TRY_CAST("str" AS String NULL)
optimized expr : "str"
output type    : String NULL
output domain  : {"str"..="str"}
output         : 'str'


ast            : TRY_CAST('str' AS STRING NULL)
raw expr       : TRY_CAST('str' AS String NULL)
checked expr   : TRY_CAST("str" AS String NULL)
optimized expr : "str"
output type    : String NULL
output domain  : {"str"..="str"}
output         : 'str'


ast            : TRY_CAST(NULL AS UINT8)
raw expr       : TRY_CAST(NULL AS UInt8)
checked expr   : try_to_uint8<Variant NULL>(CAST(NULL AS Variant NULL))
optimized expr : NULL
output type    : UInt8 NULL
output domain  : {NULL}
output         : NULL


ast            : TRY_CAST(NULL AS UINT8 NULL)
raw expr       : TRY_CAST(NULL AS UInt8 NULL)
checked expr   : TRY_CAST(NULL AS UInt8 NULL)
optimized expr : NULL
output type    : UInt8 NULL
output domain  : {NULL}
output         : NULL


ast            : TRY_CAST(NULL AS STRING)
raw expr       : TRY_CAST(NULL AS String)
checked expr   : try_to_string<Variant NULL>(CAST(NULL AS Variant NULL))
optimized expr : NULL
output type    : String NULL
output domain  : {NULL}
output         : NULL


ast            : TRY_CAST(NULL AS STRING NULL)
raw expr       : TRY_CAST(NULL AS String NULL)
checked expr   : TRY_CAST(NULL AS String NULL)
optimized expr : NULL
output type    : String NULL
output domain  : {NULL}
output         : NULL


ast            : TRY_CAST(1024 AS UINT8)
raw expr       : TRY_CAST(1024 AS UInt8)
checked expr   : try_to_uint8<UInt16>(1024_u16)
optimized expr : NULL
output type    : UInt8 NULL
output domain  : {NULL}
output         : NULL


ast            : TRY_CAST(a AS UINT8)
raw expr       : TRY_CAST(a::UInt16 AS UInt8)
checked expr   : try_to_uint8<UInt16>(a)
evaluation:
+--------+------------+--------------------+
|        | a          | Output             |
+--------+------------+--------------------+
| Type   | UInt16     | UInt8 NULL         |
| Domain | {0..=1024} | {0..=255} ‚à™ {NULL} |
| Row 0  | 0          | 0                  |
| Row 1  | 64         | 64                 |
| Row 2  | 255        | 255                |
| Row 3  | 512        | NULL               |
| Row 4  | 1024       | NULL               |
+--------+------------+--------------------+
evaluation (internal):
+--------+------------------------------------------------------------------------------+
| Column | Data                                                                         |
+--------+------------------------------------------------------------------------------+
| a      | UInt16([0, 64, 255, 512, 1024])                                              |
| Output | NullableColumn { column: UInt8([0, 64, 255, 0, 0]), validity: [0b___00111] } |
+--------+------------------------------------------------------------------------------+


ast            : TRY_CAST(a AS UINT16)
raw expr       : TRY_CAST(a::Int16 AS UInt16)
checked expr   : try_to_uint16<Int16>(a)
evaluation:
+--------+----------+------------------+
|        | a        | Output           |
+--------+----------+------------------+
| Type   | Int16    | UInt16 NULL      |
| Domain | {-4..=3} | {0..=3} ‚à™ {NULL} |
| Row 0  | 0        | 0                |
| Row 1  | 1        | 1                |
| Row 2  | 2        | 2                |
| Row 3  | 3        | 3                |
| Row 4  | -4       | NULL             |
+--------+----------+------------------+
evaluation (internal):
+--------+----------------------------------------------------------------------------+
| Column | Data                                                                       |
+--------+----------------------------------------------------------------------------+
| a      | Int16([0, 1, 2, 3, -4])                                                    |
| Output | NullableColumn { column: UInt16([0, 1, 2, 3, 0]), validity: [0b___01111] } |
+--------+----------------------------------------------------------------------------+


ast            : TRY_CAST(a AS INT64)
raw expr       : TRY_CAST(a::Int16 AS Int64)
checked expr   : try_to_int64<Int16>(a)
evaluation:
+--------+----------+------------+
|        | a        | Output     |
+--------+----------+------------+
| Type   | Int16    | Int64 NULL |
| Domain | {-4..=3} | {-4..=3}   |
| Row 0  | 0        | 0          |
| Row 1  | 1        | 1          |
| Row 2  | 2        | 2          |
| Row 3  | 3        | 3          |
| Row 4  | -4       | -4         |
+--------+----------+------------+
evaluation (internal):
+--------+----------------------------------------------------------------------------+
| Column | Data                                                                       |
+--------+----------------------------------------------------------------------------+
| a      | Int16([0, 1, 2, 3, -4])                                                    |
| Output | NullableColumn { column: Int64([0, 1, 2, 3, -4]), validity: [0b___11111] } |
+--------+----------------------------------------------------------------------------+


ast            : (TRY_CAST(a AS FLOAT32), TRY_CAST(a AS INT32), TRY_CAST(b AS FLOAT32), TRY_CAST(b AS INT32))
raw expr       : tuple(TRY_CAST(a::UInt64 AS Float32), TRY_CAST(a::UInt64 AS Int32), TRY_CAST(b::Float64 AS Float32), TRY_CAST(b::Float64 AS Int32))
checked expr   : tuple<Float32 NULL, Int32 NULL, Float32 NULL, Int32 NULL>(try_to_float32<UInt64>(a), try_to_int32<UInt64>(a), try_to_float32<Float64>(b), try_to_int32<Float64>(b))
evaluation:
+--------+----------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+------------------------------------------------------------------------------------------------------------+
|        | a                          | b                                                                                                                                                                                                                                                                                                                              | Output                                                                                                     |
+--------+----------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+------------------------------------------------------------------------------------------------------------+
| Type   | UInt64                     | Float64                                                                                                                                                                                                                                                                                                                        | Tuple(Float32 NULL, Int32 NULL, Float32 NULL, Int32 NULL)                                                  |
| Domain | {0..=18446744073709551615} | {-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000..=inf} | ({0..=18446744073709551616}, {0..=2147483647} ‚à™ {NULL}, {-inf..=inf}, {-2147483648..=2147483647} ‚à™ {NULL}) |
| Row 0  | 0                          | 0                                                                                                                                                                                                                                                                                                                              | (0, 0, 0, 0)                                                                                               |
| Row 1  | 1                          | 4294967295                                                                                                                                                                                                                                                                                                                     | (1, 1, 4294967296, NULL)                                                                                   |
| Row 2  | 255                        | 18446744073709551616                                                                                                                                                                                                                                                                                                           | (255, 255, 18446744073709551616, NULL)                                                                     |
| Row 3  | 65535                      | -179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000         | (65535, 65535, -inf, NULL)                                                                                 |
| Row 4  | 4294967295                 | 179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000          | (4294967296, NULL, inf, NULL)                                                                              |
| Row 5  | 18446744073709551615       | inf                                                                                                                                                                                                                                                                                                                            | (18446744073709551616, NULL, inf, NULL)                                                                    |
+--------+----------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+------------------------------------------------------------------------------------------------------------+
evaluation (internal):

| Column | Data|

| a      | UInt64([0, 1, 255, 65535, 4294967295, 18446744073709551615])                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       |
| b      | Float64([0, 4294967295, 18446744073709551616, -179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, 179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, inf]) |
| Output | Tuple([NullableColumn { column: Float32([0, 1, 255, 65535, 4294967296, 18446744073709551616]), validity: [0b__111111] }, NullableColumn { column: Int32([0, 1, 255, 65535, 0, 0]), validity: [0b__001111] }, NullableColumn { column: Float32([0, 4294967296, 18446744073709551616, -inf, inf, inf]), validity: [0b__111111] }, NullableColumn { column: Int32([0, 0, 0, 0, 0, 0]), validity: [0b__000001] }])                                                                                                                                                                                                                                                                                     |
+--------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+


ast            : TRY_CAST([[a, b], NULL, NULL] AS Array(Array(Int8)))
raw expr       : TRY_CAST(array(array(a::Int16, b::Int16), NULL, NULL) AS Array(Array(Int8)))
checked expr   : TRY_CAST(array<T0=Array(Int16) NULL><T0, T0, T0>(CAST(array<T0=Int16><T0, T0>(a, b) AS Array(Int16) NULL), CAST(NULL AS Array(Int16) NULL), CAST(NULL AS Array(Int16) NULL)) AS Array(Array(Int8 NULL) NULL) NULL)
optimized expr : TRY_CAST(array<T0=Array(Int16) NULL><T0, T0, T0>(CAST(array<T0=Int16><T0, T0>(a, b) AS Array(Int16) NULL), NULL, NULL) AS Array(Array(Int8 NULL) NULL) NULL)
evaluation:
+--------+-----------+------------+------------------------------------+
|        | a         | b          | Output                             |
+--------+-----------+------------+------------------------------------+
| Type   | Int16     | Int16      | Array(Array(Int8 NULL) NULL) NULL  |
| Domain | {0..=255} | {-129..=0} | [[{-128..=127} ‚à™ {NULL}] ‚à™ {NULL}] |
| Row 0  | 0         | 0          | [[0, 0], NULL, NULL]               |
| Row 1  | 1         | -1         | [[1, -1], NULL, NULL]              |
| Row 2  | 2         | -127       | [[2, -127], NULL, NULL]            |
| Row 3  | 127       | -128       | [[127, -128], NULL, NULL]          |
| Row 4  | 255       | -129       | [[NULL, NULL], NULL, NULL]         |
+--------+-----------+------------+------------------------------------+
evaluation (internal):
+--------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| Column | Data                                                                                                                                                                                                                                                                                                                                                                        |
+--------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| a      | Int16([0, 1, 2, 127, 255])                                                                                                                                                                                                                                                                                                                                                  |
| b      | Int16([0, -1, -127, -128, -129])                                                                                                                                                                                                                                                                                                                                            |
| Output | NullableColumn { column: ArrayColumn { values: NullableColumn { column: ArrayColumn { values: NullableColumn { column: Int8([0, 0, 1, -1, 2, -127, 127, -128, 0, 0]), validity: [0b11111111, 0b______00] }, offsets: [0, 2, 2, 2, 4, 4, 4, 6, 6, 6, 8, 8, 8, 10, 10, 10] }, validity: [0b01001001, 0b_0010010] }, offsets: [0, 3, 6, 9, 12, 15] }, validity: [0b___11111] } |
+--------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+


ast            : TRY_CAST((a, b, NULL) AS TUPLE(Int8, UInt8, Boolean NULL))
raw expr       : TRY_CAST(tuple(a::Int16, b::Int16, NULL) AS Tuple(Int8, UInt8, Boolean NULL))
checked expr   : TRY_CAST(tuple<Int16, Int16, NULL>(a, b, NULL) AS Tuple(Int8 NULL, UInt8 NULL, Boolean NULL) NULL)
evaluation:
+--------+-----------+------------+-------------------------------------------------+
|        | a         | b          | Output                                          |
+--------+-----------+------------+-------------------------------------------------+
| Type   | Int16     | Int16      | Tuple(Int8 NULL, UInt8 NULL, Boolean NULL) NULL |
| Domain | {0..=256} | {-129..=1} | ({0..=127} ‚à™ {NULL}, {0..=1} ‚à™ {NULL}, {NULL})  |
| Row 0  | 0         | 0          | (0, 0, NULL)                                    |
| Row 1  | 1         | 1          | (1, 1, NULL)                                    |
| Row 2  | 2         | -127       | (2, NULL, NULL)                                 |
| Row 3  | 127       | -128       | (127, NULL, NULL)                               |
| Row 4  | 256       | -129       | (NULL, NULL, NULL)                              |
+--------+-----------+------------+-------------------------------------------------+
evaluation (internal):
+--------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| Column | Data                                                                                                                                                                                                                                                                                        |
+--------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| a      | Int16([0, 1, 2, 127, 256])                                                                                                                                                                                                                                                                  |
| b      | Int16([0, 1, -127, -128, -129])                                                                                                                                                                                                                                                             |
| Output | NullableColumn { column: Tuple([NullableColumn { column: Int8([0, 1, 2, 127, 0]), validity: [0b___01111] }, NullableColumn { column: UInt8([0, 1, 0, 0, 0]), validity: [0b___00011] }, NullableColumn { column: Boolean([0b___00000]), validity: [0b___00000] }]), validity: [0b___11111] } |
+--------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+


ast            : TRY_CAST(a AS INT16)
raw expr       : TRY_CAST(a::Float64 AS Int16)
checked expr   : try_to_int16<Float64>(a)
evaluation:
+--------+--------------+------------+
|        | a            | Output     |
+--------+--------------+------------+
| Type   | Float64      | Int16 NULL |
| Domain | {-4.4..=3.3} | {-4..=3}   |
| Row 0  | 0            | 0          |
| Row 1  | 1.1          | 1          |
| Row 2  | 2.2          | 2          |
| Row 3  | 3.3          | 3          |
| Row 4  | -4.4         | -4         |
+--------+--------------+------------+
evaluation (internal):
+--------+----------------------------------------------------------------------------+
| Column | Data                                                                       |
+--------+----------------------------------------------------------------------------+
| a      | Float64([0, 1.1, 2.2, 3.3, -4.4])                                          |
| Output | NullableColumn { column: Int16([0, 1, 2, 3, -4]), validity: [0b___11111] } |
+--------+----------------------------------------------------------------------------+


ast            : TRY_CAST(b AS INT16)
raw expr       : TRY_CAST(b::Int8 AS Int16)
checked expr   : try_to_int16<Int8>(b)
evaluation:
+--------+----------+------------+
|        | b        | Output     |
+--------+----------+------------+
| Type   | Int8     | Int16 NULL |
| Domain | {-4..=3} | {-4..=3}   |
| Row 0  | 0        | 0          |
| Row 1  | 1        | 1          |
| Row 2  | 2        | 2          |
| Row 3  | 3        | 3          |
| Row 4  | -4       | -4         |
+--------+----------+------------+
evaluation (internal):
+--------+----------------------------------------------------------------------------+
| Column | Data                                                                       |
+--------+----------------------------------------------------------------------------+
| b      | Int8([0, 1, 2, 3, -4])                                                     |
| Output | NullableColumn { column: Int16([0, 1, 2, 3, -4]), validity: [0b___11111] } |
+--------+----------------------------------------------------------------------------+


ast            : TRY_CAST(a AS UINT16)
raw expr       : TRY_CAST(a::Int16 AS UInt16)
checked expr   : try_to_uint16<Int16>(a)
evaluation:
+--------+----------+------------------+
|        | a        | Output           |
+--------+----------+------------------+
| Type   | Int16    | UInt16 NULL      |
| Domain | {-4..=3} | {0..=3} ‚à™ {NULL} |
| Row 0  | 0        | 0                |
| Row 1  | 1        | 1                |
| Row 2  | 2        | 2                |
| Row 3  | 3        | 3                |
| Row 4  | -4       | NULL             |
+--------+----------+------------------+
evaluation (internal):
+--------+----------------------------------------------------------------------------+
| Column | Data                                                                       |
+--------+----------------------------------------------------------------------------+
| a      | Int16([0, 1, 2, 3, -4])                                                    |
| Output | NullableColumn { column: UInt16([0, 1, 2, 3, 0]), validity: [0b___01111] } |
+--------+----------------------------------------------------------------------------+


ast            : TRY_CAST(c AS INT16)
raw expr       : TRY_CAST(c::Int64 AS Int16)
checked expr   : try_to_int16<Int64>(c)
evaluation:
+--------+--------------------+-----------------------+
|        | c                  | Output                |
+--------+--------------------+-----------------------+
| Type   | Int64              | Int16 NULL            |
| Domain | {-4..=11111111111} | {-4..=32767} ‚à™ {NULL} |
| Row 0  | 0                  | 0                     |
| Row 1  | 11111111111        | NULL                  |
| Row 2  | 2                  | 2                     |
| Row 3  | 3                  | 3                     |
| Row 4  | -4                 | -4                    |
+--------+--------------------+-----------------------+
evaluation (internal):
+--------+----------------------------------------------------------------------------+
| Column | Data                                                                       |
+--------+----------------------------------------------------------------------------+
| c      | Int64([0, 11111111111, 2, 3, -4])                                          |
| Output | NullableColumn { column: Int16([0, 0, 2, 3, -4]), validity: [0b___11101] } |
+--------+----------------------------------------------------------------------------+


ast            : TRY_CAST(NULL AS VARIANT)
raw expr       : TRY_CAST(NULL AS Variant)
checked expr   : try_to_variant<T0=NULL><T0>(NULL)
optimized expr : NULL
output type    : Variant NULL
output domain  : {NULL}
output         : NULL


ast            : TRY_CAST(0 AS VARIANT)
raw expr       : TRY_CAST(0 AS Variant)
checked expr   : try_to_variant<T0=UInt8><T0>(0_u8)
optimized expr : 0x200000002000000100
output type    : Variant NULL
output domain  : Undefined
output         : '0'


ast            : TRY_CAST(-1 AS VARIANT)
raw expr       : TRY_CAST(minus(1) AS Variant)
checked expr   : try_to_variant<T0=Int16><T0>(minus<UInt8>(1_u8))
optimized expr : 0x200000002000000240ff
output type    : Variant NULL
output domain  : Undefined
output         : '-1'


ast            : TRY_CAST(1.1 AS VARIANT)
raw expr       : TRY_CAST(1.1 AS Variant)
checked expr   : try_to_variant<T0=Decimal(2, 1)><T0>(1.1_d128(2,1))
optimized expr : 0x2000000020000009603ff199999999999a
output type    : Variant NULL
output domain  : Undefined
output         : '1.1'


ast            : TRY_CAST('üç¶ „ÅåÁæéÂë≥„Åó„ÅÑ' AS VARIANT)
raw expr       : TRY_CAST('üç¶ „ÅåÁæéÂë≥„Åó„ÅÑ' AS Variant)
checked expr   : try_parse_json<String>("üç¶ „ÅåÁæéÂë≥„Åó„ÅÑ")
optimized expr : NULL
output type    : Variant NULL
output domain  : {NULL}
output         : NULL


ast            : TRY_CAST([0, 1, 2] AS VARIANT)
raw expr       : TRY_CAST(array(0, 1, 2) AS Variant)
checked expr   : try_to_variant<T0=Array(UInt8)><T0>(array<T0=UInt8><T0, T0, T0>(0_u8, 1_u8, 2_u8))
optimized expr : 0x800000032000000120000002200000020050015002
output type    : Variant NULL
output domain  : Undefined
output         : '[0,1,2]'


ast            : TRY_CAST([0::VARIANT, '"a"'::VARIANT] AS VARIANT)
raw expr       : TRY_CAST(array(CAST(0 AS Variant), CAST('"a"' AS Variant)) AS Variant)
checked expr   : try_to_variant<T0=Array(Variant)><T0>(array<T0=Variant><T0, T0>(to_variant<T0=UInt8><T0>(0_u8), parse_json<String>("\"a\"")))
optimized expr : 0x8000000220000001100000010061
output type    : Variant NULL
output domain  : Undefined
output         : '[0,"a"]'


ast            : TRY_CAST(to_timestamp(1000000) AS VARIANT)
raw expr       : TRY_CAST(to_timestamp(1000000) AS Variant)
checked expr   : try_to_variant<T0=Timestamp><T0>(to_timestamp<Int64>(to_int64<UInt32>(1000000_u32)))
optimized expr : 0x200000001000001a313937302d30312d31322031333a34363a34302e303030303030
output type    : Variant NULL
output domain  : Undefined
output         : '"1970-01-12 13:46:40.000000"'


ast            : TRY_CAST(false AS VARIANT)
raw expr       : TRY_CAST(false AS Variant)
checked expr   : try_to_variant<T0=Boolean><T0>(false)
optimized expr : 0x2000000030000000
output type    : Variant NULL
output domain  : Undefined
output         : 'false'


ast            : TRY_CAST(true AS VARIANT)
raw expr       : TRY_CAST(true AS Variant)
checked expr   : try_to_variant<T0=Boolean><T0>(true)
optimized expr : 0x2000000040000000
output type    : Variant NULL
output domain  : Undefined
output         : 'true'


ast            : TRY_CAST(TRY_CAST('"üç¶ „ÅåÁæéÂë≥„Åó„ÅÑ"' AS VARIANT) AS VARIANT)
raw expr       : TRY_CAST(TRY_CAST('"üç¶ „ÅåÁæéÂë≥„Åó„ÅÑ"' AS Variant) AS Variant)
checked expr   : try_parse_json<String>("\"üç¶ „ÅåÁæéÂë≥„Åó„ÅÑ\"")
optimized expr : 0x2000000010000014f09f8da620e3818ce7be8ee591b3e38197e38184
output type    : Variant NULL
output domain  : Undefined
output         : '"üç¶ „ÅåÁæéÂë≥„Åó„ÅÑ"'


ast            : TRY_CAST((1,) AS VARIANT)
raw expr       : TRY_CAST(tuple(1) AS Variant)
checked expr   : try_to_variant<T0=Tuple(UInt8,)><T0>(tuple<UInt8>(1_u8))
optimized expr : 0x400000011000000120000002315001
output type    : Variant NULL
output domain  : Undefined
output         : '{"1":1}'


ast            : TRY_CAST((1, 2) AS VARIANT)
raw expr       : TRY_CAST(tuple(1, 2) AS Variant)
checked expr   : try_to_variant<T0=Tuple(UInt8, UInt8)><T0>(tuple<UInt8, UInt8>(1_u8, 2_u8))
optimized expr : 0x4000000210000001100000012000000220000002313250015002
output type    : Variant NULL
output domain  : Undefined
output         : '{"1":1,"2":2}'


ast            : TRY_CAST((false, true) AS VARIANT)
raw expr       : TRY_CAST(tuple(false, true) AS Variant)
checked expr   : try_to_variant<T0=Tuple(Boolean, Boolean)><T0>(tuple<Boolean, Boolean>(false, true))
optimized expr : 0x40000002100000011000000130000000400000003132
output type    : Variant NULL
output domain  : Undefined
output         : '{"1":false,"2":true}'


ast            : TRY_CAST(('a',) AS VARIANT)
raw expr       : TRY_CAST(tuple('a') AS Variant)
checked expr   : try_to_variant<T0=Tuple(String,)><T0>(tuple<String>("a"))
optimized expr : 0x4000000110000001100000013161
output type    : Variant NULL
output domain  : Undefined
output         : '{"1":"a"}'


ast            : TRY_CAST((1, 2, (false, true, ('a',))) AS VARIANT)
raw expr       : TRY_CAST(tuple(1, 2, tuple(false, true, tuple('a'))) AS Variant)
checked expr   : try_to_variant<T0=Tuple(UInt8, UInt8, Tuple(Boolean, Boolean, Tuple(String,)))><T0>(tuple<UInt8, UInt8, Tuple(Boolean, Boolean, Tuple(String,))>(1_u8, 2_u8, tuple<Boolean, Boolean, Tuple(String,)>(false, true, tuple<String>("a"))))
optimized expr : 0x4000000310000001100000011000000120000002200000025000002d313233500150024000000310000001100000011000000130000000400000005000000e3132334000000110000001100000013161
output type    : Variant NULL
output domain  : Undefined
output         : '{"1":1,"2":2,"3":{"1":false,"2":true,"3":{"1":"a"}}}'


ast            : TRY_CAST(a AS VARIANT)
raw expr       : TRY_CAST(a::String NULL AS Variant)
checked expr   : try_parse_json<String NULL>(a)
evaluation:
+--------+-------------------------------+--------------------+
|        | a                             | Output             |
+--------+-------------------------------+--------------------+
| Type   | String NULL                   | Variant NULL       |
| Domain | {"[1,2,3]"..="true"} ‚à™ {NULL} | Undefined ‚à™ {NULL} |
| Row 0  | 'true'                        | 'true'             |
| Row 1  | NULL                          | NULL               |
| Row 2  | '[1,2,3]'                     | '[1,2,3]'          |
+--------+-------------------------------+--------------------+
evaluation (internal):
+--------+------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| Column | Data                                                                                                                                                             |
+--------+------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| a      | NullableColumn { column: StringColumn[true, {"k":"v"}, [1,2,3]], validity: [0b_____101] }                                                                        |
| Output | NullableColumn { column: BinaryColumn { data: 0x200000004000000080000003200000022000000220000002500150025003, offsets: [0, 8, 8, 30] }, validity: [0b_____101] } |
+--------+------------------------------------------------------------------------------------------------------------------------------------------------------------------+


ast            : TRY_CAST(a AS VARIANT)
raw expr       : TRY_CAST(a::Bitmap AS Variant)
checked expr   : try_to_variant<T0=Bitmap><T0>(a)
evaluation:
+--------+-------------+---------------+
|        | a           | Output        |
+--------+-------------+---------------+
| Type   | Bitmap      | Variant NULL  |
| Domain | Undefined   | Undefined     |
| Row 0  | '0,1,2,3,4' | '[0,1,2,3,4]' |
| Row 1  | '1,2,3,4,5' | '[1,2,3,4,5]' |
| Row 2  | '2,3,4,5,6' | '[2,3,4,5,6]' |
| Row 3  | '3,4,5,6,7' | '[3,4,5,6,7]' |
+--------+-------------+---------------+
evaluation (internal):
+--------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| Column | Data                                                                                                                                                                                                                                                                                                                                                                                       |
+--------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| a      | BinaryColumn { data: 0x0100000000000000000000003a300000010000000000040010000000000001000200030004000100000000000000000000003a300000010000000000040010000000010002000300040005000100000000000000000000003a300000010000000000040010000000020003000400050006000100000000000000000000003a30000001000000000004001000000003000400050006000700, offsets: [0, 38, 76, 114, 152] }                  |
| Output | NullableColumn { column: BinaryColumn { data: 0x800000052000000120000002200000022000000220000002005001500250035004800000052000000220000002200000022000000220000002500150025003500450058000000520000002200000022000000220000002200000025002500350045005500680000005200000022000000220000002200000022000000250035004500550065007, offsets: [0, 33, 67, 101, 135] }, validity: [0b____1111] } |
+--------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+


ast            : TRY_CAST(-30610224000000001 AS TIMESTAMP)
raw expr       : TRY_CAST(minus(30610224000000001) AS Timestamp)
checked expr   : try_to_timestamp<Int64>(minus<UInt64>(30610224000000001_u64))
optimized expr : -30610224000000001
output type    : Timestamp NULL
output domain  : {-30610224000000001..=-30610224000000001}
output         : '0999-12-31 23:59:59.999999'


ast            : TRY_CAST(-315360000000000 AS TIMESTAMP)
raw expr       : TRY_CAST(minus(315360000000000) AS Timestamp)
checked expr   : try_to_timestamp<Int64>(minus<UInt64>(315360000000000_u64))
optimized expr : -315360000000000
output type    : Timestamp NULL
output domain  : {-315360000000000..=-315360000000000}
output         : '1960-01-04 00:00:00.000000'


ast            : TRY_CAST(-315360000000 AS TIMESTAMP)
raw expr       : TRY_CAST(minus(315360000000) AS Timestamp)
checked expr   : try_to_timestamp<Int64>(minus<UInt64>(315360000000_u64))
optimized expr : -315360000000000
output type    : Timestamp NULL
output domain  : {-315360000000000..=-315360000000000}
output         : '1960-01-04 00:00:00.000000'


ast            : TRY_CAST(-100 AS TIMESTAMP)
raw expr       : TRY_CAST(minus(100) AS Timestamp)
checked expr   : try_to_timestamp<Int64>(to_int64<Int16>(minus<UInt8>(100_u8)))
optimized expr : -100000000
output type    : Timestamp NULL
output domain  : {-100000000..=-100000000}
output         : '1969-12-31 23:58:20.000000'


ast            : TRY_CAST(-0 AS TIMESTAMP)
raw expr       : TRY_CAST(minus(0) AS Timestamp)
checked expr   : try_to_timestamp<Int64>(to_int64<Int16>(minus<UInt8>(0_u8)))
optimized expr : 0
output type    : Timestamp NULL
output domain  : {0..=0}
output         : '1970-01-01 00:00:00.000000'


ast            : TRY_CAST(0 AS TIMESTAMP)
raw expr       : TRY_CAST(0 AS Timestamp)
checked expr   : try_to_timestamp<Int64>(to_int64<UInt8>(0_u8))
optimized expr : 0
output type    : Timestamp NULL
output domain  : {0..=0}
output         : '1970-01-01 00:00:00.000000'


ast            : TRY_CAST(100 AS TIMESTAMP)
raw expr       : TRY_CAST(100 AS Timestamp)
checked expr   : try_to_timestamp<Int64>(to_int64<UInt8>(100_u8))
optimized expr : 100000000
output type    : Timestamp NULL
output domain  : {100000000..=100000000}
output         : '1970-01-01 00:01:40.000000'


ast            : TRY_CAST(315360000000 AS TIMESTAMP)
raw expr       : TRY_CAST(315360000000 AS Timestamp)
checked expr   : try_to_timestamp<Int64>(to_int64<UInt64>(315360000000_u64))
optimized expr : 315360000000000
output type    : Timestamp NULL
output domain  : {315360000000000..=315360000000000}
output         : '1979-12-30 00:00:00.000000'


ast            : TRY_CAST(315360000000000 AS TIMESTAMP)
raw expr       : TRY_CAST(315360000000000 AS Timestamp)
checked expr   : try_to_timestamp<Int64>(to_int64<UInt64>(315360000000000_u64))
optimized expr : 315360000000000
output type    : Timestamp NULL
output domain  : {315360000000000..=315360000000000}
output         : '1979-12-30 00:00:00.000000'


ast            : TRY_CAST(253402300800000000 AS TIMESTAMP)
raw expr       : TRY_CAST(253402300800000000 AS Timestamp)
checked expr   : try_to_timestamp<Int64>(to_int64<UInt64>(253402300800000000_u64))
optimized expr : -62135596800000000
output type    : Timestamp NULL
output domain  : {-62135596800000000..=-62135596800000000}
output         : '0001-01-01 00:00:00.000000'


ast            : TRY_CAST(a AS TIMESTAMP)
raw expr       : TRY_CAST(a::Int64 AS Timestamp)
checked expr   : try_to_timestamp<Int64>(a)
evaluation:
+--------+--------------------------------------+--------------------------------------+
|        | a                                    | Output                               |
+--------+--------------------------------------+--------------------------------------+
| Type   | Int64                                | Timestamp NULL                       |
| Domain | {-315360000000000..=315360000000000} | {-315360000000000..=315360000000000} |
| Row 0  | -315360000000000                     | '1960-01-04 00:00:00.000000'         |
| Row 1  | -315360000000                        | '1960-01-04 00:00:00.000000'         |
| Row 2  | -100                                 | '1969-12-31 23:58:20.000000'         |
| Row 3  | 0                                    | '1970-01-01 00:00:00.000000'         |
| Row 4  | 100                                  | '1970-01-01 00:01:40.000000'         |
| Row 5  | 315360000000                         | '1979-12-30 00:00:00.000000'         |
| Row 6  | 315360000000000                      | '1979-12-30 00:00:00.000000'         |
+--------+--------------------------------------+--------------------------------------+
evaluation (internal):
+--------+-----------------------------------------------------------------------------------------------------------------------------------------------------+
| Column | Data                                                                                                                                                |
+--------+-----------------------------------------------------------------------------------------------------------------------------------------------------+
| a      | Int64([-315360000000000, -315360000000, -100, 0, 100, 315360000000, 315360000000000])                                                               |
| Output | NullableColumn { column: [-315360000000000, -315360000000000, -100000000, 0, 100000000, 315360000000000, 315360000000000], validity: [0b_1111111] } |
+--------+-----------------------------------------------------------------------------------------------------------------------------------------------------+


ast            : TRY_CAST(TO_TIMESTAMP(-315360000000000) AS INT64)
raw expr       : TRY_CAST(TO_TIMESTAMP(minus(315360000000000)) AS Int64)
checked expr   : try_to_int64<Timestamp>(to_timestamp<Int64>(minus<UInt64>(315360000000000_u64)))
optimized expr : -315360000000000_i64
output type    : Int64 NULL
output domain  : {-315360000000000..=-315360000000000}
output         : -315360000000000


ast            : TRY_CAST(TO_TIMESTAMP(-315360000000) AS INT64)
raw expr       : TRY_CAST(TO_TIMESTAMP(minus(315360000000)) AS Int64)
checked expr   : try_to_int64<Timestamp>(to_timestamp<Int64>(minus<UInt64>(315360000000_u64)))
optimized expr : -315360000000000_i64
output type    : Int64 NULL
output domain  : {-315360000000000..=-315360000000000}
output         : -315360000000000


ast            : TRY_CAST(TO_TIMESTAMP(-100) AS INT64)
raw expr       : TRY_CAST(TO_TIMESTAMP(minus(100)) AS Int64)
checked expr   : try_to_int64<Timestamp>(to_timestamp<Int64>(to_int64<Int16>(minus<UInt8>(100_u8))))
optimized expr : -100000000_i64
output type    : Int64 NULL
output domain  : {-100000000..=-100000000}
output         : -100000000


ast            : TRY_CAST(TO_TIMESTAMP(-0) AS INT64)
raw expr       : TRY_CAST(TO_TIMESTAMP(minus(0)) AS Int64)
checked expr   : try_to_int64<Timestamp>(to_timestamp<Int64>(to_int64<Int16>(minus<UInt8>(0_u8))))
optimized expr : 0_i64
output type    : Int64 NULL
output domain  : {0..=0}
output         : 0


ast            : TRY_CAST(TO_TIMESTAMP(0) AS INT64)
raw expr       : TRY_CAST(TO_TIMESTAMP(0) AS Int64)
checked expr   : try_to_int64<Timestamp>(to_timestamp<Int64>(to_int64<UInt8>(0_u8)))
optimized expr : 0_i64
output type    : Int64 NULL
output domain  : {0..=0}
output         : 0


ast            : TRY_CAST(TO_TIMESTAMP(100) AS INT64)
raw expr       : TRY_CAST(TO_TIMESTAMP(100) AS Int64)
checked expr   : try_to_int64<Timestamp>(to_timestamp<Int64>(to_int64<UInt8>(100_u8)))
optimized expr : 100000000_i64
output type    : Int64 NULL
output domain  : {100000000..=100000000}
output         : 100000000


ast            : TRY_CAST(TO_TIMESTAMP(315360000000) AS INT64)
raw expr       : TRY_CAST(TO_TIMESTAMP(315360000000) AS Int64)
checked expr   : try_to_int64<Timestamp>(to_timestamp<Int64>(to_int64<UInt64>(315360000000_u64)))
optimized expr : 315360000000000_i64
output type    : Int64 NULL
output domain  : {315360000000000..=315360000000000}
output         : 315360000000000


ast            : TRY_CAST(TO_TIMESTAMP(315360000000000) AS INT64)
raw expr       : TRY_CAST(TO_TIMESTAMP(315360000000000) AS Int64)
checked expr   : try_to_int64<Timestamp>(to_timestamp<Int64>(to_int64<UInt64>(315360000000000_u64)))
optimized expr : 315360000000000_i64
output type    : Int64 NULL
output domain  : {315360000000000..=315360000000000}
output         : 315360000000000


ast            : TRY_CAST(a AS INT64)
raw expr       : TRY_CAST(a::Timestamp AS Int64)
checked expr   : try_to_int64<Timestamp>(a)
evaluation:
+--------+--------------------------------------+--------------------------------------+
|        | a                                    | Output                               |
+--------+--------------------------------------+--------------------------------------+
| Type   | Timestamp                            | Int64 NULL                           |
| Domain | {-315360000000000..=315360000000000} | {-315360000000000..=315360000000000} |
| Row 0  | '1960-01-04 00:00:00.000000'         | -315360000000000                     |
| Row 1  | '1969-12-28 08:24:00.000000'         | -315360000000                        |
| Row 2  | '1969-12-31 23:59:59.999900'         | -100                                 |
| Row 3  | '1970-01-01 00:00:00.000000'         | 0                                    |
| Row 4  | '1970-01-01 00:00:00.000100'         | 100                                  |
| Row 5  | '1970-01-04 15:36:00.000000'         | 315360000000                         |
| Row 6  | '1979-12-30 00:00:00.000000'         | 315360000000000                      |
+--------+--------------------------------------+--------------------------------------+
evaluation (internal):
+--------+------------------------------------------------------------------------------------------------------------------------------------------+
| Column | Data                                                                                                                                     |
+--------+------------------------------------------------------------------------------------------------------------------------------------------+
| a      | [-315360000000000, -315360000000, -100, 0, 100, 315360000000, 315360000000000]                                                           |
| Output | NullableColumn { column: Int64([-315360000000000, -315360000000, -100, 0, 100, 315360000000, 315360000000000]), validity: [0b_1111111] } |
+--------+------------------------------------------------------------------------------------------------------------------------------------------+


ast            : TRY_CAST(-354286 AS DATE)
raw expr       : TRY_CAST(minus(354286) AS Date)
checked expr   : try_to_date<Int64>(minus<UInt32>(354286_u32))
optimized expr : -354286
output type    : Date NULL
output domain  : {-354286..=-354286}
output         : '0999-12-31'


ast            : TRY_CAST(-354285 AS DATE)
raw expr       : TRY_CAST(minus(354285) AS Date)
checked expr   : try_to_date<Int64>(minus<UInt32>(354285_u32))
optimized expr : -354285
output type    : Date NULL
output domain  : {-354285..=-354285}
output         : '1000-01-01'


ast            : TRY_CAST(-100 AS DATE)
raw expr       : TRY_CAST(minus(100) AS Date)
checked expr   : try_to_date<Int64>(to_int64<Int16>(minus<UInt8>(100_u8)))
optimized expr : -100
output type    : Date NULL
output domain  : {-100..=-100}
output         : '1969-09-23'


ast            : TRY_CAST(-0 AS DATE)
raw expr       : TRY_CAST(minus(0) AS Date)
checked expr   : try_to_date<Int64>(to_int64<Int16>(minus<UInt8>(0_u8)))
optimized expr : 0
output type    : Date NULL
output domain  : {0..=0}
output         : '1970-01-01'


ast            : TRY_CAST(0 AS DATE)
raw expr       : TRY_CAST(0 AS Date)
checked expr   : try_to_date<Int64>(to_int64<UInt8>(0_u8))
optimized expr : 0
output type    : Date NULL
output domain  : {0..=0}
output         : '1970-01-01'


ast            : TRY_CAST(100 AS DATE)
raw expr       : TRY_CAST(100 AS Date)
checked expr   : try_to_date<Int64>(to_int64<UInt8>(100_u8))
optimized expr : 100
output type    : Date NULL
output domain  : {100..=100}
output         : '1970-04-11'


ast            : TRY_CAST(2932896 AS DATE)
raw expr       : TRY_CAST(2932896 AS Date)
checked expr   : try_to_date<Int64>(to_int64<UInt32>(2932896_u32))
optimized expr : 2932896
output type    : Date NULL
output domain  : {2932896..=2932896}
output         : '9999-12-31'


ast            : TRY_CAST(2932897 AS DATE)
raw expr       : TRY_CAST(2932897 AS Date)
checked expr   : try_to_date<Int64>(to_int64<UInt32>(2932897_u32))
optimized expr : -719162
output type    : Date NULL
output domain  : {-719162..=-719162}
output         : '0001-01-01'


ast            : TRY_CAST(a AS DATE)
raw expr       : TRY_CAST(a::Int32 AS Date)
checked expr   : try_to_date<Int64>(to_int64<Int32>(a))
evaluation:
+--------+---------------------+---------------------+
|        | a                   | Output              |
+--------+---------------------+---------------------+
| Type   | Int32               | Date NULL           |
| Domain | {-354285..=2932896} | {-354285..=2932896} |
| Row 0  | -354285             | '1000-01-01'        |
| Row 1  | -100                | '1969-09-23'        |
| Row 2  | 0                   | '1970-01-01'        |
| Row 3  | 100                 | '1970-04-11'        |
| Row 4  | 2932896             | '9999-12-31'        |
+--------+---------------------+---------------------+
evaluation (internal):
+--------+-------------------------------------------------------------------------------------+
| Column | Data                                                                                |
+--------+-------------------------------------------------------------------------------------+
| a      | Int32([-354285, -100, 0, 100, 2932896])                                             |
| Output | NullableColumn { column: [-354285, -100, 0, 100, 2932896], validity: [0b___11111] } |
+--------+-------------------------------------------------------------------------------------+


ast            : TRY_CAST(TO_DATE(-354285) AS INT64)
raw expr       : TRY_CAST(TO_DATE(minus(354285)) AS Int64)
checked expr   : try_to_int64<Date>(to_date<Int64>(minus<UInt32>(354285_u32)))
optimized expr : -354285_i64
output type    : Int64 NULL
output domain  : {-354285..=-354285}
output         : -354285


ast            : TRY_CAST(TO_DATE(-100) AS INT64)
raw expr       : TRY_CAST(TO_DATE(minus(100)) AS Int64)
checked expr   : try_to_int64<Date>(to_date<Int64>(to_int64<Int16>(minus<UInt8>(100_u8))))
optimized expr : -100_i64
output type    : Int64 NULL
output domain  : {-100..=-100}
output         : -100


ast            : TRY_CAST(TO_DATE(-0) AS INT64)
raw expr       : TRY_CAST(TO_DATE(minus(0)) AS Int64)
checked expr   : try_to_int64<Date>(to_date<Int64>(to_int64<Int16>(minus<UInt8>(0_u8))))
optimized expr : 0_i64
output type    : Int64 NULL
output domain  : {0..=0}
output         : 0


ast            : TRY_CAST(TO_DATE(0) AS INT64)
raw expr       : TRY_CAST(TO_DATE(0) AS Int64)
checked expr   : try_to_int64<Date>(to_date<Int64>(to_int64<UInt8>(0_u8)))
optimized expr : 0_i64
output type    : Int64 NULL
output domain  : {0..=0}
output         : 0


ast            : TRY_CAST(TO_DATE(100) AS INT64)
raw expr       : TRY_CAST(TO_DATE(100) AS Int64)
checked expr   : try_to_int64<Date>(to_date<Int64>(to_int64<UInt8>(100_u8)))
optimized expr : 100_i64
output type    : Int64 NULL
output domain  : {100..=100}
output         : 100


ast            : TRY_CAST(TO_DATE(2932896) AS INT64)
raw expr       : TRY_CAST(TO_DATE(2932896) AS Int64)
checked expr   : try_to_int64<Date>(to_date<Int64>(to_int64<UInt32>(2932896_u32)))
optimized expr : 2932896_i64
output type    : Int64 NULL
output domain  : {2932896..=2932896}
output         : 2932896


ast            : TRY_CAST(a AS INT64)
raw expr       : TRY_CAST(a::Date AS Int64)
checked expr   : try_to_int64<Date>(a)
evaluation:
+--------+---------------------+---------------------+
|        | a                   | Output              |
+--------+---------------------+---------------------+
| Type   | Date                | Int64 NULL          |
| Domain | {-354285..=2932896} | {-354285..=2932896} |
| Row 0  | '1000-01-01'        | -354285             |
| Row 1  | '1969-09-23'        | -100                |
| Row 2  | '1970-01-01'        | 0                   |
| Row 3  | '1970-04-11'        | 100                 |
| Row 4  | '9999-12-31'        | 2932896             |
+--------+---------------------+---------------------+
evaluation (internal):
+--------+--------------------------------------------------------------------------------------------+
| Column | Data                                                                                       |
+--------+--------------------------------------------------------------------------------------------+
| a      | [-354285, -100, 0, 100, 2932896]                                                           |
| Output | NullableColumn { column: Int64([-354285, -100, 0, 100, 2932896]), validity: [0b___11111] } |
+--------+--------------------------------------------------------------------------------------------+


ast            : TRY_CAST('foo' AS UINT64)
raw expr       : TRY_CAST('foo' AS UInt64)
checked expr   : try_to_uint64<String>("foo")
optimized expr : NULL
output type    : UInt64 NULL
output domain  : {NULL}
output         : NULL


ast            : TRY_CAST('1foo' AS INT32)
raw expr       : TRY_CAST('1foo' AS Int32)
checked expr   : try_to_int32<String>("1foo")
optimized expr : NULL
output type    : Int32 NULL
output domain  : {NULL}
output         : NULL


ast            : TRY_CAST('-1' AS UINT64)
raw expr       : TRY_CAST('-1' AS UInt64)
checked expr   : try_to_uint64<String>("-1")
optimized expr : NULL
output type    : UInt64 NULL
output domain  : {NULL}
output         : NULL


ast            : TRY_CAST('256' AS UINT8)
raw expr       : TRY_CAST('256' AS UInt8)
checked expr   : try_to_uint8<String>("256")
optimized expr : NULL
output type    : UInt8 NULL
output domain  : {NULL}
output         : NULL


ast            : TRY_CAST('1' AS UINT64)
raw expr       : TRY_CAST('1' AS UInt64)
checked expr   : try_to_uint64<String>("1")
optimized expr : 1_u64
output type    : UInt64 NULL
output domain  : {1..=1}
output         : 1


ast            : TRY_CAST(str AS INT64)
raw expr       : TRY_CAST(str::String AS Int64)
checked expr   : try_to_int64<String>(str)
evaluation:
+--------+--------------------------------+-------------------------------------------------------+
|        | str                            | Output                                                |
+--------+--------------------------------+-------------------------------------------------------+
| Type   | String                         | Int64 NULL                                            |
| Domain | {"-1"..="9223372036854775807"} | {-9223372036854775808..=9223372036854775807} ‚à™ {NULL} |
| Row 0  | '-9223372036854775808'         | -9223372036854775808                                  |
| Row 1  | '-1'                           | -1                                                    |
| Row 2  | '0'                            | 0                                                     |
| Row 3  | '1'                            | 1                                                     |
| Row 4  | '9223372036854775807'          | 9223372036854775807                                   |
+--------+--------------------------------+-------------------------------------------------------+
evaluation (internal):
+--------+-----------------------------------------------------------------------------------------------------------------+
| Column | Data                                                                                                            |
+--------+-----------------------------------------------------------------------------------------------------------------+
| str    | StringColumn[-9223372036854775808, -1, 0, 1, 9223372036854775807]                                               |
| Output | NullableColumn { column: Int64([-9223372036854775808, -1, 0, 1, 9223372036854775807]), validity: [0b___11111] } |
+--------+-----------------------------------------------------------------------------------------------------------------+


ast            : TRY_CAST(str AS INT64)
raw expr       : TRY_CAST(str::String NULL AS Int64)
checked expr   : try_to_int64<String NULL>(str)
evaluation:
+--------+------------------------+-------------------------------------------------------+
|        | str                    | Output                                                |
+--------+------------------------+-------------------------------------------------------+
| Type   | String NULL            | Int64 NULL                                            |
| Domain | {"0"..="foo"} ‚à™ {NULL} | {-9223372036854775808..=9223372036854775807} ‚à™ {NULL} |
| Row 0  | 'foo'                  | NULL                                                  |
| Row 1  | NULL                   | NULL                                                  |
| Row 2  | '0'                    | 0                                                     |
| Row 3  | NULL                   | NULL                                                  |
+--------+------------------------+-------------------------------------------------------+
evaluation (internal):
+--------+---------------------------------------------------------------------------------+
| Column | Data                                                                            |
+--------+---------------------------------------------------------------------------------+
| str    | NullableColumn { column: StringColumn[foo, foo, 0, 0], validity: [0b____0101] } |
| Output | NullableColumn { column: Int64([0, 0, 0, 0]), validity: [0b____0100] }          |
+--------+---------------------------------------------------------------------------------+


ast            : TRY_CAST(num AS STRING)
raw expr       : TRY_CAST(num::Int64 AS String)
checked expr   : try_to_string<Int64>(num)
evaluation:
+--------+----------------------------------------------+------------------------+
|        | num                                          | Output                 |
+--------+----------------------------------------------+------------------------+
| Type   | Int64                                        | String NULL            |
| Domain | {-9223372036854775808..=9223372036854775807} | {""..} ‚à™ {NULL}        |
| Row 0  | -9223372036854775808                         | '-9223372036854775808' |
| Row 1  | -1                                           | '-1'                   |
| Row 2  | 0                                            | '0'                    |
| Row 3  | 1                                            | '1'                    |
| Row 4  | 9223372036854775807                          | '9223372036854775807'  |
+--------+----------------------------------------------+------------------------+
evaluation (internal):
+--------+----------------------------------------------------------------------------------------------------------------------+
| Column | Data                                                                                                                 |
+--------+----------------------------------------------------------------------------------------------------------------------+
| num    | Int64([-9223372036854775808, -1, 0, 1, 9223372036854775807])                                                         |
| Output | NullableColumn { column: StringColumn[-9223372036854775808, -1, 0, 1, 9223372036854775807], validity: [0b___11111] } |
+--------+----------------------------------------------------------------------------------------------------------------------+


ast            : TRY_CAST(num AS STRING)
raw expr       : TRY_CAST(num::UInt64 AS String)
checked expr   : try_to_string<UInt64>(num)
evaluation:
+--------+----------------------------+------------------------+
|        | num                        | Output                 |
+--------+----------------------------+------------------------+
| Type   | UInt64                     | String NULL            |
| Domain | {0..=18446744073709551615} | {""..} ‚à™ {NULL}        |
| Row 0  | 0                          | '0'                    |
| Row 1  | 1                          | '1'                    |
| Row 2  | 18446744073709551615       | '18446744073709551615' |
+--------+----------------------------+------------------------+
evaluation (internal):
+--------+---------------------------------------------------------------------------------------------+
| Column | Data                                                                                        |
+--------+---------------------------------------------------------------------------------------------+
| num    | UInt64([0, 1, 18446744073709551615])                                                        |
| Output | NullableColumn { column: StringColumn[0, 1, 18446744073709551615], validity: [0b_____111] } |
+--------+---------------------------------------------------------------------------------------------+


ast            : TRY_CAST('t' AS BOOLEAN)
raw expr       : TRY_CAST('t' AS Boolean)
checked expr   : try_to_boolean<String>("t")
optimized expr : NULL
output type    : Boolean NULL
output domain  : {NULL}
output         : NULL


ast            : TRY_CAST('f' AS BOOLEAN)
raw expr       : TRY_CAST('f' AS Boolean)
checked expr   : try_to_boolean<String>("f")
optimized expr : NULL
output type    : Boolean NULL
output domain  : {NULL}
output         : NULL


ast            : TRY_CAST('0' AS BOOLEAN)
raw expr       : TRY_CAST('0' AS Boolean)
checked expr   : try_to_boolean<String>("0")
optimized expr : NULL
output type    : Boolean NULL
output domain  : {NULL}
output         : NULL


ast            : TRY_CAST('1' AS BOOLEAN)
raw expr       : TRY_CAST('1' AS Boolean)
checked expr   : try_to_boolean<String>("1")
optimized expr : NULL
output type    : Boolean NULL
output domain  : {NULL}
output         : NULL


ast            : TRY_CAST('true' AS BOOLEAN)
raw expr       : TRY_CAST('true' AS Boolean)
checked expr   : try_to_boolean<String>("true")
optimized expr : true
output type    : Boolean NULL
output domain  : {TRUE}
output         : true


ast            : TRY_CAST('false' AS BOOLEAN)
raw expr       : TRY_CAST('false' AS Boolean)
checked expr   : try_to_boolean<String>("false")
optimized expr : false
output type    : Boolean NULL
output domain  : {FALSE}
output         : false


ast            : TRY_CAST('TRUE' AS BOOLEAN)
raw expr       : TRY_CAST('TRUE' AS Boolean)
checked expr   : try_to_boolean<String>("TRUE")
optimized expr : true
output type    : Boolean NULL
output domain  : {TRUE}
output         : true


ast            : TRY_CAST('FaLse' AS BOOLEAN)
raw expr       : TRY_CAST('FaLse' AS Boolean)
checked expr   : try_to_boolean<String>("FaLse")
optimized expr : false
output type    : Boolean NULL
output domain  : {FALSE}
output         : false


ast            : TRY_CAST(bool AS STRING)
raw expr       : TRY_CAST(bool::Boolean AS String)
checked expr   : try_to_string<Boolean>(bool)
evaluation:
+--------+---------------+-----------------+
|        | bool          | Output          |
+--------+---------------+-----------------+
| Type   | Boolean       | String NULL     |
| Domain | {FALSE, TRUE} | {""..} ‚à™ {NULL} |
| Row 0  | false         | 'false'         |
| Row 1  | true          | 'true'          |
+--------+---------------+-----------------+
evaluation (internal):
+--------+------------------------------------------------------------------------------+
| Column | Data                                                                         |
+--------+------------------------------------------------------------------------------+
| bool   | Boolean([0b______10])                                                        |
| Output | NullableColumn { column: StringColumn[false, true], validity: [0b______11] } |
+--------+------------------------------------------------------------------------------+


ast            : TRY_CAST('010.010' AS DECIMAL(5,3))
raw expr       : TRY_CAST('010.010' AS Decimal(5, 3))
checked expr   : try_to_decimal<String>(5, 3)("010.010")
optimized expr : 10.010_d128(5,3)
output type    : Decimal(5, 3) NULL
output domain  : {10.010..=10.010}
output         : 10.010


ast            : TRY_CAST('010.010' AS DECIMAL(5,4))
raw expr       : TRY_CAST('010.010' AS Decimal(5, 4))
checked expr   : try_to_decimal<String>(5, 4)("010.010")
optimized expr : NULL
output type    : Decimal(5, 4) NULL
output domain  : {NULL}
output         : NULL


ast            : TRY_CAST('010.010' AS DECIMAL(5,2))
raw expr       : TRY_CAST('010.010' AS Decimal(5, 2))
checked expr   : try_to_decimal<String>(5, 2)("010.010")
optimized expr : 10.01_d128(5,2)
output type    : Decimal(5, 2) NULL
output domain  : {10.01..=10.01}
output         : 10.01


ast            : TRY_CAST('010.010' AS DECIMAL(4,3))
raw expr       : TRY_CAST('010.010' AS Decimal(4, 3))
checked expr   : try_to_decimal<String>(4, 3)("010.010")
optimized expr : NULL
output type    : Decimal(4, 3) NULL
output domain  : {NULL}
output         : NULL


ast            : TRY_CAST('010.010' AS DECIMAL(4,2))
raw expr       : TRY_CAST('010.010' AS Decimal(4, 2))
checked expr   : try_to_decimal<String>(4, 2)("010.010")
optimized expr : 10.01_d128(4,2)
output type    : Decimal(4, 2) NULL
output domain  : {10.01..=10.01}
output         : 10.01


ast            : TRY_CAST('-1010.010' AS DECIMAL(7,3))
raw expr       : TRY_CAST('-1010.010' AS Decimal(7, 3))
checked expr   : try_to_decimal<String>(7, 3)("-1010.010")
optimized expr : -1010.010_d128(7,3)
output type    : Decimal(7, 3) NULL
output domain  : {-1010.010..=-1010.010}
output         : -1010.010


ast            : TRY_CAST('00' AS DECIMAL(2,1))
raw expr       : TRY_CAST('00' AS Decimal(2, 1))
checked expr   : try_to_decimal<String>(2, 1)("00")
optimized expr : 0.0_d128(2,1)
output type    : Decimal(2, 1) NULL
output domain  : {0.0..=0.0}
output         : 0.0


ast            : TRY_CAST('0.0' AS DECIMAL(2,0))
raw expr       : TRY_CAST('0.0' AS Decimal(2, 0))
checked expr   : try_to_decimal<String>(2, 0)("0.0")
optimized expr : 0_d128(2,0)
output type    : Decimal(2, 0) NULL
output domain  : {0..=0}
output         : 0


ast            : TRY_CAST('.0' AS DECIMAL(1,0))
raw expr       : TRY_CAST('.0' AS Decimal(1, 0))
checked expr   : try_to_decimal<String>(1, 0)(".0")
optimized expr : 0_d128(1,0)
output type    : Decimal(1, 0) NULL
output domain  : {0..=0}
output         : 0


ast            : TRY_CAST('+1.0e-10' AS DECIMAL(11, 10))
raw expr       : TRY_CAST('+1.0e-10' AS Decimal(11, 10))
checked expr   : try_to_decimal<String>(11, 10)("+1.0e-10")
optimized expr : 0.0000000001_d128(11,10)
output type    : Decimal(11, 10) NULL
output domain  : {0.0000000001..=0.0000000001}
output         : 0.0000000001


ast            : TRY_CAST('-1.0e+10' AS DECIMAL(11, 0))
raw expr       : TRY_CAST('-1.0e+10' AS Decimal(11, 0))
checked expr   : try_to_decimal<String>(11, 0)("-1.0e+10")
optimized expr : -10000000000_d128(11,0)
output type    : Decimal(11, 0) NULL
output domain  : {-10000000000..=-10000000000}
output         : -10000000000


ast            : TRY_CAST('-0.000000' AS DECIMAL(11, 0))
raw expr       : TRY_CAST('-0.000000' AS Decimal(11, 0))
checked expr   : try_to_decimal<String>(11, 0)("-0.000000")
optimized expr : 0_d128(11,0)
output type    : Decimal(11, 0) NULL
output domain  : {0..=0}
output         : 0


ast            : TRY_CAST(0 AS BOOLEAN)
raw expr       : TRY_CAST(0 AS Boolean)
checked expr   : try_to_boolean<UInt8>(0_u8)
optimized expr : false
output type    : Boolean NULL
output domain  : {FALSE}
output         : false


ast            : TRY_CAST(1 AS BOOLEAN)
raw expr       : TRY_CAST(1 AS Boolean)
checked expr   : try_to_boolean<UInt8>(1_u8)
optimized expr : true
output type    : Boolean NULL
output domain  : {TRUE}
output         : true


ast            : TRY_CAST(false AS UINT64)
raw expr       : TRY_CAST(false AS UInt64)
checked expr   : try_to_uint64<Boolean>(false)
optimized expr : 0_u64
output type    : UInt64 NULL
output domain  : {0..=0}
output         : 0


ast            : TRY_CAST(true AS INT64)
raw expr       : TRY_CAST(true AS Int64)
checked expr   : try_to_int64<Boolean>(true)
optimized expr : 1_i64
output type    : Int64 NULL
output domain  : {1..=1}
output         : 1


ast            : TRY_CAST(0.0 AS BOOLEAN)
raw expr       : TRY_CAST(0.0 AS Boolean)
checked expr   : try_to_boolean<Float64>(to_float64<Decimal(1, 1)>(0.0_d128(1,1)))
optimized expr : false
output type    : Boolean NULL
output domain  : {FALSE}
output         : false


ast            : TRY_CAST(1.0 AS BOOLEAN)
raw expr       : TRY_CAST(1.0 AS Boolean)
checked expr   : try_to_boolean<Float64>(to_float64<Decimal(2, 1)>(1.0_d128(2,1)))
optimized expr : true
output type    : Boolean NULL
output domain  : {TRUE}
output         : true


ast            : TRY_CAST(false AS FLOAT32)
raw expr       : TRY_CAST(false AS Float32)
checked expr   : try_to_float32<Boolean>(false)
optimized expr : 0_f32
output type    : Float32 NULL
output domain  : {0..=0}
output         : 0


ast            : TRY_CAST(true AS FLOAT64)
raw expr       : TRY_CAST(true AS Float64)
checked expr   : try_to_float64<Boolean>(true)
optimized expr : 1_f64
output type    : Float64 NULL
output domain  : {1..=1}
output         : 1


ast            : TRY_CAST(false AS DECIMAL(4,3))
raw expr       : TRY_CAST(false AS Decimal(4, 3))
checked expr   : try_to_decimal<Boolean>(4, 3)(false)
optimized expr : 0.000_d128(4,3)
output type    : Decimal(4, 3) NULL
output domain  : {0.000..=0.000}
output         : 0.000


ast            : TRY_CAST(true AS DECIMAL(4,2))
raw expr       : TRY_CAST(true AS Decimal(4, 2))
checked expr   : try_to_decimal<Boolean>(4, 2)(true)
optimized expr : 1.00_d128(4,2)
output type    : Decimal(4, 2) NULL
output domain  : {1.00..=1.00}
output         : 1.00


ast            : TRY_CAST(num AS BOOLEAN)
raw expr       : TRY_CAST(num::Int64 AS Boolean)
checked expr   : try_to_boolean<Int64>(num)
evaluation:
+--------+----------+---------------+
|        | num      | Output        |
+--------+----------+---------------+
| Type   | Int64    | Boolean NULL  |
| Domain | {-1..=2} | {FALSE, TRUE} |
| Row 0  | 0        | false         |
| Row 1  | -1       | true          |
| Row 2  | 1        | true          |
| Row 3  | 2        | true          |
+--------+----------+---------------+
evaluation (internal):
+--------+--------------------------------------------------------------------------+
| Column | Data                                                                     |
+--------+--------------------------------------------------------------------------+
| num    | Int64([0, -1, 1, 2])                                                     |
| Output | NullableColumn { column: Boolean([0b____1110]), validity: [0b____1111] } |
+--------+--------------------------------------------------------------------------+


ast            : TRY_CAST(num AS BOOLEAN)
raw expr       : TRY_CAST(num::UInt64 AS Boolean)
checked expr   : try_to_boolean<UInt64>(num)
evaluation:
+--------+---------+---------------+
|        | num     | Output        |
+--------+---------+---------------+
| Type   | UInt64  | Boolean NULL  |
| Domain | {0..=2} | {FALSE, TRUE} |
| Row 0  | 0       | false         |
| Row 1  | 1       | true          |
| Row 2  | 2       | true          |
+--------+---------+---------------+
evaluation (internal):
+--------+--------------------------------------------------------------------------+
| Column | Data                                                                     |
+--------+--------------------------------------------------------------------------+
| num    | UInt64([0, 1, 2])                                                        |
| Output | NullableColumn { column: Boolean([0b_____110]), validity: [0b_____111] } |
+--------+--------------------------------------------------------------------------+


ast            : TRY_CAST(bool AS UINT64)
raw expr       : TRY_CAST(bool::Boolean AS UInt64)
checked expr   : try_to_uint64<Boolean>(bool)
evaluation:
+--------+---------------+-------------+
|        | bool          | Output      |
+--------+---------------+-------------+
| Type   | Boolean       | UInt64 NULL |
| Domain | {FALSE, TRUE} | {0..=1}     |
| Row 0  | false         | 0           |
| Row 1  | true          | 1           |
+--------+---------------+-------------+
evaluation (internal):
+--------+-------------------------------------------------------------------+
| Column | Data                                                              |
+--------+-------------------------------------------------------------------+
| bool   | Boolean([0b______10])                                             |
| Output | NullableColumn { column: UInt64([0, 1]), validity: [0b______11] } |
+--------+-------------------------------------------------------------------+


ast            : TRY_CAST(bool AS INT64)
raw expr       : TRY_CAST(bool::Boolean AS Int64)
checked expr   : try_to_int64<Boolean>(bool)
evaluation:
+--------+---------------+------------+
|        | bool          | Output     |
+--------+---------------+------------+
| Type   | Boolean       | Int64 NULL |
| Domain | {FALSE, TRUE} | {0..=1}    |
| Row 0  | false         | 0          |
| Row 1  | true          | 1          |
+--------+---------------+------------+
evaluation (internal):
+--------+------------------------------------------------------------------+
| Column | Data                                                             |
+--------+------------------------------------------------------------------+
| bool   | Boolean([0b______10])                                            |
| Output | NullableColumn { column: Int64([0, 1]), validity: [0b______11] } |
+--------+------------------------------------------------------------------+


ast            : TRY_CAST(TO_DATE(1) AS TIMESTAMP)
raw expr       : TRY_CAST(TO_DATE(1) AS Timestamp)
checked expr   : try_to_timestamp<Date>(to_date<Int64>(to_int64<UInt8>(1_u8)))
optimized expr : 86400000000
output type    : Timestamp NULL
output domain  : {86400000000..=86400000000}
output         : '1970-01-02 00:00:00.000000'


ast            : TRY_CAST(TO_TIMESTAMP(1) AS DATE)
raw expr       : TRY_CAST(TO_TIMESTAMP(1) AS Date)
checked expr   : try_to_date<Timestamp>(to_timestamp<Int64>(to_int64<UInt8>(1_u8)))
optimized expr : 0
output type    : Date NULL
output domain  : {0..=0}
output         : '1970-01-01'


ast            : TRY_CAST(a AS DATE)
raw expr       : TRY_CAST(a::Timestamp AS Date)
checked expr   : try_to_date<Timestamp>(a)
evaluation:
+--------+--------------------------------------+----------------+
|        | a                                    | Output         |
+--------+--------------------------------------+----------------+
| Type   | Timestamp                            | Date NULL      |
| Domain | {-315360000000000..=315360000000000} | {-3650..=3650} |
| Row 0  | '1960-01-04 00:00:00.000000'         | '1960-01-04'   |
| Row 1  | '1969-12-28 08:24:00.000000'         | '1969-12-28'   |
| Row 2  | '1969-12-31 23:59:59.999900'         | '1969-12-31'   |
| Row 3  | '1970-01-01 00:00:00.000000'         | '1970-01-01'   |
| Row 4  | '1970-01-01 00:00:00.000100'         | '1970-01-01'   |
| Row 5  | '1970-01-04 15:36:00.000000'         | '1970-01-04'   |
| Row 6  | '1979-12-30 00:00:00.000000'         | '1979-12-30'   |
+--------+--------------------------------------+----------------+
evaluation (internal):
+--------+-----------------------------------------------------------------------------------+
| Column | Data                                                                              |
+--------+-----------------------------------------------------------------------------------+
| a      | [-315360000000000, -315360000000, -100, 0, 100, 315360000000, 315360000000000]    |
| Output | NullableColumn { column: [-3650, -4, -1, 0, 0, 3, 3650], validity: [0b_1111111] } |
+--------+-----------------------------------------------------------------------------------+


ast            : TRY_CAST(a AS TIMESTAMP)
raw expr       : TRY_CAST(a::Date AS Timestamp)
checked expr   : try_to_timestamp<Date>(a)
evaluation:
+--------+---------------------+-------------------------------------------+
|        | a                   | Output                                    |
+--------+---------------------+-------------------------------------------+
| Type   | Date                | Timestamp NULL                            |
| Domain | {-354285..=2932896} | {-30610224000000000..=253402214400000000} |
| Row 0  | '1000-01-01'        | '1000-01-01 00:00:00.000000'              |
| Row 1  | '1969-09-23'        | '1969-09-23 00:00:00.000000'              |
| Row 2  | '1970-01-01'        | '1970-01-01 00:00:00.000000'              |
| Row 3  | '1970-04-11'        | '1970-04-11 00:00:00.000000'              |
| Row 4  | '9999-12-31'        | '9999-12-30 22:00:00.000000'              |
+--------+---------------------+-------------------------------------------+
evaluation (internal):
+--------+-------------------------------------------------------------------------------------------------------------------------------+
| Column | Data                                                                                                                          |
+--------+-------------------------------------------------------------------------------------------------------------------------------+
| a      | [-354285, -100, 0, 100, 2932896]                                                                                              |
| Output | NullableColumn { column: [-30610224000000000, -8640000000000, 0, 8640000000000, 253402214400000000], validity: [0b___11111] } |
+--------+-------------------------------------------------------------------------------------------------------------------------------+


ast            : TRY_CAST(TO_DATE(a) AS TIMESTAMP)
raw expr       : TRY_CAST(TO_DATE(a::Int32) AS Timestamp)
checked expr   : try_to_timestamp<Date>(to_date<Int64>(to_int64<Int32>(a)))
evaluation:
+--------+---------------------+-------------------------------------------+
|        | a                   | Output                                    |
+--------+---------------------+-------------------------------------------+
| Type   | Int32               | Timestamp NULL                            |
| Domain | {-354285..=2932896} | {-30610224000000000..=253402214400000000} |
| Row 0  | -354285             | '1000-01-01 00:00:00.000000'              |
| Row 1  | -100                | '1969-09-23 00:00:00.000000'              |
| Row 2  | 0                   | '1970-01-01 00:00:00.000000'              |
| Row 3  | 100                 | '1970-04-11 00:00:00.000000'              |
| Row 4  | 2932896             | '9999-12-30 22:00:00.000000'              |
+--------+---------------------+-------------------------------------------+
evaluation (internal):
+--------+-------------------------------------------------------------------------------------------------------------------------------+
| Column | Data                                                                                                                          |
+--------+-------------------------------------------------------------------------------------------------------------------------------+
| a      | Int32([-354285, -100, 0, 100, 2932896])                                                                                       |
| Output | NullableColumn { column: [-30610224000000000, -8640000000000, 0, 8640000000000, 253402214400000000], validity: [0b___11111] } |
+--------+-------------------------------------------------------------------------------------------------------------------------------+


ast            : TRY_CAST(a AS TIMESTAMP)
raw expr       : TRY_CAST(a::Int64 AS Timestamp)
checked expr   : try_to_timestamp<Int64>(a)
optimized expr : -62135596800000000
evaluation:
+--------+---------------------------------------------+-------------------------------------------+
|        | a                                           | Output                                    |
+--------+---------------------------------------------+-------------------------------------------+
| Type   | Int64                                       | Timestamp NULL                            |
| Domain | {9223372036854775807..=9223372036854775807} | {-62135596800000000..=-62135596800000000} |
| Row 0  | 9223372036854775807                         | '0001-01-01 00:00:00.000000'              |
+--------+---------------------------------------------+-------------------------------------------+
evaluation (internal):
+--------+-------------------------------------------------------------------------+
| Column | Data                                                                    |
+--------+-------------------------------------------------------------------------+
| a      | Int64([9223372036854775807])                                            |
| Output | NullableColumn { column: [-62135596800000000], validity: [0b_______1] } |
+--------+-------------------------------------------------------------------------+


ast            : TRY_CAST(a AS DATE)
raw expr       : TRY_CAST(a::Int64 AS Date)
checked expr   : try_to_date<Int64>(a)
optimized expr : -719162
evaluation:
+--------+---------------------------------------------+---------------------+
|        | a                                           | Output              |
+--------+---------------------------------------------+---------------------+
| Type   | Int64                                       | Date NULL           |
| Domain | {9223372036854775807..=9223372036854775807} | {-719162..=-719162} |
| Row 0  | 9223372036854775807                         | '0001-01-01'        |
+--------+---------------------------------------------+---------------------+
evaluation (internal):
+--------+--------------------------------------------------------------+
| Column | Data                                                         |
+--------+--------------------------------------------------------------+
| a      | Int64([9223372036854775807])                                 |
| Output | NullableColumn { column: [-719162], validity: [0b_______1] } |
+--------+--------------------------------------------------------------+


ast            : TRY_TO_TIMESTAMP('2022')
raw expr       : TRY_TO_TIMESTAMP('2022')
checked expr   : try_to_timestamp<String>("2022")
optimized expr : NULL
output type    : Timestamp NULL
output domain  : {NULL}
output         : NULL


ast            : TRY_TO_TIMESTAMP('2022-01')
raw expr       : TRY_TO_TIMESTAMP('2022-01')
checked expr   : try_to_timestamp<String>("2022-01")
optimized expr : NULL
output type    : Timestamp NULL
output domain  : {NULL}
output         : NULL


ast            : TRY_TO_TIMESTAMP('2022-01-02')
raw expr       : TRY_TO_TIMESTAMP('2022-01-02')
checked expr   : try_to_timestamp<String>("2022-01-02")
optimized expr : 1641081600000000
output type    : Timestamp NULL
output domain  : {1641081600000000..=1641081600000000}
output         : '2022-01-02 00:00:00.000000'


ast            : TRY_TO_TIMESTAMP('A NON-TIMESTAMP STR')
raw expr       : TRY_TO_TIMESTAMP('A NON-TIMESTAMP STR')
checked expr   : try_to_timestamp<String>("A NON-TIMESTAMP STR")
optimized expr : NULL
output type    : Timestamp NULL
output domain  : {NULL}
output         : NULL


ast            : TRY_TO_TIMESTAMP('2022-01-02T03:25:02.868894-07:00')
raw expr       : TRY_TO_TIMESTAMP('2022-01-02T03:25:02.868894-07:00')
checked expr   : try_to_timestamp<String>("2022-01-02T03:25:02.868894-07:00")
optimized expr : 1641119102868894
output type    : Timestamp NULL
output domain  : {1641119102868894..=1641119102868894}
output         : '2022-01-02 10:25:02.868894'


ast            : TRY_TO_TIMESTAMP('2022-01-02 02:00:11')
raw expr       : TRY_TO_TIMESTAMP('2022-01-02 02:00:11')
checked expr   : try_to_timestamp<String>("2022-01-02 02:00:11")
optimized expr : 1641088811000000
output type    : Timestamp NULL
output domain  : {1641088811000000..=1641088811000000}
output         : '2022-01-02 02:00:11.000000'


ast            : TRY_TO_TIMESTAMP('2022-01-02T02:00:22')
raw expr       : TRY_TO_TIMESTAMP('2022-01-02T02:00:22')
checked expr   : try_to_timestamp<String>("2022-01-02T02:00:22")
optimized expr : 1641088822000000
output type    : Timestamp NULL
output domain  : {1641088822000000..=1641088822000000}
output         : '2022-01-02 02:00:22.000000'


ast            : TRY_TO_TIMESTAMP('2022-01-02T01:12:00-07:00')
raw expr       : TRY_TO_TIMESTAMP('2022-01-02T01:12:00-07:00')
checked expr   : try_to_timestamp<String>("2022-01-02T01:12:00-07:00")
optimized expr : 1641111120000000
output type    : Timestamp NULL
output domain  : {1641111120000000..=1641111120000000}
output         : '2022-01-02 08:12:00.000000'


ast            : TRY_TO_TIMESTAMP('2022-01-02T01')
raw expr       : TRY_TO_TIMESTAMP('2022-01-02T01')
checked expr   : try_to_timestamp<String>("2022-01-02T01")
optimized expr : 1641085200000000
output type    : Timestamp NULL
output domain  : {1641085200000000..=1641085200000000}
output         : '2022-01-02 01:00:00.000000'


ast            : TRY_TO_TIMESTAMP(a)
raw expr       : TRY_TO_TIMESTAMP(a::String)
checked expr   : try_to_timestamp<String>(a)
evaluation:
+--------+-----------------------------------------------------+----------------------------------------------------+
|        | a                                                   | Output                                             |
+--------+-----------------------------------------------------+----------------------------------------------------+
| Type   | String                                              | Timestamp NULL                                     |
| Domain | {"2022-01-02"..="2022-01-02T03:25:02.868894-07:00"} | {-62135596800000000..=253402300799999999} ‚à™ {NULL} |
| Row 0  | '2022-01-02'                                        | '2022-01-02 00:00:00.000000'                       |
| Row 1  | '2022-01-02T03:25:02.868894-07:00'                  | '2022-01-02 10:25:02.868894'                       |
| Row 2  | '2022-01-02 02:00:11'                               | '2022-01-02 02:00:11.000000'                       |
| Row 3  | '2022-01-02T01:12:00-07:00'                         | '2022-01-02 08:12:00.000000'                       |
| Row 4  | '2022-01-02T01'                                     | '2022-01-02 01:00:00.000000'                       |
+--------+-----------------------------------------------------+----------------------------------------------------+
evaluation (internal):
+--------+-----------------------------------------------------------------------------------------------------------------------------------------------+
| Column | Data                                                                                                                                          |
+--------+-----------------------------------------------------------------------------------------------------------------------------------------------+
| a      | StringColumn[2022-01-02, 2022-01-02T03:25:02.868894-07:00, 2022-01-02 02:00:11, 2022-01-02T01:12:00-07:00, 2022-01-02T01]                     |
| Output | NullableColumn { column: [1641081600000000, 1641119102868894, 1641088811000000, 1641111120000000, 1641085200000000], validity: [0b___11111] } |
+--------+-----------------------------------------------------------------------------------------------------------------------------------------------+


ast            : TRY_CAST(TO_TIMESTAMP(-315360000000000) AS VARCHAR)
raw expr       : TRY_CAST(TO_TIMESTAMP(minus(315360000000000)) AS String)
checked expr   : try_to_string<Timestamp>(to_timestamp<Int64>(minus<UInt64>(315360000000000_u64)))
optimized expr : "1960-01-04 00:00:00.000000"
output type    : String NULL
output domain  : {"1960-01-04 00:00:00.000000"..="1960-01-04 00:00:00.000000"}
output         : '1960-01-04 00:00:00.000000'


ast            : TRY_CAST(TO_TIMESTAMP(-315360000000) AS VARCHAR)
raw expr       : TRY_CAST(TO_TIMESTAMP(minus(315360000000)) AS String)
checked expr   : try_to_string<Timestamp>(to_timestamp<Int64>(minus<UInt64>(315360000000_u64)))
optimized expr : "1960-01-04 00:00:00.000000"
output type    : String NULL
output domain  : {"1960-01-04 00:00:00.000000"..="1960-01-04 00:00:00.000000"}
output         : '1960-01-04 00:00:00.000000'


ast            : TRY_CAST(TO_TIMESTAMP(-100) AS VARCHAR)
raw expr       : TRY_CAST(TO_TIMESTAMP(minus(100)) AS String)
checked expr   : try_to_string<Timestamp>(to_timestamp<Int64>(to_int64<Int16>(minus<UInt8>(100_u8))))
optimized expr : "1969-12-31 23:58:20.000000"
output type    : String NULL
output domain  : {"1969-12-31 23:58:20.000000"..="1969-12-31 23:58:20.000000"}
output         : '1969-12-31 23:58:20.000000'


ast            : TRY_CAST(TO_TIMESTAMP(-0) AS VARCHAR)
raw expr       : TRY_CAST(TO_TIMESTAMP(minus(0)) AS String)
checked expr   : try_to_string<Timestamp>(to_timestamp<Int64>(to_int64<Int16>(minus<UInt8>(0_u8))))
optimized expr : "1970-01-01 00:00:00.000000"
output type    : String NULL
output domain  : {"1970-01-01 00:00:00.000000"..="1970-01-01 00:00:00.000000"}
output         : '1970-01-01 00:00:00.000000'


ast            : TRY_CAST(TO_TIMESTAMP(0) AS VARCHAR)
raw expr       : TRY_CAST(TO_TIMESTAMP(0) AS String)
checked expr   : try_to_string<Timestamp>(to_timestamp<Int64>(to_int64<UInt8>(0_u8)))
optimized expr : "1970-01-01 00:00:00.000000"
output type    : String NULL
output domain  : {"1970-01-01 00:00:00.000000"..="1970-01-01 00:00:00.000000"}
output         : '1970-01-01 00:00:00.000000'


ast            : TRY_CAST(TO_TIMESTAMP(100) AS VARCHAR)
raw expr       : TRY_CAST(TO_TIMESTAMP(100) AS String)
checked expr   : try_to_string<Timestamp>(to_timestamp<Int64>(to_int64<UInt8>(100_u8)))
optimized expr : "1970-01-01 00:01:40.000000"
output type    : String NULL
output domain  : {"1970-01-01 00:01:40.000000"..="1970-01-01 00:01:40.000000"}
output         : '1970-01-01 00:01:40.000000'


ast            : TRY_CAST(TO_TIMESTAMP(315360000000) AS VARCHAR)
raw expr       : TRY_CAST(TO_TIMESTAMP(315360000000) AS String)
checked expr   : try_to_string<Timestamp>(to_timestamp<Int64>(to_int64<UInt64>(315360000000_u64)))
optimized expr : "1979-12-30 00:00:00.000000"
output type    : String NULL
output domain  : {"1979-12-30 00:00:00.000000"..="1979-12-30 00:00:00.000000"}
output         : '1979-12-30 00:00:00.000000'


ast            : TRY_CAST(TO_TIMESTAMP(315360000000000) AS VARCHAR)
raw expr       : TRY_CAST(TO_TIMESTAMP(315360000000000) AS String)
checked expr   : try_to_string<Timestamp>(to_timestamp<Int64>(to_int64<UInt64>(315360000000000_u64)))
optimized expr : "1979-12-30 00:00:00.000000"
output type    : String NULL
output domain  : {"1979-12-30 00:00:00.000000"..="1979-12-30 00:00:00.000000"}
output         : '1979-12-30 00:00:00.000000'


ast            : TRY_CAST(a AS VARCHAR)
raw expr       : TRY_CAST(a::Timestamp AS String)
checked expr   : try_to_string<Timestamp>(a)
evaluation:
+--------+--------------------------------------+------------------------------+
|        | a                                    | Output                       |
+--------+--------------------------------------+------------------------------+
| Type   | Timestamp                            | String NULL                  |
| Domain | {-315360000000000..=315360000000000} | {""..}                       |
| Row 0  | '1960-01-04 00:00:00.000000'         | '1960-01-04 00:00:00.000000' |
| Row 1  | '1969-12-28 08:24:00.000000'         | '1969-12-28 08:24:00.000000' |
| Row 2  | '1969-12-31 23:59:59.999900'         | '1969-12-31 23:59:59.999900' |
| Row 3  | '1970-01-01 00:00:00.000000'         | '1970-01-01 00:00:00.000000' |
| Row 4  | '1970-01-01 00:00:00.000100'         | '1970-01-01 00:00:00.000100' |
| Row 5  | '1970-01-04 15:36:00.000000'         | '1970-01-04 15:36:00.000000' |
| Row 6  | '1979-12-30 00:00:00.000000'         | '1979-12-30 00:00:00.000000' |
+--------+--------------------------------------+------------------------------+
evaluation (internal):
+--------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| Column | Data                                                                                                                                                                                                                                                                |
+--------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| a      | [-315360000000000, -315360000000, -100, 0, 100, 315360000000, 315360000000000]                                                                                                                                                                                      |
| Output | NullableColumn { column: StringColumn[1960-01-04 00:00:00.000000, 1969-12-28 08:24:00.000000, 1969-12-31 23:59:59.999900, 1970-01-01 00:00:00.000000, 1970-01-01 00:00:00.000100, 1970-01-04 15:36:00.000000, 1979-12-30 00:00:00.000000], validity: [0b_1111111] } |
+--------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+


ast            : TRY_TO_DATE('2022')
raw expr       : TRY_TO_DATE('2022')
checked expr   : try_to_date<String>("2022")
optimized expr : NULL
output type    : Date NULL
output domain  : {NULL}
output         : NULL


ast            : TRY_TO_DATE('2022-01')
raw expr       : TRY_TO_DATE('2022-01')
checked expr   : try_to_date<String>("2022-01")
optimized expr : NULL
output type    : Date NULL
output domain  : {NULL}
output         : NULL


ast            : TRY_TO_DATE('2022-01-02')
raw expr       : TRY_TO_DATE('2022-01-02')
checked expr   : try_to_date<String>("2022-01-02")
optimized expr : 18994
output type    : Date NULL
output domain  : {18994..=18994}
output         : '2022-01-02'


ast            : TRY_TO_DATE('A NON-DATE STR')
raw expr       : TRY_TO_DATE('A NON-DATE STR')
checked expr   : try_to_date<String>("A NON-DATE STR")
optimized expr : NULL
output type    : Date NULL
output domain  : {NULL}
output         : NULL


ast            : TRY_TO_DATE('2022-01-02T03:25:02.868894-07:00')
raw expr       : TRY_TO_DATE('2022-01-02T03:25:02.868894-07:00')
checked expr   : try_to_date<String>("2022-01-02T03:25:02.868894-07:00")
optimized expr : 18994
output type    : Date NULL
output domain  : {18994..=18994}
output         : '2022-01-02'


ast            : TRY_TO_DATE('2022-01-02 02:00:11')
raw expr       : TRY_TO_DATE('2022-01-02 02:00:11')
checked expr   : try_to_date<String>("2022-01-02 02:00:11")
optimized expr : 18994
output type    : Date NULL
output domain  : {18994..=18994}
output         : '2022-01-02'


ast            : TRY_TO_DATE('2022-01-02T02:00:22')
raw expr       : TRY_TO_DATE('2022-01-02T02:00:22')
checked expr   : try_to_date<String>("2022-01-02T02:00:22")
optimized expr : 18994
output type    : Date NULL
output domain  : {18994..=18994}
output         : '2022-01-02'


ast            : TRY_TO_DATE('2022-01-02T01:12:00-07:00')
raw expr       : TRY_TO_DATE('2022-01-02T01:12:00-07:00')
checked expr   : try_to_date<String>("2022-01-02T01:12:00-07:00")
optimized expr : 18994
output type    : Date NULL
output domain  : {18994..=18994}
output         : '2022-01-02'


ast            : TRY_TO_DATE('2022-01-02T01')
raw expr       : TRY_TO_DATE('2022-01-02T01')
checked expr   : try_to_date<String>("2022-01-02T01")
optimized expr : 18994
output type    : Date NULL
output domain  : {18994..=18994}
output         : '2022-01-02'


ast            : TRY_TO_DATE(a)
raw expr       : TRY_TO_DATE(a::String)
checked expr   : try_to_date<String>(a)
evaluation:
+--------+-----------------------------------------------------+------------------------------+
|        | a                                                   | Output                       |
+--------+-----------------------------------------------------+------------------------------+
| Type   | String                                              | Date NULL                    |
| Domain | {"2022-01-02"..="2022-01-02T03:25:02.868894-07:00"} | {-719162..=2932896} ‚à™ {NULL} |
| Row 0  | '2022-01-02'                                        | '2022-01-02'                 |
| Row 1  | '2022-01-02T03:25:02.868894-07:00'                  | '2022-01-02'                 |
| Row 2  | '2022-01-02 02:00:11'                               | '2022-01-02'                 |
| Row 3  | '2022-01-02T01:12:00-07:00'                         | '2022-01-02'                 |
| Row 4  | '2022-01-02T01'                                     | '2022-01-02'                 |
+--------+-----------------------------------------------------+------------------------------+
evaluation (internal):
+--------+---------------------------------------------------------------------------------------------------------------------------+
| Column | Data                                                                                                                      |
+--------+---------------------------------------------------------------------------------------------------------------------------+
| a      | StringColumn[2022-01-02, 2022-01-02T03:25:02.868894-07:00, 2022-01-02 02:00:11, 2022-01-02T01:12:00-07:00, 2022-01-02T01] |
| Output | NullableColumn { column: [18994, 18994, 18994, 18994, 18994], validity: [0b___11111] }                                    |
+--------+---------------------------------------------------------------------------------------------------------------------------+


ast            : TRY_CAST(TO_DATE(-354285) AS VARCHAR)
raw expr       : TRY_CAST(TO_DATE(minus(354285)) AS String)
checked expr   : try_to_string<Date>(to_date<Int64>(minus<UInt32>(354285_u32)))
optimized expr : "1000-01-01"
output type    : String NULL
output domain  : {"1000-01-01"..="1000-01-01"}
output         : '1000-01-01'


ast            : TRY_CAST(TO_DATE(-100) AS VARCHAR)
raw expr       : TRY_CAST(TO_DATE(minus(100)) AS String)
checked expr   : try_to_string<Date>(to_date<Int64>(to_int64<Int16>(minus<UInt8>(100_u8))))
optimized expr : "1969-09-23"
output type    : String NULL
output domain  : {"1969-09-23"..="1969-09-23"}
output         : '1969-09-23'


ast            : TRY_CAST(TO_DATE(-0) AS VARCHAR)
raw expr       : TRY_CAST(TO_DATE(minus(0)) AS String)
checked expr   : try_to_string<Date>(to_date<Int64>(to_int64<Int16>(minus<UInt8>(0_u8))))
optimized expr : "1970-01-01"
output type    : String NULL
output domain  : {"1970-01-01"..="1970-01-01"}
output         : '1970-01-01'


ast            : TRY_CAST(TO_DATE(0) AS VARCHAR)
raw expr       : TRY_CAST(TO_DATE(0) AS String)
checked expr   : try_to_string<Date>(to_date<Int64>(to_int64<UInt8>(0_u8)))
optimized expr : "1970-01-01"
output type    : String NULL
output domain  : {"1970-01-01"..="1970-01-01"}
output         : '1970-01-01'


ast            : TRY_CAST(TO_DATE(100) AS VARCHAR)
raw expr       : TRY_CAST(TO_DATE(100) AS String)
checked expr   : try_to_string<Date>(to_date<Int64>(to_int64<UInt8>(100_u8)))
optimized expr : "1970-04-11"
output type    : String NULL
output domain  : {"1970-04-11"..="1970-04-11"}
output         : '1970-04-11'


ast            : TRY_CAST(TO_DATE(2932896) AS VARCHAR)
raw expr       : TRY_CAST(TO_DATE(2932896) AS String)
checked expr   : try_to_string<Date>(to_date<Int64>(to_int64<UInt32>(2932896_u32)))
optimized expr : "9999-12-31"
output type    : String NULL
output domain  : {"9999-12-31"..="9999-12-31"}
output         : '9999-12-31'


ast            : TRY_CAST(a AS VARCHAR)
raw expr       : TRY_CAST(a::Date AS String)
checked expr   : try_to_string<Date>(a)
evaluation:
+--------+---------------------+--------------+
|        | a                   | Output       |
+--------+---------------------+--------------+
| Type   | Date                | String NULL  |
| Domain | {-354285..=2932896} | {""..}       |
| Row 0  | '1000-01-01'        | '1000-01-01' |
| Row 1  | '1969-09-23'        | '1969-09-23' |
| Row 2  | '1970-01-01'        | '1970-01-01' |
| Row 3  | '1970-04-11'        | '1970-04-11' |
| Row 4  | '9999-12-31'        | '9999-12-31' |
+--------+---------------------+--------------+
evaluation (internal):
+--------+-----------------------------------------------------------------------------------------------------------------------------+
| Column | Data                                                                                                                        |
+--------+-----------------------------------------------------------------------------------------------------------------------------+
| a      | [-354285, -100, 0, 100, 2932896]                                                                                            |
| Output | NullableColumn { column: StringColumn[1000-01-01, 1969-09-23, 1970-01-01, 1970-04-11, 9999-12-31], validity: [0b___11111] } |
+--------+-----------------------------------------------------------------------------------------------------------------------------+


error: 
  --> SQL:1:1
  |
1 | TRY_CAST((1, TRUE) AS Tuple(STRING))
  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ unable to cast type `Tuple(UInt8, Boolean)` to type `Tuple(String,)`



ast            : TRY_CAST(('a',) AS Tuple(INT))
raw expr       : TRY_CAST(tuple('a') AS Tuple(Int32,))
checked expr   : TRY_CAST(tuple<String>("a") AS Tuple(Int32 NULL,) NULL)
optimized expr : (NULL,)
output type    : Tuple(Int32 NULL,) NULL
output domain  : ({NULL})
output         : (NULL,)


ast            : TRY_CAST(((1, TRUE), 1) AS Tuple(Tuple(INT, INT), INT))
raw expr       : TRY_CAST(tuple(tuple(1, true), 1) AS Tuple(Tuple(Int32, Int32), Int32))
checked expr   : TRY_CAST(tuple<Tuple(UInt8, Boolean), UInt8>(tuple<UInt8, Boolean>(1_u8, true), 1_u8) AS Tuple(Tuple(Int32 NULL, Int32 NULL) NULL, Int32 NULL) NULL)
optimized expr : ((1_i32, 1_i32), 1_i32)
output type    : Tuple(Tuple(Int32 NULL, Int32 NULL) NULL, Int32 NULL) NULL
output domain  : (({1..=1}, {1..=1}), {1..=1})
output         : ((1, 1), 1)


ast            : TRY_CAST(TRY_CAST(1 AS INT32) AS INT32)
raw expr       : TRY_CAST(TRY_CAST(1 AS Int32) AS Int32)
checked expr   : try_to_int32<UInt8>(1_u8)
optimized expr : 1_i32
output type    : Int32 NULL
output domain  : {1..=1}
output         : 1


ast            : TRY_CAST(((1, 'a'), 1) AS Tuple(Tuple(INT, INT NULL), INT))
raw expr       : TRY_CAST(tuple(tuple(1, 'a'), 1) AS Tuple(Tuple(Int32, Int32 NULL), Int32))
checked expr   : TRY_CAST(tuple<Tuple(UInt8, String), UInt8>(tuple<UInt8, String>(1_u8, "a"), 1_u8) AS Tuple(Tuple(Int32 NULL, Int32 NULL) NULL, Int32 NULL) NULL)
optimized expr : ((1_i32, NULL), 1_i32)
output type    : Tuple(Tuple(Int32 NULL, Int32 NULL) NULL, Int32 NULL) NULL
output domain  : (({1..=1}, {NULL}), {1..=1})
output         : ((1, NULL), 1)


ast            : TRY_CAST(((1, 'a'), 1) AS Tuple(Tuple(INT, INT), INT) NULL)
raw expr       : TRY_CAST(tuple(tuple(1, 'a'), 1) AS Tuple(Tuple(Int32, Int32), Int32) NULL)
checked expr   : TRY_CAST(tuple<Tuple(UInt8, String), UInt8>(tuple<UInt8, String>(1_u8, "a"), 1_u8) AS Tuple(Tuple(Int32 NULL, Int32 NULL) NULL, Int32 NULL) NULL)
optimized expr : ((1_i32, NULL), 1_i32)
output type    : Tuple(Tuple(Int32 NULL, Int32 NULL) NULL, Int32 NULL) NULL
output domain  : (({1..=1}, {NULL}), {1..=1})
output         : ((1, NULL), 1)


ast            : TRY_CAST([(1,TRUE),(2,FALSE)] AS Array(Tuple(INT, INT)))
raw expr       : TRY_CAST(array(tuple(1, true), tuple(2, false)) AS Array(Tuple(Int32, Int32)))
checked expr   : TRY_CAST(array<T0=Tuple(UInt8, Boolean)><T0, T0>(tuple<UInt8, Boolean>(1_u8, true), tuple<UInt8, Boolean>(2_u8, false)) AS Array(Tuple(Int32 NULL, Int32 NULL) NULL) NULL)
optimized expr : [(1, 1), (2, 0)]
output type    : Array(Tuple(Int32 NULL, Int32 NULL) NULL) NULL
output domain  : [({1..=2}, {0..=1})]
output         : [(1, 1), (2, 0)]


ast            : TRY_CAST([(1,'a'),(2,'a')] AS Array(Tuple(INT, INT)) NULL)
raw expr       : TRY_CAST(array(tuple(1, 'a'), tuple(2, 'a')) AS Array(Tuple(Int32, Int32)) NULL)
checked expr   : TRY_CAST(array<T0=Tuple(UInt8, String)><T0, T0>(tuple<UInt8, String>(1_u8, "a"), tuple<UInt8, String>(2_u8, "a")) AS Array(Tuple(Int32 NULL, Int32 NULL) NULL) NULL)
optimized expr : [(1, NULL), (2, NULL)]
output type    : Array(Tuple(Int32 NULL, Int32 NULL) NULL) NULL
output domain  : [({1..=2}, {-2147483648..=2147483647} ‚à™ {NULL})]
output         : [(1, NULL), (2, NULL)]


ast            : TRY_CAST([(1,'a'),(2,'a')] AS Array(Tuple(INT, INT NULL)))
raw expr       : TRY_CAST(array(tuple(1, 'a'), tuple(2, 'a')) AS Array(Tuple(Int32, Int32 NULL)))
checked expr   : TRY_CAST(array<T0=Tuple(UInt8, String)><T0, T0>(tuple<UInt8, String>(1_u8, "a"), tuple<UInt8, String>(2_u8, "a")) AS Array(Tuple(Int32 NULL, Int32 NULL) NULL) NULL)
optimized expr : [(1, NULL), (2, NULL)]
output type    : Array(Tuple(Int32 NULL, Int32 NULL) NULL) NULL
output domain  : [({1..=2}, {-2147483648..=2147483647} ‚à™ {NULL})]
output         : [(1, NULL), (2, NULL)]


ast            : TRY_CAST([[TRUE], [FALSE, TRUE]] AS Array(Array(INT)))
raw expr       : TRY_CAST(array(array(true), array(false, true)) AS Array(Array(Int32)))
checked expr   : TRY_CAST(array<T0=Array(Boolean)><T0, T0>(array<T0=Boolean><T0>(true), array<T0=Boolean><T0, T0>(false, true)) AS Array(Array(Int32 NULL) NULL) NULL)
optimized expr : [[1], [0, 1]]
output type    : Array(Array(Int32 NULL) NULL) NULL
output domain  : [[{0..=1}]]
output         : [[1], [0, 1]]


ast            : TRY_CAST([['a'], ['b', 'c']] AS Array(Array(INT) NULL))
raw expr       : TRY_CAST(array(array('a'), array('b', 'c')) AS Array(Array(Int32) NULL))
checked expr   : TRY_CAST(array<T0=Array(String)><T0, T0>(array<T0=String><T0>("a"), array<T0=String><T0, T0>("b", "c")) AS Array(Array(Int32 NULL) NULL) NULL)
optimized expr : [[NULL], [NULL, NULL]]
output type    : Array(Array(Int32 NULL) NULL) NULL
output domain  : [[{-2147483648..=2147483647} ‚à™ {NULL}]]
output         : [[NULL], [NULL, NULL]]


ast            : TRY_CAST('Abc' AS BINARY)
raw expr       : TRY_CAST('Abc' AS Binary)
checked expr   : try_to_binary<String>("Abc")
optimized expr : 416263
output type    : Binary NULL
output domain  : Undefined
output         : 416263


ast            : TRY_CAST('Dobr√Ω den' AS BINARY)
raw expr       : TRY_CAST('Dobr√Ω den' AS Binary)
checked expr   : try_to_binary<String>("Dobr√Ω den")
optimized expr : 446F6272C3BD2064656E
output type    : Binary NULL
output domain  : Undefined
output         : 446F6272C3BD2064656E


ast            : TRY_CAST('√üüòÄÂ±±' AS BINARY)
raw expr       : TRY_CAST('√üüòÄÂ±±' AS Binary)
checked expr   : try_to_binary<String>("√üüòÄÂ±±")
optimized expr : C39FF09F9880E5B1B1
output type    : Binary NULL
output domain  : Undefined
output         : C39FF09F9880E5B1B1


ast            : TRY_CAST(NULL AS BINARY)
raw expr       : TRY_CAST(NULL AS Binary)
checked expr   : try_to_binary<Variant NULL>(CAST(NULL AS Variant NULL))
optimized expr : NULL
output type    : Binary NULL
output domain  : {NULL}
output         : NULL


ast            : TRY_CAST(NULL AS BINARY NULL)
raw expr       : TRY_CAST(NULL AS Binary NULL)
checked expr   : TRY_CAST(NULL AS Binary NULL)
optimized expr : NULL
output type    : Binary NULL
output domain  : {NULL}
output         : NULL


ast            : TRY_CAST(a AS BINARY)
raw expr       : TRY_CAST(a::String AS Binary)
checked expr   : try_to_binary<String>(a)
evaluation:
+--------+-------------------+----------------------+
|        | a                 | Output               |
+--------+-------------------+----------------------+
| Type   | String            | Binary NULL          |
| Domain | {"Abc"..="√üüòÄÂ±±"} | Undefined ‚à™ {NULL}   |
| Row 0  | 'Abc'             | 416263               |
| Row 1  | 'Dobr√Ω den'       | 446F6272C3BD2064656E |
| Row 2  | '√üüòÄÂ±±'           | C39FF09F9880E5B1B1   |
+--------+-------------------+----------------------+
evaluation (internal):
+--------+---------------------------------------------------------------------------------------------------------------------------------------------------+
| Column | Data                                                                                                                                              |
+--------+---------------------------------------------------------------------------------------------------------------------------------------------------+
| a      | StringColumn[Abc, Dobr√Ω den, √üüòÄÂ±±]                                                                                                               |
| Output | NullableColumn { column: BinaryColumn { data: 0x416263446f6272c3bd2064656ec39ff09f9880e5b1b1, offsets: [0, 3, 13, 22] }, validity: [0b_____111] } |
+--------+---------------------------------------------------------------------------------------------------------------------------------------------------+


ast            : TRY_CAST(a AS BINARY)
raw expr       : TRY_CAST(a::String NULL AS Binary)
checked expr   : try_to_binary<String NULL>(a)
evaluation:
+--------+--------------------------------+----------------------+
|        | a                              | Output               |
+--------+--------------------------------+----------------------+
| Type   | String NULL                    | Binary NULL          |
| Domain | {"Abc"..="Dobr√Ω den"} ‚à™ {NULL} | Undefined ‚à™ {NULL}   |
| Row 0  | 'Abc'                          | 416263               |
| Row 1  | 'Dobr√Ω den'                    | 446F6272C3BD2064656E |
| Row 2  | NULL                           | NULL                 |
+--------+--------------------------------+----------------------+
evaluation (internal):
+--------+---------------------------------------------------------------------------------------------------------------------------------------------------+
| Column | Data                                                                                                                                              |
+--------+---------------------------------------------------------------------------------------------------------------------------------------------------+
| a      | NullableColumn { column: StringColumn[Abc, Dobr√Ω den, √üüòÄÂ±±], validity: [0b_____011] }                                                            |
| Output | NullableColumn { column: BinaryColumn { data: 0x416263446f6272c3bd2064656ec39ff09f9880e5b1b1, offsets: [0, 3, 13, 22] }, validity: [0b_____011] } |
+--------+---------------------------------------------------------------------------------------------------------------------------------------------------+


ast            : TRY_CAST(a AS BINARY NULL)
raw expr       : TRY_CAST(a::String NULL AS Binary NULL)
checked expr   : TRY_CAST(a AS Binary NULL)
evaluation:
+--------+--------------------------------+----------------------+
|        | a                              | Output               |
+--------+--------------------------------+----------------------+
| Type   | String NULL                    | Binary NULL          |
| Domain | {"Abc"..="Dobr√Ω den"} ‚à™ {NULL} | Undefined ‚à™ {NULL}   |
| Row 0  | 'Abc'                          | 416263               |
| Row 1  | 'Dobr√Ω den'                    | 446F6272C3BD2064656E |
| Row 2  | NULL                           | NULL                 |
+--------+--------------------------------+----------------------+
evaluation (internal):
+--------+---------------------------------------------------------------------------------------------------------------------------------------------------+
| Column | Data                                                                                                                                              |
+--------+---------------------------------------------------------------------------------------------------------------------------------------------------+
| a      | NullableColumn { column: StringColumn[Abc, Dobr√Ω den, √üüòÄÂ±±], validity: [0b_____011] }                                                            |
| Output | NullableColumn { column: BinaryColumn { data: 0x416263446f6272c3bd2064656ec39ff09f9880e5b1b1, offsets: [0, 3, 13, 22] }, validity: [0b_____011] } |
+--------+---------------------------------------------------------------------------------------------------------------------------------------------------+


ast            : TRY_CAST(TRY_CAST('Abc' AS BINARY) AS STRING)
raw expr       : TRY_CAST(TRY_CAST('Abc' AS Binary) AS String)
checked expr   : try_to_string<Binary NULL>(try_to_binary<String>("Abc"))
optimized expr : "Abc"
output type    : String NULL
output domain  : {"Abc"..="Abc"}
output         : 'Abc'


ast            : TRY_CAST(TRY_CAST('Dobr√Ω den' AS BINARY) AS STRING)
raw expr       : TRY_CAST(TRY_CAST('Dobr√Ω den' AS Binary) AS String)
checked expr   : try_to_string<Binary NULL>(try_to_binary<String>("Dobr√Ω den"))
optimized expr : "Dobr√Ω den"
output type    : String NULL
output domain  : {"Dobr√Ω den"..="Dobr√Ω den"}
output         : 'Dobr√Ω den'


ast            : TRY_CAST(TRY_CAST('√üüòÄÂ±±' AS BINARY) AS STRING)
raw expr       : TRY_CAST(TRY_CAST('√üüòÄÂ±±' AS Binary) AS String)
checked expr   : try_to_string<Binary NULL>(try_to_binary<String>("√üüòÄÂ±±"))
optimized expr : "√üüòÄÂ±±"
output type    : String NULL
output domain  : {"√üüòÄÂ±±"..="√üüòÄÂ±±"}
output         : '√üüòÄÂ±±'


ast            : TRY_CAST(TRY_CAST(NULL AS BINARY) AS STRING)
raw expr       : TRY_CAST(TRY_CAST(NULL AS Binary) AS String)
checked expr   : try_to_string<Binary NULL>(try_to_binary<Variant NULL>(CAST(NULL AS Variant NULL)))
optimized expr : NULL
output type    : String NULL
output domain  : {NULL}
output         : NULL


ast            : TRY_CAST(TRY_CAST(NULL AS BINARY NULL) AS STRING NULL)
raw expr       : TRY_CAST(TRY_CAST(NULL AS Binary NULL) AS String NULL)
checked expr   : TRY_CAST(TRY_CAST(NULL AS Binary NULL) AS String NULL)
optimized expr : NULL
output type    : String NULL
output domain  : {NULL}
output         : NULL


ast            : TRY_CAST(TRY_CAST(a AS BINARY) AS STRING)
raw expr       : TRY_CAST(TRY_CAST(a::String AS Binary) AS String)
checked expr   : try_to_string<Binary NULL>(try_to_binary<String>(a))
evaluation:
+--------+-------------------+-----------------+
|        | a                 | Output          |
+--------+-------------------+-----------------+
| Type   | String            | String NULL     |
| Domain | {"Abc"..="√üüòÄÂ±±"} | {""..} ‚à™ {NULL} |
| Row 0  | 'Abc'             | 'Abc'           |
| Row 1  | 'Dobr√Ω den'       | 'Dobr√Ω den'     |
| Row 2  | '√üüòÄÂ±±'           | '√üüòÄÂ±±'         |
+--------+-------------------+-----------------+
evaluation (internal):
+--------+----------------------------------------------------------------------------------------+
| Column | Data                                                                                   |
+--------+----------------------------------------------------------------------------------------+
| a      | StringColumn[Abc, Dobr√Ω den, √üüòÄÂ±±]                                                    |
| Output | NullableColumn { column: StringColumn[Abc, Dobr√Ω den, √üüòÄÂ±±], validity: [0b_____111] } |
+--------+----------------------------------------------------------------------------------------+


ast            : TRY_CAST(TRY_CAST(a AS BINARY) AS STRING)
raw expr       : TRY_CAST(TRY_CAST(a::String NULL AS Binary) AS String)
checked expr   : try_to_string<Binary NULL>(try_to_binary<String NULL>(a))
evaluation:
+--------+--------------------------------+-----------------+
|        | a                              | Output          |
+--------+--------------------------------+-----------------+
| Type   | String NULL                    | String NULL     |
| Domain | {"Abc"..="Dobr√Ω den"} ‚à™ {NULL} | {""..} ‚à™ {NULL} |
| Row 0  | 'Abc'                          | 'Abc'           |
| Row 1  | 'Dobr√Ω den'                    | 'Dobr√Ω den'     |
| Row 2  | NULL                           | NULL            |
+--------+--------------------------------+-----------------+
evaluation (internal):
+--------+----------------------------------------------------------------------------------------+
| Column | Data                                                                                   |
+--------+----------------------------------------------------------------------------------------+
| a      | NullableColumn { column: StringColumn[Abc, Dobr√Ω den, √üüòÄÂ±±], validity: [0b_____011] } |
| Output | NullableColumn { column: StringColumn[Abc, Dobr√Ω den, √üüòÄÂ±±], validity: [0b_____011] } |
+--------+----------------------------------------------------------------------------------------+


ast            : TRY_CAST(TRY_CAST(a AS BINARY NULL) AS STRING NULL)
raw expr       : TRY_CAST(TRY_CAST(a::String NULL AS Binary NULL) AS String NULL)
checked expr   : TRY_CAST(TRY_CAST(a AS Binary NULL) AS String NULL)
evaluation:
+--------+--------------------------------+-----------------+
|        | a                              | Output          |
+--------+--------------------------------+-----------------+
| Type   | String NULL                    | String NULL     |
| Domain | {"Abc"..="Dobr√Ω den"} ‚à™ {NULL} | {""..} ‚à™ {NULL} |
| Row 0  | 'Abc'                          | 'Abc'           |
| Row 1  | 'Dobr√Ω den'                    | 'Dobr√Ω den'     |
| Row 2  | NULL                           | NULL            |
+--------+--------------------------------+-----------------+
evaluation (internal):
+--------+----------------------------------------------------------------------------------------+
| Column | Data                                                                                   |
+--------+----------------------------------------------------------------------------------------+
| a      | NullableColumn { column: StringColumn[Abc, Dobr√Ω den, √üüòÄÂ±±], validity: [0b_____011] } |
| Output | NullableColumn { column: StringColumn[Abc, Dobr√Ω den, √üüòÄÂ±±], validity: [0b_____011] } |
+--------+----------------------------------------------------------------------------------------+


