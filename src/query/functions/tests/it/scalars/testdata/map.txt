ast            : map([], [])
raw expr       : map(array(), array())
checked expr   : map<Array(Nothing), Array(Nothing)>(array<>(), array<>())
optimized expr : {} :: Map(Nothing)
output type    : Map(Nothing)
output domain  : {}
output         : {}


ast            : map([1,2], ['a','b'])
raw expr       : map(array(1, 2), array('a', 'b'))
checked expr   : map<T0=UInt8, T1=String><Array(T0), Array(T1)>(array<T0=UInt8><T0, T0>(1_u8, 2_u8), array<T0=String><T0, T0>("a", "b"))
optimized expr : {1_u8:"a", 2_u8:"b"}
output type    : Map(UInt8, String)
output domain  : {[{1..=2}], [{"a"..="b"}]}
output         : {1:'a', 2:'b'}


ast            : map(['k1','k2','k3'], ['v1','v2','v3'])
raw expr       : map(array('k1', 'k2', 'k3'), array('v1', 'v2', 'v3'))
checked expr   : map<T0=String, T1=String><Array(T0), Array(T1)>(array<T0=String><T0, T0, T0>("k1", "k2", "k3"), array<T0=String><T0, T0, T0>("v1", "v2", "v3"))
optimized expr : {"k1":"v1", "k2":"v2", "k3":"v3"}
output type    : Map(String, String)
output domain  : {[{"k1"..="k3"}], [{"v1"..="v3"}]}
output         : {'k1':'v1', 'k2':'v2', 'k3':'v3'}


error: 
  --> SQL:1:1
  |
1 | map(1, 'a')
  | ^^^^^^^^^^^ no function matches signature `map(UInt8, String)`, you might need to add explicit type casts.

candidate functions:
  map(Array(Nothing), Array(Nothing)) :: Map(Nothing)                 : unable to unify `UInt8` with `Array(Nothing)`
  map(Array(Nothing) NULL, Array(Nothing) NULL) :: Map(Nothing) NULL  : unable to unify `UInt8` with `Array(Nothing)`
  map(Array(T0), Array(T1)) :: Map(T0, T1)                            : unable to unify `UInt8` with `Array(T0)`
... and 1 more



error: 
  --> SQL:1:1
  |
1 | map(['k1','k2'], ['v1','v2','v3'])
  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ key list has a different size from value list (2 keys, 3 values) while evaluating function `map(['k1', 'k2'], ['v1', 'v2', 'v3'])` in expr `map(array('k1', 'k2'), array('v1', 'v2', 'v3'))`



error: 
  --> SQL:1:1
  |
1 | map(['k1','k1'], ['v1','v2'])
  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ map keys have to be unique while evaluating function `map(['k1', 'k1'], ['v1', 'v2'])` in expr `map(array('k1', 'k1'), array('v1', 'v2'))`



ast            : map([a_col, b_col, c_col], [d_col, e_col, f_col])
raw expr       : map(array(a_col::Int8, b_col::Int8, c_col::Int8), array(d_col::String NULL, e_col::String NULL, f_col::String NULL))
checked expr   : map<T0=Int8, T1=String NULL><Array(T0), Array(T1)>(array<T0=Int8><T0, T0, T0>(a_col, b_col, c_col), array<T0=String NULL><T0, T0, T0>(d_col, e_col, f_col))
evaluation:
+--------+---------+---------+---------+-------------+----------------------+----------------------+------------------------+
|        | a_col   | b_col   | c_col   | d_col       | e_col                | f_col                | Output                 |
+--------+---------+---------+---------+-------------+----------------------+----------------------+------------------------+
| Type   | Int8    | Int8    | Int8    | String NULL | String NULL          | String NULL          | Map(Int8, String NULL) |
| Domain | {1..=3} | {4..=6} | {7..=9} | {"a"..="c"} | {"d"..="e"} ∪ {NULL} | {"f"..="g"} ∪ {NULL} | Unknown                |
| Row 0  | 1       | 4       | 7       | 'a'         | 'd'                  | 'f'                  | {1:'a', 4:'d', 7:'f'}  |
| Row 1  | 2       | 5       | 8       | 'b'         | 'e'                  | NULL                 | {2:'b', 5:'e', 8:NULL} |
| Row 2  | 3       | 6       | 9       | 'c'         | NULL                 | 'g'                  | {3:'c', 6:NULL, 9:'g'} |
+--------+---------+---------+---------+-------------+----------------------+----------------------+------------------------+
evaluation (internal):
+--------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| Column | Data                                                                                                                                                                                            |
+--------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| a_col  | Int8([1, 2, 3])                                                                                                                                                                                 |
| b_col  | Int8([4, 5, 6])                                                                                                                                                                                 |
| c_col  | Int8([7, 8, 9])                                                                                                                                                                                 |
| d_col  | NullableColumn { column: StringColumn[a, b, c], validity: [0b_____111] }                                                                                                                        |
| e_col  | NullableColumn { column: StringColumn[d, e, ], validity: [0b_____011] }                                                                                                                         |
| f_col  | NullableColumn { column: StringColumn[f, , g], validity: [0b_____101] }                                                                                                                         |
| Output | ArrayColumn { values: Tuple([Int8([1, 4, 7, 2, 5, 8, 3, 6, 9]), NullableColumn { column: StringColumn[a, d, f, b, e, , c, , g], validity: [0b01011111, 0b_______1] }]), offsets: [0, 3, 6, 9] } |
+--------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+


ast            : map(['k1', 'k2'], [a_col, b_col])
raw expr       : map(array('k1', 'k2'), array(a_col::Int8, b_col::Int8))
checked expr   : map<T0=String, T1=Int8><Array(T0), Array(T1)>(array<T0=String><T0, T0>("k1", "k2"), array<T0=Int8><T0, T0>(a_col, b_col))
optimized expr : map<T0=String, T1=Int8><Array(T0), Array(T1)>(['k1', 'k2'], array<T0=Int8><T0, T0>(a_col, b_col))
evaluation:
+--------+---------+---------+-------------------+
|        | a_col   | b_col   | Output            |
+--------+---------+---------+-------------------+
| Type   | Int8    | Int8    | Map(String, Int8) |
| Domain | {1..=3} | {4..=6} | Unknown           |
| Row 0  | 1       | 4       | {'k1':1, 'k2':4}  |
| Row 1  | 2       | 5       | {'k1':2, 'k2':5}  |
| Row 2  | 3       | 6       | {'k1':3, 'k2':6}  |
+--------+---------+---------+-------------------+
evaluation (internal):
+--------+------------------------------------------------------------------------------------------------------------------------+
| Column | Data                                                                                                                   |
+--------+------------------------------------------------------------------------------------------------------------------------+
| a_col  | Int8([1, 2, 3])                                                                                                        |
| b_col  | Int8([4, 5, 6])                                                                                                        |
| Output | ArrayColumn { values: Tuple([StringColumn[k1, k2, k1, k2, k1, k2], Int8([1, 4, 2, 5, 3, 6])]), offsets: [0, 2, 4, 6] } |
+--------+------------------------------------------------------------------------------------------------------------------------+


ast            : map([],[])[1]
raw expr       : get(map(array(), array()), 1)
checked expr   : get<T0=UInt8><Map(Nothing) NULL, T0 NULL>(CAST(map<Array(Nothing), Array(Nothing)>(array<>(), array<>()) AS Map(Nothing) NULL), CAST(1_u8 AS UInt8 NULL))
optimized expr : NULL
output type    : NULL
output domain  : {NULL}
output         : NULL


ast            : map([1,2],['a','b'])[1]
raw expr       : get(map(array(1, 2), array('a', 'b')), 1)
checked expr   : get<T0=UInt8, T1=String><Map(T0, T1 NULL), T0>(CAST(map<T0=UInt8, T1=String><Array(T0), Array(T1)>(array<T0=UInt8><T0, T0>(1_u8, 2_u8), array<T0=String><T0, T0>("a", "b")) AS Map(UInt8, String NULL)), 1_u8)
optimized expr : "a"
output type    : String NULL
output domain  : {"a"..="a"}
output         : 'a'


ast            : map([1,2],['a','b'])[10]
raw expr       : get(map(array(1, 2), array('a', 'b')), 10)
checked expr   : get<T0=UInt8, T1=String><Map(T0, T1 NULL), T0>(CAST(map<T0=UInt8, T1=String><Array(T0), Array(T1)>(array<T0=UInt8><T0, T0>(1_u8, 2_u8), array<T0=String><T0, T0>("a", "b")) AS Map(UInt8, String NULL)), 10_u8)
optimized expr : NULL
output type    : String NULL
output domain  : {NULL}
output         : NULL


ast            : map(['a','b'],[1,2])['a']
raw expr       : get(map(array('a', 'b'), array(1, 2)), 'a')
checked expr   : get<T0=String, T1=UInt8><Map(T0, T1 NULL), T0>(CAST(map<T0=String, T1=UInt8><Array(T0), Array(T1)>(array<T0=String><T0, T0>("a", "b"), array<T0=UInt8><T0, T0>(1_u8, 2_u8)) AS Map(String, UInt8 NULL)), "a")
optimized expr : 1_u8
output type    : UInt8 NULL
output domain  : {1..=1}
output         : 1


ast            : map(['a','b'],[1,2])['x']
raw expr       : get(map(array('a', 'b'), array(1, 2)), 'x')
checked expr   : get<T0=String, T1=UInt8><Map(T0, T1 NULL), T0>(CAST(map<T0=String, T1=UInt8><Array(T0), Array(T1)>(array<T0=String><T0, T0>("a", "b"), array<T0=UInt8><T0, T0>(1_u8, 2_u8)) AS Map(String, UInt8 NULL)), "x")
optimized expr : NULL
output type    : UInt8 NULL
output domain  : {NULL}
output         : NULL


ast            : {}['k']
raw expr       : get(map(array(), array()), 'k')
checked expr   : get<T0=String><Map(Nothing) NULL, T0 NULL>(CAST(map<Array(Nothing), Array(Nothing)>(array<>(), array<>()) AS Map(Nothing) NULL), CAST("k" AS String NULL))
optimized expr : NULL
output type    : NULL
output domain  : {NULL}
output         : NULL


ast            : {1:NULL}[1]
raw expr       : get(map(array(1), array(NULL)), 1)
checked expr   : get<T0=UInt8><Map(T0, NULL) NULL, T0 NULL>(CAST(map<T0=UInt8, T1=NULL><Array(T0), Array(T1)>(array<T0=UInt8><T0>(1_u8), array<T0=NULL><T0>(NULL)) AS Map(UInt8, NULL) NULL), CAST(1_u8 AS UInt8 NULL))
optimized expr : NULL
output type    : NULL
output domain  : {NULL}
output         : NULL


ast            : {'k1':'v1','k2':'v2'}['k1']
raw expr       : get(map(array('k1', 'k2'), array('v1', 'v2')), 'k1')
checked expr   : get<T0=String, T1=String><Map(T0, T1 NULL), T0>(CAST(map<T0=String, T1=String><Array(T0), Array(T1)>(array<T0=String><T0, T0>("k1", "k2"), array<T0=String><T0, T0>("v1", "v2")) AS Map(String, String NULL)), "k1")
optimized expr : "v1"
output type    : String NULL
output domain  : {"v1"..="v1"}
output         : 'v1'


ast            : {'k1':'v1','k2':'v2'}['k3']
raw expr       : get(map(array('k1', 'k2'), array('v1', 'v2')), 'k3')
checked expr   : get<T0=String, T1=String><Map(T0, T1 NULL), T0>(CAST(map<T0=String, T1=String><Array(T0), Array(T1)>(array<T0=String><T0, T0>("k1", "k2"), array<T0=String><T0, T0>("v1", "v2")) AS Map(String, String NULL)), "k3")
optimized expr : NULL
output type    : String NULL
output domain  : {NULL}
output         : NULL


ast            : map([k1,k2],[v1,v2])[1]
raw expr       : get(map(array(k1::Int16, k2::Int16), array(v1::String, v2::String)), 1)
checked expr   : get<T0=Int16, T1=String><Map(T0, T1 NULL), T0>(CAST(map<T0=Int16, T1=String><Array(T0), Array(T1)>(array<T0=Int16><T0, T0>(k1, k2), array<T0=String><T0, T0>(v1, v2)) AS Map(Int16, String NULL)), to_int16<UInt8>(1_u8))
optimized expr : get<T0=Int16, T1=String><Map(T0, T1 NULL), T0>(CAST(map<T0=Int16, T1=String><Array(T0), Array(T1)>(array<T0=Int16><T0, T0>(k1, k2), array<T0=String><T0, T0>(v1, v2)) AS Map(Int16, String NULL)), 1_i16)
evaluation:
+--------+---------+---------+---------------+---------------+-------------+
|        | k1      | k2      | v1            | v2            | Output      |
+--------+---------+---------+---------------+---------------+-------------+
| Type   | Int16   | Int16   | String        | String        | String NULL |
| Domain | {1..=2} | {3..=4} | {"v1"..="v2"} | {"v3"..="v4"} | Unknown     |
| Row 0  | 1       | 3       | 'v1'          | 'v3'          | 'v1'        |
| Row 1  | 2       | 4       | 'v2'          | 'v4'          | NULL        |
+--------+---------+---------+---------------+---------------+-------------+
evaluation (internal):
+--------+-----------------------------------------------------------------------+
| Column | Data                                                                  |
+--------+-----------------------------------------------------------------------+
| k1     | Int16([1, 2])                                                         |
| k2     | Int16([3, 4])                                                         |
| v1     | StringColumn[v1, v2]                                                  |
| v2     | StringColumn[v3, v4]                                                  |
| Output | NullableColumn { column: StringColumn[v1, ], validity: [0b______01] } |
+--------+-----------------------------------------------------------------------+


ast            : map_keys({})
raw expr       : map_keys(map(array(), array()))
checked expr   : map_keys<Map(Nothing)>(map<Array(Nothing), Array(Nothing)>(array<>(), array<>()))
optimized expr : [] :: Array(Nothing)
output type    : Array(Nothing)
output domain  : []
output         : []


ast            : map_keys({'a':1,'b':2,'c':3})
raw expr       : map_keys(map(array('a', 'b', 'c'), array(1, 2, 3)))
checked expr   : map_keys<T0=String, T1=UInt8><Map(T0, T1)>(map<T0=String, T1=UInt8><Array(T0), Array(T1)>(array<T0=String><T0, T0, T0>("a", "b", "c"), array<T0=UInt8><T0, T0, T0>(1_u8, 2_u8, 3_u8)))
optimized expr : ['a', 'b', 'c']
output type    : Array(String)
output domain  : [{"a"..="c"}]
output         : ['a', 'b', 'c']


ast            : map_keys({1:'a',2:'b',3:'c'})
raw expr       : map_keys(map(array(1, 2, 3), array('a', 'b', 'c')))
checked expr   : map_keys<T0=UInt8, T1=String><Map(T0, T1)>(map<T0=UInt8, T1=String><Array(T0), Array(T1)>(array<T0=UInt8><T0, T0, T0>(1_u8, 2_u8, 3_u8), array<T0=String><T0, T0, T0>("a", "b", "c")))
optimized expr : [1, 2, 3]
output type    : Array(UInt8)
output domain  : [{1..=3}]
output         : [1, 2, 3]


ast            : map_keys({'a':NULL,'b':2,'c':NULL})
raw expr       : map_keys(map(array('a', 'b', 'c'), array(NULL, 2, NULL)))
checked expr   : map_keys<T0=String, T1=UInt8 NULL><Map(T0, T1)>(map<T0=String, T1=UInt8 NULL><Array(T0), Array(T1)>(array<T0=String><T0, T0, T0>("a", "b", "c"), array<T0=UInt8 NULL><T0, T0, T0>(CAST(NULL AS UInt8 NULL), CAST(2_u8 AS UInt8 NULL), CAST(NULL AS UInt8 NULL))))
optimized expr : ['a', 'b', 'c']
output type    : Array(String)
output domain  : [{"a"..="c"}]
output         : ['a', 'b', 'c']


ast            : map_keys(map([a_col, b_col, c_col], [d_col, e_col, f_col]))
raw expr       : map_keys(map(array(a_col::String, b_col::String, c_col::String), array(d_col::String NULL, e_col::String NULL, f_col::String NULL)))
checked expr   : map_keys<T0=String, T1=String NULL><Map(T0, T1)>(map<T0=String, T1=String NULL><Array(T0), Array(T1)>(array<T0=String><T0, T0, T0>(a_col, b_col, c_col), array<T0=String NULL><T0, T0, T0>(d_col, e_col, f_col)))
evaluation:
+--------+-------------+-------------+-------------+---------------+------------------------+------------------------+-----------------+
|        | a_col       | b_col       | c_col       | d_col         | e_col                  | f_col                  | Output          |
+--------+-------------+-------------+-------------+---------------+------------------------+------------------------+-----------------+
| Type   | String      | String      | String      | String NULL   | String NULL            | String NULL            | Array(String)   |
| Domain | {"a"..="c"} | {"d"..="f"} | {"x"..="z"} | {"v1"..="v3"} | {"v4"..="v5"} ∪ {NULL} | {"v6"..="v7"} ∪ {NULL} | Unknown         |
| Row 0  | 'a'         | 'd'         | 'x'         | 'v1'          | 'v4'                   | 'v6'                   | ['a', 'd', 'x'] |
| Row 1  | 'b'         | 'e'         | 'y'         | 'v2'          | 'v5'                   | NULL                   | ['b', 'e', 'y'] |
| Row 2  | 'c'         | 'f'         | 'z'         | 'v3'          | NULL                   | 'v7'                   | ['c', 'f', 'z'] |
+--------+-------------+-------------+-------------+---------------+------------------------+------------------------+-----------------+
evaluation (internal):
+--------+----------------------------------------------------------------------------------------+
| Column | Data                                                                                   |
+--------+----------------------------------------------------------------------------------------+
| a_col  | StringColumn[a, b, c]                                                                  |
| b_col  | StringColumn[d, e, f]                                                                  |
| c_col  | StringColumn[x, y, z]                                                                  |
| d_col  | NullableColumn { column: StringColumn[v1, v2, v3], validity: [0b_____111] }            |
| e_col  | NullableColumn { column: StringColumn[v4, v5, ], validity: [0b_____011] }              |
| f_col  | NullableColumn { column: StringColumn[v6, , v7], validity: [0b_____101] }              |
| Output | ArrayColumn { values: StringColumn[a, d, x, b, e, y, c, f, z], offsets: [0, 3, 6, 9] } |
+--------+----------------------------------------------------------------------------------------+


ast            : map_values({})
raw expr       : map_values(map(array(), array()))
checked expr   : map_values<Map(Nothing)>(map<Array(Nothing), Array(Nothing)>(array<>(), array<>()))
optimized expr : [] :: Array(Nothing)
output type    : Array(Nothing)
output domain  : []
output         : []


ast            : map_values({})
raw expr       : map_values(map(array(), array()))
checked expr   : map_values<Map(Nothing)>(map<Array(Nothing), Array(Nothing)>(array<>(), array<>()))
optimized expr : [] :: Array(Nothing)
output type    : Array(Nothing)
output domain  : []
output         : []


ast            : map_values({'a':1,'b':2,'c':3})
raw expr       : map_values(map(array('a', 'b', 'c'), array(1, 2, 3)))
checked expr   : map_values<T0=String, T1=UInt8><Map(T0, T1)>(map<T0=String, T1=UInt8><Array(T0), Array(T1)>(array<T0=String><T0, T0, T0>("a", "b", "c"), array<T0=UInt8><T0, T0, T0>(1_u8, 2_u8, 3_u8)))
optimized expr : [1, 2, 3]
output type    : Array(UInt8)
output domain  : [{1..=3}]
output         : [1, 2, 3]


ast            : map_values({1:'a',2:'b',3:'c'})
raw expr       : map_values(map(array(1, 2, 3), array('a', 'b', 'c')))
checked expr   : map_values<T0=UInt8, T1=String><Map(T0, T1)>(map<T0=UInt8, T1=String><Array(T0), Array(T1)>(array<T0=UInt8><T0, T0, T0>(1_u8, 2_u8, 3_u8), array<T0=String><T0, T0, T0>("a", "b", "c")))
optimized expr : ['a', 'b', 'c']
output type    : Array(String)
output domain  : [{"a"..="c"}]
output         : ['a', 'b', 'c']


ast            : map_values({'a':NULL,'b':2,'c':NULL})
raw expr       : map_values(map(array('a', 'b', 'c'), array(NULL, 2, NULL)))
checked expr   : map_values<T0=String, T1=UInt8 NULL><Map(T0, T1)>(map<T0=String, T1=UInt8 NULL><Array(T0), Array(T1)>(array<T0=String><T0, T0, T0>("a", "b", "c"), array<T0=UInt8 NULL><T0, T0, T0>(CAST(NULL AS UInt8 NULL), CAST(2_u8 AS UInt8 NULL), CAST(NULL AS UInt8 NULL))))
optimized expr : [NULL, 2, NULL]
output type    : Array(UInt8 NULL)
output domain  : [{2..=2} ∪ {NULL}]
output         : [NULL, 2, NULL]


ast            : map_values(map([a_col, b_col, c_col], [d_col, e_col, f_col]))
raw expr       : map_values(map(array(a_col::String, b_col::String, c_col::String), array(d_col::String NULL, e_col::String NULL, f_col::String NULL)))
checked expr   : map_values<T0=String, T1=String NULL><Map(T0, T1)>(map<T0=String, T1=String NULL><Array(T0), Array(T1)>(array<T0=String><T0, T0, T0>(a_col, b_col, c_col), array<T0=String NULL><T0, T0, T0>(d_col, e_col, f_col)))
evaluation:
+--------+-------------+-------------+-------------+---------------+------------------------+------------------------+--------------------+
|        | a_col       | b_col       | c_col       | d_col         | e_col                  | f_col                  | Output             |
+--------+-------------+-------------+-------------+---------------+------------------------+------------------------+--------------------+
| Type   | String      | String      | String      | String NULL   | String NULL            | String NULL            | Array(String NULL) |
| Domain | {"a"..="c"} | {"d"..="f"} | {"x"..="z"} | {"v1"..="v3"} | {"v4"..="v5"} ∪ {NULL} | {"v6"..="v7"} ∪ {NULL} | Unknown            |
| Row 0  | 'a'         | 'd'         | 'x'         | 'v1'          | 'v4'                   | 'v6'                   | ['v1', 'v4', 'v6'] |
| Row 1  | 'b'         | 'e'         | 'y'         | 'v2'          | 'v5'                   | NULL                   | ['v2', 'v5', NULL] |
| Row 2  | 'c'         | 'f'         | 'z'         | 'v3'          | NULL                   | 'v7'                   | ['v3', NULL, 'v7'] |
+--------+-------------+-------------+-------------+---------------+------------------------+------------------------+--------------------+
evaluation (internal):
+--------+------------------------------------------------------------------------------------------------------------------------------------------------------------+
| Column | Data                                                                                                                                                       |
+--------+------------------------------------------------------------------------------------------------------------------------------------------------------------+
| a_col  | StringColumn[a, b, c]                                                                                                                                      |
| b_col  | StringColumn[d, e, f]                                                                                                                                      |
| c_col  | StringColumn[x, y, z]                                                                                                                                      |
| d_col  | NullableColumn { column: StringColumn[v1, v2, v3], validity: [0b_____111] }                                                                                |
| e_col  | NullableColumn { column: StringColumn[v4, v5, ], validity: [0b_____011] }                                                                                  |
| f_col  | NullableColumn { column: StringColumn[v6, , v7], validity: [0b_____101] }                                                                                  |
| Output | ArrayColumn { values: NullableColumn { column: StringColumn[v1, v4, v6, v2, v5, , v3, , v7], validity: [0b01011111, 0b_______1] }, offsets: [0, 3, 6, 9] } |
+--------+------------------------------------------------------------------------------------------------------------------------------------------------------------+


ast            : map_size({})
raw expr       : map_size(map(array(), array()))
checked expr   : map_size<Map(Nothing)>(map<Array(Nothing), Array(Nothing)>(array<>(), array<>()))
optimized expr : 0_u8
output type    : UInt8
output domain  : {0..=0}
output         : 0


ast            : map_size({'a':1,'b':2,'c':3})
raw expr       : map_size(map(array('a', 'b', 'c'), array(1, 2, 3)))
checked expr   : map_size<T0=String, T1=UInt8><Map(T0, T1)>(map<T0=String, T1=UInt8><Array(T0), Array(T1)>(array<T0=String><T0, T0, T0>("a", "b", "c"), array<T0=UInt8><T0, T0, T0>(1_u8, 2_u8, 3_u8)))
optimized expr : 3_u64
output type    : UInt64
output domain  : {3..=3}
output         : 3


ast            : map_size({'a':NULL,'b':2,'c':NULL})
raw expr       : map_size(map(array('a', 'b', 'c'), array(NULL, 2, NULL)))
checked expr   : map_size<T0=String, T1=UInt8 NULL><Map(T0, T1)>(map<T0=String, T1=UInt8 NULL><Array(T0), Array(T1)>(array<T0=String><T0, T0, T0>("a", "b", "c"), array<T0=UInt8 NULL><T0, T0, T0>(CAST(NULL AS UInt8 NULL), CAST(2_u8 AS UInt8 NULL), CAST(NULL AS UInt8 NULL))))
optimized expr : 3_u64
output type    : UInt64
output domain  : {3..=3}
output         : 3


ast            : map_size(map([a_col, b_col, c_col], [d_col, e_col, f_col]))
raw expr       : map_size(map(array(a_col::String, b_col::String, c_col::String), array(d_col::String NULL, e_col::String NULL, f_col::String NULL)))
checked expr   : map_size<T0=String, T1=String NULL><Map(T0, T1)>(map<T0=String, T1=String NULL><Array(T0), Array(T1)>(array<T0=String><T0, T0, T0>(a_col, b_col, c_col), array<T0=String NULL><T0, T0, T0>(d_col, e_col, f_col)))
evaluation:
+--------+-------------+-------------+-------------+---------------+------------------------+------------------------+---------+
|        | a_col       | b_col       | c_col       | d_col         | e_col                  | f_col                  | Output  |
+--------+-------------+-------------+-------------+---------------+------------------------+------------------------+---------+
| Type   | String      | String      | String      | String NULL   | String NULL            | String NULL            | UInt64  |
| Domain | {"a"..="c"} | {"d"..="f"} | {"x"..="z"} | {"v1"..="v3"} | {"v4"..="v5"} ∪ {NULL} | {"v6"..="v7"} ∪ {NULL} | Unknown |
| Row 0  | 'a'         | 'd'         | 'x'         | 'v1'          | 'v4'                   | 'v6'                   | 3       |
| Row 1  | 'b'         | 'e'         | 'y'         | 'v2'          | 'v5'                   | NULL                   | 3       |
| Row 2  | 'c'         | 'f'         | 'z'         | 'v3'          | NULL                   | 'v7'                   | 3       |
+--------+-------------+-------------+-------------+---------------+------------------------+------------------------+---------+
evaluation (internal):
+--------+-----------------------------------------------------------------------------+
| Column | Data                                                                        |
+--------+-----------------------------------------------------------------------------+
| a_col  | StringColumn[a, b, c]                                                       |
| b_col  | StringColumn[d, e, f]                                                       |
| c_col  | StringColumn[x, y, z]                                                       |
| d_col  | NullableColumn { column: StringColumn[v1, v2, v3], validity: [0b_____111] } |
| e_col  | NullableColumn { column: StringColumn[v4, v5, ], validity: [0b_____011] }   |
| f_col  | NullableColumn { column: StringColumn[v6, , v7], validity: [0b_____101] }   |
| Output | UInt64([3, 3, 3])                                                           |
+--------+-----------------------------------------------------------------------------+


ast            : map_cat({}, {})
raw expr       : map_cat(map(array(), array()), map(array(), array()))
checked expr   : map_cat<Map(Nothing), Map(Nothing)>(map<Array(Nothing), Array(Nothing)>(array<>(), array<>()), map<Array(Nothing), Array(Nothing)>(array<>(), array<>()))
optimized expr : {} :: Map(Nothing)
output type    : Map(Nothing)
output domain  : {}
output         : {}


ast            : map_cat({}, {'k1': 'v1'})
raw expr       : map_cat(map(array(), array()), map(array('k1'), array('v1')))
checked expr   : map_cat<T0=String, T1=String><Map(T0, T1), Map(T0, T1)>(CAST(map<Array(Nothing), Array(Nothing)>(array<>(), array<>()) AS Map(String, String)), map<T0=String, T1=String><Array(T0), Array(T1)>(array<T0=String><T0>("k1"), array<T0=String><T0>("v1")))
optimized expr : {"k1":"v1"}
output type    : Map(String, String)
output domain  : {[{"k1"..="k1"}], [{"v1"..="v1"}]}
output         : {'k1':'v1'}


ast            : map_cat({'k1': 'v1'}, {})
raw expr       : map_cat(map(array('k1'), array('v1')), map(array(), array()))
checked expr   : map_cat<T0=String, T1=String><Map(T0, T1), Map(T0, T1)>(map<T0=String, T1=String><Array(T0), Array(T1)>(array<T0=String><T0>("k1"), array<T0=String><T0>("v1")), CAST(map<Array(Nothing), Array(Nothing)>(array<>(), array<>()) AS Map(String, String)))
optimized expr : {"k1":"v1"}
output type    : Map(String, String)
output domain  : {[{"k1"..="k1"}], [{"v1"..="v1"}]}
output         : {'k1':'v1'}


ast            : map_cat(map([a_col, b_col], [d_col, e_col]), map([c_col], [f_col]))
raw expr       : map_cat(map(array(a_col::String, b_col::String), array(d_col::String, e_col::String)), map(array(c_col::String), array(f_col::String)))
checked expr   : map_cat<T0=String, T1=String><Map(T0, T1), Map(T0, T1)>(map<T0=String, T1=String><Array(T0), Array(T1)>(array<T0=String><T0, T0>(a_col, b_col), array<T0=String><T0, T0>(d_col, e_col)), map<T0=String, T1=String><Array(T0), Array(T1)>(array<T0=String><T0>(c_col), array<T0=String><T0>(f_col)))
evaluation:
+--------+-------------------+-------------------+-------------------+-------------------+-------------------+-------------------+-----------------------------------------------+
|        | a_col             | b_col             | c_col             | d_col             | e_col             | f_col             | Output                                        |
+--------+-------------------+-------------------+-------------------+-------------------+-------------------+-------------------+-----------------------------------------------+
| Type   | String            | String            | String            | String            | String            | String            | Map(String, String)                           |
| Domain | {"a_k1"..="a_k3"} | {"b_k1"..="b_k3"} | {"c_k1"..="c_k3"} | {"aaa1"..="aaa3"} | {"bbb1"..="bbb3"} | {"ccc1"..="ccc3"} | Unknown                                       |
| Row 0  | 'a_k1'            | 'b_k1'            | 'c_k1'            | 'aaa1'            | 'bbb1'            | 'ccc1'            | {'a_k1':'aaa1', 'b_k1':'bbb1', 'c_k1':'ccc1'} |
| Row 1  | 'a_k2'            | 'b_k2'            | 'c_k2'            | 'aaa2'            | 'bbb2'            | 'ccc2'            | {'a_k2':'aaa2', 'b_k2':'bbb2', 'c_k2':'ccc2'} |
| Row 2  | 'a_k3'            | 'b_k3'            | 'c_k3'            | 'aaa3'            | 'bbb3'            | 'ccc3'            | {'a_k3':'aaa3', 'b_k3':'bbb3', 'c_k3':'ccc3'} |
+--------+-------------------+-------------------+-------------------+-------------------+-------------------+-------------------+-----------------------------------------------+
evaluation (internal):
+--------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| Column | Data                                                                                                                                                                                           |
+--------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| a_col  | StringColumn[a_k1, a_k2, a_k3]                                                                                                                                                                 |
| b_col  | StringColumn[b_k1, b_k2, b_k3]                                                                                                                                                                 |
| c_col  | StringColumn[c_k1, c_k2, c_k3]                                                                                                                                                                 |
| d_col  | StringColumn[aaa1, aaa2, aaa3]                                                                                                                                                                 |
| e_col  | StringColumn[bbb1, bbb2, bbb3]                                                                                                                                                                 |
| f_col  | StringColumn[ccc1, ccc2, ccc3]                                                                                                                                                                 |
| Output | ArrayColumn { values: Tuple([StringColumn[a_k1, b_k1, c_k1, a_k2, b_k2, c_k2, a_k3, b_k3, c_k3], StringColumn[aaa1, bbb1, ccc1, aaa2, bbb2, ccc2, aaa3, bbb3, ccc3]]), offsets: [0, 3, 6, 9] } |
+--------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+


ast            : map_cat({'k1':'v1','k2':'v2'}, {'k1':'abc'})
raw expr       : map_cat(map(array('k1', 'k2'), array('v1', 'v2')), map(array('k1'), array('abc')))
checked expr   : map_cat<T0=String, T1=String><Map(T0, T1), Map(T0, T1)>(map<T0=String, T1=String><Array(T0), Array(T1)>(array<T0=String><T0, T0>("k1", "k2"), array<T0=String><T0, T0>("v1", "v2")), map<T0=String, T1=String><Array(T0), Array(T1)>(array<T0=String><T0>("k1"), array<T0=String><T0>("abc")))
optimized expr : {"k1":"abc", "k2":"v2"}
output type    : Map(String, String)
output domain  : {[{"k1"..="k2"}], [{"abc"..="v2"}]}
output         : {'k1':'abc', 'k2':'v2'}


ast            : map_cat(map([a_col, b_col], [d_col, e_col]), map([c_col], [f_col]))
raw expr       : map_cat(map(array(a_col::String, b_col::String), array(d_col::String, e_col::String)), map(array(c_col::String), array(f_col::String)))
checked expr   : map_cat<T0=String, T1=String><Map(T0, T1), Map(T0, T1)>(map<T0=String, T1=String><Array(T0), Array(T1)>(array<T0=String><T0, T0>(a_col, b_col), array<T0=String><T0, T0>(d_col, e_col)), map<T0=String, T1=String><Array(T0), Array(T1)>(array<T0=String><T0>(c_col), array<T0=String><T0>(f_col)))
evaluation:
+--------+-------------------+-------------------+-------------------+-------------------+-------------------+-------------------+-----------------------------------------------+
|        | a_col             | b_col             | c_col             | d_col             | e_col             | f_col             | Output                                        |
+--------+-------------------+-------------------+-------------------+-------------------+-------------------+-------------------+-----------------------------------------------+
| Type   | String            | String            | String            | String            | String            | String            | Map(String, String)                           |
| Domain | {"a_k1"..="c_k3"} | {"b_k1"..="c_k2"} | {"c_k1"..="c_k3"} | {"aaa1"..="aaa3"} | {"bbb1"..="bbb3"} | {"ccc1"..="ccc3"} | Unknown                                       |
| Row 0  | 'a_k1'            | 'b_k1'            | 'c_k1'            | 'aaa1'            | 'bbb1'            | 'ccc1'            | {'a_k1':'aaa1', 'b_k1':'bbb1', 'c_k1':'ccc1'} |
| Row 1  | 'a_k2'            | 'c_k2'            | 'c_k2'            | 'aaa2'            | 'bbb2'            | 'ccc2'            | {'a_k2':'aaa2', 'c_k2':'ccc2'}                |
| Row 2  | 'c_k3'            | 'b_k3'            | 'c_k3'            | 'aaa3'            | 'bbb3'            | 'ccc3'            | {'c_k3':'ccc3', 'b_k3':'bbb3'}                |
+--------+-------------------+-------------------+-------------------+-------------------+-------------------+-------------------+-----------------------------------------------+
evaluation (internal):
+--------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| Column | Data                                                                                                                                                                   |
+--------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| a_col  | StringColumn[a_k1, a_k2, c_k3]                                                                                                                                         |
| b_col  | StringColumn[b_k1, c_k2, b_k3]                                                                                                                                         |
| c_col  | StringColumn[c_k1, c_k2, c_k3]                                                                                                                                         |
| d_col  | StringColumn[aaa1, aaa2, aaa3]                                                                                                                                         |
| e_col  | StringColumn[bbb1, bbb2, bbb3]                                                                                                                                         |
| f_col  | StringColumn[ccc1, ccc2, ccc3]                                                                                                                                         |
| Output | ArrayColumn { values: Tuple([StringColumn[a_k1, b_k1, c_k1, a_k2, c_k2, c_k3, b_k3], StringColumn[aaa1, bbb1, ccc1, aaa2, ccc2, ccc3, bbb3]]), offsets: [0, 3, 5, 7] } |
+--------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------+


ast            : map_cat({'k1': 'v1', 'k2': 'v2'}, {'k3': 'v3'})
raw expr       : map_cat(map(array('k1', 'k2'), array('v1', 'v2')), map(array('k3'), array('v3')))
checked expr   : map_cat<T0=String, T1=String><Map(T0, T1), Map(T0, T1)>(map<T0=String, T1=String><Array(T0), Array(T1)>(array<T0=String><T0, T0>("k1", "k2"), array<T0=String><T0, T0>("v1", "v2")), map<T0=String, T1=String><Array(T0), Array(T1)>(array<T0=String><T0>("k3"), array<T0=String><T0>("v3")))
optimized expr : {"k1":"v1", "k2":"v2", "k3":"v3"}
output type    : Map(String, String)
output domain  : {[{"k1"..="k3"}], [{"v1"..="v3"}]}
output         : {'k1':'v1', 'k2':'v2', 'k3':'v3'}


ast            : map_cat({'k1': 'v1'}, {'k2': 'v2', 'k3': 'v3'})
raw expr       : map_cat(map(array('k1'), array('v1')), map(array('k2', 'k3'), array('v2', 'v3')))
checked expr   : map_cat<T0=String, T1=String><Map(T0, T1), Map(T0, T1)>(map<T0=String, T1=String><Array(T0), Array(T1)>(array<T0=String><T0>("k1"), array<T0=String><T0>("v1")), map<T0=String, T1=String><Array(T0), Array(T1)>(array<T0=String><T0, T0>("k2", "k3"), array<T0=String><T0, T0>("v2", "v3")))
optimized expr : {"k1":"v1", "k2":"v2", "k3":"v3"}
output type    : Map(String, String)
output domain  : {[{"k1"..="k3"}], [{"v1"..="v3"}]}
output         : {'k1':'v1', 'k2':'v2', 'k3':'v3'}


ast            : map_cat({'k1': 'v1', 'k2': NULL}, {'k2': 'v2', 'k3': NULL})
raw expr       : map_cat(map(array('k1', 'k2'), array('v1', NULL)), map(array('k2', 'k3'), array('v2', NULL)))
checked expr   : map_cat<T0=String, T1=String NULL><Map(T0, T1), Map(T0, T1)>(map<T0=String, T1=String NULL><Array(T0), Array(T1)>(array<T0=String><T0, T0>("k1", "k2"), array<T0=String NULL><T0, T0>(CAST("v1" AS String NULL), CAST(NULL AS String NULL))), map<T0=String, T1=String NULL><Array(T0), Array(T1)>(array<T0=String><T0, T0>("k2", "k3"), array<T0=String NULL><T0, T0>(CAST("v2" AS String NULL), CAST(NULL AS String NULL))))
optimized expr : {"k1":"v1", "k2":"v2", "k3":NULL}
output type    : Map(String, String NULL)
output domain  : {[{"k1"..="k3"}], [{"v1"..="v2"} ∪ {NULL}]}
output         : {'k1':'v1', 'k2':'v2', 'k3':NULL}


ast            : map_cat({'k1': {'nk1': 'nv1'}, 'k2': {'nk2': 'nv2'}}, {'k2': {'nk3': 'nv3'}, 'k3': {'nk4': 'nv4'}})
raw expr       : map_cat(map(array('k1', 'k2'), array(map(array('nk1'), array('nv1')), map(array('nk2'), array('nv2')))), map(array('k2', 'k3'), array(map(array('nk3'), array('nv3')), map(array('nk4'), array('nv4')))))
checked expr   : map_cat<T0=String, T1=Map(String, String)><Map(T0, T1), Map(T0, T1)>(map<T0=String, T1=Map(String, String)><Array(T0), Array(T1)>(array<T0=String><T0, T0>("k1", "k2"), array<T0=Map(String, String)><T0, T0>(map<T0=String, T1=String><Array(T0), Array(T1)>(array<T0=String><T0>("nk1"), array<T0=String><T0>("nv1")), map<T0=String, T1=String><Array(T0), Array(T1)>(array<T0=String><T0>("nk2"), array<T0=String><T0>("nv2")))), map<T0=String, T1=Map(String, String)><Array(T0), Array(T1)>(array<T0=String><T0, T0>("k2", "k3"), array<T0=Map(String, String)><T0, T0>(map<T0=String, T1=String><Array(T0), Array(T1)>(array<T0=String><T0>("nk3"), array<T0=String><T0>("nv3")), map<T0=String, T1=String><Array(T0), Array(T1)>(array<T0=String><T0>("nk4"), array<T0=String><T0>("nv4")))))
optimized expr : {"k1":{"nk1":"nv1"}, "k2":{"nk3":"nv3"}, "k3":{"nk4":"nv4"}}
output type    : Map(String, Map(String, String))
output domain  : {[{"k1"..="k3"}], [{[{"nk1"..="nk4"}], [{"nv1"..="nv4"}]}]}
output         : {'k1':{'nk1':'nv1'}, 'k2':{'nk3':'nv3'}, 'k3':{'nk4':'nv4'}}


ast            : map_cat({'k1': {'nk1': 'nv1'}, 'k2': {'nk2': 'nv2'}}, {'k1': {'nk1': 'new_nv1'}, 'k2': {'nk3': 'nv3'}})
raw expr       : map_cat(map(array('k1', 'k2'), array(map(array('nk1'), array('nv1')), map(array('nk2'), array('nv2')))), map(array('k1', 'k2'), array(map(array('nk1'), array('new_nv1')), map(array('nk3'), array('nv3')))))
checked expr   : map_cat<T0=String, T1=Map(String, String)><Map(T0, T1), Map(T0, T1)>(map<T0=String, T1=Map(String, String)><Array(T0), Array(T1)>(array<T0=String><T0, T0>("k1", "k2"), array<T0=Map(String, String)><T0, T0>(map<T0=String, T1=String><Array(T0), Array(T1)>(array<T0=String><T0>("nk1"), array<T0=String><T0>("nv1")), map<T0=String, T1=String><Array(T0), Array(T1)>(array<T0=String><T0>("nk2"), array<T0=String><T0>("nv2")))), map<T0=String, T1=Map(String, String)><Array(T0), Array(T1)>(array<T0=String><T0, T0>("k1", "k2"), array<T0=Map(String, String)><T0, T0>(map<T0=String, T1=String><Array(T0), Array(T1)>(array<T0=String><T0>("nk1"), array<T0=String><T0>("new_nv1")), map<T0=String, T1=String><Array(T0), Array(T1)>(array<T0=String><T0>("nk3"), array<T0=String><T0>("nv3")))))
optimized expr : {"k1":{"nk1":"new_nv1"}, "k2":{"nk3":"nv3"}}
output type    : Map(String, Map(String, String))
output domain  : {[{"k1"..="k2"}], [{[{"nk1"..="nk3"}], [{"new_nv1"..="nv3"}]}]}
output         : {'k1':{'nk1':'new_nv1'}, 'k2':{'nk3':'nv3'}}


ast            : map_delete({}, 'a', 'b')
raw expr       : map_delete(map(array(), array()), 'a', 'b')
checked expr   : map_delete<Map(Nothing), String, String>(map<Array(Nothing), Array(Nothing)>(array<>(), array<>()), "a", "b")
optimized expr : {} :: Map(Nothing)
output type    : Map(Nothing)
output domain  : {}
output         : {}


error: 
  --> SQL:1:1
  |
1 | map_delete({})
  | ^^^^^^^^^^^^^^ no function matches signature `map_delete(Map(Nothing))`, you might need to add explicit type casts.



ast            : map_delete({}, NULL, NULL)
raw expr       : map_delete(map(array(), array()), NULL, NULL)
checked expr   : map_delete<Map(Nothing), NULL, NULL>(map<Array(Nothing), Array(Nothing)>(array<>(), array<>()), NULL, NULL)
optimized expr : {} :: Map(Nothing)
output type    : Map(Nothing)
output domain  : {}
output         : {}


error: 
  --> SQL:1:1
  |
1 | map_delete({}, ['k3'], ['k2'])
  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ no function matches signature `map_delete(Map(Nothing), Array(String), Array(String))`, you might need to add explicit type casts.



ast            : map_delete({'k1': 'v1', 'k2': 'v2', 'k3': 'v3', 'k4': 'v4'}, 'k3', 'k2')
raw expr       : map_delete(map(array('k1', 'k2', 'k3', 'k4'), array('v1', 'v2', 'v3', 'v4')), 'k3', 'k2')
checked expr   : map_delete<Map(String, String), String, String>(map<T0=String, T1=String><Array(T0), Array(T1)>(array<T0=String><T0, T0, T0, T0>("k1", "k2", "k3", "k4"), array<T0=String><T0, T0, T0, T0>("v1", "v2", "v3", "v4")), "k3", "k2")
optimized expr : {"k1":"v1", "k4":"v4"}
output type    : Map(String, String)
output domain  : {[{"k1"..="k4"}], [{"v1"..="v4"}]}
output         : {'k1':'v1', 'k4':'v4'}


ast            : map_delete({'k1': 'v1', 'k2': 'v2', 'k3': 'v3', 'k4': 'v4'}, ['k3', 'k2'])
raw expr       : map_delete(map(array('k1', 'k2', 'k3', 'k4'), array('v1', 'v2', 'v3', 'v4')), array('k3', 'k2'))
checked expr   : map_delete<Map(String, String), Array(String)>(map<T0=String, T1=String><Array(T0), Array(T1)>(array<T0=String><T0, T0, T0, T0>("k1", "k2", "k3", "k4"), array<T0=String><T0, T0, T0, T0>("v1", "v2", "v3", "v4")), array<T0=String><T0, T0>("k3", "k2"))
optimized expr : {"k1":"v1", "k4":"v4"}
output type    : Map(String, String)
output domain  : {[{"k1"..="k4"}], [{"v1"..="v4"}]}
output         : {'k1':'v1', 'k4':'v4'}


ast            : map_delete(map([a_col, b_col], [d_col, e_col]), 'a_k2', 'b_k3')
raw expr       : map_delete(map(array(a_col::String, b_col::String), array(d_col::String, e_col::String)), 'a_k2', 'b_k3')
checked expr   : map_delete<Map(String, String), String, String>(map<T0=String, T1=String><Array(T0), Array(T1)>(array<T0=String><T0, T0>(a_col, b_col), array<T0=String><T0, T0>(d_col, e_col)), "a_k2", "b_k3")
evaluation:
+--------+-------------------+-------------------+-------------------+-------------------+--------------------------------+
|        | a_col             | b_col             | d_col             | e_col             | Output                         |
+--------+-------------------+-------------------+-------------------+-------------------+--------------------------------+
| Type   | String            | String            | String            | String            | Map(String, String)            |
| Domain | {"a_k1"..="a_k3"} | {"b_k1"..="b_k3"} | {"aaa1"..="aaa3"} | {"bbb1"..="bbb3"} | Unknown                        |
| Row 0  | 'a_k1'            | 'b_k1'            | 'aaa1'            | 'bbb1'            | {'a_k1':'aaa1', 'b_k1':'bbb1'} |
| Row 1  | 'a_k2'            | 'b_k2'            | 'aaa2'            | 'bbb2'            | {'b_k2':'bbb2'}                |
| Row 2  | 'a_k3'            | 'b_k3'            | 'aaa3'            | 'bbb3'            | {'a_k3':'aaa3'}                |
+--------+-------------------+-------------------+-------------------+-------------------+--------------------------------+
evaluation (internal):
+--------+------------------------------------------------------------------------------------------------------------------------------------+
| Column | Data                                                                                                                               |
+--------+------------------------------------------------------------------------------------------------------------------------------------+
| a_col  | StringColumn[a_k1, a_k2, a_k3]                                                                                                     |
| b_col  | StringColumn[b_k1, b_k2, b_k3]                                                                                                     |
| d_col  | StringColumn[aaa1, aaa2, aaa3]                                                                                                     |
| e_col  | StringColumn[bbb1, bbb2, bbb3]                                                                                                     |
| Output | ArrayColumn { values: Tuple([StringColumn[a_k1, b_k1, b_k2, a_k3], StringColumn[aaa1, bbb1, bbb2, aaa3]]), offsets: [0, 2, 3, 4] } |
+--------+------------------------------------------------------------------------------------------------------------------------------------+


ast            : map_delete({'k1': 'v1', 'k2': 'v2', 'k3': 'v3', 'k4': 'v4'}, string_key_col)
raw expr       : map_delete(map(array('k1', 'k2', 'k3', 'k4'), array('v1', 'v2', 'v3', 'v4')), string_key_col::String)
checked expr   : map_delete<Map(String, String), String>(map<T0=String, T1=String><Array(T0), Array(T1)>(array<T0=String><T0, T0, T0, T0>("k1", "k2", "k3", "k4"), array<T0=String><T0, T0, T0, T0>("v1", "v2", "v3", "v4")), string_key_col)
optimized expr : map_delete<Map(String, String), String>({"k1":"v1", "k2":"v2", "k3":"v3", "k4":"v4"}, string_key_col)
evaluation:
+--------+----------------+------------------------------------+
|        | string_key_col | Output                             |
+--------+----------------+------------------------------------+
| Type   | String         | Map(String, String)                |
| Domain | {"k2"..="k3"}  | {[{"k1"..="k4"}], [{"v1"..="v4"}]} |
| Row 0  | 'k3'           | {'k1':'v1', 'k2':'v2', 'k4':'v4'}  |
| Row 1  | 'k2'           | {'k1':'v1', 'k3':'v3', 'k4':'v4'}  |
+--------+----------------+------------------------------------+
evaluation (internal):
+----------------+---------------------------------------------------------------------------------------------------------------------------------+
| Column         | Data                                                                                                                            |
+----------------+---------------------------------------------------------------------------------------------------------------------------------+
| string_key_col | StringColumn[k3, k2]                                                                                                            |
| Output         | ArrayColumn { values: Tuple([StringColumn[k1, k2, k4, k1, k3, k4], StringColumn[v1, v2, v4, v1, v3, v4]]), offsets: [0, 3, 6] } |
+----------------+---------------------------------------------------------------------------------------------------------------------------------+


ast            : map_delete({'k1': 'v1', 'k2': 'v2', 'k3': 'v3'}, 'k1', 'k2', 'k3')
raw expr       : map_delete(map(array('k1', 'k2', 'k3'), array('v1', 'v2', 'v3')), 'k1', 'k2', 'k3')
checked expr   : map_delete<Map(String, String), String, String, String>(map<T0=String, T1=String><Array(T0), Array(T1)>(array<T0=String><T0, T0, T0>("k1", "k2", "k3"), array<T0=String><T0, T0, T0>("v1", "v2", "v3")), "k1", "k2", "k3")
optimized expr : {}
output type    : Map(String, String)
output domain  : {}
output         : {}


ast            : map_delete({'k1': 'v1', 'k2': 'v2', 'k3': 'v3'}, 'k1', 'k1')
raw expr       : map_delete(map(array('k1', 'k2', 'k3'), array('v1', 'v2', 'v3')), 'k1', 'k1')
checked expr   : map_delete<Map(String, String), String, String>(map<T0=String, T1=String><Array(T0), Array(T1)>(array<T0=String><T0, T0, T0>("k1", "k2", "k3"), array<T0=String><T0, T0, T0>("v1", "v2", "v3")), "k1", "k1")
optimized expr : {"k2":"v2", "k3":"v3"}
output type    : Map(String, String)
output domain  : {[{"k2"..="k3"}], [{"v2"..="v3"}]}
output         : {'k2':'v2', 'k3':'v3'}


ast            : map_delete({'k1': 'v1', 'k2': 'v2'}, 'k3', 'k4')
raw expr       : map_delete(map(array('k1', 'k2'), array('v1', 'v2')), 'k3', 'k4')
checked expr   : map_delete<Map(String, String), String, String>(map<T0=String, T1=String><Array(T0), Array(T1)>(array<T0=String><T0, T0>("k1", "k2"), array<T0=String><T0, T0>("v1", "v2")), "k3", "k4")
optimized expr : {"k1":"v1", "k2":"v2"}
output type    : Map(String, String)
output domain  : {[{"k1"..="k2"}], [{"v1"..="v2"}]}
output         : {'k1':'v1', 'k2':'v2'}


error: 
  --> SQL:1:1
  |
1 | map_delete(map([a_col, b_col], [d_col, e_col]), 'a_k2', 'b_k3')
  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ no function matches signature `map_delete(Map(Int64, Int64), String, String)`, you might need to add explicit type casts.



ast            : map_delete(map([a_col, d_col], [b_col, e_col]), 'a_k2', 'aaa3')
raw expr       : map_delete(map(array(a_col::String, d_col::String), array(b_col::Int16, e_col::Int16)), 'a_k2', 'aaa3')
checked expr   : map_delete<Map(String, Int16), String, String>(map<T0=String, T1=Int16><Array(T0), Array(T1)>(array<T0=String><T0, T0>(a_col, d_col), array<T0=Int16><T0, T0>(b_col, e_col)), "a_k2", "aaa3")
evaluation:
+--------+-------------------+-------------+-------------------+-------------+--------------------------+
|        | a_col             | b_col       | d_col             | e_col       | Output                   |
+--------+-------------------+-------------+-------------------+-------------+--------------------------+
| Type   | String            | Int16       | String            | Int16       | Map(String, Int16)       |
| Domain | {"a_k1"..="a_k3"} | {555..=559} | {"aaa1"..="aaa3"} | {662..=666} | Unknown                  |
| Row 0  | 'a_k1'            | 555         | 'aaa1'            | 666         | {'a_k1':555, 'aaa1':666} |
| Row 1  | 'a_k2'            | 557         | 'aaa2'            | 664         | {'aaa2':664}             |
| Row 2  | 'a_k3'            | 559         | 'aaa3'            | 662         | {'a_k3':559}             |
+--------+-------------------+-------------+-------------------+-------------+--------------------------+
evaluation (internal):
+--------+---------------------------------------------------------------------------------------------------------------------------+
| Column | Data                                                                                                                      |
+--------+---------------------------------------------------------------------------------------------------------------------------+
| a_col  | StringColumn[a_k1, a_k2, a_k3]                                                                                            |
| b_col  | Int16([555, 557, 559])                                                                                                    |
| d_col  | StringColumn[aaa1, aaa2, aaa3]                                                                                            |
| e_col  | Int16([666, 664, 662])                                                                                                    |
| Output | ArrayColumn { values: Tuple([StringColumn[a_k1, aaa1, aaa2, a_k3], Int16([555, 666, 664, 559])]), offsets: [0, 2, 3, 4] } |
+--------+---------------------------------------------------------------------------------------------------------------------------+


error: 
  --> SQL:1:1
  |
1 | map_delete(map([a_col, d_col], [b_col, e_col]), 224, 444)
  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ no function matches signature `map_delete(Map(Int16, Int16), UInt8, UInt16)`, you might need to add explicit type casts.



ast            : map_contains_key({'a':1,'b':2,'c':3}, 'a')
raw expr       : map_contains_key(map(array('a', 'b', 'c'), array(1, 2, 3)), 'a')
checked expr   : map_contains_key<T0=String, T1=UInt8><Map(T0, T1), T0>(map<T0=String, T1=UInt8><Array(T0), Array(T1)>(array<T0=String><T0, T0, T0>("a", "b", "c"), array<T0=UInt8><T0, T0, T0>(1_u8, 2_u8, 3_u8)), "a")
optimized expr : true
output type    : Boolean
output domain  : {TRUE}
output         : true


ast            : map_contains_key({}, 'a')
raw expr       : map_contains_key(map(array(), array()), 'a')
checked expr   : map_contains_key<T0=String><Map(Nothing), T0>(map<Array(Nothing), Array(Nothing)>(array<>(), array<>()), "a")
optimized expr : false
output type    : Boolean
output domain  : {FALSE}
output         : false


ast            : map_contains_key({'a':1,'b':2,'c':3}, 'd')
raw expr       : map_contains_key(map(array('a', 'b', 'c'), array(1, 2, 3)), 'd')
checked expr   : map_contains_key<T0=String, T1=UInt8><Map(T0, T1), T0>(map<T0=String, T1=UInt8><Array(T0), Array(T1)>(array<T0=String><T0, T0, T0>("a", "b", "c"), array<T0=UInt8><T0, T0, T0>(1_u8, 2_u8, 3_u8)), "d")
optimized expr : false
output type    : Boolean
output domain  : {FALSE}
output         : false


ast            : map_contains_key({'a':NULL,'b':2,'c':NULL}, 'a')
raw expr       : map_contains_key(map(array('a', 'b', 'c'), array(NULL, 2, NULL)), 'a')
checked expr   : map_contains_key<T0=String, T1=UInt8 NULL><Map(T0, T1), T0>(map<T0=String, T1=UInt8 NULL><Array(T0), Array(T1)>(array<T0=String><T0, T0, T0>("a", "b", "c"), array<T0=UInt8 NULL><T0, T0, T0>(CAST(NULL AS UInt8 NULL), CAST(2_u8 AS UInt8 NULL), CAST(NULL AS UInt8 NULL))), "a")
optimized expr : true
output type    : Boolean
output domain  : {TRUE}
output         : true


ast            : map_contains_key(map([a_col, b_col, c_col], [d_col, e_col, f_col]), 'a')
raw expr       : map_contains_key(map(array(a_col::String, b_col::String, c_col::String), array(d_col::String NULL, e_col::String NULL, f_col::String NULL)), 'a')
checked expr   : map_contains_key<T0=String, T1=String NULL><Map(T0, T1), T0>(map<T0=String, T1=String NULL><Array(T0), Array(T1)>(array<T0=String><T0, T0, T0>(a_col, b_col, c_col), array<T0=String NULL><T0, T0, T0>(d_col, e_col, f_col)), "a")
evaluation:
+--------+-------------+-------------+-------------+---------------+------------------------+------------------------+---------+
|        | a_col       | b_col       | c_col       | d_col         | e_col                  | f_col                  | Output  |
+--------+-------------+-------------+-------------+---------------+------------------------+------------------------+---------+
| Type   | String      | String      | String      | String NULL   | String NULL            | String NULL            | Boolean |
| Domain | {"a"..="c"} | {"d"..="f"} | {"x"..="z"} | {"v1"..="v3"} | {"v4"..="v5"} ∪ {NULL} | {"v6"..="v7"} ∪ {NULL} | Unknown |
| Row 0  | 'a'         | 'd'         | 'x'         | 'v1'          | 'v4'                   | 'v6'                   | true    |
| Row 1  | 'b'         | 'e'         | 'y'         | 'v2'          | 'v5'                   | NULL                   | false   |
| Row 2  | 'c'         | 'f'         | 'z'         | 'v3'          | NULL                   | 'v7'                   | false   |
+--------+-------------+-------------+-------------+---------------+------------------------+------------------------+---------+
evaluation (internal):
+--------+-----------------------------------------------------------------------------+
| Column | Data                                                                        |
+--------+-----------------------------------------------------------------------------+
| a_col  | StringColumn[a, b, c]                                                       |
| b_col  | StringColumn[d, e, f]                                                       |
| c_col  | StringColumn[x, y, z]                                                       |
| d_col  | NullableColumn { column: StringColumn[v1, v2, v3], validity: [0b_____111] } |
| e_col  | NullableColumn { column: StringColumn[v4, v5, ], validity: [0b_____011] }   |
| f_col  | NullableColumn { column: StringColumn[v6, , v7], validity: [0b_____101] }   |
| Output | Boolean([0b_____001])                                                       |
+--------+-----------------------------------------------------------------------------+


ast            : map_contains_key(map([a_col, b_col, c_col], [d_col, e_col, f_col]), 'd')
raw expr       : map_contains_key(map(array(a_col::String, b_col::String, c_col::String), array(d_col::String NULL, e_col::String NULL, f_col::String NULL)), 'd')
checked expr   : map_contains_key<T0=String, T1=String NULL><Map(T0, T1), T0>(map<T0=String, T1=String NULL><Array(T0), Array(T1)>(array<T0=String><T0, T0, T0>(a_col, b_col, c_col), array<T0=String NULL><T0, T0, T0>(d_col, e_col, f_col)), "d")
evaluation:
+--------+-------------+-------------+-------------+---------------+------------------------+------------------------+---------+
|        | a_col       | b_col       | c_col       | d_col         | e_col                  | f_col                  | Output  |
+--------+-------------+-------------+-------------+---------------+------------------------+------------------------+---------+
| Type   | String      | String      | String      | String NULL   | String NULL            | String NULL            | Boolean |
| Domain | {"a"..="c"} | {"d"..="f"} | {"x"..="z"} | {"v1"..="v3"} | {"v4"..="v5"} ∪ {NULL} | {"v6"..="v7"} ∪ {NULL} | Unknown |
| Row 0  | 'a'         | 'd'         | 'x'         | 'v1'          | 'v4'                   | 'v6'                   | true    |
| Row 1  | 'b'         | 'e'         | 'y'         | 'v2'          | 'v5'                   | NULL                   | false   |
| Row 2  | 'c'         | 'f'         | 'z'         | 'v3'          | NULL                   | 'v7'                   | false   |
+--------+-------------+-------------+-------------+---------------+------------------------+------------------------+---------+
evaluation (internal):
+--------+-----------------------------------------------------------------------------+
| Column | Data                                                                        |
+--------+-----------------------------------------------------------------------------+
| a_col  | StringColumn[a, b, c]                                                       |
| b_col  | StringColumn[d, e, f]                                                       |
| c_col  | StringColumn[x, y, z]                                                       |
| d_col  | NullableColumn { column: StringColumn[v1, v2, v3], validity: [0b_____111] } |
| e_col  | NullableColumn { column: StringColumn[v4, v5, ], validity: [0b_____011] }   |
| f_col  | NullableColumn { column: StringColumn[v6, , v7], validity: [0b_____101] }   |
| Output | Boolean([0b_____001])                                                       |
+--------+-----------------------------------------------------------------------------+


ast            : map_pick({'a':1,'b':2,'c':3}, 'a', 'b')
raw expr       : map_pick(map(array('a', 'b', 'c'), array(1, 2, 3)), 'a', 'b')
checked expr   : map_pick<Map(String, UInt8), String, String>(map<T0=String, T1=UInt8><Array(T0), Array(T1)>(array<T0=String><T0, T0, T0>("a", "b", "c"), array<T0=UInt8><T0, T0, T0>(1_u8, 2_u8, 3_u8)), "a", "b")
optimized expr : {"a":1_u8, "b":2_u8}
output type    : Map(String, UInt8)
output domain  : {[{"a"..="b"}], [{1..=2}]}
output         : {'a':1, 'b':2}


ast            : map_pick({'a':1,'b':2,'c':3}, ['a', 'b'])
raw expr       : map_pick(map(array('a', 'b', 'c'), array(1, 2, 3)), array('a', 'b'))
checked expr   : map_pick<Map(String, UInt8), Array(String)>(map<T0=String, T1=UInt8><Array(T0), Array(T1)>(array<T0=String><T0, T0, T0>("a", "b", "c"), array<T0=UInt8><T0, T0, T0>(1_u8, 2_u8, 3_u8)), array<T0=String><T0, T0>("a", "b"))
optimized expr : {"a":1_u8, "b":2_u8}
output type    : Map(String, UInt8)
output domain  : {[{"a"..="b"}], [{1..=2}]}
output         : {'a':1, 'b':2}


ast            : map_pick({'a':1,'b':2,'c':3}, [])
raw expr       : map_pick(map(array('a', 'b', 'c'), array(1, 2, 3)), array())
checked expr   : map_pick<Map(String, UInt8), Array(Nothing)>(map<T0=String, T1=UInt8><Array(T0), Array(T1)>(array<T0=String><T0, T0, T0>("a", "b", "c"), array<T0=UInt8><T0, T0, T0>(1_u8, 2_u8, 3_u8)), array<>())
optimized expr : {}
output type    : Map(String, UInt8)
output domain  : {}
output         : {}


ast            : map_pick({1:'a',2:'b',3:'c'}, 1, 3)
raw expr       : map_pick(map(array(1, 2, 3), array('a', 'b', 'c')), 1, 3)
checked expr   : map_pick<Map(UInt8, String), UInt8, UInt8>(map<T0=UInt8, T1=String><Array(T0), Array(T1)>(array<T0=UInt8><T0, T0, T0>(1_u8, 2_u8, 3_u8), array<T0=String><T0, T0, T0>("a", "b", "c")), 1_u8, 3_u8)
optimized expr : {1_u8:"a", 3_u8:"c"}
output type    : Map(UInt8, String)
output domain  : {[{1..=3}], [{"a"..="c"}]}
output         : {1:'a', 3:'c'}


ast            : map_pick({}, 'a', 'b')
raw expr       : map_pick(map(array(), array()), 'a', 'b')
checked expr   : map_pick<Map(Nothing), String, String>(map<Array(Nothing), Array(Nothing)>(array<>(), array<>()), "a", "b")
optimized expr : {} :: Map(Nothing)
output type    : Map(Nothing)
output domain  : {}
output         : {}


ast            : map_pick({}, [])
raw expr       : map_pick(map(array(), array()), array())
checked expr   : map_pick<Map(Nothing), Array(Nothing)>(map<Array(Nothing), Array(Nothing)>(array<>(), array<>()), array<>())
optimized expr : {} :: Map(Nothing)
output type    : Map(Nothing)
output domain  : {}
output         : {}


ast            : map_pick(map([a_col, b_col, c_col], [d_col, e_col, f_col]), 'a', 'b')
raw expr       : map_pick(map(array(a_col::String, b_col::String, c_col::String), array(d_col::String NULL, e_col::String NULL, f_col::String NULL)), 'a', 'b')
checked expr   : map_pick<Map(String, String NULL), String, String>(map<T0=String, T1=String NULL><Array(T0), Array(T1)>(array<T0=String><T0, T0, T0>(a_col, b_col, c_col), array<T0=String NULL><T0, T0, T0>(d_col, e_col, f_col)), "a", "b")
evaluation:
+--------+-------------+-------------+-------------+---------------+------------------------+------------------------+--------------------------+
|        | a_col       | b_col       | c_col       | d_col         | e_col                  | f_col                  | Output                   |
+--------+-------------+-------------+-------------+---------------+------------------------+------------------------+--------------------------+
| Type   | String      | String      | String      | String NULL   | String NULL            | String NULL            | Map(String, String NULL) |
| Domain | {"a"..="c"} | {"d"..="f"} | {"x"..="z"} | {"v1"..="v3"} | {"v4"..="v5"} ∪ {NULL} | {"v6"..="v7"} ∪ {NULL} | Unknown                  |
| Row 0  | 'a'         | 'd'         | 'x'         | 'v1'          | 'v4'                   | 'v6'                   | {'a':'v1'}               |
| Row 1  | 'b'         | 'e'         | 'y'         | 'v2'          | 'v5'                   | NULL                   | {'b':'v2'}               |
| Row 2  | 'c'         | 'f'         | 'z'         | 'v3'          | NULL                   | 'v7'                   | {}                       |
+--------+-------------+-------------+-------------+---------------+------------------------+------------------------+--------------------------+
evaluation (internal):
+--------+-----------------------------------------------------------------------------------------------------------------------------------------------------+
| Column | Data                                                                                                                                                |
+--------+-----------------------------------------------------------------------------------------------------------------------------------------------------+
| a_col  | StringColumn[a, b, c]                                                                                                                               |
| b_col  | StringColumn[d, e, f]                                                                                                                               |
| c_col  | StringColumn[x, y, z]                                                                                                                               |
| d_col  | NullableColumn { column: StringColumn[v1, v2, v3], validity: [0b_____111] }                                                                         |
| e_col  | NullableColumn { column: StringColumn[v4, v5, ], validity: [0b_____011] }                                                                           |
| f_col  | NullableColumn { column: StringColumn[v6, , v7], validity: [0b_____101] }                                                                           |
| Output | ArrayColumn { values: Tuple([StringColumn[a, b], NullableColumn { column: StringColumn[v1, v2], validity: [0b______11] }]), offsets: [0, 1, 2, 2] } |
+--------+-----------------------------------------------------------------------------------------------------------------------------------------------------+


ast            : map_insert({}, 'k1', 'v1')
raw expr       : map_insert(map(array(), array()), 'k1', 'v1')
checked expr   : map_insert<T0=String, T1=String><Map(T0, T1) NULL, T0, T1>(CAST(map<Array(Nothing), Array(Nothing)>(array<>(), array<>()) AS Map(String, String) NULL), "k1", "v1")
optimized expr : {"k1":"v1"}
output type    : Map(String, String)
output domain  : {[{"k1"..="k1"}], [{"v1"..="v1"}]}
output         : {'k1':'v1'}


ast            : map_insert({'k1': 'v1'}, 'k2', 'v2')
raw expr       : map_insert(map(array('k1'), array('v1')), 'k2', 'v2')
checked expr   : map_insert<T0=String, T1=String><Map(T0, T1) NULL, T0, T1>(CAST(map<T0=String, T1=String><Array(T0), Array(T1)>(array<T0=String><T0>("k1"), array<T0=String><T0>("v1")) AS Map(String, String) NULL), "k2", "v2")
optimized expr : {"k1":"v1", "k2":"v2"}
output type    : Map(String, String)
output domain  : {[{"k1"..="k2"}], [{"v1"..="v2"}]}
output         : {'k1':'v1', 'k2':'v2'}


error: 
  --> SQL:1:1
  |
1 | map_insert({'k1': 'v1', 'k2': 'v2'}, 'k1', 'v10', false)
  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ map key `'k1'` duplicate while evaluating function `map_insert({'k1':'v1', 'k2':'v2'}, 'k1', 'v10', false)` in expr `map_insert(CAST(map(array('k1', 'k2'), array('v1', 'v2')) AS Map(String, String) NULL), 'k1', 'v10', false)`



ast            : map_insert({'k1': 'v1', 'k2': 'v2'}, 'k1', 'v10', true)
raw expr       : map_insert(map(array('k1', 'k2'), array('v1', 'v2')), 'k1', 'v10', true)
checked expr   : map_insert<T0=String, T1=String><Map(T0, T1) NULL, T0, T1, Boolean>(CAST(map<T0=String, T1=String><Array(T0), Array(T1)>(array<T0=String><T0, T0>("k1", "k2"), array<T0=String><T0, T0>("v1", "v2")) AS Map(String, String) NULL), "k1", "v10", true)
optimized expr : {"k1":"v10", "k2":"v2"}
output type    : Map(String, String)
output domain  : {[{"k1"..="k2"}], [{"v10"..="v2"}]}
output         : {'k1':'v10', 'k2':'v2'}


ast            : map_insert(map([a_col, b_col, c_col], [d_col, e_col, f_col]), 'k1', 'v10')
raw expr       : map_insert(map(array(a_col::String, b_col::String, c_col::String), array(d_col::String NULL, e_col::String NULL, f_col::String NULL)), 'k1', 'v10')
checked expr   : map_insert<T0=String, T1=String NULL><Map(T0, T1) NULL, T0, T1>(CAST(map<T0=String, T1=String NULL><Array(T0), Array(T1)>(array<T0=String><T0, T0, T0>(a_col, b_col, c_col), array<T0=String NULL><T0, T0, T0>(d_col, e_col, f_col)) AS Map(String, String NULL) NULL), "k1", CAST("v10" AS String NULL))
optimized expr : map_insert<T0=String, T1=String NULL><Map(T0, T1) NULL, T0, T1>(CAST(map<T0=String, T1=String NULL><Array(T0), Array(T1)>(array<T0=String><T0, T0, T0>(a_col, b_col, c_col), array<T0=String NULL><T0, T0, T0>(d_col, e_col, f_col)) AS Map(String, String NULL) NULL), "k1", "v10")
evaluation:
+--------+-------------+-------------+-------------+---------------+------------------------+------------------------+--------------------------------------------+
|        | a_col       | b_col       | c_col       | d_col         | e_col                  | f_col                  | Output                                     |
+--------+-------------+-------------+-------------+---------------+------------------------+------------------------+--------------------------------------------+
| Type   | String      | String      | String      | String NULL   | String NULL            | String NULL            | Map(String, String NULL)                   |
| Domain | {"a"..="c"} | {"d"..="f"} | {"x"..="z"} | {"v1"..="v3"} | {"v4"..="v5"} ∪ {NULL} | {"v6"..="v7"} ∪ {NULL} | Unknown                                    |
| Row 0  | 'a'         | 'd'         | 'x'         | 'v1'          | 'v4'                   | 'v6'                   | {'a':'v1', 'd':'v4', 'x':'v6', 'k1':'v10'} |
| Row 1  | 'b'         | 'e'         | 'y'         | 'v2'          | 'v5'                   | NULL                   | {'b':'v2', 'e':'v5', 'y':NULL, 'k1':'v10'} |
| Row 2  | 'c'         | 'f'         | 'z'         | 'v3'          | NULL                   | 'v7'                   | {'c':'v3', 'f':NULL, 'z':'v7', 'k1':'v10'} |
+--------+-------------+-------------+-------------+---------------+------------------------+------------------------+--------------------------------------------+
evaluation (internal):
+--------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| Column | Data                                                                                                                                                                                                                                     |
+--------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| a_col  | StringColumn[a, b, c]                                                                                                                                                                                                                    |
| b_col  | StringColumn[d, e, f]                                                                                                                                                                                                                    |
| c_col  | StringColumn[x, y, z]                                                                                                                                                                                                                    |
| d_col  | NullableColumn { column: StringColumn[v1, v2, v3], validity: [0b_____111] }                                                                                                                                                              |
| e_col  | NullableColumn { column: StringColumn[v4, v5, ], validity: [0b_____011] }                                                                                                                                                                |
| f_col  | NullableColumn { column: StringColumn[v6, , v7], validity: [0b_____101] }                                                                                                                                                                |
| Output | ArrayColumn { values: Tuple([StringColumn[a, d, x, k1, b, e, y, k1, c, f, z, k1], NullableColumn { column: StringColumn[v1, v4, v6, v10, v2, v5, , v10, v3, , v7, v10], validity: [0b10111111, 0b____1101] }]), offsets: [0, 4, 8, 12] } |
+--------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+


ast            : map_insert(map([a_col, b_col, c_col], [d_col, e_col, f_col]), 'a', 'v10', true)
raw expr       : map_insert(map(array(a_col::String, b_col::String, c_col::String), array(d_col::String NULL, e_col::String NULL, f_col::String NULL)), 'a', 'v10', true)
checked expr   : map_insert<T0=String, T1=String NULL><Map(T0, T1) NULL, T0, T1, Boolean>(CAST(map<T0=String, T1=String NULL><Array(T0), Array(T1)>(array<T0=String><T0, T0, T0>(a_col, b_col, c_col), array<T0=String NULL><T0, T0, T0>(d_col, e_col, f_col)) AS Map(String, String NULL) NULL), "a", CAST("v10" AS String NULL), true)
optimized expr : map_insert<T0=String, T1=String NULL><Map(T0, T1) NULL, T0, T1, Boolean>(CAST(map<T0=String, T1=String NULL><Array(T0), Array(T1)>(array<T0=String><T0, T0, T0>(a_col, b_col, c_col), array<T0=String NULL><T0, T0, T0>(d_col, e_col, f_col)) AS Map(String, String NULL) NULL), "a", "v10", true)
evaluation:
+--------+-------------+-------------+-------------+---------------+------------------------+------------------------+-------------------------------------------+
|        | a_col       | b_col       | c_col       | d_col         | e_col                  | f_col                  | Output                                    |
+--------+-------------+-------------+-------------+---------------+------------------------+------------------------+-------------------------------------------+
| Type   | String      | String      | String      | String NULL   | String NULL            | String NULL            | Map(String, String NULL)                  |
| Domain | {"a"..="c"} | {"d"..="f"} | {"x"..="z"} | {"v1"..="v3"} | {"v4"..="v5"} ∪ {NULL} | {"v6"..="v7"} ∪ {NULL} | Unknown                                   |
| Row 0  | 'a'         | 'd'         | 'x'         | 'v1'          | 'v4'                   | 'v6'                   | {'a':'v10', 'd':'v4', 'x':'v6'}           |
| Row 1  | 'b'         | 'e'         | 'y'         | 'v2'          | 'v5'                   | NULL                   | {'b':'v2', 'e':'v5', 'y':NULL, 'a':'v10'} |
| Row 2  | 'c'         | 'f'         | 'z'         | 'v3'          | NULL                   | 'v7'                   | {'c':'v3', 'f':NULL, 'z':'v7', 'a':'v10'} |
+--------+-------------+-------------+-------------+---------------+------------------------+------------------------+-------------------------------------------+
evaluation (internal):
+--------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| Column | Data                                                                                                                                                                                                                           |
+--------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| a_col  | StringColumn[a, b, c]                                                                                                                                                                                                          |
| b_col  | StringColumn[d, e, f]                                                                                                                                                                                                          |
| c_col  | StringColumn[x, y, z]                                                                                                                                                                                                          |
| d_col  | NullableColumn { column: StringColumn[v1, v2, v3], validity: [0b_____111] }                                                                                                                                                    |
| e_col  | NullableColumn { column: StringColumn[v4, v5, ], validity: [0b_____011] }                                                                                                                                                      |
| f_col  | NullableColumn { column: StringColumn[v6, , v7], validity: [0b_____101] }                                                                                                                                                      |
| Output | ArrayColumn { values: Tuple([StringColumn[a, d, x, b, e, y, a, c, f, z, a], NullableColumn { column: StringColumn[v10, v4, v6, v2, v5, , v10, v3, , v7, v10], validity: [0b11011111, 0b_____110] }]), offsets: [0, 3, 7, 11] } |
+--------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+


error: 
  --> SQL:1:1
  |
1 | map_insert(map([a_col, b_col, c_col], [d_col, e_col, f_col]), 'a', 'v10', false)
  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ map key `'a'` duplicate while evaluating function `map_insert({'a':'v1', 'd':'v4', 'x':'v6'}, 'a', 'v10', false)` in expr `map_insert(CAST(map(array(a_col, b_col, c_col), array(d_col, e_col, f_col)) AS Map(String, String NULL) NULL), 'a', CAST('v10' AS String NULL), false)`



