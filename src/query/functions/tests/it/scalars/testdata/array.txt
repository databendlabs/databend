ast            : []
raw expr       : array()
checked expr   : array<>()
optimized expr : [] :: Array(Nothing)
output type    : Array(Nothing)
output domain  : []
output         : []


error: 
  --> SQL:1:2
  |
1 | ['a', 1]
  |  ^^^ invalid digit found in string while evaluating function `to_uint64('a')` in expr `to_uint64('a')`, during run expr: `array(to_uint64('a'), to_uint64(1))`



error: 
  --> SQL:1:1
  |
1 | [-1, true]
  | ^^^^^^^^^^ no function matches signature `array(Int16, Boolean)`, you might need to add explicit type casts.

candidate functions:
  array(T0, T0) :: Array(T0)  : unable to find a common super type for `Int16` and `Boolean`



ast            : [NULL, 8, -10]
raw expr       : array(NULL, 8, minus(10))
checked expr   : array<T0=Int16 NULL><T0, T0, T0>(CAST(NULL AS Int16 NULL), CAST(8_u8 AS Int16 NULL), CAST(minus<UInt8>(10_u8) AS Int16 NULL))
optimized expr : [NULL, 8, -10]
output type    : Array(Int16 NULL)
output domain  : [{-10..=8} ∪ {NULL}]
output         : [NULL, 8, -10]


ast            : [['a', 'b'], []]
raw expr       : array(array('a', 'b'), array())
checked expr   : array<T0=Array(String)><T0, T0>(array<T0=String><T0, T0>("a", "b"), CAST(array<>() AS Array(String)))
optimized expr : [['a', 'b'], []]
output type    : Array(Array(String))
output domain  : [[{"a"..="b"}]]
output         : [['a', 'b'], []]


error: 
  --> SQL:1:1
  |
1 | ['a', 1, parse_json('{"foo":"bar"}')]
  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ no function matches signature `array(String, UInt8, Variant)`, you might need to add explicit type casts.

candidate functions:
  array(T0, T0, T0) :: Array(T0)  : unable to find a common super type for `UInt64` and `Variant`



ast            : [parse_json('[]'), parse_json('{"foo":"bar"}')]
raw expr       : array(parse_json('[]'), parse_json('{"foo":"bar"}'))
checked expr   : array<T0=Variant><T0, T0>(parse_json<String>("[]"), parse_json<String>("{\"foo\":\"bar\"}"))
optimized expr : ['[]', '{"foo":"bar"}']
output type    : Array(Variant)
output domain  : [Undefined]
output         : ['[]', '{"foo":"bar"}']


ast            : length([])
raw expr       : length(array())
checked expr   : length<Array(Nothing)>(array<>())
optimized expr : 0_u8
output type    : UInt8
output domain  : {0..=0}
output         : 0


ast            : length([1, 2, 3])
raw expr       : length(array(1, 2, 3))
checked expr   : length<T0=UInt8><Array(T0)>(array<T0=UInt8><T0, T0, T0>(1_u8, 2_u8, 3_u8))
optimized expr : 3_u64
output type    : UInt64
output domain  : {3..=3}
output         : 3


ast            : length([true, false])
raw expr       : length(array(true, false))
checked expr   : length<T0=Boolean><Array(T0)>(array<T0=Boolean><T0, T0>(true, false))
optimized expr : 2_u64
output type    : UInt64
output domain  : {2..=2}
output         : 2


ast            : length(['a', 'b', 'c', 'd'])
raw expr       : length(array('a', 'b', 'c', 'd'))
checked expr   : length<T0=String><Array(T0)>(array<T0=String><T0, T0, T0, T0>("a", "b", "c", "d"))
optimized expr : 4_u64
output type    : UInt64
output domain  : {4..=4}
output         : 4


ast            : array_size(['a', 'b', 'c', 'd'])
raw expr       : array_size(array('a', 'b', 'c', 'd'))
checked expr   : length<T0=String><Array(T0)>(array<T0=String><T0, T0, T0, T0>("a", "b", "c", "d"))
optimized expr : 4_u64
output type    : UInt64
output domain  : {4..=4}
output         : 4


ast            : array_length(['a', 'b', 'c', 'd'])
raw expr       : array_length(array('a', 'b', 'c', 'd'))
checked expr   : length<T0=String><Array(T0)>(array<T0=String><T0, T0, T0, T0>("a", "b", "c", "d"))
optimized expr : 4_u64
output type    : UInt64
output domain  : {4..=4}
output         : 4


ast            : range(10, 20)
raw expr       : range(10, 20)
checked expr   : range<UInt64, UInt64>(to_uint64<UInt8>(10_u8), to_uint64<UInt8>(20_u8))
optimized expr : [10, 11, 12, 13, 14, 15, 16, 17, 18, 19]
output type    : Array(UInt64)
output domain  : [{10..=19}]
output         : [10, 11, 12, 13, 14, 15, 16, 17, 18, 19]


error: 
  --> SQL:1:1
  |
1 | range(10, 500000011)
  | ^^^^^^^^^^^^^^^^^^^^ the allowed maximum values of range function is 500000000, but got 500000001 while evaluating function `range(10, 500000011)` in expr `range(to_uint64(10), to_uint64(500000011))`



error: 
  --> SQL:1:8
  |
1 | [1, 2]['a']
  |        ^^^ invalid digit found in string while evaluating function `to_uint64('a')` in expr `to_uint64('a')`, during run expr: `get(CAST(array(1, 2) AS Array(UInt8 NULL)), to_uint64('a'))`



ast            : [][1]
raw expr       : get(array(), 1)
checked expr   : get<Array(Nothing) NULL, UInt64 NULL>(CAST(array<>() AS Array(Nothing) NULL), CAST(1_u8 AS UInt64 NULL))
optimized expr : NULL
output type    : NULL
output domain  : {NULL}
output         : NULL


ast            : [][NULL]
raw expr       : get(array(), NULL)
checked expr   : get<Array(Nothing) NULL, UInt64 NULL>(CAST(array<>() AS Array(Nothing) NULL), CAST(NULL AS UInt64 NULL))
optimized expr : NULL
output type    : NULL
output domain  : {NULL}
output         : NULL


ast            : [NULL][0]
raw expr       : get(array(NULL), 0)
checked expr   : get<Array(NULL) NULL, UInt64 NULL>(CAST(array<T0=NULL><T0>(NULL) AS Array(NULL) NULL), CAST(0_u8 AS UInt64 NULL))
optimized expr : NULL
output type    : NULL
output domain  : {NULL}
output         : NULL


ast            : [true, false][1]
raw expr       : get(array(true, false), 1)
checked expr   : get<T0=Boolean><Array(T0 NULL), UInt64>(CAST(array<T0=Boolean><T0, T0>(true, false) AS Array(Boolean NULL)), to_uint64<UInt8>(1_u8))
optimized expr : true
output type    : Boolean NULL
output domain  : {TRUE}
output         : true


ast            : ['a', 'b', 'c'][2]
raw expr       : get(array('a', 'b', 'c'), 2)
checked expr   : get<T0=String><Array(T0 NULL), UInt64>(CAST(array<T0=String><T0, T0, T0>("a", "b", "c") AS Array(String NULL)), to_uint64<UInt8>(2_u8))
optimized expr : "b"
output type    : String NULL
output domain  : {"b"..="b"}
output         : 'b'


ast            : [1, 2, 3][1]
raw expr       : get(array(1, 2, 3), 1)
checked expr   : get<T0=UInt8><Array(T0 NULL), UInt64>(CAST(array<T0=UInt8><T0, T0, T0>(1_u8, 2_u8, 3_u8) AS Array(UInt8 NULL)), to_uint64<UInt8>(1_u8))
optimized expr : 1_u8
output type    : UInt8 NULL
output domain  : {1..=1}
output         : 1


ast            : [1, 2, 3][3]
raw expr       : get(array(1, 2, 3), 3)
checked expr   : get<T0=UInt8><Array(T0 NULL), UInt64>(CAST(array<T0=UInt8><T0, T0, T0>(1_u8, 2_u8, 3_u8) AS Array(UInt8 NULL)), to_uint64<UInt8>(3_u8))
optimized expr : 3_u8
output type    : UInt8 NULL
output domain  : {3..=3}
output         : 3


ast            : [1, null, 3][1]
raw expr       : get(array(1, NULL, 3), 1)
checked expr   : get<T0=UInt8><Array(T0 NULL), UInt64>(array<T0=UInt8 NULL><T0, T0, T0>(CAST(1_u8 AS UInt8 NULL), CAST(NULL AS UInt8 NULL), CAST(3_u8 AS UInt8 NULL)), to_uint64<UInt8>(1_u8))
optimized expr : 1_u8
output type    : UInt8 NULL
output domain  : {1..=1}
output         : 1


ast            : [1, null, 3][2]
raw expr       : get(array(1, NULL, 3), 2)
checked expr   : get<T0=UInt8><Array(T0 NULL), UInt64>(array<T0=UInt8 NULL><T0, T0, T0>(CAST(1_u8 AS UInt8 NULL), CAST(NULL AS UInt8 NULL), CAST(3_u8 AS UInt8 NULL)), to_uint64<UInt8>(2_u8))
optimized expr : NULL
output type    : UInt8 NULL
output domain  : {NULL}
output         : NULL


ast            : [1, 2, 3][4]
raw expr       : get(array(1, 2, 3), 4)
checked expr   : get<T0=UInt8><Array(T0 NULL), UInt64>(CAST(array<T0=UInt8><T0, T0, T0>(1_u8, 2_u8, 3_u8) AS Array(UInt8 NULL)), to_uint64<UInt8>(4_u8))
optimized expr : NULL
output type    : UInt8 NULL
output domain  : {NULL}
output         : NULL


ast            : [a, b][idx]
raw expr       : get(array(a::Int16, b::Int16), idx::UInt16)
checked expr   : get<T0=Int16><Array(T0 NULL), UInt64>(CAST(array<T0=Int16><T0, T0>(a, b) AS Array(Int16 NULL)), to_uint64<UInt16>(idx))
evaluation:
+--------+---------+---------+---------+------------------+
|        | a       | b       | idx     | Output           |
+--------+---------+---------+---------+------------------+
| Type   | Int16   | Int16   | UInt16  | Int16 NULL       |
| Domain | {0..=2} | {3..=5} | {1..=3} | {0..=5} ∪ {NULL} |
| Row 0  | 0       | 3       | 1       | 0                |
| Row 1  | 1       | 4       | 2       | 4                |
| Row 2  | 2       | 5       | 3       | NULL             |
+--------+---------+---------+---------+------------------+
evaluation (internal):
+--------+---------------------------------------------------------------------+
| Column | Data                                                                |
+--------+---------------------------------------------------------------------+
| a      | Int16([0, 1, 2])                                                    |
| b      | Int16([3, 4, 5])                                                    |
| idx    | UInt16([1, 2, 3])                                                   |
| Output | NullableColumn { column: Int16([0, 4, 0]), validity: [0b_____011] } |
+--------+---------------------------------------------------------------------+


ast            : slice([], 1)
raw expr       : slice(array(), 1)
checked expr   : slice<Array(Nothing), UInt64>(array<>(), to_uint64<UInt8>(1_u8))
optimized expr : [] :: Array(Nothing)
output type    : Array(Nothing)
output domain  : []
output         : []


ast            : slice([0, 1, 2, 3], 2)
raw expr       : slice(array(0, 1, 2, 3), 2)
checked expr   : slice<T0=UInt8><Array(T0), UInt64>(array<T0=UInt8><T0, T0, T0, T0>(0_u8, 1_u8, 2_u8, 3_u8), to_uint64<UInt8>(2_u8))
optimized expr : [1, 2, 3]
output type    : Array(UInt8)
output domain  : [{1..=3}]
output         : [1, 2, 3]


ast            : slice(['a', 'b', 'c', 'd'], 3)
raw expr       : slice(array('a', 'b', 'c', 'd'), 3)
checked expr   : slice<T0=String><Array(T0), UInt64>(array<T0=String><T0, T0, T0, T0>("a", "b", "c", "d"), to_uint64<UInt8>(3_u8))
optimized expr : ['c', 'd']
output type    : Array(String)
output domain  : [{"c"..="d"}]
output         : ['c', 'd']


ast            : slice([a, b, c], 2)
raw expr       : slice(array(a::Int16, b::Int16, c::Int16), 2)
checked expr   : slice<T0=Int16><Array(T0), UInt64>(array<T0=Int16><T0, T0, T0>(a, b, c), to_uint64<UInt8>(2_u8))
optimized expr : slice<T0=Int16><Array(T0), UInt64>(array<T0=Int16><T0, T0, T0>(a, b, c), 2_u64)
evaluation:
+--------+---------+---------+---------+--------------+
|        | a       | b       | c       | Output       |
+--------+---------+---------+---------+--------------+
| Type   | Int16   | Int16   | Int16   | Array(Int16) |
| Domain | {0..=2} | {3..=5} | {7..=9} | [{0..=9}]    |
| Row 0  | 0       | 3       | 7       | [3, 7]       |
| Row 1  | 1       | 4       | 8       | [4, 8]       |
| Row 2  | 2       | 5       | 9       | [5, 9]       |
+--------+---------+---------+---------+--------------+
evaluation (internal):
+--------+--------------------------------------------------------------------------+
| Column | Data                                                                     |
+--------+--------------------------------------------------------------------------+
| a      | Int16([0, 1, 2])                                                         |
| b      | Int16([3, 4, 5])                                                         |
| c      | Int16([7, 8, 9])                                                         |
| Output | ArrayColumn { values: Int16([3, 7, 4, 8, 5, 9]), offsets: [0, 2, 4, 6] } |
+--------+--------------------------------------------------------------------------+


ast            : slice([], 1, 2)
raw expr       : slice(array(), 1, 2)
checked expr   : slice<Array(Nothing), UInt64, UInt64>(array<>(), to_uint64<UInt8>(1_u8), to_uint64<UInt8>(2_u8))
optimized expr : [] :: Array(Nothing)
output type    : Array(Nothing)
output domain  : []
output         : []


ast            : slice([1], 1, 2)
raw expr       : slice(array(1), 1, 2)
checked expr   : slice<T0=UInt8><Array(T0), UInt64, UInt64>(array<T0=UInt8><T0>(1_u8), to_uint64<UInt8>(1_u8), to_uint64<UInt8>(2_u8))
optimized expr : [1]
output type    : Array(UInt8)
output domain  : [{1..=1}]
output         : [1]


ast            : slice([NULL, 1, 2, 3], 0, 2)
raw expr       : slice(array(NULL, 1, 2, 3), 0, 2)
checked expr   : slice<T0=UInt8 NULL><Array(T0), UInt64, UInt64>(array<T0=UInt8 NULL><T0, T0, T0, T0>(CAST(NULL AS UInt8 NULL), CAST(1_u8 AS UInt8 NULL), CAST(2_u8 AS UInt8 NULL), CAST(3_u8 AS UInt8 NULL)), to_uint64<UInt8>(0_u8), to_uint64<UInt8>(2_u8))
optimized expr : [NULL, 1]
output type    : Array(UInt8 NULL)
output domain  : [{1..=1} ∪ {NULL}]
output         : [NULL, 1]


ast            : slice([0, 1, 2, 3], 1, 2)
raw expr       : slice(array(0, 1, 2, 3), 1, 2)
checked expr   : slice<T0=UInt8><Array(T0), UInt64, UInt64>(array<T0=UInt8><T0, T0, T0, T0>(0_u8, 1_u8, 2_u8, 3_u8), to_uint64<UInt8>(1_u8), to_uint64<UInt8>(2_u8))
optimized expr : [0, 1]
output type    : Array(UInt8)
output domain  : [{0..=1}]
output         : [0, 1]


ast            : slice([0, 1, 2, 3], 1, 5)
raw expr       : slice(array(0, 1, 2, 3), 1, 5)
checked expr   : slice<T0=UInt8><Array(T0), UInt64, UInt64>(array<T0=UInt8><T0, T0, T0, T0>(0_u8, 1_u8, 2_u8, 3_u8), to_uint64<UInt8>(1_u8), to_uint64<UInt8>(5_u8))
optimized expr : [0, 1, 2, 3]
output type    : Array(UInt8)
output domain  : [{0..=3}]
output         : [0, 1, 2, 3]


ast            : slice(['a', 'b', 'c', 'd'], 0, 2)
raw expr       : slice(array('a', 'b', 'c', 'd'), 0, 2)
checked expr   : slice<T0=String><Array(T0), UInt64, UInt64>(array<T0=String><T0, T0, T0, T0>("a", "b", "c", "d"), to_uint64<UInt8>(0_u8), to_uint64<UInt8>(2_u8))
optimized expr : ['a', 'b']
output type    : Array(String)
output domain  : [{"a"..="b"}]
output         : ['a', 'b']


ast            : slice(['a', 'b', 'c', 'd'], 1, 4)
raw expr       : slice(array('a', 'b', 'c', 'd'), 1, 4)
checked expr   : slice<T0=String><Array(T0), UInt64, UInt64>(array<T0=String><T0, T0, T0, T0>("a", "b", "c", "d"), to_uint64<UInt8>(1_u8), to_uint64<UInt8>(4_u8))
optimized expr : ['a', 'b', 'c', 'd']
output type    : Array(String)
output domain  : [{"a"..="d"}]
output         : ['a', 'b', 'c', 'd']


ast            : slice(['a', 'b', 'c', 'd'], 2, 6)
raw expr       : slice(array('a', 'b', 'c', 'd'), 2, 6)
checked expr   : slice<T0=String><Array(T0), UInt64, UInt64>(array<T0=String><T0, T0, T0, T0>("a", "b", "c", "d"), to_uint64<UInt8>(2_u8), to_uint64<UInt8>(6_u8))
optimized expr : ['b', 'c', 'd']
output type    : Array(String)
output domain  : [{"b"..="d"}]
output         : ['b', 'c', 'd']


ast            : slice([a, b, c], 1, 2)
raw expr       : slice(array(a::Int16, b::Int16, c::Int16), 1, 2)
checked expr   : slice<T0=Int16><Array(T0), UInt64, UInt64>(array<T0=Int16><T0, T0, T0>(a, b, c), to_uint64<UInt8>(1_u8), to_uint64<UInt8>(2_u8))
optimized expr : slice<T0=Int16><Array(T0), UInt64, UInt64>(array<T0=Int16><T0, T0, T0>(a, b, c), 1_u64, 2_u64)
evaluation:
+--------+---------+---------+---------+--------------+
|        | a       | b       | c       | Output       |
+--------+---------+---------+---------+--------------+
| Type   | Int16   | Int16   | Int16   | Array(Int16) |
| Domain | {0..=2} | {3..=5} | {7..=9} | [{0..=9}]    |
| Row 0  | 0       | 3       | 7       | [0, 3]       |
| Row 1  | 1       | 4       | 8       | [1, 4]       |
| Row 2  | 2       | 5       | 9       | [2, 5]       |
+--------+---------+---------+---------+--------------+
evaluation (internal):
+--------+--------------------------------------------------------------------------+
| Column | Data                                                                     |
+--------+--------------------------------------------------------------------------+
| a      | Int16([0, 1, 2])                                                         |
| b      | Int16([3, 4, 5])                                                         |
| c      | Int16([7, 8, 9])                                                         |
| Output | ArrayColumn { values: Int16([0, 3, 1, 4, 2, 5]), offsets: [0, 2, 4, 6] } |
+--------+--------------------------------------------------------------------------+


ast            : false in (false, true)
raw expr       : or(eq(false, false), eq(false, true))
checked expr   : or<Boolean, Boolean>(eq<Boolean, Boolean>(false, false), eq<Boolean, Boolean>(false, true))
optimized expr : true
output type    : Boolean
output domain  : {TRUE}
output         : true


ast            : '33' in ('1', '33', '23', '33')
raw expr       : contains(array('1', '33', '23', '33'), '33')
checked expr   : contains<Array(String), String>(array<T0=String><T0, T0, T0, T0>("1", "33", "23", "33"), "33")
optimized expr : true
output type    : Boolean
output domain  : {TRUE}
output         : true


ast            : contains([1,2,3], 2)
raw expr       : contains(array(1, 2, 3), 2)
checked expr   : contains<Array(UInt8), UInt8>(array<T0=UInt8><T0, T0, T0>(1_u8, 2_u8, 3_u8), 2_u8)
optimized expr : true
output type    : Boolean
output domain  : {TRUE}
output         : true


ast            : int8_col not in (1, 2, 3, 4, 5, null)
raw expr       : not(contains(array(1, 2, 3, 4, 5), int8_col::Int8))
checked expr   : not<Boolean>(contains<Array(Int16), Int16>(CAST(array<T0=UInt8><T0, T0, T0, T0, T0>(1_u8, 2_u8, 3_u8, 4_u8, 5_u8) AS Array(Int16)), to_int16<Int8>(int8_col)))
optimized expr : not<Boolean>(contains<Array(Int16), Int16>([1, 2, 3, 4, 5], to_int16<Int8>(int8_col)))
evaluation:
+--------+----------+---------------+
|        | int8_col | Output        |
+--------+----------+---------------+
| Type   | Int8     | Boolean       |
| Domain | {1..=8}  | {FALSE, TRUE} |
| Row 0  | 1        | false         |
| Row 1  | 2        | false         |
| Row 2  | 7        | true          |
| Row 3  | 8        | true          |
+--------+----------+---------------+
evaluation (internal):
+----------+-----------------------+
| Column   | Data                  |
+----------+-----------------------+
| int8_col | Int8([1, 2, 7, 8])    |
| Output   | Boolean([0b____1100]) |
+----------+-----------------------+


ast            : contains(['5000', '6000', '7000'], string_col)
raw expr       : contains(array('5000', '6000', '7000'), string_col::String)
checked expr   : contains<Array(String), String>(array<T0=String><T0, T0, T0>("5000", "6000", "7000"), string_col)
optimized expr : false
evaluation:
+--------+-------------+---------+
|        | string_col  | Output  |
+--------+-------------+---------+
| Type   | String      | Boolean |
| Domain | {"1"..="5"} | {FALSE} |
| Row 0  | '1'         | false   |
| Row 1  | '2'         | false   |
| Row 2  | '5'         | false   |
| Row 3  | '1234'      | false   |
+--------+-------------+---------+
evaluation (internal):
+------------+-----------------------------+
| Column     | Data                        |
+------------+-----------------------------+
| string_col | StringColumn[1, 2, 5, 1234] |
| Output     | Boolean([0b____0000])       |
+------------+-----------------------------+


ast            : contains(['1', '5'], string_col)
raw expr       : contains(array('1', '5'), string_col::String)
checked expr   : contains<Array(String), String>(array<T0=String><T0, T0>("1", "5"), string_col)
optimized expr : contains<Array(String), String>(['1', '5'], string_col)
evaluation:
+--------+-------------+---------------+
|        | string_col  | Output        |
+--------+-------------+---------------+
| Type   | String      | Boolean       |
| Domain | {"1"..="5"} | {FALSE, TRUE} |
| Row 0  | '1'         | true          |
| Row 1  | '2'         | false         |
| Row 2  | '5'         | true          |
| Row 3  | '1234'      | false         |
+--------+-------------+---------------+
evaluation (internal):
+------------+-----------------------------+
| Column     | Data                        |
+------------+-----------------------------+
| string_col | StringColumn[1, 2, 5, 1234] |
| Output     | Boolean([0b____0101])       |
+------------+-----------------------------+


ast            : contains(['15000', '6000', '7000'], string_col)
raw expr       : contains(array('15000', '6000', '7000'), string_col::String)
checked expr   : contains<Array(String), String>(array<T0=String><T0, T0, T0>("15000", "6000", "7000"), string_col)
optimized expr : contains<Array(String), String>(['15000', '6000', '7000'], string_col)
evaluation:
+--------+-------------+---------------+
|        | string_col  | Output        |
+--------+-------------+---------------+
| Type   | String      | Boolean       |
| Domain | {"1"..="5"} | {FALSE, TRUE} |
| Row 0  | '1'         | false         |
| Row 1  | '2'         | false         |
| Row 2  | '5'         | false         |
| Row 3  | '1234'      | false         |
+--------+-------------+---------------+
evaluation (internal):
+------------+-----------------------------+
| Column     | Data                        |
+------------+-----------------------------+
| string_col | StringColumn[1, 2, 5, 1234] |
| Output     | Boolean([0b____0000])       |
+------------+-----------------------------+


ast            : contains([1,2,null], nullable_col)
raw expr       : contains(array(1, 2, NULL), nullable_col::Int64 NULL)
checked expr   : contains<T0=Int64 NULL><Array(T0) NULL, T0>(CAST(array<T0=UInt8 NULL><T0, T0, T0>(CAST(1_u8 AS UInt8 NULL), CAST(2_u8 AS UInt8 NULL), CAST(NULL AS UInt8 NULL)) AS Array(Int64 NULL) NULL), nullable_col)
optimized expr : contains<T0=Int64 NULL><Array(T0) NULL, T0>([1, 2, NULL], nullable_col)
evaluation:
+--------+-------------------+---------------+
|        | nullable_col      | Output        |
+--------+-------------------+---------------+
| Type   | Int64 NULL        | Boolean       |
| Domain | {9..=10} ∪ {NULL} | {FALSE, TRUE} |
| Row 0  | 9                 | false         |
| Row 1  | 10                | false         |
| Row 2  | NULL              | true          |
| Row 3  | NULL              | true          |
+--------+-------------------+---------------+
evaluation (internal):
+--------------+---------------------------------------------------------------------------+
| Column       | Data                                                                      |
+--------------+---------------------------------------------------------------------------+
| nullable_col | NullableColumn { column: Int64([9, 10, 11, 12]), validity: [0b____0011] } |
| Output       | Boolean([0b____1100])                                                     |
+--------------+---------------------------------------------------------------------------+


ast            : contains([(1,'2', 3, false), (1,'2', 4, true), null], (1,'2', 3, false))
raw expr       : contains(array(tuple(1, '2', 3, false), tuple(1, '2', 4, true), NULL), tuple(1, '2', 3, false))
checked expr   : contains<T0=Tuple(UInt8, String, UInt8, Boolean) NULL><Array(T0) NULL, T0>(CAST(array<T0=Tuple(UInt8, String, UInt8, Boolean) NULL><T0, T0, T0>(CAST(tuple<UInt8, String, UInt8, Boolean>(1_u8, "2", 3_u8, false) AS Tuple(UInt8, String, UInt8, Boolean) NULL), CAST(tuple<UInt8, String, UInt8, Boolean>(1_u8, "2", 4_u8, true) AS Tuple(UInt8, String, UInt8, Boolean) NULL), CAST(NULL AS Tuple(UInt8, String, UInt8, Boolean) NULL)) AS Array(Tuple(UInt8, String, UInt8, Boolean) NULL) NULL), CAST(tuple<UInt8, String, UInt8, Boolean>(1_u8, "2", 3_u8, false) AS Tuple(UInt8, String, UInt8, Boolean) NULL))
optimized expr : true
output type    : Boolean
output domain  : {TRUE}
output         : true


ast            : nullable_col in (null, 9, 10, 12)
raw expr       : or(or(eq(nullable_col::Int64 NULL, 9), eq(nullable_col::Int64 NULL, 10)), eq(nullable_col::Int64 NULL, 12))
checked expr   : or<Boolean NULL, Boolean NULL>(or<Boolean NULL, Boolean NULL>(eq<Int64 NULL, Int64 NULL>(nullable_col, CAST(9_i64 AS Int64 NULL)), eq<Int64 NULL, Int64 NULL>(nullable_col, CAST(10_i64 AS Int64 NULL))), eq<Int64 NULL, Int64 NULL>(nullable_col, CAST(12_i64 AS Int64 NULL)))
optimized expr : or<Boolean NULL, Boolean NULL>(or<Boolean NULL, Boolean NULL>(eq<Int64 NULL, Int64 NULL>(nullable_col, 9_i64), eq<Int64 NULL, Int64 NULL>(nullable_col, 10_i64)), eq<Int64 NULL, Int64 NULL>(nullable_col, 12_i64))
evaluation:
+--------+-------------------+------------------------+
|        | nullable_col      | Output                 |
+--------+-------------------+------------------------+
| Type   | Int64 NULL        | Boolean NULL           |
| Domain | {9..=10} ∪ {NULL} | {FALSE, TRUE} ∪ {NULL} |
| Row 0  | 9                 | true                   |
| Row 1  | 10                | true                   |
| Row 2  | NULL              | NULL                   |
| Row 3  | NULL              | NULL                   |
+--------+-------------------+------------------------+
evaluation (internal):
+--------------+---------------------------------------------------------------------------+
| Column       | Data                                                                      |
+--------------+---------------------------------------------------------------------------+
| nullable_col | NullableColumn { column: Int64([9, 10, 11, 12]), validity: [0b____0011] } |
| Output       | NullableColumn { column: Boolean([0b____0011]), validity: [0b____0011] }  |
+--------------+---------------------------------------------------------------------------+


error: 
  --> SQL:1:14
  |
1 | nullable_col in (1, '9', 3, 10, 12, true, [1,2,3])
  |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ no function matches signature `array(UInt8, String, UInt8, UInt8, UInt8, Boolean)`, you might need to add explicit type casts.

candidate functions:
  array(T0, T0, T0, T0, T0, T0) :: Array(T0)  : unable to find a common super type for `Int64` and `Boolean`



ast            : array_remove_first([])
raw expr       : array_remove_first(array())
checked expr   : array_remove_first<Array(Nothing)>(array<>())
optimized expr : [] :: Array(Nothing)
output type    : Array(Nothing)
output domain  : []
output         : []


ast            : array_remove_first([1])
raw expr       : array_remove_first(array(1))
checked expr   : array_remove_first<T0=UInt8><Array(T0)>(array<T0=UInt8><T0>(1_u8))
optimized expr : []
output type    : Array(UInt8)
output domain  : []
output         : []


ast            : array_remove_first([0, 1, 2, NULL])
raw expr       : array_remove_first(array(0, 1, 2, NULL))
checked expr   : array_remove_first<T0=UInt8 NULL><Array(T0)>(array<T0=UInt8 NULL><T0, T0, T0, T0>(CAST(0_u8 AS UInt8 NULL), CAST(1_u8 AS UInt8 NULL), CAST(2_u8 AS UInt8 NULL), CAST(NULL AS UInt8 NULL)))
optimized expr : [1, 2, NULL]
output type    : Array(UInt8 NULL)
output domain  : [{1..=2} ∪ {NULL}]
output         : [1, 2, NULL]


ast            : array_remove_first([0, 1, 2, 3])
raw expr       : array_remove_first(array(0, 1, 2, 3))
checked expr   : array_remove_first<T0=UInt8><Array(T0)>(array<T0=UInt8><T0, T0, T0, T0>(0_u8, 1_u8, 2_u8, 3_u8))
optimized expr : [1, 2, 3]
output type    : Array(UInt8)
output domain  : [{1..=3}]
output         : [1, 2, 3]


ast            : array_remove_first(['a', 'b', 'c', 'd'])
raw expr       : array_remove_first(array('a', 'b', 'c', 'd'))
checked expr   : array_remove_first<T0=String><Array(T0)>(array<T0=String><T0, T0, T0, T0>("a", "b", "c", "d"))
optimized expr : ['b', 'c', 'd']
output type    : Array(String)
output domain  : [{"b"..="d"}]
output         : ['b', 'c', 'd']


ast            : array_remove_first([a, b])
raw expr       : array_remove_first(array(a::Int16, b::Int16))
checked expr   : array_remove_first<T0=Int16><Array(T0)>(array<T0=Int16><T0, T0>(a, b))
evaluation:
+--------+---------+---------+--------------+
|        | a       | b       | Output       |
+--------+---------+---------+--------------+
| Type   | Int16   | Int16   | Array(Int16) |
| Domain | {0..=2} | {3..=5} | [{0..=5}]    |
| Row 0  | 0       | 3       | [3]          |
| Row 1  | 1       | 4       | [4]          |
| Row 2  | 2       | 5       | [5]          |
+--------+---------+---------+--------------+
evaluation (internal):
+--------+-----------------------------------------------------------------+
| Column | Data                                                            |
+--------+-----------------------------------------------------------------+
| a      | Int16([0, 1, 2])                                                |
| b      | Int16([3, 4, 5])                                                |
| Output | ArrayColumn { values: Int16([3, 4, 5]), offsets: [0, 1, 2, 3] } |
+--------+-----------------------------------------------------------------+


ast            : array_remove_last([])
raw expr       : array_remove_last(array())
checked expr   : array_remove_last<Array(Nothing)>(array<>())
optimized expr : [] :: Array(Nothing)
output type    : Array(Nothing)
output domain  : []
output         : []


ast            : array_remove_last([1])
raw expr       : array_remove_last(array(1))
checked expr   : array_remove_last<T0=UInt8><Array(T0)>(array<T0=UInt8><T0>(1_u8))
optimized expr : []
output type    : Array(UInt8)
output domain  : []
output         : []


ast            : array_remove_last([0, 1, 2, NULL])
raw expr       : array_remove_last(array(0, 1, 2, NULL))
checked expr   : array_remove_last<T0=UInt8 NULL><Array(T0)>(array<T0=UInt8 NULL><T0, T0, T0, T0>(CAST(0_u8 AS UInt8 NULL), CAST(1_u8 AS UInt8 NULL), CAST(2_u8 AS UInt8 NULL), CAST(NULL AS UInt8 NULL)))
optimized expr : [0, 1, 2]
output type    : Array(UInt8 NULL)
output domain  : [{0..=2}]
output         : [0, 1, 2]


ast            : array_remove_last([0, 1, 2, 3])
raw expr       : array_remove_last(array(0, 1, 2, 3))
checked expr   : array_remove_last<T0=UInt8><Array(T0)>(array<T0=UInt8><T0, T0, T0, T0>(0_u8, 1_u8, 2_u8, 3_u8))
optimized expr : [0, 1, 2]
output type    : Array(UInt8)
output domain  : [{0..=2}]
output         : [0, 1, 2]


ast            : array_remove_last(['a', 'b', 'c', 'd'])
raw expr       : array_remove_last(array('a', 'b', 'c', 'd'))
checked expr   : array_remove_last<T0=String><Array(T0)>(array<T0=String><T0, T0, T0, T0>("a", "b", "c", "d"))
optimized expr : ['a', 'b', 'c']
output type    : Array(String)
output domain  : [{"a"..="c"}]
output         : ['a', 'b', 'c']


ast            : array_remove_last([a, b])
raw expr       : array_remove_last(array(a::Int16, b::Int16))
checked expr   : array_remove_last<T0=Int16><Array(T0)>(array<T0=Int16><T0, T0>(a, b))
evaluation:
+--------+---------+---------+--------------+
|        | a       | b       | Output       |
+--------+---------+---------+--------------+
| Type   | Int16   | Int16   | Array(Int16) |
| Domain | {0..=2} | {3..=5} | [{0..=5}]    |
| Row 0  | 0       | 3       | [0]          |
| Row 1  | 1       | 4       | [1]          |
| Row 2  | 2       | 5       | [2]          |
+--------+---------+---------+--------------+
evaluation (internal):
+--------+-----------------------------------------------------------------+
| Column | Data                                                            |
+--------+-----------------------------------------------------------------+
| a      | Int16([0, 1, 2])                                                |
| b      | Int16([3, 4, 5])                                                |
| Output | ArrayColumn { values: Int16([0, 1, 2]), offsets: [0, 1, 2, 3] } |
+--------+-----------------------------------------------------------------+


ast            : array_concat([], [])
raw expr       : array_concat(array(), array())
checked expr   : array_concat<Array(Nothing), Array(Nothing)>(array<>(), array<>())
optimized expr : [] :: Array(Nothing)
output type    : Array(Nothing)
output domain  : []
output         : []


ast            : array_concat([], [1,2])
raw expr       : array_concat(array(), array(1, 2))
checked expr   : array_concat<T0=UInt8><Array(T0), Array(T0)>(CAST(array<>() AS Array(UInt8)), array<T0=UInt8><T0, T0>(1_u8, 2_u8))
optimized expr : [1, 2]
output type    : Array(UInt8)
output domain  : [{1..=2}]
output         : [1, 2]


ast            : array_concat([false, true], [])
raw expr       : array_concat(array(false, true), array())
checked expr   : array_concat<T0=Boolean><Array(T0), Array(T0)>(array<T0=Boolean><T0, T0>(false, true), CAST(array<>() AS Array(Boolean)))
optimized expr : [false, true]
output type    : Array(Boolean)
output domain  : [{FALSE, TRUE}]
output         : [false, true]


error: 
  --> SQL:1:1
  |
1 | array_concat([false, true], [1,2])
  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ no function matches signature `array_concat(Array(Boolean), Array(UInt8))`, you might need to add explicit type casts.

candidate functions:
  array_concat(Array(Nothing), Array(Nothing)) :: Array(Nothing)                 : unable to unify `Array(Boolean)` with `Array(Nothing)`
  array_concat(Array(Nothing) NULL, Array(Nothing) NULL) :: Array(Nothing) NULL  : unable to unify `Array(Boolean)` with `Array(Nothing)`
  array_concat(Array(T0), Array(T0)) :: Array(T0)                                : unable to find a common super type for `Boolean` and `UInt8`
... and 1 more



ast            : array_concat([false, true], [true, false])
raw expr       : array_concat(array(false, true), array(true, false))
checked expr   : array_concat<T0=Boolean><Array(T0), Array(T0)>(array<T0=Boolean><T0, T0>(false, true), array<T0=Boolean><T0, T0>(true, false))
optimized expr : [false, true, true, false]
output type    : Array(Boolean)
output domain  : [{FALSE, TRUE}]
output         : [false, true, true, false]


error: 
  --> SQL:1:23
  |
1 | array_concat([1,2,3], ['s', null])
  |                       ^^^^^^^^^^^ invalid digit found in string while evaluating function `to_int64('s')` in expr `to_int64()`, during run expr: `array_concat(CAST(array(1, 2, 3) AS Array(Int64 NULL)), CAST(array(CAST('s' AS String NULL), CAST(NULL AS String NULL)) AS Array(Int64 NULL)))`



ast            : array_concat([1, 2, 3, 4, 5, null], [nullable_col])
raw expr       : array_concat(array(1, 2, 3, 4, 5, NULL), array(nullable_col::Int64 NULL))
checked expr   : array_concat<T0=Int64 NULL><Array(T0), Array(T0)>(CAST(array<T0=UInt8 NULL><T0, T0, T0, T0, T0, T0>(CAST(1_u8 AS UInt8 NULL), CAST(2_u8 AS UInt8 NULL), CAST(3_u8 AS UInt8 NULL), CAST(4_u8 AS UInt8 NULL), CAST(5_u8 AS UInt8 NULL), CAST(NULL AS UInt8 NULL)) AS Array(Int64 NULL)), array<T0=Int64 NULL><T0>(nullable_col))
optimized expr : array_concat<T0=Int64 NULL><Array(T0), Array(T0)>([1, 2, 3, 4, 5, NULL], array<T0=Int64 NULL><T0>(nullable_col))
evaluation:
+--------+-------------------+-----------------------------+
|        | nullable_col      | Output                      |
+--------+-------------------+-----------------------------+
| Type   | Int64 NULL        | Array(Int64 NULL)           |
| Domain | {9..=10} ∪ {NULL} | [{1..=10} ∪ {NULL}]         |
| Row 0  | 9                 | [1, 2, 3, 4, 5, NULL, 9]    |
| Row 1  | 10                | [1, 2, 3, 4, 5, NULL, 10]   |
| Row 2  | NULL              | [1, 2, 3, 4, 5, NULL, NULL] |
| Row 3  | NULL              | [1, 2, 3, 4, 5, NULL, NULL] |
+--------+-------------------+-----------------------------+
evaluation (internal):
+--------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| Column       | Data                                                                                                                                                                                                                                     |
+--------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| nullable_col | NullableColumn { column: Int64([9, 10, 11, 12]), validity: [0b____0011] }                                                                                                                                                                |
| Output       | ArrayColumn { values: NullableColumn { column: Int64([1, 2, 3, 4, 5, 0, 9, 1, 2, 3, 4, 5, 0, 10, 1, 2, 3, 4, 5, 0, 0, 1, 2, 3, 4, 5, 0, 0]), validity: [0b11011111, 0b11101111, 0b11100111, 0b____0011] }, offsets: [0, 7, 14, 21, 28] } |
+--------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+


ast            : array_concat([1,2,null], [int8_col])
raw expr       : array_concat(array(1, 2, NULL), array(int8_col::Int8))
checked expr   : array_concat<T0=Int16 NULL><Array(T0), Array(T0)>(CAST(array<T0=UInt8 NULL><T0, T0, T0>(CAST(1_u8 AS UInt8 NULL), CAST(2_u8 AS UInt8 NULL), CAST(NULL AS UInt8 NULL)) AS Array(Int16 NULL)), CAST(array<T0=Int8><T0>(int8_col) AS Array(Int16 NULL)))
optimized expr : array_concat<T0=Int16 NULL><Array(T0), Array(T0)>([1, 2, NULL], CAST(array<T0=Int8><T0>(int8_col) AS Array(Int16 NULL)))
evaluation:
+--------+----------+--------------------+
|        | int8_col | Output             |
+--------+----------+--------------------+
| Type   | Int8     | Array(Int16 NULL)  |
| Domain | {1..=8}  | [{1..=8} ∪ {NULL}] |
| Row 0  | 1        | [1, 2, NULL, 1]    |
| Row 1  | 2        | [1, 2, NULL, 2]    |
| Row 2  | 7        | [1, 2, NULL, 7]    |
| Row 3  | 8        | [1, 2, NULL, 8]    |
+--------+----------+--------------------+
evaluation (internal):
+----------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| Column   | Data                                                                                                                                                                       |
+----------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| int8_col | Int8([1, 2, 7, 8])                                                                                                                                                         |
| Output   | ArrayColumn { values: NullableColumn { column: Int16([1, 2, 0, 1, 1, 2, 0, 2, 1, 2, 0, 7, 1, 2, 0, 8]), validity: [0b10111011, 0b10111011] }, offsets: [0, 4, 8, 12, 16] } |
+----------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------+


ast            : array_prepend(1, [])
raw expr       : array_prepend(1, array())
checked expr   : array_prepend<T0=UInt8><T0, Array(T0) NULL>(1_u8, CAST(array<>() AS Array(UInt8) NULL))
optimized expr : [1]
output type    : Array(UInt8)
output domain  : [{1..=1}]
output         : [1]


ast            : array_prepend(1, [2, 3, NULL, 4])
raw expr       : array_prepend(1, array(2, 3, NULL, 4))
checked expr   : array_prepend<T0=UInt8 NULL><T0, Array(T0) NULL>(CAST(1_u8 AS UInt8 NULL), CAST(array<T0=UInt8 NULL><T0, T0, T0, T0>(CAST(2_u8 AS UInt8 NULL), CAST(3_u8 AS UInt8 NULL), CAST(NULL AS UInt8 NULL), CAST(4_u8 AS UInt8 NULL)) AS Array(UInt8 NULL) NULL))
optimized expr : [1, 2, 3, NULL, 4]
output type    : Array(UInt8 NULL)
output domain  : [{1..=4} ∪ {NULL}]
output         : [1, 2, 3, NULL, 4]


ast            : array_prepend('a', ['b', NULL, NULL, 'c', 'd'])
raw expr       : array_prepend('a', array('b', NULL, NULL, 'c', 'd'))
checked expr   : array_prepend<T0=String NULL><T0, Array(T0) NULL>(CAST("a" AS String NULL), CAST(array<T0=String NULL><T0, T0, T0, T0, T0>(CAST("b" AS String NULL), CAST(NULL AS String NULL), CAST(NULL AS String NULL), CAST("c" AS String NULL), CAST("d" AS String NULL)) AS Array(String NULL) NULL))
optimized expr : ['a', 'b', NULL, NULL, 'c', 'd']
output type    : Array(String NULL)
output domain  : [{"a"..="d"} ∪ {NULL}]
output         : ['a', 'b', NULL, NULL, 'c', 'd']


ast            : array_prepend(NULL, CAST([2, 3] AS Array(INT8 NULL) NULL))
raw expr       : array_prepend(NULL, CAST(array(2, 3) AS Array(Int8 NULL) NULL))
checked expr   : array_prepend<T0=Int8 NULL><T0, Array(T0) NULL>(CAST(NULL AS Int8 NULL), CAST(array<T0=UInt8><T0, T0>(2_u8, 3_u8) AS Array(Int8 NULL) NULL))
optimized expr : [NULL, 2, 3]
output type    : Array(Int8 NULL)
output domain  : [{2..=3} ∪ {NULL}]
output         : [NULL, 2, 3]


ast            : array_prepend(1, CAST([2, 3] AS Array(INT8 NULL) NULL))
raw expr       : array_prepend(1, CAST(array(2, 3) AS Array(Int8 NULL) NULL))
checked expr   : array_prepend<T0=Int16 NULL><T0, Array(T0) NULL>(CAST(1_u8 AS Int16 NULL), CAST(CAST(array<T0=UInt8><T0, T0>(2_u8, 3_u8) AS Array(Int8 NULL) NULL) AS Array(Int16 NULL) NULL))
optimized expr : [1, 2, 3]
output type    : Array(Int16 NULL)
output domain  : [{1..=3}]
output         : [1, 2, 3]


ast            : array_prepend(a, [b, c])
raw expr       : array_prepend(a::Int16, array(b::Int16, c::Int16))
checked expr   : array_prepend<T0=Int16><T0, Array(T0) NULL>(a, CAST(array<T0=Int16><T0, T0>(b, c) AS Array(Int16) NULL))
evaluation:
+--------+---------+---------+---------+--------------+
|        | a       | b       | c       | Output       |
+--------+---------+---------+---------+--------------+
| Type   | Int16   | Int16   | Int16   | Array(Int16) |
| Domain | {0..=2} | {3..=5} | {6..=8} | [{0..=8}]    |
| Row 0  | 0       | 3       | 6       | [0, 3, 6]    |
| Row 1  | 1       | 4       | 7       | [1, 4, 7]    |
| Row 2  | 2       | 5       | 8       | [2, 5, 8]    |
+--------+---------+---------+---------+--------------+
evaluation (internal):
+--------+-----------------------------------------------------------------------------------+
| Column | Data                                                                              |
+--------+-----------------------------------------------------------------------------------+
| a      | Int16([0, 1, 2])                                                                  |
| b      | Int16([3, 4, 5])                                                                  |
| c      | Int16([6, 7, 8])                                                                  |
| Output | ArrayColumn { values: Int16([0, 3, 6, 1, 4, 7, 2, 5, 8]), offsets: [0, 3, 6, 9] } |
+--------+-----------------------------------------------------------------------------------+


ast            : array_append([], 1)
raw expr       : array_append(array(), 1)
checked expr   : array_append<T0=UInt8><Array(T0) NULL, T0>(CAST(array<>() AS Array(UInt8) NULL), 1_u8)
optimized expr : [1]
output type    : Array(UInt8)
output domain  : [{1..=1}]
output         : [1]


ast            : array_append([2, 3, NULL, 4], 5)
raw expr       : array_append(array(2, 3, NULL, 4), 5)
checked expr   : array_append<T0=UInt8 NULL><Array(T0) NULL, T0>(CAST(array<T0=UInt8 NULL><T0, T0, T0, T0>(CAST(2_u8 AS UInt8 NULL), CAST(3_u8 AS UInt8 NULL), CAST(NULL AS UInt8 NULL), CAST(4_u8 AS UInt8 NULL)) AS Array(UInt8 NULL) NULL), CAST(5_u8 AS UInt8 NULL))
optimized expr : [2, 3, NULL, 4, 5]
output type    : Array(UInt8 NULL)
output domain  : [{2..=5} ∪ {NULL}]
output         : [2, 3, NULL, 4, 5]


ast            : array_append(['b', NULL, NULL, 'c', 'd'], 'e')
raw expr       : array_append(array('b', NULL, NULL, 'c', 'd'), 'e')
checked expr   : array_append<T0=String NULL><Array(T0) NULL, T0>(CAST(array<T0=String NULL><T0, T0, T0, T0, T0>(CAST("b" AS String NULL), CAST(NULL AS String NULL), CAST(NULL AS String NULL), CAST("c" AS String NULL), CAST("d" AS String NULL)) AS Array(String NULL) NULL), CAST("e" AS String NULL))
optimized expr : ['b', NULL, NULL, 'c', 'd', 'e']
output type    : Array(String NULL)
output domain  : [{"b"..="e"} ∪ {NULL}]
output         : ['b', NULL, NULL, 'c', 'd', 'e']


ast            : array_append(CAST([1, 2] AS Array(INT8 NULL) NULL), NULL)
raw expr       : array_append(CAST(array(1, 2) AS Array(Int8 NULL) NULL), NULL)
checked expr   : array_append<T0=Int8 NULL><Array(T0) NULL, T0>(CAST(array<T0=UInt8><T0, T0>(1_u8, 2_u8) AS Array(Int8 NULL) NULL), CAST(NULL AS Int8 NULL))
optimized expr : [1, 2, NULL]
output type    : Array(Int8 NULL)
output domain  : [{1..=2} ∪ {NULL}]
output         : [1, 2, NULL]


ast            : array_append(CAST([1, 2] AS Array(INT8 NULL) NULL), 3)
raw expr       : array_append(CAST(array(1, 2) AS Array(Int8 NULL) NULL), 3)
checked expr   : array_append<T0=Int16 NULL><Array(T0) NULL, T0>(CAST(CAST(array<T0=UInt8><T0, T0>(1_u8, 2_u8) AS Array(Int8 NULL) NULL) AS Array(Int16 NULL) NULL), CAST(3_u8 AS Int16 NULL))
optimized expr : [1, 2, 3]
output type    : Array(Int16 NULL)
output domain  : [{1..=3}]
output         : [1, 2, 3]


ast            : array_append([b, c], a)
raw expr       : array_append(array(b::Int16, c::Int16), a::Int16)
checked expr   : array_append<T0=Int16><Array(T0) NULL, T0>(CAST(array<T0=Int16><T0, T0>(b, c) AS Array(Int16) NULL), a)
evaluation:
+--------+---------+---------+---------+--------------+
|        | a       | b       | c       | Output       |
+--------+---------+---------+---------+--------------+
| Type   | Int16   | Int16   | Int16   | Array(Int16) |
| Domain | {0..=2} | {3..=5} | {6..=8} | [{0..=8}]    |
| Row 0  | 0       | 3       | 6       | [3, 6, 0]    |
| Row 1  | 1       | 4       | 7       | [4, 7, 1]    |
| Row 2  | 2       | 5       | 8       | [5, 8, 2]    |
+--------+---------+---------+---------+--------------+
evaluation (internal):
+--------+-----------------------------------------------------------------------------------+
| Column | Data                                                                              |
+--------+-----------------------------------------------------------------------------------+
| a      | Int16([0, 1, 2])                                                                  |
| b      | Int16([3, 4, 5])                                                                  |
| c      | Int16([6, 7, 8])                                                                  |
| Output | ArrayColumn { values: Int16([3, 6, 0, 4, 7, 1, 5, 8, 2]), offsets: [0, 3, 6, 9] } |
+--------+-----------------------------------------------------------------------------------+


ast            : array_indexof([], NULL)
raw expr       : array_indexof(array(), NULL)
checked expr   : array_indexof<T0=NULL><Array(T0), T0>(CAST(array<>() AS Array(NULL)), NULL)
optimized expr : 0_u64
output type    : UInt64
output domain  : {0..=0}
output         : 0


ast            : array_indexof(NULL, NULL)
raw expr       : array_indexof(NULL, NULL)
checked expr   : array_indexof<NULL, NULL>(NULL, NULL)
optimized expr : NULL
output type    : NULL
output domain  : {NULL}
output         : NULL


ast            : array_indexof([false, true], false)
raw expr       : array_indexof(array(false, true), false)
checked expr   : array_indexof<T0=Boolean><Array(T0), T0>(array<T0=Boolean><T0, T0>(false, true), false)
optimized expr : 1_u64
output type    : UInt64
output domain  : {1..=1}
output         : 1


ast            : array_indexof([], false)
raw expr       : array_indexof(array(), false)
checked expr   : array_indexof<T0=Boolean><Array(T0), T0>(CAST(array<>() AS Array(Boolean)), false)
optimized expr : 0_u64
output type    : UInt64
output domain  : {0..=0}
output         : 0


ast            : array_indexof([false, true], null)
raw expr       : array_indexof(array(false, true), NULL)
checked expr   : array_indexof<T0=Boolean NULL><Array(T0), T0>(CAST(array<T0=Boolean><T0, T0>(false, true) AS Array(Boolean NULL)), CAST(NULL AS Boolean NULL))
optimized expr : 0_u64
output type    : UInt64
output domain  : {0..=0}
output         : 0


error: 
  --> SQL:1:1
  |
1 | array_indexof([false, true], 0)
  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ no function matches signature `array_indexof(Array(Boolean), UInt8)`, you might need to add explicit type casts.

candidate functions:
  array_indexof(NULL, NULL) :: NULL                      : unable to unify `Array(Boolean)` with `NULL`
  array_indexof(Array(T0), T0) :: UInt64                 : unable to find a common super type for `Boolean` and `UInt8`
  array_indexof(Array(T0) NULL, T0 NULL) :: UInt64 NULL  : unable to find a common super type for `Boolean` and `UInt8`



error: 
  --> SQL:1:22
  |
1 | array_indexof([1,2,3,'s'], 's')
  |                      ^^^ invalid digit found in string while evaluating function `to_int64('s')` in expr `to_int64('s')`, during run expr: `array_indexof(array(to_int64(1), to_int64(2), to_int64(3), to_int64('s')), to_int64('s'))`



ast            : array_indexof([1::VARIANT,2::VARIANT,3::VARIANT,4::VARIANT], 2::VARIANT)
raw expr       : array_indexof(array(CAST(1 AS Variant), CAST(2 AS Variant), CAST(3 AS Variant), CAST(4 AS Variant)), CAST(2 AS Variant))
checked expr   : array_indexof<T0=Variant><Array(T0), T0>(array<T0=Variant><T0, T0, T0, T0>(to_variant<T0=UInt8><T0>(1_u8), to_variant<T0=UInt8><T0>(2_u8), to_variant<T0=UInt8><T0>(3_u8), to_variant<T0=UInt8><T0>(4_u8)), to_variant<T0=UInt8><T0>(2_u8))
optimized expr : 2_u64
output type    : UInt64
output domain  : {2..=2}
output         : 2


ast            : array_indexof([1, 2, 3, 4, 5, null], nullable_col)
raw expr       : array_indexof(array(1, 2, 3, 4, 5, NULL), nullable_col::Int64 NULL)
checked expr   : array_indexof<T0=Int64 NULL><Array(T0), T0>(CAST(array<T0=UInt8 NULL><T0, T0, T0, T0, T0, T0>(CAST(1_u8 AS UInt8 NULL), CAST(2_u8 AS UInt8 NULL), CAST(3_u8 AS UInt8 NULL), CAST(4_u8 AS UInt8 NULL), CAST(5_u8 AS UInt8 NULL), CAST(NULL AS UInt8 NULL)) AS Array(Int64 NULL)), nullable_col)
optimized expr : array_indexof<T0=Int64 NULL><Array(T0), T0>([1, 2, 3, 4, 5, NULL], nullable_col)
evaluation:
+--------+-------------------+----------------------------+
|        | nullable_col      | Output                     |
+--------+-------------------+----------------------------+
| Type   | Int64 NULL        | UInt64                     |
| Domain | {9..=10} ∪ {NULL} | {0..=18446744073709551615} |
| Row 0  | 9                 | 0                          |
| Row 1  | 10                | 0                          |
| Row 2  | NULL              | 6                          |
| Row 3  | NULL              | 6                          |
+--------+-------------------+----------------------------+
evaluation (internal):
+--------------+---------------------------------------------------------------------------+
| Column       | Data                                                                      |
+--------------+---------------------------------------------------------------------------+
| nullable_col | NullableColumn { column: Int64([9, 10, 11, 12]), validity: [0b____0011] } |
| Output       | UInt64([0, 0, 6, 6])                                                      |
+--------------+---------------------------------------------------------------------------+


ast            : array_indexof([9,10,null], int8_col)
raw expr       : array_indexof(array(9, 10, NULL), int8_col::Int8)
checked expr   : array_indexof<T0=Int16 NULL><Array(T0), T0>(CAST(array<T0=UInt8 NULL><T0, T0, T0>(CAST(9_u8 AS UInt8 NULL), CAST(10_u8 AS UInt8 NULL), CAST(NULL AS UInt8 NULL)) AS Array(Int16 NULL)), CAST(int8_col AS Int16 NULL))
optimized expr : array_indexof<T0=Int16 NULL><Array(T0), T0>([9, 10, NULL], CAST(int8_col AS Int16 NULL))
evaluation:
+--------+----------+----------------------------+
|        | int8_col | Output                     |
+--------+----------+----------------------------+
| Type   | Int8     | UInt64                     |
| Domain | {1..=8}  | {0..=18446744073709551615} |
| Row 0  | 1        | 0                          |
| Row 1  | 2        | 0                          |
| Row 2  | 7        | 0                          |
| Row 3  | 8        | 0                          |
+--------+----------+----------------------------+
evaluation (internal):
+----------+----------------------+
| Column   | Data                 |
+----------+----------------------+
| int8_col | Int8([1, 2, 7, 8])   |
| Output   | UInt64([0, 0, 0, 0]) |
+----------+----------------------+


ast            : array_unique([])
raw expr       : array_unique(array())
checked expr   : array_unique<Array(Nothing)>(array<>())
optimized expr : 0_u64
output type    : UInt64
output domain  : {0..=0}
output         : 0


ast            : array_unique([1, 1, 2, 2, 3, NULL])
raw expr       : array_unique(array(1, 1, 2, 2, 3, NULL))
checked expr   : array_unique<T0=UInt8 NULL><Array(T0)>(array<T0=UInt8 NULL><T0, T0, T0, T0, T0, T0>(CAST(1_u8 AS UInt8 NULL), CAST(1_u8 AS UInt8 NULL), CAST(2_u8 AS UInt8 NULL), CAST(2_u8 AS UInt8 NULL), CAST(3_u8 AS UInt8 NULL), CAST(NULL AS UInt8 NULL)))
optimized expr : 3_u64
output type    : UInt64
output domain  : {3..=3}
output         : 3


ast            : array_unique(['a', NULL, 'a', 'b', NULL, 'c', 'd'])
raw expr       : array_unique(array('a', NULL, 'a', 'b', NULL, 'c', 'd'))
checked expr   : array_unique<T0=String NULL><Array(T0)>(array<T0=String NULL><T0, T0, T0, T0, T0, T0, T0>(CAST("a" AS String NULL), CAST(NULL AS String NULL), CAST("a" AS String NULL), CAST("b" AS String NULL), CAST(NULL AS String NULL), CAST("c" AS String NULL), CAST("d" AS String NULL)))
optimized expr : 4_u64
output type    : UInt64
output domain  : {4..=4}
output         : 4


ast            : array_unique([a, b, c, d])
raw expr       : array_unique(array(a::Int16, b::Int16, c::Int16, d::Int16))
checked expr   : array_unique<T0=Int16><Array(T0)>(array<T0=Int16><T0, T0, T0, T0>(a, b, c, d))
evaluation:
+--------+---------+---------+---------+---------+----------------------------+
|        | a       | b       | c       | d       | Output                     |
+--------+---------+---------+---------+---------+----------------------------+
| Type   | Int16   | Int16   | Int16   | Int16   | UInt64                     |
| Domain | {1..=4} | {1..=4} | {1..=4} | {2..=4} | {0..=18446744073709551615} |
| Row 0  | 1       | 2       | 3       | 4       | 4                          |
| Row 1  | 1       | 1       | 1       | 2       | 2                          |
| Row 2  | 2       | 2       | 3       | 3       | 2                          |
| Row 3  | 4       | 4       | 4       | 4       | 1                          |
+--------+---------+---------+---------+---------+----------------------------+
evaluation (internal):
+--------+----------------------+
| Column | Data                 |
+--------+----------------------+
| a      | Int16([1, 1, 2, 4])  |
| b      | Int16([2, 1, 2, 4])  |
| c      | Int16([3, 1, 3, 4])  |
| d      | Int16([4, 2, 3, 4])  |
| Output | UInt64([4, 2, 2, 1]) |
+--------+----------------------+


ast            : array_distinct([])
raw expr       : array_distinct(array())
checked expr   : array_distinct<Array(Nothing)>(array<>())
optimized expr : [] :: Array(Nothing)
output type    : Array(Nothing)
output domain  : []
output         : []


ast            : array_distinct([1, 1, 2, 2, 3, NULL])
raw expr       : array_distinct(array(1, 1, 2, 2, 3, NULL))
checked expr   : array_distinct<T0=UInt8 NULL><Array(T0)>(array<T0=UInt8 NULL><T0, T0, T0, T0, T0, T0>(CAST(1_u8 AS UInt8 NULL), CAST(1_u8 AS UInt8 NULL), CAST(2_u8 AS UInt8 NULL), CAST(2_u8 AS UInt8 NULL), CAST(3_u8 AS UInt8 NULL), CAST(NULL AS UInt8 NULL)))
optimized expr : [1, 2, 3]
output type    : Array(UInt8 NULL)
output domain  : [{1..=3}]
output         : [1, 2, 3]


ast            : array_distinct(['a', NULL, 'a', 'b', NULL, 'c', 'd'])
raw expr       : array_distinct(array('a', NULL, 'a', 'b', NULL, 'c', 'd'))
checked expr   : array_distinct<T0=String NULL><Array(T0)>(array<T0=String NULL><T0, T0, T0, T0, T0, T0, T0>(CAST("a" AS String NULL), CAST(NULL AS String NULL), CAST("a" AS String NULL), CAST("b" AS String NULL), CAST(NULL AS String NULL), CAST("c" AS String NULL), CAST("d" AS String NULL)))
optimized expr : ['a', 'b', 'c', 'd']
output type    : Array(String NULL)
output domain  : [{"a"..="d"}]
output         : ['a', 'b', 'c', 'd']


ast            : array_distinct([a, b, c, d])
raw expr       : array_distinct(array(a::Int16, b::Int16, c::Int16, d::Int16))
checked expr   : array_distinct<T0=Int16><Array(T0)>(array<T0=Int16><T0, T0, T0, T0>(a, b, c, d))
evaluation:
+--------+---------+---------+---------+---------+--------------+
|        | a       | b       | c       | d       | Output       |
+--------+---------+---------+---------+---------+--------------+
| Type   | Int16   | Int16   | Int16   | Int16   | Array(Int16) |
| Domain | {1..=4} | {1..=4} | {1..=4} | {2..=4} | [{1..=4}]    |
| Row 0  | 1       | 2       | 3       | 4       | [1, 2, 3, 4] |
| Row 1  | 1       | 1       | 1       | 2       | [1, 2]       |
| Row 2  | 2       | 2       | 3       | 3       | [2, 3]       |
| Row 3  | 4       | 4       | 4       | 4       | [4]          |
+--------+---------+---------+---------+---------+--------------+
evaluation (internal):
+--------+--------------------------------------------------------------------------------------+
| Column | Data                                                                                 |
+--------+--------------------------------------------------------------------------------------+
| a      | Int16([1, 1, 2, 4])                                                                  |
| b      | Int16([2, 1, 2, 4])                                                                  |
| c      | Int16([3, 1, 3, 4])                                                                  |
| d      | Int16([4, 2, 3, 4])                                                                  |
| Output | ArrayColumn { values: Int16([1, 2, 3, 4, 1, 2, 2, 3, 4]), offsets: [0, 4, 6, 8, 9] } |
+--------+--------------------------------------------------------------------------------------+


ast            : array_sum([])
raw expr       : array_sum(array())
checked expr   : array_sum<Array(Nothing)>(array<>())
optimized expr : NULL
output type    : NULL
output domain  : {NULL}
output         : NULL


ast            : array_sum([1, 2, 3, 4, 5, 6, 7])
raw expr       : array_sum(array(1, 2, 3, 4, 5, 6, 7))
checked expr   : array_sum<Array(UInt8)>(array<T0=UInt8><T0, T0, T0, T0, T0, T0, T0>(1_u8, 2_u8, 3_u8, 4_u8, 5_u8, 6_u8, 7_u8))
optimized expr : 28_u64
output type    : UInt64 NULL
output domain  : {28..=28}
output         : 28


ast            : array_sum([1, 2, 3, 4, 5, NULL, 6])
raw expr       : array_sum(array(1, 2, 3, 4, 5, NULL, 6))
checked expr   : array_sum<Array(UInt8 NULL)>(array<T0=UInt8 NULL><T0, T0, T0, T0, T0, T0, T0>(CAST(1_u8 AS UInt8 NULL), CAST(2_u8 AS UInt8 NULL), CAST(3_u8 AS UInt8 NULL), CAST(4_u8 AS UInt8 NULL), CAST(5_u8 AS UInt8 NULL), CAST(NULL AS UInt8 NULL), CAST(6_u8 AS UInt8 NULL)))
optimized expr : 21_u64
output type    : UInt64 NULL
output domain  : {21..=21}
output         : 21


ast            : array_sum([1.2, 3.4, 5.6, 7.8])
raw expr       : array_sum(array(1.2, 3.4, 5.6, 7.8))
checked expr   : array_sum<Array(Decimal(2, 1))>(array<T0=Decimal(2, 1)><T0, T0, T0, T0>(1.2_d128(2,1), 3.4_d128(2,1), 5.6_d128(2,1), 7.8_d128(2,1)))
optimized expr : 18.0_d128(38,1)
output type    : Decimal(38, 1) NULL
output domain  : {18.0..=18.0}
output         : 18.0


ast            : array_sum([1.2, NULL, 3.4, 5.6, NULL])
raw expr       : array_sum(array(1.2, NULL, 3.4, 5.6, NULL))
checked expr   : array_sum<Array(Decimal(2, 1) NULL)>(array<T0=Decimal(2, 1) NULL><T0, T0, T0, T0, T0>(CAST(1.2_d128(2,1) AS Decimal(2, 1) NULL), CAST(NULL AS Decimal(2, 1) NULL), CAST(3.4_d128(2,1) AS Decimal(2, 1) NULL), CAST(5.6_d128(2,1) AS Decimal(2, 1) NULL), CAST(NULL AS Decimal(2, 1) NULL)))
optimized expr : 10.2_d128(38,1)
output type    : Decimal(38, 1) NULL
output domain  : {10.2..=10.2}
output         : 10.2


ast            : array_sum([a, b, c, d])
raw expr       : array_sum(array(a::Int16, b::Int16, c::Int16, d::Int16))
checked expr   : array_sum<Array(Int16)>(array<T0=Int16><T0, T0, T0, T0>(a, b, c, d))
evaluation:
+--------+---------+---------+---------+---------+------------+
|        | a       | b       | c       | d       | Output     |
+--------+---------+---------+---------+---------+------------+
| Type   | Int16   | Int16   | Int16   | Int16   | Int64 NULL |
| Domain | {1..=8} | {1..=6} | {3..=7} | {1..=9} | Unknown    |
| Row 0  | 1       | 2       | 3       | 4       | 10         |
| Row 1  | 5       | 6       | 7       | 8       | 26         |
| Row 2  | 8       | 1       | 7       | 1       | 17         |
| Row 3  | 3       | 2       | 6       | 9       | 20         |
+--------+---------+---------+---------+---------+------------+
evaluation (internal):
+--------+----------------------------------------------------------------------------+
| Column | Data                                                                       |
+--------+----------------------------------------------------------------------------+
| a      | Int16([1, 5, 8, 3])                                                        |
| b      | Int16([2, 6, 1, 2])                                                        |
| c      | Int16([3, 7, 7, 6])                                                        |
| d      | Int16([4, 8, 1, 9])                                                        |
| Output | NullableColumn { column: Int64([10, 26, 17, 20]), validity: [0b____1111] } |
+--------+----------------------------------------------------------------------------+


ast            : array_sum([a, b, c, d])
raw expr       : array_sum(array(a::UInt64 NULL, b::UInt64 NULL, c::UInt64 NULL, d::UInt64 NULL))
checked expr   : array_sum<Array(UInt64 NULL)>(array<T0=UInt64 NULL><T0, T0, T0, T0>(a, b, c, d))
evaluation:
+--------+------------------+------------------+-------------+------------------+-------------+
|        | a                | b                | c           | d                | Output      |
+--------+------------------+------------------+-------------+------------------+-------------+
| Type   | UInt64 NULL      | UInt64 NULL      | UInt64 NULL | UInt64 NULL      | UInt64 NULL |
| Domain | {1..=4} ∪ {NULL} | {2..=6} ∪ {NULL} | {3..=9}     | {4..=6} ∪ {NULL} | Unknown     |
| Row 0  | 1                | 2                | 3           | 4                | 10          |
| Row 1  | 2                | NULL             | 7           | 6                | 15          |
| Row 2  | NULL             | 5                | 8           | 5                | 18          |
| Row 3  | 4                | 6                | 9           | NULL             | 19          |
+--------+------------------+------------------+-------------+------------------+-------------+
evaluation (internal):
+--------+-----------------------------------------------------------------------------+
| Column | Data                                                                        |
+--------+-----------------------------------------------------------------------------+
| a      | NullableColumn { column: UInt64([1, 2, 0, 4]), validity: [0b____1011] }     |
| b      | NullableColumn { column: UInt64([2, 0, 5, 6]), validity: [0b____1101] }     |
| c      | NullableColumn { column: UInt64([3, 7, 8, 9]), validity: [0b____1111] }     |
| d      | NullableColumn { column: UInt64([4, 6, 5, 0]), validity: [0b____0111] }     |
| Output | NullableColumn { column: UInt64([10, 15, 18, 19]), validity: [0b____1111] } |
+--------+-----------------------------------------------------------------------------+


ast            : array_avg([])
raw expr       : array_avg(array())
checked expr   : array_avg<Array(Nothing)>(array<>())
optimized expr : NULL
output type    : NULL
output domain  : {NULL}
output         : NULL


ast            : array_avg([1, 2, 3, 4, 5, 6, 7])
raw expr       : array_avg(array(1, 2, 3, 4, 5, 6, 7))
checked expr   : array_avg<Array(UInt8)>(array<T0=UInt8><T0, T0, T0, T0, T0, T0, T0>(1_u8, 2_u8, 3_u8, 4_u8, 5_u8, 6_u8, 7_u8))
optimized expr : 4_f64
output type    : Float64 NULL
output domain  : {4..=4}
output         : 4


ast            : array_avg([1, 2, 3, 4, 5, NULL, 6])
raw expr       : array_avg(array(1, 2, 3, 4, 5, NULL, 6))
checked expr   : array_avg<Array(UInt8 NULL)>(array<T0=UInt8 NULL><T0, T0, T0, T0, T0, T0, T0>(CAST(1_u8 AS UInt8 NULL), CAST(2_u8 AS UInt8 NULL), CAST(3_u8 AS UInt8 NULL), CAST(4_u8 AS UInt8 NULL), CAST(5_u8 AS UInt8 NULL), CAST(NULL AS UInt8 NULL), CAST(6_u8 AS UInt8 NULL)))
optimized expr : 3.5_f64
output type    : Float64 NULL
output domain  : {3.5..=3.5}
output         : 3.5


ast            : array_avg([1.2, 3.4, 5.6, 7.8])
raw expr       : array_avg(array(1.2, 3.4, 5.6, 7.8))
checked expr   : array_avg<Array(Decimal(2, 1))>(array<T0=Decimal(2, 1)><T0, T0, T0, T0>(1.2_d128(2,1), 3.4_d128(2,1), 5.6_d128(2,1), 7.8_d128(2,1)))
optimized expr : 4.5000_d128(38,4)
output type    : Decimal(38, 4) NULL
output domain  : {4.5000..=4.5000}
output         : 4.5000


ast            : array_avg([1.2, NULL, 3.4, 5.6, NULL])
raw expr       : array_avg(array(1.2, NULL, 3.4, 5.6, NULL))
checked expr   : array_avg<Array(Decimal(2, 1) NULL)>(array<T0=Decimal(2, 1) NULL><T0, T0, T0, T0, T0>(CAST(1.2_d128(2,1) AS Decimal(2, 1) NULL), CAST(NULL AS Decimal(2, 1) NULL), CAST(3.4_d128(2,1) AS Decimal(2, 1) NULL), CAST(5.6_d128(2,1) AS Decimal(2, 1) NULL), CAST(NULL AS Decimal(2, 1) NULL)))
optimized expr : 3.4000_d128(38,4)
output type    : Decimal(38, 4) NULL
output domain  : {3.4000..=3.4000}
output         : 3.4000


ast            : array_avg([a, b, c, d])
raw expr       : array_avg(array(a::Int16, b::Int16, c::Int16, d::Int16))
checked expr   : array_avg<Array(Int16)>(array<T0=Int16><T0, T0, T0, T0>(a, b, c, d))
evaluation:
+--------+---------+---------+---------+---------+--------------+
|        | a       | b       | c       | d       | Output       |
+--------+---------+---------+---------+---------+--------------+
| Type   | Int16   | Int16   | Int16   | Int16   | Float64 NULL |
| Domain | {1..=8} | {1..=6} | {3..=7} | {1..=9} | Unknown      |
| Row 0  | 1       | 2       | 3       | 4       | 2.5          |
| Row 1  | 5       | 6       | 7       | 8       | 6.5          |
| Row 2  | 8       | 1       | 7       | 1       | 4.25         |
| Row 3  | 3       | 2       | 6       | 9       | 5            |
+--------+---------+---------+---------+---------+--------------+
evaluation (internal):
+--------+---------------------------------------------------------------------------------+
| Column | Data                                                                            |
+--------+---------------------------------------------------------------------------------+
| a      | Int16([1, 5, 8, 3])                                                             |
| b      | Int16([2, 6, 1, 2])                                                             |
| c      | Int16([3, 7, 7, 6])                                                             |
| d      | Int16([4, 8, 1, 9])                                                             |
| Output | NullableColumn { column: Float64([2.5, 6.5, 4.25, 5]), validity: [0b____1111] } |
+--------+---------------------------------------------------------------------------------+


ast            : array_avg([a, b, c, d])
raw expr       : array_avg(array(a::UInt64 NULL, b::UInt64 NULL, c::UInt64 NULL, d::UInt64 NULL))
checked expr   : array_avg<Array(UInt64 NULL)>(array<T0=UInt64 NULL><T0, T0, T0, T0>(a, b, c, d))
evaluation:
+--------+------------------+------------------+-------------+------------------+--------------+
|        | a                | b                | c           | d                | Output       |
+--------+------------------+------------------+-------------+------------------+--------------+
| Type   | UInt64 NULL      | UInt64 NULL      | UInt64 NULL | UInt64 NULL      | Float64 NULL |
| Domain | {1..=4} ∪ {NULL} | {2..=6} ∪ {NULL} | {3..=9}     | {4..=6} ∪ {NULL} | Unknown      |
| Row 0  | 1                | 2                | 3           | 4                | 2.5          |
| Row 1  | 2                | NULL             | 7           | 6                | 5            |
| Row 2  | NULL             | 5                | 8           | 5                | 6            |
| Row 3  | 4                | 6                | 9           | NULL             | 6.3333333333 |
+--------+------------------+------------------+-------------+------------------+--------------+
evaluation (internal):
+--------+---------------------------------------------------------------------------------------+
| Column | Data                                                                                  |
+--------+---------------------------------------------------------------------------------------+
| a      | NullableColumn { column: UInt64([1, 2, 0, 4]), validity: [0b____1011] }               |
| b      | NullableColumn { column: UInt64([2, 0, 5, 6]), validity: [0b____1101] }               |
| c      | NullableColumn { column: UInt64([3, 7, 8, 9]), validity: [0b____1111] }               |
| d      | NullableColumn { column: UInt64([4, 6, 5, 0]), validity: [0b____0111] }               |
| Output | NullableColumn { column: Float64([2.5, 5, 6, 6.3333333333]), validity: [0b____1111] } |
+--------+---------------------------------------------------------------------------------------+


ast            : array_count([])
raw expr       : array_count(array())
checked expr   : array_count<Array(Nothing)>(array<>())
optimized expr : 0_u64
output type    : UInt64
output domain  : {0..=0}
output         : 0


ast            : array_count([1, 2, 3, 4, 5, 6, 7])
raw expr       : array_count(array(1, 2, 3, 4, 5, 6, 7))
checked expr   : array_count<Array(UInt8)>(array<T0=UInt8><T0, T0, T0, T0, T0, T0, T0>(1_u8, 2_u8, 3_u8, 4_u8, 5_u8, 6_u8, 7_u8))
optimized expr : 7_u64
output type    : UInt64
output domain  : {7..=7}
output         : 7


ast            : array_count([1, 2, 3, 4, 5, NULL, 6])
raw expr       : array_count(array(1, 2, 3, 4, 5, NULL, 6))
checked expr   : array_count<Array(UInt8 NULL)>(array<T0=UInt8 NULL><T0, T0, T0, T0, T0, T0, T0>(CAST(1_u8 AS UInt8 NULL), CAST(2_u8 AS UInt8 NULL), CAST(3_u8 AS UInt8 NULL), CAST(4_u8 AS UInt8 NULL), CAST(5_u8 AS UInt8 NULL), CAST(NULL AS UInt8 NULL), CAST(6_u8 AS UInt8 NULL)))
optimized expr : 6_u64
output type    : UInt64
output domain  : {6..=6}
output         : 6


ast            : array_count([1.2, 3.4, 5.6, 7.8])
raw expr       : array_count(array(1.2, 3.4, 5.6, 7.8))
checked expr   : array_count<Array(Decimal(2, 1))>(array<T0=Decimal(2, 1)><T0, T0, T0, T0>(1.2_d128(2,1), 3.4_d128(2,1), 5.6_d128(2,1), 7.8_d128(2,1)))
optimized expr : 4_u64
output type    : UInt64
output domain  : {4..=4}
output         : 4


ast            : array_count([1.2, NULL, 3.4, 5.6, NULL])
raw expr       : array_count(array(1.2, NULL, 3.4, 5.6, NULL))
checked expr   : array_count<Array(Decimal(2, 1) NULL)>(array<T0=Decimal(2, 1) NULL><T0, T0, T0, T0, T0>(CAST(1.2_d128(2,1) AS Decimal(2, 1) NULL), CAST(NULL AS Decimal(2, 1) NULL), CAST(3.4_d128(2,1) AS Decimal(2, 1) NULL), CAST(5.6_d128(2,1) AS Decimal(2, 1) NULL), CAST(NULL AS Decimal(2, 1) NULL)))
optimized expr : 3_u64
output type    : UInt64
output domain  : {3..=3}
output         : 3


ast            : array_count(['a', 'b', 'c', 'd', 'e'])
raw expr       : array_count(array('a', 'b', 'c', 'd', 'e'))
checked expr   : array_count<Array(String)>(array<T0=String><T0, T0, T0, T0, T0>("a", "b", "c", "d", "e"))
optimized expr : 5_u64
output type    : UInt64
output domain  : {5..=5}
output         : 5


ast            : array_count(['a', 'b', NULL, 'c', 'd', NULL])
raw expr       : array_count(array('a', 'b', NULL, 'c', 'd', NULL))
checked expr   : array_count<Array(String NULL)>(array<T0=String NULL><T0, T0, T0, T0, T0, T0>(CAST("a" AS String NULL), CAST("b" AS String NULL), CAST(NULL AS String NULL), CAST("c" AS String NULL), CAST("d" AS String NULL), CAST(NULL AS String NULL)))
optimized expr : 4_u64
output type    : UInt64
output domain  : {4..=4}
output         : 4


ast            : array_count([a, b, c, d])
raw expr       : array_count(array(a::Int16, b::Int16, c::Int16, d::Int16))
checked expr   : array_count<Array(Int16)>(array<T0=Int16><T0, T0, T0, T0>(a, b, c, d))
evaluation:
+--------+---------+---------+---------+---------+---------+
|        | a       | b       | c       | d       | Output  |
+--------+---------+---------+---------+---------+---------+
| Type   | Int16   | Int16   | Int16   | Int16   | UInt64  |
| Domain | {1..=8} | {1..=6} | {3..=7} | {1..=9} | Unknown |
| Row 0  | 1       | 2       | 3       | 4       | 4       |
| Row 1  | 5       | 6       | 7       | 8       | 4       |
| Row 2  | 8       | 1       | 7       | 1       | 4       |
| Row 3  | 3       | 2       | 6       | 9       | 4       |
+--------+---------+---------+---------+---------+---------+
evaluation (internal):
+--------+----------------------+
| Column | Data                 |
+--------+----------------------+
| a      | Int16([1, 5, 8, 3])  |
| b      | Int16([2, 6, 1, 2])  |
| c      | Int16([3, 7, 7, 6])  |
| d      | Int16([4, 8, 1, 9])  |
| Output | UInt64([4, 4, 4, 4]) |
+--------+----------------------+


ast            : array_count([a, b, c, d])
raw expr       : array_count(array(a::UInt64 NULL, b::UInt64 NULL, c::UInt64 NULL, d::UInt64 NULL))
checked expr   : array_count<Array(UInt64 NULL)>(array<T0=UInt64 NULL><T0, T0, T0, T0>(a, b, c, d))
evaluation:
+--------+------------------+------------------+-------------+------------------+---------+
|        | a                | b                | c           | d                | Output  |
+--------+------------------+------------------+-------------+------------------+---------+
| Type   | UInt64 NULL      | UInt64 NULL      | UInt64 NULL | UInt64 NULL      | UInt64  |
| Domain | {1..=4} ∪ {NULL} | {2..=6} ∪ {NULL} | {3..=9}     | {4..=6} ∪ {NULL} | Unknown |
| Row 0  | 1                | 2                | 3           | 4                | 4       |
| Row 1  | 2                | NULL             | 7           | 6                | 3       |
| Row 2  | NULL             | 5                | 8           | 5                | 3       |
| Row 3  | 4                | 6                | 9           | NULL             | 3       |
+--------+------------------+------------------+-------------+------------------+---------+
evaluation (internal):
+--------+-------------------------------------------------------------------------+
| Column | Data                                                                    |
+--------+-------------------------------------------------------------------------+
| a      | NullableColumn { column: UInt64([1, 2, 0, 4]), validity: [0b____1011] } |
| b      | NullableColumn { column: UInt64([2, 0, 5, 6]), validity: [0b____1101] } |
| c      | NullableColumn { column: UInt64([3, 7, 8, 9]), validity: [0b____1111] } |
| d      | NullableColumn { column: UInt64([4, 6, 5, 0]), validity: [0b____0111] } |
| Output | UInt64([4, 3, 3, 3])                                                    |
+--------+-------------------------------------------------------------------------+


ast            : array_max([])
raw expr       : array_max(array())
checked expr   : array_max<Array(Nothing)>(array<>())
optimized expr : NULL
output type    : NULL
output domain  : {NULL}
output         : NULL


ast            : array_max([1, 2, 3, 4, 5, 6, 7])
raw expr       : array_max(array(1, 2, 3, 4, 5, 6, 7))
checked expr   : array_max<Array(UInt8)>(array<T0=UInt8><T0, T0, T0, T0, T0, T0, T0>(1_u8, 2_u8, 3_u8, 4_u8, 5_u8, 6_u8, 7_u8))
optimized expr : 7_u8
output type    : UInt8 NULL
output domain  : {7..=7}
output         : 7


ast            : array_max([1, 2, 3, 4, 5, NULL, 6])
raw expr       : array_max(array(1, 2, 3, 4, 5, NULL, 6))
checked expr   : array_max<Array(UInt8 NULL)>(array<T0=UInt8 NULL><T0, T0, T0, T0, T0, T0, T0>(CAST(1_u8 AS UInt8 NULL), CAST(2_u8 AS UInt8 NULL), CAST(3_u8 AS UInt8 NULL), CAST(4_u8 AS UInt8 NULL), CAST(5_u8 AS UInt8 NULL), CAST(NULL AS UInt8 NULL), CAST(6_u8 AS UInt8 NULL)))
optimized expr : 6_u8
output type    : UInt8 NULL
output domain  : {6..=6}
output         : 6


ast            : array_max([1.2, 3.4, 5.6, 7.8])
raw expr       : array_max(array(1.2, 3.4, 5.6, 7.8))
checked expr   : array_max<Array(Decimal(2, 1))>(array<T0=Decimal(2, 1)><T0, T0, T0, T0>(1.2_d128(2,1), 3.4_d128(2,1), 5.6_d128(2,1), 7.8_d128(2,1)))
optimized expr : 7.8_d128(2,1)
output type    : Decimal(2, 1) NULL
output domain  : {7.8..=7.8}
output         : 7.8


ast            : array_max([1.2, NULL, 3.4, 5.6, NULL])
raw expr       : array_max(array(1.2, NULL, 3.4, 5.6, NULL))
checked expr   : array_max<Array(Decimal(2, 1) NULL)>(array<T0=Decimal(2, 1) NULL><T0, T0, T0, T0, T0>(CAST(1.2_d128(2,1) AS Decimal(2, 1) NULL), CAST(NULL AS Decimal(2, 1) NULL), CAST(3.4_d128(2,1) AS Decimal(2, 1) NULL), CAST(5.6_d128(2,1) AS Decimal(2, 1) NULL), CAST(NULL AS Decimal(2, 1) NULL)))
optimized expr : 5.6_d128(2,1)
output type    : Decimal(2, 1) NULL
output domain  : {5.6..=5.6}
output         : 5.6


ast            : array_max(['a', 'b', 'c', 'd', 'e'])
raw expr       : array_max(array('a', 'b', 'c', 'd', 'e'))
checked expr   : array_max<Array(String)>(array<T0=String><T0, T0, T0, T0, T0>("a", "b", "c", "d", "e"))
optimized expr : "e"
output type    : String NULL
output domain  : {"e"..="e"}
output         : 'e'


ast            : array_max(['a', 'b', NULL, 'c', 'd', NULL])
raw expr       : array_max(array('a', 'b', NULL, 'c', 'd', NULL))
checked expr   : array_max<Array(String NULL)>(array<T0=String NULL><T0, T0, T0, T0, T0, T0>(CAST("a" AS String NULL), CAST("b" AS String NULL), CAST(NULL AS String NULL), CAST("c" AS String NULL), CAST("d" AS String NULL), CAST(NULL AS String NULL)))
optimized expr : "d"
output type    : String NULL
output domain  : {"d"..="d"}
output         : 'd'


ast            : array_max([a, b, c, d])
raw expr       : array_max(array(a::Int16, b::Int16, c::Int16, d::Int16))
checked expr   : array_max<Array(Int16)>(array<T0=Int16><T0, T0, T0, T0>(a, b, c, d))
evaluation:
+--------+---------+---------+---------+---------+------------+
|        | a       | b       | c       | d       | Output     |
+--------+---------+---------+---------+---------+------------+
| Type   | Int16   | Int16   | Int16   | Int16   | Int16 NULL |
| Domain | {1..=8} | {1..=6} | {3..=7} | {1..=9} | Unknown    |
| Row 0  | 1       | 2       | 3       | 4       | 4          |
| Row 1  | 5       | 6       | 7       | 8       | 8          |
| Row 2  | 8       | 1       | 7       | 1       | 8          |
| Row 3  | 3       | 2       | 6       | 9       | 9          |
+--------+---------+---------+---------+---------+------------+
evaluation (internal):
+--------+------------------------------------------------------------------------+
| Column | Data                                                                   |
+--------+------------------------------------------------------------------------+
| a      | Int16([1, 5, 8, 3])                                                    |
| b      | Int16([2, 6, 1, 2])                                                    |
| c      | Int16([3, 7, 7, 6])                                                    |
| d      | Int16([4, 8, 1, 9])                                                    |
| Output | NullableColumn { column: Int16([4, 8, 8, 9]), validity: [0b____1111] } |
+--------+------------------------------------------------------------------------+


ast            : array_max([a, b, c, d])
raw expr       : array_max(array(a::UInt64 NULL, b::UInt64 NULL, c::UInt64 NULL, d::UInt64 NULL))
checked expr   : array_max<Array(UInt64 NULL)>(array<T0=UInt64 NULL><T0, T0, T0, T0>(a, b, c, d))
evaluation:
+--------+------------------+------------------+-------------+------------------+-------------+
|        | a                | b                | c           | d                | Output      |
+--------+------------------+------------------+-------------+------------------+-------------+
| Type   | UInt64 NULL      | UInt64 NULL      | UInt64 NULL | UInt64 NULL      | UInt64 NULL |
| Domain | {1..=4} ∪ {NULL} | {2..=6} ∪ {NULL} | {3..=9}     | {4..=6} ∪ {NULL} | Unknown     |
| Row 0  | 1                | 2                | 3           | 4                | 4           |
| Row 1  | 2                | NULL             | 7           | 6                | 7           |
| Row 2  | NULL             | 5                | 8           | 5                | 8           |
| Row 3  | 4                | 6                | 9           | NULL             | 9           |
+--------+------------------+------------------+-------------+------------------+-------------+
evaluation (internal):
+--------+-------------------------------------------------------------------------+
| Column | Data                                                                    |
+--------+-------------------------------------------------------------------------+
| a      | NullableColumn { column: UInt64([1, 2, 0, 4]), validity: [0b____1011] } |
| b      | NullableColumn { column: UInt64([2, 0, 5, 6]), validity: [0b____1101] } |
| c      | NullableColumn { column: UInt64([3, 7, 8, 9]), validity: [0b____1111] } |
| d      | NullableColumn { column: UInt64([4, 6, 5, 0]), validity: [0b____0111] } |
| Output | NullableColumn { column: UInt64([4, 7, 8, 9]), validity: [0b____1111] } |
+--------+-------------------------------------------------------------------------+


ast            : array_min([])
raw expr       : array_min(array())
checked expr   : array_min<Array(Nothing)>(array<>())
optimized expr : NULL
output type    : NULL
output domain  : {NULL}
output         : NULL


ast            : array_min([1, 2, 3, 4, 5, 6, 7])
raw expr       : array_min(array(1, 2, 3, 4, 5, 6, 7))
checked expr   : array_min<Array(UInt8)>(array<T0=UInt8><T0, T0, T0, T0, T0, T0, T0>(1_u8, 2_u8, 3_u8, 4_u8, 5_u8, 6_u8, 7_u8))
optimized expr : 1_u8
output type    : UInt8 NULL
output domain  : {1..=1}
output         : 1


ast            : array_min([1, 2, 3, 4, 5, NULL, 6])
raw expr       : array_min(array(1, 2, 3, 4, 5, NULL, 6))
checked expr   : array_min<Array(UInt8 NULL)>(array<T0=UInt8 NULL><T0, T0, T0, T0, T0, T0, T0>(CAST(1_u8 AS UInt8 NULL), CAST(2_u8 AS UInt8 NULL), CAST(3_u8 AS UInt8 NULL), CAST(4_u8 AS UInt8 NULL), CAST(5_u8 AS UInt8 NULL), CAST(NULL AS UInt8 NULL), CAST(6_u8 AS UInt8 NULL)))
optimized expr : 1_u8
output type    : UInt8 NULL
output domain  : {1..=1}
output         : 1


ast            : array_min([1.2, 3.4, 5.6, 7.8])
raw expr       : array_min(array(1.2, 3.4, 5.6, 7.8))
checked expr   : array_min<Array(Decimal(2, 1))>(array<T0=Decimal(2, 1)><T0, T0, T0, T0>(1.2_d128(2,1), 3.4_d128(2,1), 5.6_d128(2,1), 7.8_d128(2,1)))
optimized expr : 1.2_d128(2,1)
output type    : Decimal(2, 1) NULL
output domain  : {1.2..=1.2}
output         : 1.2


ast            : array_min([1.2, NULL, 3.4, 5.6, NULL])
raw expr       : array_min(array(1.2, NULL, 3.4, 5.6, NULL))
checked expr   : array_min<Array(Decimal(2, 1) NULL)>(array<T0=Decimal(2, 1) NULL><T0, T0, T0, T0, T0>(CAST(1.2_d128(2,1) AS Decimal(2, 1) NULL), CAST(NULL AS Decimal(2, 1) NULL), CAST(3.4_d128(2,1) AS Decimal(2, 1) NULL), CAST(5.6_d128(2,1) AS Decimal(2, 1) NULL), CAST(NULL AS Decimal(2, 1) NULL)))
optimized expr : 1.2_d128(2,1)
output type    : Decimal(2, 1) NULL
output domain  : {1.2..=1.2}
output         : 1.2


ast            : array_min(['a', 'b', 'c', 'd', 'e'])
raw expr       : array_min(array('a', 'b', 'c', 'd', 'e'))
checked expr   : array_min<Array(String)>(array<T0=String><T0, T0, T0, T0, T0>("a", "b", "c", "d", "e"))
optimized expr : "a"
output type    : String NULL
output domain  : {"a"..="a"}
output         : 'a'


ast            : array_min(['a', 'b', NULL, 'c', 'd', NULL])
raw expr       : array_min(array('a', 'b', NULL, 'c', 'd', NULL))
checked expr   : array_min<Array(String NULL)>(array<T0=String NULL><T0, T0, T0, T0, T0, T0>(CAST("a" AS String NULL), CAST("b" AS String NULL), CAST(NULL AS String NULL), CAST("c" AS String NULL), CAST("d" AS String NULL), CAST(NULL AS String NULL)))
optimized expr : "a"
output type    : String NULL
output domain  : {"a"..="a"}
output         : 'a'


ast            : array_min([a, b, c, d])
raw expr       : array_min(array(a::Int16, b::Int16, c::Int16, d::Int16))
checked expr   : array_min<Array(Int16)>(array<T0=Int16><T0, T0, T0, T0>(a, b, c, d))
evaluation:
+--------+---------+---------+---------+---------+------------+
|        | a       | b       | c       | d       | Output     |
+--------+---------+---------+---------+---------+------------+
| Type   | Int16   | Int16   | Int16   | Int16   | Int16 NULL |
| Domain | {1..=8} | {1..=6} | {3..=7} | {1..=9} | Unknown    |
| Row 0  | 1       | 2       | 3       | 4       | 1          |
| Row 1  | 5       | 6       | 7       | 8       | 5          |
| Row 2  | 8       | 1       | 7       | 1       | 1          |
| Row 3  | 3       | 2       | 6       | 9       | 2          |
+--------+---------+---------+---------+---------+------------+
evaluation (internal):
+--------+------------------------------------------------------------------------+
| Column | Data                                                                   |
+--------+------------------------------------------------------------------------+
| a      | Int16([1, 5, 8, 3])                                                    |
| b      | Int16([2, 6, 1, 2])                                                    |
| c      | Int16([3, 7, 7, 6])                                                    |
| d      | Int16([4, 8, 1, 9])                                                    |
| Output | NullableColumn { column: Int16([1, 5, 1, 2]), validity: [0b____1111] } |
+--------+------------------------------------------------------------------------+


ast            : array_min([a, b, c, d])
raw expr       : array_min(array(a::UInt64 NULL, b::UInt64 NULL, c::UInt64 NULL, d::UInt64 NULL))
checked expr   : array_min<Array(UInt64 NULL)>(array<T0=UInt64 NULL><T0, T0, T0, T0>(a, b, c, d))
evaluation:
+--------+------------------+------------------+-------------+------------------+-------------+
|        | a                | b                | c           | d                | Output      |
+--------+------------------+------------------+-------------+------------------+-------------+
| Type   | UInt64 NULL      | UInt64 NULL      | UInt64 NULL | UInt64 NULL      | UInt64 NULL |
| Domain | {1..=4} ∪ {NULL} | {2..=6} ∪ {NULL} | {3..=9}     | {4..=6} ∪ {NULL} | Unknown     |
| Row 0  | 1                | 2                | 3           | 4                | 1           |
| Row 1  | 2                | NULL             | 7           | 6                | 2           |
| Row 2  | NULL             | 5                | 8           | 5                | 5           |
| Row 3  | 4                | 6                | 9           | NULL             | 4           |
+--------+------------------+------------------+-------------+------------------+-------------+
evaluation (internal):
+--------+-------------------------------------------------------------------------+
| Column | Data                                                                    |
+--------+-------------------------------------------------------------------------+
| a      | NullableColumn { column: UInt64([1, 2, 0, 4]), validity: [0b____1011] } |
| b      | NullableColumn { column: UInt64([2, 0, 5, 6]), validity: [0b____1101] } |
| c      | NullableColumn { column: UInt64([3, 7, 8, 9]), validity: [0b____1111] } |
| d      | NullableColumn { column: UInt64([4, 6, 5, 0]), validity: [0b____0111] } |
| Output | NullableColumn { column: UInt64([1, 2, 5, 4]), validity: [0b____1111] } |
+--------+-------------------------------------------------------------------------+


ast            : array_any([])
raw expr       : array_any(array())
checked expr   : array_any<Array(Nothing)>(array<>())
optimized expr : NULL
output type    : NULL
output domain  : {NULL}
output         : NULL


ast            : array_any([1, 2, 3])
raw expr       : array_any(array(1, 2, 3))
checked expr   : array_any<Array(UInt8)>(array<T0=UInt8><T0, T0, T0>(1_u8, 2_u8, 3_u8))
optimized expr : 1_u8
output type    : UInt8 NULL
output domain  : {1..=1}
output         : 1


ast            : array_any([NULL, 3, 2, 1])
raw expr       : array_any(array(NULL, 3, 2, 1))
checked expr   : array_any<Array(UInt8 NULL)>(array<T0=UInt8 NULL><T0, T0, T0, T0>(CAST(NULL AS UInt8 NULL), CAST(3_u8 AS UInt8 NULL), CAST(2_u8 AS UInt8 NULL), CAST(1_u8 AS UInt8 NULL)))
optimized expr : 3_u8
output type    : UInt8 NULL
output domain  : {3..=3}
output         : 3


ast            : array_any(['a', 'b', 'c'])
raw expr       : array_any(array('a', 'b', 'c'))
checked expr   : array_any<Array(String)>(array<T0=String><T0, T0, T0>("a", "b", "c"))
optimized expr : "a"
output type    : String NULL
output domain  : {"a"..="a"}
output         : 'a'


ast            : array_any([NULL, 'x', 'y', 'z'])
raw expr       : array_any(array(NULL, 'x', 'y', 'z'))
checked expr   : array_any<Array(String NULL)>(array<T0=String NULL><T0, T0, T0, T0>(CAST(NULL AS String NULL), CAST("x" AS String NULL), CAST("y" AS String NULL), CAST("z" AS String NULL)))
optimized expr : "x"
output type    : String NULL
output domain  : {"x"..="x"}
output         : 'x'


ast            : array_any([a, b, c, d])
raw expr       : array_any(array(a::Int16, b::Int16, c::Int16, d::Int16))
checked expr   : array_any<Array(Int16)>(array<T0=Int16><T0, T0, T0, T0>(a, b, c, d))
evaluation:
+--------+---------+---------+---------+---------+------------+
|        | a       | b       | c       | d       | Output     |
+--------+---------+---------+---------+---------+------------+
| Type   | Int16   | Int16   | Int16   | Int16   | Int16 NULL |
| Domain | {1..=8} | {1..=6} | {3..=7} | {1..=9} | Unknown    |
| Row 0  | 1       | 2       | 3       | 4       | 1          |
| Row 1  | 5       | 6       | 7       | 8       | 5          |
| Row 2  | 8       | 1       | 7       | 1       | 8          |
| Row 3  | 3       | 2       | 6       | 9       | 3          |
+--------+---------+---------+---------+---------+------------+
evaluation (internal):
+--------+------------------------------------------------------------------------+
| Column | Data                                                                   |
+--------+------------------------------------------------------------------------+
| a      | Int16([1, 5, 8, 3])                                                    |
| b      | Int16([2, 6, 1, 2])                                                    |
| c      | Int16([3, 7, 7, 6])                                                    |
| d      | Int16([4, 8, 1, 9])                                                    |
| Output | NullableColumn { column: Int16([1, 5, 8, 3]), validity: [0b____1111] } |
+--------+------------------------------------------------------------------------+


ast            : array_any([a, b, c, d])
raw expr       : array_any(array(a::UInt64 NULL, b::UInt64 NULL, c::UInt64 NULL, d::UInt64 NULL))
checked expr   : array_any<Array(UInt64 NULL)>(array<T0=UInt64 NULL><T0, T0, T0, T0>(a, b, c, d))
evaluation:
+--------+------------------+------------------+-------------+------------------+-------------+
|        | a                | b                | c           | d                | Output      |
+--------+------------------+------------------+-------------+------------------+-------------+
| Type   | UInt64 NULL      | UInt64 NULL      | UInt64 NULL | UInt64 NULL      | UInt64 NULL |
| Domain | {1..=4} ∪ {NULL} | {2..=6} ∪ {NULL} | {3..=9}     | {4..=6} ∪ {NULL} | Unknown     |
| Row 0  | 1                | 2                | 3           | 4                | 1           |
| Row 1  | 2                | NULL             | 7           | 6                | 2           |
| Row 2  | NULL             | 5                | 8           | 5                | 5           |
| Row 3  | 4                | 6                | 9           | NULL             | 4           |
+--------+------------------+------------------+-------------+------------------+-------------+
evaluation (internal):
+--------+-------------------------------------------------------------------------+
| Column | Data                                                                    |
+--------+-------------------------------------------------------------------------+
| a      | NullableColumn { column: UInt64([1, 2, 0, 4]), validity: [0b____1011] } |
| b      | NullableColumn { column: UInt64([2, 0, 5, 6]), validity: [0b____1101] } |
| c      | NullableColumn { column: UInt64([3, 7, 8, 9]), validity: [0b____1111] } |
| d      | NullableColumn { column: UInt64([4, 6, 5, 0]), validity: [0b____0111] } |
| Output | NullableColumn { column: UInt64([1, 2, 5, 4]), validity: [0b____1111] } |
+--------+-------------------------------------------------------------------------+


ast            : array_stddev_samp([])
raw expr       : array_stddev_samp(array())
checked expr   : array_stddev_samp<Array(Nothing)>(array<>())
optimized expr : NULL
output type    : NULL
output domain  : {NULL}
output         : NULL


ast            : array_stddev_samp([1, 2, 3])
raw expr       : array_stddev_samp(array(1, 2, 3))
checked expr   : array_stddev_samp<Array(UInt8)>(array<T0=UInt8><T0, T0, T0>(1_u8, 2_u8, 3_u8))
optimized expr : 1_f64
output type    : Float64 NULL
output domain  : {1..=1}
output         : 1


ast            : array_stddev_samp([NULL, 3, 2, 1])
raw expr       : array_stddev_samp(array(NULL, 3, 2, 1))
checked expr   : array_stddev_samp<Array(UInt8 NULL)>(array<T0=UInt8 NULL><T0, T0, T0, T0>(CAST(NULL AS UInt8 NULL), CAST(3_u8 AS UInt8 NULL), CAST(2_u8 AS UInt8 NULL), CAST(1_u8 AS UInt8 NULL)))
optimized expr : 1_f64
output type    : Float64 NULL
output domain  : {1..=1}
output         : 1


ast            : array_stddev_samp([a, b, c, d])
raw expr       : array_stddev_samp(array(a::Int16, b::Int16, c::Int16, d::Int16))
checked expr   : array_stddev_samp<Array(Int16)>(array<T0=Int16><T0, T0, T0, T0>(a, b, c, d))
evaluation:
+--------+---------+---------+---------+---------+--------------+
|        | a       | b       | c       | d       | Output       |
+--------+---------+---------+---------+---------+--------------+
| Type   | Int16   | Int16   | Int16   | Int16   | Float64 NULL |
| Domain | {1..=8} | {1..=6} | {3..=7} | {1..=9} | Unknown      |
| Row 0  | 1       | 2       | 3       | 4       | 1.2909944487 |
| Row 1  | 5       | 6       | 7       | 8       | 1.2909944487 |
| Row 2  | 8       | 1       | 7       | 1       | 3.7749172176 |
| Row 3  | 3       | 2       | 6       | 9       | 3.1622776601 |
+--------+---------+---------+---------+---------+--------------+
evaluation (internal):
+--------+----------------------------------------------------------------------------------------------------------------------+
| Column | Data                                                                                                                 |
+--------+----------------------------------------------------------------------------------------------------------------------+
| a      | Int16([1, 5, 8, 3])                                                                                                  |
| b      | Int16([2, 6, 1, 2])                                                                                                  |
| c      | Int16([3, 7, 7, 6])                                                                                                  |
| d      | Int16([4, 8, 1, 9])                                                                                                  |
| Output | NullableColumn { column: Float64([1.2909944487, 1.2909944487, 3.7749172176, 3.1622776601]), validity: [0b____1111] } |
+--------+----------------------------------------------------------------------------------------------------------------------+


ast            : array_stddev_pop([])
raw expr       : array_stddev_pop(array())
checked expr   : array_stddev_pop<Array(Nothing)>(array<>())
optimized expr : NULL
output type    : NULL
output domain  : {NULL}
output         : NULL


ast            : array_stddev_pop([1, 2, 3])
raw expr       : array_stddev_pop(array(1, 2, 3))
checked expr   : array_stddev_pop<Array(UInt8)>(array<T0=UInt8><T0, T0, T0>(1_u8, 2_u8, 3_u8))
optimized expr : 0.8164965809_f64
output type    : Float64 NULL
output domain  : {0.8164965809..=0.8164965809}
output         : 0.8164965809


ast            : array_stddev_pop([NULL, 3, 2, 1])
raw expr       : array_stddev_pop(array(NULL, 3, 2, 1))
checked expr   : array_stddev_pop<Array(UInt8 NULL)>(array<T0=UInt8 NULL><T0, T0, T0, T0>(CAST(NULL AS UInt8 NULL), CAST(3_u8 AS UInt8 NULL), CAST(2_u8 AS UInt8 NULL), CAST(1_u8 AS UInt8 NULL)))
optimized expr : 0.8164965809_f64
output type    : Float64 NULL
output domain  : {0.8164965809..=0.8164965809}
output         : 0.8164965809


ast            : array_stddev_pop([a, b, c, d])
raw expr       : array_stddev_pop(array(a::Int16, b::Int16, c::Int16, d::Int16))
checked expr   : array_stddev_pop<Array(Int16)>(array<T0=Int16><T0, T0, T0, T0>(a, b, c, d))
evaluation:
+--------+---------+---------+---------+---------+--------------+
|        | a       | b       | c       | d       | Output       |
+--------+---------+---------+---------+---------+--------------+
| Type   | Int16   | Int16   | Int16   | Int16   | Float64 NULL |
| Domain | {1..=8} | {1..=6} | {3..=7} | {1..=9} | Unknown      |
| Row 0  | 1       | 2       | 3       | 4       | 1.1180339887 |
| Row 1  | 5       | 6       | 7       | 8       | 1.1180339887 |
| Row 2  | 8       | 1       | 7       | 1       | 3.2691742076 |
| Row 3  | 3       | 2       | 6       | 9       | 2.7386127875 |
+--------+---------+---------+---------+---------+--------------+
evaluation (internal):
+--------+----------------------------------------------------------------------------------------------------------------------+
| Column | Data                                                                                                                 |
+--------+----------------------------------------------------------------------------------------------------------------------+
| a      | Int16([1, 5, 8, 3])                                                                                                  |
| b      | Int16([2, 6, 1, 2])                                                                                                  |
| c      | Int16([3, 7, 7, 6])                                                                                                  |
| d      | Int16([4, 8, 1, 9])                                                                                                  |
| Output | NullableColumn { column: Float64([1.1180339887, 1.1180339887, 3.2691742076, 2.7386127875]), validity: [0b____1111] } |
+--------+----------------------------------------------------------------------------------------------------------------------+


ast            : array_median([])
raw expr       : array_median(array())
checked expr   : array_median<Array(Nothing)>(array<>())
optimized expr : NULL
output type    : NULL
output domain  : {NULL}
output         : NULL


ast            : array_median([1, 2, 3])
raw expr       : array_median(array(1, 2, 3))
checked expr   : array_median<Array(UInt8)>(array<T0=UInt8><T0, T0, T0>(1_u8, 2_u8, 3_u8))
optimized expr : 2_f64
output type    : Float64 NULL
output domain  : {2..=2}
output         : 2


ast            : array_median([NULL, 3, 2, 1])
raw expr       : array_median(array(NULL, 3, 2, 1))
checked expr   : array_median<Array(UInt8 NULL)>(array<T0=UInt8 NULL><T0, T0, T0, T0>(CAST(NULL AS UInt8 NULL), CAST(3_u8 AS UInt8 NULL), CAST(2_u8 AS UInt8 NULL), CAST(1_u8 AS UInt8 NULL)))
optimized expr : 2_f64
output type    : Float64 NULL
output domain  : {2..=2}
output         : 2


ast            : array_median([a, b, c, d])
raw expr       : array_median(array(a::Int16, b::Int16, c::Int16, d::Int16))
checked expr   : array_median<Array(Int16)>(array<T0=Int16><T0, T0, T0, T0>(a, b, c, d))
evaluation:
+--------+---------+---------+---------+---------+--------------+
|        | a       | b       | c       | d       | Output       |
+--------+---------+---------+---------+---------+--------------+
| Type   | Int16   | Int16   | Int16   | Int16   | Float64 NULL |
| Domain | {1..=8} | {1..=6} | {3..=7} | {1..=9} | Unknown      |
| Row 0  | 1       | 2       | 3       | 4       | 2.5          |
| Row 1  | 5       | 6       | 7       | 8       | 6.5          |
| Row 2  | 8       | 1       | 7       | 1       | 4            |
| Row 3  | 3       | 2       | 6       | 9       | 4.5          |
+--------+---------+---------+---------+---------+--------------+
evaluation (internal):
+--------+--------------------------------------------------------------------------------+
| Column | Data                                                                           |
+--------+--------------------------------------------------------------------------------+
| a      | Int16([1, 5, 8, 3])                                                            |
| b      | Int16([2, 6, 1, 2])                                                            |
| c      | Int16([3, 7, 7, 6])                                                            |
| d      | Int16([4, 8, 1, 9])                                                            |
| Output | NullableColumn { column: Float64([2.5, 6.5, 4, 4.5]), validity: [0b____1111] } |
+--------+--------------------------------------------------------------------------------+


ast            : array_approx_count_distinct([])
raw expr       : array_approx_count_distinct(array())
checked expr   : array_approx_count_distinct<Array(Nothing)>(array<>())
optimized expr : NULL
output type    : NULL
output domain  : {NULL}
output         : NULL


ast            : array_approx_count_distinct([1, 2, 3])
raw expr       : array_approx_count_distinct(array(1, 2, 3))
checked expr   : array_approx_count_distinct<Array(UInt8)>(array<T0=UInt8><T0, T0, T0>(1_u8, 2_u8, 3_u8))
optimized expr : 3_u64
output type    : UInt64
output domain  : {3..=3}
output         : 3


ast            : array_approx_count_distinct([NULL, 3, 2, 1])
raw expr       : array_approx_count_distinct(array(NULL, 3, 2, 1))
checked expr   : array_approx_count_distinct<Array(UInt8 NULL)>(array<T0=UInt8 NULL><T0, T0, T0, T0>(CAST(NULL AS UInt8 NULL), CAST(3_u8 AS UInt8 NULL), CAST(2_u8 AS UInt8 NULL), CAST(1_u8 AS UInt8 NULL)))
optimized expr : 3_u64
output type    : UInt64
output domain  : {3..=3}
output         : 3


ast            : array_approx_count_distinct(['a', 'b', 'c'])
raw expr       : array_approx_count_distinct(array('a', 'b', 'c'))
checked expr   : array_approx_count_distinct<Array(String)>(array<T0=String><T0, T0, T0>("a", "b", "c"))
optimized expr : 3_u64
output type    : UInt64
output domain  : {3..=3}
output         : 3


ast            : array_approx_count_distinct([NULL, 'x', 'y', 'z'])
raw expr       : array_approx_count_distinct(array(NULL, 'x', 'y', 'z'))
checked expr   : array_approx_count_distinct<Array(String NULL)>(array<T0=String NULL><T0, T0, T0, T0>(CAST(NULL AS String NULL), CAST("x" AS String NULL), CAST("y" AS String NULL), CAST("z" AS String NULL)))
optimized expr : 3_u64
output type    : UInt64
output domain  : {3..=3}
output         : 3


ast            : array_approx_count_distinct([a, b, c, d])
raw expr       : array_approx_count_distinct(array(a::Int16, b::Int16, c::Int16, d::Int16))
checked expr   : array_approx_count_distinct<Array(Int16)>(array<T0=Int16><T0, T0, T0, T0>(a, b, c, d))
evaluation:
+--------+---------+---------+---------+---------+---------+
|        | a       | b       | c       | d       | Output  |
+--------+---------+---------+---------+---------+---------+
| Type   | Int16   | Int16   | Int16   | Int16   | UInt64  |
| Domain | {1..=8} | {1..=6} | {3..=7} | {1..=9} | Unknown |
| Row 0  | 1       | 2       | 3       | 4       | 4       |
| Row 1  | 5       | 6       | 7       | 8       | 4       |
| Row 2  | 8       | 1       | 7       | 1       | 3       |
| Row 3  | 3       | 2       | 6       | 9       | 4       |
+--------+---------+---------+---------+---------+---------+
evaluation (internal):
+--------+----------------------+
| Column | Data                 |
+--------+----------------------+
| a      | Int16([1, 5, 8, 3])  |
| b      | Int16([2, 6, 1, 2])  |
| c      | Int16([3, 7, 7, 6])  |
| d      | Int16([4, 8, 1, 9])  |
| Output | UInt64([4, 4, 3, 4]) |
+--------+----------------------+


ast            : array_approx_count_distinct([a, b, c, d])
raw expr       : array_approx_count_distinct(array(a::UInt64 NULL, b::UInt64 NULL, c::UInt64 NULL, d::UInt64 NULL))
checked expr   : array_approx_count_distinct<Array(UInt64 NULL)>(array<T0=UInt64 NULL><T0, T0, T0, T0>(a, b, c, d))
evaluation:
+--------+------------------+------------------+-------------+------------------+---------+
|        | a                | b                | c           | d                | Output  |
+--------+------------------+------------------+-------------+------------------+---------+
| Type   | UInt64 NULL      | UInt64 NULL      | UInt64 NULL | UInt64 NULL      | UInt64  |
| Domain | {1..=4} ∪ {NULL} | {2..=6} ∪ {NULL} | {3..=9}     | {4..=6} ∪ {NULL} | Unknown |
| Row 0  | 1                | 2                | 3           | 4                | 4       |
| Row 1  | 2                | NULL             | 7           | 6                | 3       |
| Row 2  | NULL             | 5                | 8           | 5                | 2       |
| Row 3  | 4                | 6                | 9           | NULL             | 3       |
+--------+------------------+------------------+-------------+------------------+---------+
evaluation (internal):
+--------+-------------------------------------------------------------------------+
| Column | Data                                                                    |
+--------+-------------------------------------------------------------------------+
| a      | NullableColumn { column: UInt64([1, 2, 0, 4]), validity: [0b____1011] } |
| b      | NullableColumn { column: UInt64([2, 0, 5, 6]), validity: [0b____1101] } |
| c      | NullableColumn { column: UInt64([3, 7, 8, 9]), validity: [0b____1111] } |
| d      | NullableColumn { column: UInt64([4, 6, 5, 0]), validity: [0b____0111] } |
| Output | UInt64([4, 3, 2, 3])                                                    |
+--------+-------------------------------------------------------------------------+


ast            : array_kurtosis([])
raw expr       : array_kurtosis(array())
checked expr   : array_kurtosis<Array(Nothing)>(array<>())
optimized expr : NULL
output type    : NULL
output domain  : {NULL}
output         : NULL


ast            : array_kurtosis([1, 2, 3])
raw expr       : array_kurtosis(array(1, 2, 3))
checked expr   : array_kurtosis<Array(UInt8)>(array<T0=UInt8><T0, T0, T0>(1_u8, 2_u8, 3_u8))
optimized expr : 0_f64
output type    : Float64 NULL
output domain  : {0..=0}
output         : 0


ast            : array_kurtosis([NULL, 3, 2, 1])
raw expr       : array_kurtosis(array(NULL, 3, 2, 1))
checked expr   : array_kurtosis<Array(UInt8 NULL)>(array<T0=UInt8 NULL><T0, T0, T0, T0>(CAST(NULL AS UInt8 NULL), CAST(3_u8 AS UInt8 NULL), CAST(2_u8 AS UInt8 NULL), CAST(1_u8 AS UInt8 NULL)))
optimized expr : 0_f64
output type    : Float64 NULL
output domain  : {0..=0}
output         : 0


ast            : array_kurtosis([a, b, c, d])
raw expr       : array_kurtosis(array(a::Int16, b::Int16, c::Int16, d::Int16))
checked expr   : array_kurtosis<Array(Int16)>(array<T0=Int16><T0, T0, T0, T0>(a, b, c, d))
evaluation:
+--------+---------+---------+---------+---------+---------------+
|        | a       | b       | c       | d       | Output        |
+--------+---------+---------+---------+---------+---------------+
| Type   | Int16   | Int16   | Int16   | Int16   | Float64 NULL  |
| Domain | {1..=8} | {1..=6} | {3..=7} | {1..=9} | Unknown       |
| Row 0  | 1       | 2       | 3       | 4       | -1.2          |
| Row 1  | 5       | 6       | 7       | 8       | -1.2          |
| Row 2  | 8       | 1       | 7       | 1       | -5.6522006771 |
| Row 3  | 3       | 2       | 6       | 9       | -1.7          |
+--------+---------+---------+---------+---------+---------------+
evaluation (internal):
+--------+-----------------------------------------------------------------------------------------------+
| Column | Data                                                                                          |
+--------+-----------------------------------------------------------------------------------------------+
| a      | Int16([1, 5, 8, 3])                                                                           |
| b      | Int16([2, 6, 1, 2])                                                                           |
| c      | Int16([3, 7, 7, 6])                                                                           |
| d      | Int16([4, 8, 1, 9])                                                                           |
| Output | NullableColumn { column: Float64([-1.2, -1.2, -5.6522006771, -1.7]), validity: [0b____1111] } |
+--------+-----------------------------------------------------------------------------------------------+


ast            : array_kurtosis([a, b, c, d])
raw expr       : array_kurtosis(array(a::UInt64 NULL, b::UInt64 NULL, c::UInt64 NULL, d::UInt64 NULL))
checked expr   : array_kurtosis<Array(UInt64 NULL)>(array<T0=UInt64 NULL><T0, T0, T0, T0>(a, b, c, d))
evaluation:
+--------+------------------+------------------+-------------+------------------+--------------+
|        | a                | b                | c           | d                | Output       |
+--------+------------------+------------------+-------------+------------------+--------------+
| Type   | UInt64 NULL      | UInt64 NULL      | UInt64 NULL | UInt64 NULL      | Float64 NULL |
| Domain | {1..=4} ∪ {NULL} | {2..=6} ∪ {NULL} | {3..=9}     | {4..=6} ∪ {NULL} | Unknown      |
| Row 0  | 1                | 2                | 3           | 4                | -1.2         |
| Row 1  | 2                | NULL             | 7           | 6                | 0            |
| Row 2  | NULL             | 5                | 8           | 5                | 0            |
| Row 3  | 4                | 6                | 9           | NULL             | 0            |
+--------+------------------+------------------+-------------+------------------+--------------+
evaluation (internal):
+--------+-----------------------------------------------------------------------------+
| Column | Data                                                                        |
+--------+-----------------------------------------------------------------------------+
| a      | NullableColumn { column: UInt64([1, 2, 0, 4]), validity: [0b____1011] }     |
| b      | NullableColumn { column: UInt64([2, 0, 5, 6]), validity: [0b____1101] }     |
| c      | NullableColumn { column: UInt64([3, 7, 8, 9]), validity: [0b____1111] }     |
| d      | NullableColumn { column: UInt64([4, 6, 5, 0]), validity: [0b____0111] }     |
| Output | NullableColumn { column: Float64([-1.2, 0, 0, 0]), validity: [0b____1111] } |
+--------+-----------------------------------------------------------------------------+


ast            : array_skewness([])
raw expr       : array_skewness(array())
checked expr   : array_skewness<Array(Nothing)>(array<>())
optimized expr : NULL
output type    : NULL
output domain  : {NULL}
output         : NULL


ast            : array_skewness([1, 2, 3])
raw expr       : array_skewness(array(1, 2, 3))
checked expr   : array_skewness<Array(UInt8)>(array<T0=UInt8><T0, T0, T0>(1_u8, 2_u8, 3_u8))
optimized expr : 0_f64
output type    : Float64 NULL
output domain  : {0..=0}
output         : 0


ast            : array_skewness([NULL, 3, 2, 1])
raw expr       : array_skewness(array(NULL, 3, 2, 1))
checked expr   : array_skewness<Array(UInt8 NULL)>(array<T0=UInt8 NULL><T0, T0, T0, T0>(CAST(NULL AS UInt8 NULL), CAST(3_u8 AS UInt8 NULL), CAST(2_u8 AS UInt8 NULL), CAST(1_u8 AS UInt8 NULL)))
optimized expr : 0_f64
output type    : Float64 NULL
output domain  : {0..=0}
output         : 0


ast            : array_skewness([a, b, c, d])
raw expr       : array_skewness(array(a::Int16, b::Int16, c::Int16, d::Int16))
checked expr   : array_skewness<Array(Int16)>(array<T0=Int16><T0, T0, T0, T0>(a, b, c, d))
evaluation:
+--------+---------+---------+---------+---------+--------------+
|        | a       | b       | c       | d       | Output       |
+--------+---------+---------+---------+---------+--------------+
| Type   | Int16   | Int16   | Int16   | Int16   | Float64 NULL |
| Domain | {1..=8} | {1..=6} | {3..=7} | {1..=9} | Unknown      |
| Row 0  | 1       | 2       | 3       | 4       | 0            |
| Row 1  | 5       | 6       | 7       | 8       | 0            |
| Row 2  | 8       | 1       | 7       | 1       | 0.0604172654 |
| Row 3  | 3       | 2       | 6       | 9       | 0.632455532  |
+--------+---------+---------+---------+---------+--------------+
evaluation (internal):
+--------+-----------------------------------------------------------------------------------------------+
| Column | Data                                                                                          |
+--------+-----------------------------------------------------------------------------------------------+
| a      | Int16([1, 5, 8, 3])                                                                           |
| b      | Int16([2, 6, 1, 2])                                                                           |
| c      | Int16([3, 7, 7, 6])                                                                           |
| d      | Int16([4, 8, 1, 9])                                                                           |
| Output | NullableColumn { column: Float64([0, 0, 0.0604172654, 0.632455532]), validity: [0b____1111] } |
+--------+-----------------------------------------------------------------------------------------------+


ast            : array_skewness([a, b, c, d])
raw expr       : array_skewness(array(a::UInt64 NULL, b::UInt64 NULL, c::UInt64 NULL, d::UInt64 NULL))
checked expr   : array_skewness<Array(UInt64 NULL)>(array<T0=UInt64 NULL><T0, T0, T0, T0>(a, b, c, d))
evaluation:
+--------+------------------+------------------+-------------+------------------+---------------+
|        | a                | b                | c           | d                | Output        |
+--------+------------------+------------------+-------------+------------------+---------------+
| Type   | UInt64 NULL      | UInt64 NULL      | UInt64 NULL | UInt64 NULL      | Float64 NULL  |
| Domain | {1..=4} ∪ {NULL} | {2..=6} ∪ {NULL} | {3..=9}     | {4..=6} ∪ {NULL} | Unknown       |
| Row 0  | 1                | 2                | 3           | 4                | 0             |
| Row 1  | 2                | NULL             | 7           | 6                | -1.4578629673 |
| Row 2  | NULL             | 5                | 8           | 5                | 1.7320508075  |
| Row 3  | 4                | 6                | 9           | NULL             | 0.5855827262  |
+--------+------------------+------------------+-------------+------------------+---------------+
evaluation (internal):
+--------+------------------------------------------------------------------------------------------------------------+
| Column | Data                                                                                                       |
+--------+------------------------------------------------------------------------------------------------------------+
| a      | NullableColumn { column: UInt64([1, 2, 0, 4]), validity: [0b____1011] }                                    |
| b      | NullableColumn { column: UInt64([2, 0, 5, 6]), validity: [0b____1101] }                                    |
| c      | NullableColumn { column: UInt64([3, 7, 8, 9]), validity: [0b____1111] }                                    |
| d      | NullableColumn { column: UInt64([4, 6, 5, 0]), validity: [0b____0111] }                                    |
| Output | NullableColumn { column: Float64([0, -1.4578629673, 1.7320508075, 0.5855827262]), validity: [0b____1111] } |
+--------+------------------------------------------------------------------------------------------------------------+


ast            : array_sort_asc_null_first([])
raw expr       : array_sort_asc_null_first(array())
checked expr   : array_sort_asc_null_first<Array(Nothing)>(array<>())
optimized expr : [] :: Array(Nothing)
output type    : Array(Nothing)
output domain  : []
output         : []


ast            : array_sort_desc_null_first([])
raw expr       : array_sort_desc_null_first(array())
checked expr   : array_sort_desc_null_first<Array(Nothing)>(array<>())
optimized expr : [] :: Array(Nothing)
output type    : Array(Nothing)
output domain  : []
output         : []


ast            : array_sort_asc_null_first(NULL)
raw expr       : array_sort_asc_null_first(NULL)
checked expr   : array_sort_asc_null_first<Array(Nothing) NULL>(CAST(NULL AS Array(Nothing) NULL))
optimized expr : NULL
output type    : Array(Nothing) NULL
output domain  : {NULL}
output         : NULL


ast            : array_sort_asc_null_first([NULL, NULL, NULL])
raw expr       : array_sort_asc_null_first(array(NULL, NULL, NULL))
checked expr   : array_sort_asc_null_first<T0=NULL><Array(T0)>(array<T0=NULL><T0, T0, T0>(NULL, NULL, NULL))
optimized expr : [NULL, NULL, NULL]
output type    : Array(NULL)
output domain  : [{NULL}]
output         : [NULL, NULL, NULL]


ast            : array_sort_desc_null_first([[], [], []])
raw expr       : array_sort_desc_null_first(array(array(), array(), array()))
checked expr   : array_sort_desc_null_first<T0=Array(Nothing)><Array(T0)>(array<T0=Array(Nothing)><T0, T0, T0>(array<>(), array<>(), array<>()))
optimized expr : [[], [], []]
output type    : Array(Array(Nothing))
output domain  : [[]]
output         : [[], [], []]


ast            : array_sort_asc_null_first([{}, {}, {}])
raw expr       : array_sort_asc_null_first(array(map(array(), array()), map(array(), array()), map(array(), array())))
checked expr   : array_sort_asc_null_first<T0=Map(Nothing)><Array(T0)>(array<T0=Map(Nothing)><T0, T0, T0>(map<Array(Nothing), Array(Nothing)>(array<>(), array<>()), map<Array(Nothing), Array(Nothing)>(array<>(), array<>()), map<Array(Nothing), Array(Nothing)>(array<>(), array<>())))
optimized expr : [{}, {}, {}]
output type    : Array(Map(Nothing))
output domain  : [{}]
output         : [{}, {}, {}]


ast            : array_sort_asc_null_first([8, 20, 1, 2, 3, 4, 5, 6, 7])
raw expr       : array_sort_asc_null_first(array(8, 20, 1, 2, 3, 4, 5, 6, 7))
checked expr   : array_sort_asc_null_first<T0=UInt8><Array(T0)>(array<T0=UInt8><T0, T0, T0, T0, T0, T0, T0, T0, T0>(8_u8, 20_u8, 1_u8, 2_u8, 3_u8, 4_u8, 5_u8, 6_u8, 7_u8))
optimized expr : [1, 2, 3, 4, 5, 6, 7, 8, 20]
output type    : Array(UInt8)
output domain  : [{1..=20}]
output         : [1, 2, 3, 4, 5, 6, 7, 8, 20]


ast            : array_sort_asc_null_last([8, 20, 1, 2, 3, 4, 5, 6, 7])
raw expr       : array_sort_asc_null_last(array(8, 20, 1, 2, 3, 4, 5, 6, 7))
checked expr   : array_sort_asc_null_last<T0=UInt8><Array(T0)>(array<T0=UInt8><T0, T0, T0, T0, T0, T0, T0, T0, T0>(8_u8, 20_u8, 1_u8, 2_u8, 3_u8, 4_u8, 5_u8, 6_u8, 7_u8))
optimized expr : [1, 2, 3, 4, 5, 6, 7, 8, 20]
output type    : Array(UInt8)
output domain  : [{1..=20}]
output         : [1, 2, 3, 4, 5, 6, 7, 8, 20]


ast            : array_sort_desc_null_first([8, 20, 1, 2, 3, 4, 5, 6, 7])
raw expr       : array_sort_desc_null_first(array(8, 20, 1, 2, 3, 4, 5, 6, 7))
checked expr   : array_sort_desc_null_first<T0=UInt8><Array(T0)>(array<T0=UInt8><T0, T0, T0, T0, T0, T0, T0, T0, T0>(8_u8, 20_u8, 1_u8, 2_u8, 3_u8, 4_u8, 5_u8, 6_u8, 7_u8))
optimized expr : [20, 8, 7, 6, 5, 4, 3, 2, 1]
output type    : Array(UInt8)
output domain  : [{1..=20}]
output         : [20, 8, 7, 6, 5, 4, 3, 2, 1]


ast            : array_sort_desc_null_last([8, 20, 1, 2, 3, 4, 5, 6, 7])
raw expr       : array_sort_desc_null_last(array(8, 20, 1, 2, 3, 4, 5, 6, 7))
checked expr   : array_sort_desc_null_last<T0=UInt8><Array(T0)>(array<T0=UInt8><T0, T0, T0, T0, T0, T0, T0, T0, T0>(8_u8, 20_u8, 1_u8, 2_u8, 3_u8, 4_u8, 5_u8, 6_u8, 7_u8))
optimized expr : [20, 8, 7, 6, 5, 4, 3, 2, 1]
output type    : Array(UInt8)
output domain  : [{1..=20}]
output         : [20, 8, 7, 6, 5, 4, 3, 2, 1]


ast            : array_sort_asc_null_first([1.2, NULL, 3.4, 5.6, '2.2', NULL])
raw expr       : array_sort_asc_null_first(array(1.2, NULL, 3.4, 5.6, '2.2', NULL))
checked expr   : array_sort_asc_null_first<T0=Decimal(2, 1) NULL><Array(T0)>(array<T0=Decimal(2, 1) NULL><T0, T0, T0, T0, T0, T0>(CAST(1.2_d128(2,1) AS Decimal(2, 1) NULL), CAST(NULL AS Decimal(2, 1) NULL), CAST(3.4_d128(2,1) AS Decimal(2, 1) NULL), CAST(5.6_d128(2,1) AS Decimal(2, 1) NULL), CAST("2.2" AS Decimal(2, 1) NULL), CAST(NULL AS Decimal(2, 1) NULL)))
optimized expr : [NULL, NULL, 1.2, 2.2, 3.4, 5.6]
output type    : Array(Decimal(2, 1) NULL)
output domain  : [{1.2..=5.6} ∪ {NULL}]
output         : [NULL, NULL, 1.2, 2.2, 3.4, 5.6]


ast            : array_sort_asc_null_last([1.2, NULL, 3.4, 5.6, '2.2', NULL])
raw expr       : array_sort_asc_null_last(array(1.2, NULL, 3.4, 5.6, '2.2', NULL))
checked expr   : array_sort_asc_null_last<T0=Decimal(2, 1) NULL><Array(T0)>(array<T0=Decimal(2, 1) NULL><T0, T0, T0, T0, T0, T0>(CAST(1.2_d128(2,1) AS Decimal(2, 1) NULL), CAST(NULL AS Decimal(2, 1) NULL), CAST(3.4_d128(2,1) AS Decimal(2, 1) NULL), CAST(5.6_d128(2,1) AS Decimal(2, 1) NULL), CAST("2.2" AS Decimal(2, 1) NULL), CAST(NULL AS Decimal(2, 1) NULL)))
optimized expr : [1.2, 2.2, 3.4, 5.6, NULL, NULL]
output type    : Array(Decimal(2, 1) NULL)
output domain  : [{1.2..=5.6} ∪ {NULL}]
output         : [1.2, 2.2, 3.4, 5.6, NULL, NULL]


ast            : array_sort_desc_null_first([1.2, NULL, 3.4, 5.6, '2.2', NULL])
raw expr       : array_sort_desc_null_first(array(1.2, NULL, 3.4, 5.6, '2.2', NULL))
checked expr   : array_sort_desc_null_first<T0=Decimal(2, 1) NULL><Array(T0)>(array<T0=Decimal(2, 1) NULL><T0, T0, T0, T0, T0, T0>(CAST(1.2_d128(2,1) AS Decimal(2, 1) NULL), CAST(NULL AS Decimal(2, 1) NULL), CAST(3.4_d128(2,1) AS Decimal(2, 1) NULL), CAST(5.6_d128(2,1) AS Decimal(2, 1) NULL), CAST("2.2" AS Decimal(2, 1) NULL), CAST(NULL AS Decimal(2, 1) NULL)))
optimized expr : [NULL, NULL, 5.6, 3.4, 2.2, 1.2]
output type    : Array(Decimal(2, 1) NULL)
output domain  : [{1.2..=5.6} ∪ {NULL}]
output         : [NULL, NULL, 5.6, 3.4, 2.2, 1.2]


ast            : array_sort_desc_null_last([1.2, NULL, 3.4, 5.6, '2.2', NULL])
raw expr       : array_sort_desc_null_last(array(1.2, NULL, 3.4, 5.6, '2.2', NULL))
checked expr   : array_sort_desc_null_last<T0=Decimal(2, 1) NULL><Array(T0)>(array<T0=Decimal(2, 1) NULL><T0, T0, T0, T0, T0, T0>(CAST(1.2_d128(2,1) AS Decimal(2, 1) NULL), CAST(NULL AS Decimal(2, 1) NULL), CAST(3.4_d128(2,1) AS Decimal(2, 1) NULL), CAST(5.6_d128(2,1) AS Decimal(2, 1) NULL), CAST("2.2" AS Decimal(2, 1) NULL), CAST(NULL AS Decimal(2, 1) NULL)))
optimized expr : [5.6, 3.4, 2.2, 1.2, NULL, NULL]
output type    : Array(Decimal(2, 1) NULL)
output domain  : [{1.2..=5.6} ∪ {NULL}]
output         : [5.6, 3.4, 2.2, 1.2, NULL, NULL]


ast            : arrays_zip(NULL, NULL)
raw expr       : arrays_zip(NULL, NULL)
checked expr   : arrays_zip<NULL, NULL>(NULL, NULL)
optimized expr : [(NULL, NULL)]
output type    : Array(Tuple(NULL, NULL))
output domain  : [({NULL}, {NULL})]
output         : [(NULL, NULL)]


ast            : arrays_zip(1, 2, 'a')
raw expr       : arrays_zip(1, 2, 'a')
checked expr   : arrays_zip<UInt8, UInt8, String>(1_u8, 2_u8, "a")
optimized expr : [(1, 2, 'a')]
output type    : Array(Tuple(UInt8, UInt8, String))
output domain  : [({1..=1}, {2..=2}, {"a"..="a"})]
output         : [(1, 2, 'a')]


ast            : arrays_zip([1,2,3], ['a','b','c'], 10)
raw expr       : arrays_zip(array(1, 2, 3), array('a', 'b', 'c'), 10)
checked expr   : arrays_zip<Array(UInt8), Array(String), UInt8>(array<T0=UInt8><T0, T0, T0>(1_u8, 2_u8, 3_u8), array<T0=String><T0, T0, T0>("a", "b", "c"), 10_u8)
optimized expr : [(1, 'a', 10), (2, 'b', 10), (3, 'c', 10)]
output type    : Array(Tuple(UInt8, String, UInt8))
output domain  : [({1..=3}, {"a"..="c"}, {10..=10})]
output         : [(1, 'a', 10), (2, 'b', 10), (3, 'c', 10)]


error: 
  --> SQL:1:1
  |
1 | arrays_zip([1,2,3], ['a','b'], 10)
  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ array length must be equal, but got 3 and 2 while evaluating function `arrays_zip([1, 2, 3], ['a', 'b'], 10)` in expr `arrays_zip(array(1, 2, 3), array('a', 'b'), 10)`



