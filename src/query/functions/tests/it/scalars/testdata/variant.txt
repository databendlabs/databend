ast            : parse_json(NULL)
raw expr       : parse_json(NULL)
checked expr   : CAST<Variant NULL>(CAST<NULL>(NULL AS Variant NULL) AS Variant NULL)
optimized expr : NULL
output type    : Variant NULL
output domain  : {NULL}
output         : NULL


error: 
  --> SQL:1:1
  |
1 | parse_json('nuLL')
  | ^^^^^^^^^^^^^^^^^^ expected ident, pos 3 while evaluating function `parse_json('nuLL')` in expr `CAST('nuLL' AS Variant)`



ast            : parse_json('null')
raw expr       : parse_json('null')
checked expr   : CAST<String>("null" AS Variant)
optimized expr : 0x2000000000000000
output type    : Variant
output domain  : Undefined
output         : 'null'


error: 
  --> SQL:1:1
  |
1 | parse_json('  ')
  | ^^^^^^^^^^^^^^^^ EOF while parsing a value, pos 2 while evaluating function `parse_json('  ')` in expr `CAST('  ' AS Variant)`



ast            : parse_json('true')
raw expr       : parse_json('true')
checked expr   : CAST<String>("true" AS Variant)
optimized expr : 0x2000000040000000
output type    : Variant
output domain  : Undefined
output         : 'true'


ast            : parse_json('false')
raw expr       : parse_json('false')
checked expr   : CAST<String>("false" AS Variant)
optimized expr : 0x2000000030000000
output type    : Variant
output domain  : Undefined
output         : 'false'


ast            : parse_json('"测试"')
raw expr       : parse_json('"测试"')
checked expr   : CAST<String>("\"测试\"" AS Variant)
optimized expr : 0x2000000010000006e6b58be8af95
output type    : Variant
output domain  : Undefined
output         : '"测试"'


ast            : parse_json('1234')
raw expr       : parse_json('1234')
checked expr   : CAST<String>("1234" AS Variant)
optimized expr : 0x20000000200000035004d2
output type    : Variant
output domain  : Undefined
output         : '1234'


ast            : parse_json('[1,2,3,4]')
raw expr       : parse_json('[1,2,3,4]')
checked expr   : CAST<String>("[1,2,3,4]" AS Variant)
optimized expr : 0x80000004200000022000000220000002200000025001500250035004
output type    : Variant
output domain  : Undefined
output         : '[1,2,3,4]'


ast            : parse_json('{"a":"b","c":"d"}')
raw expr       : parse_json('{"a":"b","c":"d"}')
checked expr   : CAST<String>("{\"a\":\"b\",\"c\":\"d\"}" AS Variant)
optimized expr : 0x400000021000000110000001100000011000000161636264
output type    : Variant
output domain  : Undefined
output         : '{"a":"b","c":"d"}'


ast            : parse_json(s)
raw expr       : parse_json(s::String)
checked expr   : CAST<String>(s AS Variant)
evaluation:
+--------+-----------------------------------------------------------+-------------------------+
|        | s                                                         | Output                  |
+--------+-----------------------------------------------------------+-------------------------+
| Type   | String                                                    | Variant                 |
| Domain | {"\"\\\\\\\"abc\\\\\\\"\""..="{\"k\":\"v\",\"a\":\"b\"}"} | Unknown                 |
| Row 0  | 'null'                                                    | 'null'                  |
| Row 1  | 'true'                                                    | 'true'                  |
| Row 2  | '9223372036854775807'                                     | '9223372036854775807'   |
| Row 3  | '-32768'                                                  | '-32768'                |
| Row 4  | '1234.5678'                                               | '1234.5678'             |
| Row 5  | '1.912e2'                                                 | '191.2'                 |
| Row 6  | '"\\\\\\"abc\\\\\\""'                                     | '"\\\\\\"abc\\\\\\""'   |
| Row 7  | '"databend"'                                              | '"databend"'            |
| Row 8  | '{"k":"v","a":"b"}'                                       | '{"a":"b","k":"v"}'     |
| Row 9  | '[1,2,3,["a","b","c"]]'                                   | '[1,2,3,["a","b","c"]]' |
+--------+-----------------------------------------------------------+-------------------------+
evaluation (internal):
+--------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| Column | Data                                                                                                                                                                                                                                                                                                                                                                                                                    |
+--------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| s      | StringColumn[null, true, 9223372036854775807, -32768, 1234.5678, 1.912e2, "\\\"abc\\\"", "databend", {"k":"v","a":"b"}, [1,2,3,["a","b","c"]]]                                                                                                                                                                                                                                                                          |
| Output | Variant([0x2000000000000000, 0x2000000040000000, 0x2000000020000009507fffffffffffffff, 0x2000000020000003408000, 0x200000002000000a700000000000bc614e04, 0x2000000020000009604067e66666666666, 0x20000000100000075c226162635c22, 0x20000000100000086461746162656e64, 0x4000000210000001100000011000000110000001616b6276, 0x800000042000000220000002200000025000001350015002500380000003100000011000000110000001616263]) |
+--------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+


ast            : parse_json(s)
raw expr       : parse_json(s::String NULL)
checked expr   : CAST<String NULL>(s AS Variant NULL)
evaluation:
+--------+----------------------------+--------------+
|        | s                          | Output       |
+--------+----------------------------+--------------+
| Type   | String NULL                | Variant NULL |
| Domain | {"1234"..="true"} ∪ {NULL} | Unknown      |
| Row 0  | 'true'                     | 'true'       |
| Row 1  | 'false'                    | 'false'      |
| Row 2  | NULL                       | NULL         |
| Row 3  | '1234'                     | '1234'       |
+--------+----------------------------+--------------+
evaluation (internal):
+--------+------------------------------------------------------------------------------------------------------------------------------------+
| Column | Data                                                                                                                               |
+--------+------------------------------------------------------------------------------------------------------------------------------------+
| s      | NullableColumn { column: StringColumn[true, false, , 1234], validity: [0b____1011] }                                               |
| Output | NullableColumn { column: Variant([0x2000000040000000, 0x2000000030000000, 0x, 0x20000000200000035004d2]), validity: [0b____1011] } |
+--------+------------------------------------------------------------------------------------------------------------------------------------+


ast            : parse_json('+10')
raw expr       : parse_json('+10')
checked expr   : CAST<String>("+10" AS Variant)
optimized expr : 0x2000000020000002500a
output type    : Variant
output domain  : Undefined
output         : '10'


ast            : parse_json('001')
raw expr       : parse_json('001')
checked expr   : CAST<String>("001" AS Variant)
optimized expr : 0x20000000200000025001
output type    : Variant
output domain  : Undefined
output         : '1'


ast            : parse_json('.12')
raw expr       : parse_json('.12')
checked expr   : CAST<String>(".12" AS Variant)
optimized expr : 0x200000002000000a70000000000000000c02
output type    : Variant
output domain  : Undefined
output         : '0.12'


ast            : parse_json('12.')
raw expr       : parse_json('12.')
checked expr   : CAST<String>("12." AS Variant)
optimized expr : 0x2000000020000002500c
output type    : Variant
output domain  : Undefined
output         : '12'


ast            : parse_json('99999999999999999999999999999999999999')
raw expr       : parse_json('99999999999999999999999999999999999999')
checked expr   : CAST<String>("99999999999999999999999999999999999999" AS Variant)
optimized expr : 0x2000000020000012704b3b4ca85a86c47a098a223fffffffff00
output type    : Variant
output domain  : Undefined
output         : '99999999999999999999999999999999999999'


ast            : parse_json('[1,2,,4]')
raw expr       : parse_json('[1,2,,4]')
checked expr   : CAST<String>("[1,2,,4]" AS Variant)
optimized expr : 0x8000000420000002200000020000000020000002500150025004
output type    : Variant
output domain  : Undefined
output         : '[1,2,null,4]'


ast            : try_parse_json(NULL)
raw expr       : try_parse_json(NULL)
checked expr   : try_parse_json<Variant NULL>(CAST<NULL>(NULL AS Variant NULL))
optimized expr : NULL
output type    : Variant NULL
output domain  : {NULL}
output         : NULL


ast            : try_parse_json('nuLL')
raw expr       : try_parse_json('nuLL')
checked expr   : try_parse_json<String>("nuLL")
optimized expr : NULL
output type    : Variant NULL
output domain  : {NULL}
output         : NULL


ast            : try_parse_json('null')
raw expr       : try_parse_json('null')
checked expr   : try_parse_json<String>("null")
optimized expr : 0x2000000000000000
output type    : Variant NULL
output domain  : Undefined
output         : 'null'


ast            : try_parse_json('true')
raw expr       : try_parse_json('true')
checked expr   : try_parse_json<String>("true")
optimized expr : 0x2000000040000000
output type    : Variant NULL
output domain  : Undefined
output         : 'true'


ast            : try_parse_json('false')
raw expr       : try_parse_json('false')
checked expr   : try_parse_json<String>("false")
optimized expr : 0x2000000030000000
output type    : Variant NULL
output domain  : Undefined
output         : 'false'


ast            : try_parse_json('"测试"')
raw expr       : try_parse_json('"测试"')
checked expr   : try_parse_json<String>("\"测试\"")
optimized expr : 0x2000000010000006e6b58be8af95
output type    : Variant NULL
output domain  : Undefined
output         : '"测试"'


ast            : try_parse_json('1234')
raw expr       : try_parse_json('1234')
checked expr   : try_parse_json<String>("1234")
optimized expr : 0x20000000200000035004d2
output type    : Variant NULL
output domain  : Undefined
output         : '1234'


ast            : try_parse_json('[1,2,3,4]')
raw expr       : try_parse_json('[1,2,3,4]')
checked expr   : try_parse_json<String>("[1,2,3,4]")
optimized expr : 0x80000004200000022000000220000002200000025001500250035004
output type    : Variant NULL
output domain  : Undefined
output         : '[1,2,3,4]'


ast            : try_parse_json('{"a":"b","c":"d"}')
raw expr       : try_parse_json('{"a":"b","c":"d"}')
checked expr   : try_parse_json<String>("{\"a\":\"b\",\"c\":\"d\"}")
optimized expr : 0x400000021000000110000001100000011000000161636264
output type    : Variant NULL
output domain  : Undefined
output         : '{"a":"b","c":"d"}'


ast            : try_parse_json(s)
raw expr       : try_parse_json(s::String)
checked expr   : try_parse_json<String>(s)
evaluation:
+--------+-----------------------------------------------------------+-------------------------+
|        | s                                                         | Output                  |
+--------+-----------------------------------------------------------+-------------------------+
| Type   | String                                                    | Variant NULL            |
| Domain | {"\"\\\\\\\"abc\\\\\\\"\""..="{\"k\":\"v\",\"a\":\"b\"}"} | Undefined ∪ {NULL}      |
| Row 0  | 'null'                                                    | 'null'                  |
| Row 1  | 'true'                                                    | 'true'                  |
| Row 2  | '9223372036854775807'                                     | '9223372036854775807'   |
| Row 3  | '-32768'                                                  | '-32768'                |
| Row 4  | '1234.5678'                                               | '1234.5678'             |
| Row 5  | '1.912e2'                                                 | '191.2'                 |
| Row 6  | '"\\\\\\"abc\\\\\\""'                                     | '"\\\\\\"abc\\\\\\""'   |
| Row 7  | '"databend"'                                              | '"databend"'            |
| Row 8  | '{"k":"v","a":"b"}'                                       | '{"a":"b","k":"v"}'     |
| Row 9  | '[1,2,3,["a","b","c"]]'                                   | '[1,2,3,["a","b","c"]]' |
+--------+-----------------------------------------------------------+-------------------------+
evaluation (internal):
+--------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| Column | Data                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   |
+--------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| s      | StringColumn[null, true, 9223372036854775807, -32768, 1234.5678, 1.912e2, "\\\"abc\\\"", "databend", {"k":"v","a":"b"}, [1,2,3,["a","b","c"]]]                                                                                                                                                                                                                                                                                                                                         |
| Output | NullableColumn { column: Variant([0x2000000000000000, 0x2000000040000000, 0x2000000020000009507fffffffffffffff, 0x2000000020000003408000, 0x200000002000000a700000000000bc614e04, 0x2000000020000009604067e66666666666, 0x20000000100000075c226162635c22, 0x20000000100000086461746162656e64, 0x4000000210000001100000011000000110000001616b6276, 0x800000042000000220000002200000025000001350015002500380000003100000011000000110000001616263]), validity: [0b11111111, 0b______11] } |
+--------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+


ast            : try_parse_json(s)
raw expr       : try_parse_json(s::String NULL)
checked expr   : try_parse_json<String NULL>(s)
evaluation:
+--------+---------------------------+--------------------+
|        | s                         | Output             |
+--------+---------------------------+--------------------+
| Type   | String NULL               | Variant NULL       |
| Domain | {"1234"..="ttt"} ∪ {NULL} | Undefined ∪ {NULL} |
| Row 0  | 'true'                    | 'true'             |
| Row 1  | 'ttt'                     | NULL               |
| Row 2  | NULL                      | NULL               |
| Row 3  | '1234'                    | '1234'             |
+--------+---------------------------+--------------------+
evaluation (internal):
+--------+--------------------------------------------------------------------------------------------------------------------+
| Column | Data                                                                                                               |
+--------+--------------------------------------------------------------------------------------------------------------------+
| s      | NullableColumn { column: StringColumn[true, ttt, , 1234], validity: [0b____1011] }                                 |
| Output | NullableColumn { column: Variant([0x2000000040000000, 0x, 0x, 0x20000000200000035004d2]), validity: [0b____1001] } |
+--------+--------------------------------------------------------------------------------------------------------------------+


ast            : check_json(NULL)
raw expr       : check_json(NULL)
checked expr   : check_json<Variant NULL>(CAST<NULL>(NULL AS Variant NULL))
optimized expr : NULL
output type    : String NULL
output domain  : {NULL}
output         : NULL


ast            : check_json('true')
raw expr       : check_json('true')
checked expr   : check_json<String>("true")
optimized expr : NULL
output type    : String NULL
output domain  : {NULL}
output         : NULL


ast            : check_json('nuLL')
raw expr       : check_json('nuLL')
checked expr   : check_json<String>("nuLL")
optimized expr : "expected ident, pos 3"
output type    : String NULL
output domain  : {"expected ident, pos 3"..="expected ident, pos 3"}
output         : 'expected ident, pos 3'


ast            : check_json(s)
raw expr       : check_json(s::String)
checked expr   : check_json<String>(s)
evaluation:
+--------+------------------+-------------------------+
|        | s                | Output                  |
+--------+------------------+-------------------------+
| Type   | String           | String NULL             |
| Domain | {"abc"..="true"} | {""..} ∪ {NULL}         |
| Row 0  | 'null'           | NULL                    |
| Row 1  | 'abc'            | 'expected value, pos 1' |
| Row 2  | 'true'           | NULL                    |
+--------+------------------+-------------------------+
evaluation (internal):
+--------+--------------------------------------------------------------------------------------------+
| Column | Data                                                                                       |
+--------+--------------------------------------------------------------------------------------------+
| s      | StringColumn[null, abc, true]                                                              |
| Output | NullableColumn { column: StringColumn[, expected value, pos 1, ], validity: [0b_____010] } |
+--------+--------------------------------------------------------------------------------------------+


ast            : check_json(s)
raw expr       : check_json(s::String NULL)
checked expr   : check_json<String NULL>(s)
evaluation:
+--------+---------------------------+-------------------------+
|        | s                         | Output                  |
+--------+---------------------------+-------------------------+
| Type   | String NULL               | String NULL             |
| Domain | {"1234"..="ttt"} ∪ {NULL} | {""..} ∪ {NULL}         |
| Row 0  | 'true'                    | NULL                    |
| Row 1  | 'ttt'                     | 'expected ident, pos 2' |
| Row 2  | NULL                      | NULL                    |
| Row 3  | '1234'                    | NULL                    |
+--------+---------------------------+-------------------------+
evaluation (internal):
+--------+----------------------------------------------------------------------------------------------+
| Column | Data                                                                                         |
+--------+----------------------------------------------------------------------------------------------+
| s      | NullableColumn { column: StringColumn[true, ttt, , 1234], validity: [0b____1011] }           |
| Output | NullableColumn { column: StringColumn[, expected ident, pos 2, , ], validity: [0b____0010] } |
+--------+----------------------------------------------------------------------------------------------+


ast            : length(parse_json('1234'))
raw expr       : length(parse_json('1234'))
checked expr   : length<Variant NULL>(CAST<Variant>(CAST<String>("1234" AS Variant) AS Variant NULL))
optimized expr : NULL
output type    : UInt32 NULL
output domain  : {NULL}
output         : NULL


ast            : length(parse_json('[1,2,3,4]'))
raw expr       : length(parse_json('[1,2,3,4]'))
checked expr   : length<Variant NULL>(CAST<Variant>(CAST<String>("[1,2,3,4]" AS Variant) AS Variant NULL))
optimized expr : 4_u32
output type    : UInt32 NULL
output domain  : {4..=4}
output         : 4


ast            : length(parse_json('{"k":"v"}'))
raw expr       : length(parse_json('{"k":"v"}'))
checked expr   : length<Variant NULL>(CAST<Variant>(CAST<String>("{\"k\":\"v\"}" AS Variant) AS Variant NULL))
optimized expr : NULL
output type    : UInt32 NULL
output domain  : {NULL}
output         : NULL


ast            : length(parse_json(s))
raw expr       : length(parse_json(s::String))
checked expr   : length<Variant NULL>(CAST<Variant>(CAST<String>(s AS Variant) AS Variant NULL))
evaluation:
+--------+----------------------------------+-------------+
|        | s                                | Output      |
+--------+----------------------------------+-------------+
| Type   | String                           | UInt32 NULL |
| Domain | {"[\"a\",\"b\",\"c\"]"..="true"} | Unknown     |
| Row 0  | 'true'                           | NULL        |
| Row 1  | '[1,2,3,4]'                      | 4           |
| Row 2  | '["a","b","c"]'                  | 3           |
+--------+----------------------------------+-------------+
evaluation (internal):
+--------+----------------------------------------------------------------------+
| Column | Data                                                                 |
+--------+----------------------------------------------------------------------+
| s      | StringColumn[true, [1,2,3,4], ["a","b","c"]]                         |
| Output | NullableColumn { column: UInt32([0, 4, 3]), validity: [0b_____110] } |
+--------+----------------------------------------------------------------------+


ast            : length(parse_json(s))
raw expr       : length(parse_json(s::String NULL))
checked expr   : length<Variant NULL>(CAST<String NULL>(s AS Variant NULL))
evaluation:
+--------+-------------------------------------------+-------------+
|        | s                                         | Output      |
+--------+-------------------------------------------+-------------+
| Type   | String NULL                               | UInt32 NULL |
| Domain | {"[\"a\",\"b\",\"c\"]"..="true"} ∪ {NULL} | Unknown     |
| Row 0  | 'true'                                    | NULL        |
| Row 1  | '[1,2,3,4]'                               | 4           |
| Row 2  | NULL                                      | NULL        |
| Row 3  | '["a","b","c"]'                           | 3           |
+--------+-------------------------------------------+-------------+
evaluation (internal):
+--------+---------------------------------------------------------------------------------------------------+
| Column | Data                                                                                              |
+--------+---------------------------------------------------------------------------------------------------+
| s      | NullableColumn { column: StringColumn[true, [1,2,3,4], , ["a","b","c"]], validity: [0b____1011] } |
| Output | NullableColumn { column: UInt32([0, 4, 0, 3]), validity: [0b____1010] }                           |
+--------+---------------------------------------------------------------------------------------------------+


ast            : object_keys(parse_json('[1,2,3,4]'))
raw expr       : object_keys(parse_json('[1,2,3,4]'))
checked expr   : object_keys<Variant NULL>(CAST<Variant>(CAST<String>("[1,2,3,4]" AS Variant) AS Variant NULL))
optimized expr : NULL
output type    : Variant NULL
output domain  : {NULL}
output         : NULL


ast            : object_keys(parse_json('{"k1":"v1","k2":"v2"}'))
raw expr       : object_keys(parse_json('{"k1":"v1","k2":"v2"}'))
checked expr   : object_keys<Variant NULL>(CAST<Variant>(CAST<String>("{\"k1\":\"v1\",\"k2\":\"v2\"}" AS Variant) AS Variant NULL))
optimized expr : 0x8000000210000002100000026b316b32
output type    : Variant NULL
output domain  : Undefined
output         : '["k1","k2"]'


ast            : object_keys(parse_json(s))
raw expr       : object_keys(parse_json(s::String))
checked expr   : object_keys<Variant NULL>(CAST<Variant>(CAST<String>(s AS Variant) AS Variant NULL))
evaluation:
+--------+-------------------------------------------------+---------------+
|        | s                                               | Output        |
+--------+-------------------------------------------------+---------------+
| Type   | String                                          | Variant NULL  |
| Domain | {"[1,2,3,4]"..="{\"k1\":\"v1\",\"k2\":\"v2\"}"} | Unknown       |
| Row 0  | '[1,2,3,4]'                                     | NULL          |
| Row 1  | '{"a":"b","c":"d"}'                             | '["a","c"]'   |
| Row 2  | '{"k1":"v1","k2":"v2"}'                         | '["k1","k2"]' |
+--------+-------------------------------------------------+---------------+
evaluation (internal):
+--------+--------------------------------------------------------------------------------------------------------------------------------------+
| Column | Data                                                                                                                                 |
+--------+--------------------------------------------------------------------------------------------------------------------------------------+
| s      | StringColumn[[1,2,3,4], {"a":"b","c":"d"}, {"k1":"v1","k2":"v2"}]                                                                    |
| Output | NullableColumn { column: Variant([0x, 0x8000000210000001100000016163, 0x8000000210000002100000026b316b32]), validity: [0b_____110] } |
+--------+--------------------------------------------------------------------------------------------------------------------------------------+


ast            : object_keys(parse_json(s))
raw expr       : object_keys(parse_json(s::String NULL))
checked expr   : object_keys<Variant NULL>(CAST<String NULL>(s AS Variant NULL))
evaluation:
+--------+----------------------------------------------------------+---------------+
|        | s                                                        | Output        |
+--------+----------------------------------------------------------+---------------+
| Type   | String NULL                                              | Variant NULL  |
| Domain | {"[1,2,3,4]"..="{\"k1\":\"v1\",\"k2\":\"v2\"}"} ∪ {NULL} | Unknown       |
| Row 0  | '[1,2,3,4]'                                              | NULL          |
| Row 1  | '{"a":"b","c":"d"}'                                      | '["a","c"]'   |
| Row 2  | NULL                                                     | NULL          |
| Row 3  | '{"k1":"v1","k2":"v2"}'                                  | '["k1","k2"]' |
+--------+----------------------------------------------------------+---------------+
evaluation (internal):
+--------+------------------------------------------------------------------------------------------------------------------------------------------+
| Column | Data                                                                                                                                     |
+--------+------------------------------------------------------------------------------------------------------------------------------------------+
| s      | NullableColumn { column: StringColumn[[1,2,3,4], {"a":"b","c":"d"}, , {"k1":"v1","k2":"v2"}], validity: [0b____1011] }                   |
| Output | NullableColumn { column: Variant([0x, 0x8000000210000001100000016163, 0x, 0x8000000210000002100000026b316b32]), validity: [0b____1010] } |
+--------+------------------------------------------------------------------------------------------------------------------------------------------+


ast            : parse_json('null')[1]
raw expr       : get(parse_json('null'), 1)
checked expr   : get<Variant, Int64>(CAST<String>("null" AS Variant), CAST<UInt8>(1_u8 AS Int64))
optimized expr : NULL
output type    : Variant NULL
output domain  : {NULL}
output         : NULL


ast            : parse_json('null')['k']
raw expr       : get(parse_json('null'), 'k')
checked expr   : get<Variant, String>(CAST<String>("null" AS Variant), "k")
optimized expr : NULL
output type    : Variant NULL
output domain  : {NULL}
output         : NULL


ast            : parse_json('[1,2,3,4]')[1]
raw expr       : get(parse_json('[1,2,3,4]'), 1)
checked expr   : get<Variant, Int64>(CAST<String>("[1,2,3,4]" AS Variant), CAST<UInt8>(1_u8 AS Int64))
optimized expr : 0x20000000200000025002
output type    : Variant NULL
output domain  : Undefined
output         : '2'


ast            : parse_json('[1,2,3,4]')[2+3]
raw expr       : get(parse_json('[1,2,3,4]'), plus(2, 3))
checked expr   : get<Variant, Int64>(CAST<String>("[1,2,3,4]" AS Variant), CAST<UInt16>(plus<UInt8, UInt8>(2_u8, 3_u8) AS Int64))
optimized expr : NULL
output type    : Variant NULL
output domain  : {NULL}
output         : NULL


ast            : parse_json('{"k":"v"}')['k']
raw expr       : get(parse_json('{"k":"v"}'), 'k')
checked expr   : get<Variant, String>(CAST<String>("{\"k\":\"v\"}" AS Variant), "k")
optimized expr : 0x200000001000000176
output type    : Variant NULL
output domain  : Undefined
output         : '"v"'


ast            : parse_json('{"k":"v"}')['x']
raw expr       : get(parse_json('{"k":"v"}'), 'x')
checked expr   : get<Variant, String>(CAST<String>("{\"k\":\"v\"}" AS Variant), "x")
optimized expr : NULL
output type    : Variant NULL
output domain  : {NULL}
output         : NULL


ast            : CAST(('a', 'b') AS VARIANT)['2']
raw expr       : get(CAST(tuple('a', 'b') AS Variant), '2')
checked expr   : get<Variant, String>(CAST<Tuple(String, String)>(tuple<String, String>("a", "b") AS Variant), "2")
optimized expr : 0x200000001000000162
output type    : Variant NULL
output domain  : Undefined
output         : '"b"'


ast            : parse_json(s)[i]
raw expr       : get(parse_json(s::String), i::UInt64)
checked expr   : get<Variant, Int64>(CAST<String>(s AS Variant), CAST<UInt64>(i AS Int64))
evaluation:
+--------+----------------------------------+---------+--------------+
|        | s                                | i       | Output       |
+--------+----------------------------------+---------+--------------+
| Type   | String                           | UInt64  | Variant NULL |
| Domain | {"[\"a\",\"b\",\"c\"]"..="true"} | {0..=1} | Unknown      |
| Row 0  | 'true'                           | 0       | NULL         |
| Row 1  | '[1,2,3,4]'                      | 0       | '1'          |
| Row 2  | '["a","b","c"]'                  | 1       | '"b"'        |
+--------+----------------------------------+---------+--------------+
evaluation (internal):
+--------+----------------------------------------------------------------------------------------------------------------+
| Column | Data                                                                                                           |
+--------+----------------------------------------------------------------------------------------------------------------+
| s      | StringColumn[true, [1,2,3,4], ["a","b","c"]]                                                                   |
| i      | UInt64([0, 0, 1])                                                                                              |
| Output | NullableColumn { column: Variant([0x, 0x20000000200000025001, 0x200000001000000162]), validity: [0b_____110] } |
+--------+----------------------------------------------------------------------------------------------------------------+


ast            : parse_json(s)[i]
raw expr       : get(parse_json(s::String NULL), i::UInt64 NULL)
checked expr   : get<Variant NULL, Int64 NULL>(CAST<String NULL>(s AS Variant NULL), CAST<UInt64 NULL>(i AS Int64 NULL))
evaluation:
+--------+-------------------------------------------+------------------+--------------+
|        | s                                         | i                | Output       |
+--------+-------------------------------------------+------------------+--------------+
| Type   | String NULL                               | UInt64 NULL      | Variant NULL |
| Domain | {"[\"a\",\"b\",\"c\"]"..="true"} ∪ {NULL} | {1..=2} ∪ {NULL} | Unknown      |
| Row 0  | 'true'                                    | NULL             | NULL         |
| Row 1  | '[1,2,3,4]'                               | 2                | '3'          |
| Row 2  | NULL                                      | NULL             | NULL         |
| Row 3  | '["a","b","c"]'                           | 1                | '"b"'        |
+--------+-------------------------------------------+------------------+--------------+
evaluation (internal):
+--------+--------------------------------------------------------------------------------------------------------------------+
| Column | Data                                                                                                               |
+--------+--------------------------------------------------------------------------------------------------------------------+
| s      | NullableColumn { column: StringColumn[true, [1,2,3,4], , ["a","b","c"]], validity: [0b____1011] }                  |
| i      | NullableColumn { column: UInt64([0, 2, 0, 1]), validity: [0b____1010] }                                            |
| Output | NullableColumn { column: Variant([0x, 0x20000000200000025003, 0x, 0x200000001000000162]), validity: [0b____1010] } |
+--------+--------------------------------------------------------------------------------------------------------------------+


ast            : parse_json(s)[k]
raw expr       : get(parse_json(s::String), k::String)
checked expr   : get<Variant, String>(CAST<String>(s AS Variant), k)
evaluation:
+--------+------------------------+-------------+--------------+
|        | s                      | k           | Output       |
+--------+------------------------+-------------+--------------+
| Type   | String                 | String      | Variant NULL |
| Domain | {"true"..="{\"k\":1}"} | {"k"..="x"} | Unknown      |
| Row 0  | 'true'                 | 'k'         | NULL         |
| Row 1  | '{"k":1}'              | 'k'         | '1'          |
| Row 2  | '{"a":"b"}'            | 'x'         | NULL         |
+--------+------------------------+-------------+--------------+
evaluation (internal):
+--------+----------------------------------------------------------------------------------------------+
| Column | Data                                                                                         |
+--------+----------------------------------------------------------------------------------------------+
| s      | StringColumn[true, {"k":1}, {"a":"b"}]                                                       |
| k      | StringColumn[k, k, x]                                                                        |
| Output | NullableColumn { column: Variant([0x, 0x20000000200000025001, 0x]), validity: [0b_____010] } |
+--------+----------------------------------------------------------------------------------------------+


ast            : parse_json(s)[k]
raw expr       : get(parse_json(s::String NULL), k::String)
checked expr   : get<Variant NULL, String NULL>(CAST<String NULL>(s AS Variant NULL), CAST<String>(k AS String NULL))
evaluation:
+--------+---------------------------------+------------+--------------+
|        | s                               | k          | Output       |
+--------+---------------------------------+------------+--------------+
| Type   | String NULL                     | String     | Variant NULL |
| Domain | {"true"..="{\"k\":1}"} ∪ {NULL} | {""..="k"} | Unknown      |
| Row 0  | 'true'                          | ''         | NULL         |
| Row 1  | '{"k":1}'                       | 'k'        | '1'          |
| Row 2  | NULL                            | ''         | NULL         |
| Row 3  | '{"a":"b"}'                     | 'a'        | '"b"'        |
+--------+---------------------------------+------------+--------------+
evaluation (internal):
+--------+--------------------------------------------------------------------------------------------------------------------+
| Column | Data                                                                                                               |
+--------+--------------------------------------------------------------------------------------------------------------------+
| s      | NullableColumn { column: StringColumn[true, {"k":1}, , {"a":"b"}], validity: [0b____1011] }                        |
| k      | StringColumn[, k, , a]                                                                                             |
| Output | NullableColumn { column: Variant([0x, 0x20000000200000025001, 0x, 0x200000001000000162]), validity: [0b____1010] } |
+--------+--------------------------------------------------------------------------------------------------------------------+


ast            : get_ignore_case(parse_json('{"Aa":1, "aA":2, "aa":3}'), 'AA')
raw expr       : get_ignore_case(parse_json('{"Aa":1, "aA":2, "aa":3}'), 'AA')
checked expr   : get_ignore_case<Variant, String>(CAST<String>("{\"Aa\":1, \"aA\":2, \"aa\":3}" AS Variant), "AA")
optimized expr : 0x20000000200000025001
output type    : Variant NULL
output domain  : Undefined
output         : '1'


ast            : get_ignore_case(parse_json('{"Aa":1, "aA":2, "aa":3}'), 'aa')
raw expr       : get_ignore_case(parse_json('{"Aa":1, "aA":2, "aa":3}'), 'aa')
checked expr   : get_ignore_case<Variant, String>(CAST<String>("{\"Aa\":1, \"aA\":2, \"aa\":3}" AS Variant), "aa")
optimized expr : 0x20000000200000025003
output type    : Variant NULL
output domain  : Undefined
output         : '3'


ast            : get_ignore_case(parse_json('{"Aa":1, "aA":2, "aa":3}'), 'bb')
raw expr       : get_ignore_case(parse_json('{"Aa":1, "aA":2, "aa":3}'), 'bb')
checked expr   : get_ignore_case<Variant, String>(CAST<String>("{\"Aa\":1, \"aA\":2, \"aa\":3}" AS Variant), "bb")
optimized expr : NULL
output type    : Variant NULL
output domain  : {NULL}
output         : NULL


ast            : get_ignore_case(parse_json(s), k)
raw expr       : get_ignore_case(parse_json(s::String), k::String)
checked expr   : get_ignore_case<Variant, String>(CAST<String>(s AS Variant), k)
evaluation:
+--------+------------------------+-------------+--------------+
|        | s                      | k           | Output       |
+--------+------------------------+-------------+--------------+
| Type   | String                 | String      | Variant NULL |
| Domain | {"true"..="{\"k\":1}"} | {"A"..="k"} | Unknown      |
| Row 0  | 'true'                 | 'k'         | NULL         |
| Row 1  | '{"k":1}'              | 'K'         | '1'          |
| Row 2  | '{"a":"b"}'            | 'A'         | '"b"'        |
+--------+------------------------+-------------+--------------+
evaluation (internal):
+--------+----------------------------------------------------------------------------------------------------------------+
| Column | Data                                                                                                           |
+--------+----------------------------------------------------------------------------------------------------------------+
| s      | StringColumn[true, {"k":1}, {"a":"b"}]                                                                         |
| k      | StringColumn[k, K, A]                                                                                          |
| Output | NullableColumn { column: Variant([0x, 0x20000000200000025001, 0x200000001000000162]), validity: [0b_____110] } |
+--------+----------------------------------------------------------------------------------------------------------------+


ast            : get_ignore_case(parse_json(s), k)
raw expr       : get_ignore_case(parse_json(s::String NULL), k::String)
checked expr   : get_ignore_case<Variant NULL, String NULL>(CAST<String NULL>(s AS Variant NULL), CAST<String>(k AS String NULL))
evaluation:
+--------+---------------------------------+------------+--------------+
|        | s                               | k          | Output       |
+--------+---------------------------------+------------+--------------+
| Type   | String NULL                     | String     | Variant NULL |
| Domain | {"true"..="{\"k\":1}"} ∪ {NULL} | {""..="K"} | Unknown      |
| Row 0  | 'true'                          | ''         | NULL         |
| Row 1  | '{"k":1}'                       | 'K'        | '1'          |
| Row 2  | NULL                            | ''         | NULL         |
| Row 3  | '{"a":"b"}'                     | 'A'        | '"b"'        |
+--------+---------------------------------+------------+--------------+
evaluation (internal):
+--------+--------------------------------------------------------------------------------------------------------------------+
| Column | Data                                                                                                               |
+--------+--------------------------------------------------------------------------------------------------------------------+
| s      | NullableColumn { column: StringColumn[true, {"k":1}, , {"a":"b"}], validity: [0b____1011] }                        |
| k      | StringColumn[, K, , A]                                                                                             |
| Output | NullableColumn { column: Variant([0x, 0x20000000200000025001, 0x, 0x200000001000000162]), validity: [0b____1010] } |
+--------+--------------------------------------------------------------------------------------------------------------------+


ast            : get_path(parse_json('[[1,2],3]'), '[0]')
raw expr       : get_path(parse_json('[[1,2],3]'), '[0]')
checked expr   : get_path<Variant, String>(CAST<String>("[[1,2],3]" AS Variant), "[0]")
optimized expr : 0x80000002200000022000000250015002
output type    : Variant NULL
output domain  : Undefined
output         : '[1,2]'


ast            : get_path(parse_json('[[1,2],3]'), '[0][1]')
raw expr       : get_path(parse_json('[[1,2],3]'), '[0][1]')
checked expr   : get_path<Variant, String>(CAST<String>("[[1,2],3]" AS Variant), "[0][1]")
optimized expr : 0x20000000200000025002
output type    : Variant NULL
output domain  : Undefined
output         : '2'


ast            : get_path(parse_json('[1,2,3]'), '[0]')
raw expr       : get_path(parse_json('[1,2,3]'), '[0]')
checked expr   : get_path<Variant, String>(CAST<String>("[1,2,3]" AS Variant), "[0]")
optimized expr : 0x20000000200000025001
output type    : Variant NULL
output domain  : Undefined
output         : '1'


ast            : get_path(parse_json('[1,2,3]'), 'k2:k3')
raw expr       : get_path(parse_json('[1,2,3]'), 'k2:k3')
checked expr   : get_path<Variant, String>(CAST<String>("[1,2,3]" AS Variant), "k2:k3")
optimized expr : NULL
output type    : Variant NULL
output domain  : {NULL}
output         : NULL


ast            : get_path(parse_json('{"a":{"b":2}}'), '["a"]["b"]')
raw expr       : get_path(parse_json('{"a":{"b":2}}'), '["a"]["b"]')
checked expr   : get_path<Variant, String>(CAST<String>("{\"a\":{\"b\":2}}" AS Variant), "[\"a\"][\"b\"]")
optimized expr : 0x20000000200000025002
output type    : Variant NULL
output domain  : Undefined
output         : '2'


ast            : get_path(parse_json('{"a":{"b":2}}'), 'a:b')
raw expr       : get_path(parse_json('{"a":{"b":2}}'), 'a:b')
checked expr   : get_path<Variant, String>(CAST<String>("{\"a\":{\"b\":2}}" AS Variant), "a:b")
optimized expr : 0x20000000200000025002
output type    : Variant NULL
output domain  : Undefined
output         : '2'


ast            : get_path(parse_json('{"a":{"b":2}}'), '["a"]')
raw expr       : get_path(parse_json('{"a":{"b":2}}'), '["a"]')
checked expr   : get_path<Variant, String>(CAST<String>("{\"a\":{\"b\":2}}" AS Variant), "[\"a\"]")
optimized expr : 0x400000011000000120000002625002
output type    : Variant NULL
output domain  : Undefined
output         : '{"b":2}'


ast            : get_path(parse_json('{"a":{"b":2}}'), 'a')
raw expr       : get_path(parse_json('{"a":{"b":2}}'), 'a')
checked expr   : get_path<Variant, String>(CAST<String>("{\"a\":{\"b\":2}}" AS Variant), "a")
optimized expr : 0x400000011000000120000002625002
output type    : Variant NULL
output domain  : Undefined
output         : '{"b":2}'


ast            : get_path(parse_json(s), k)
raw expr       : get_path(parse_json(s::String), k::String)
checked expr   : get_path<Variant, String>(CAST<String>(s AS Variant), k)
evaluation:
+--------+---------------------------------+-------------------+--------------+
|        | s                               | k                 | Output       |
+--------+---------------------------------+-------------------+--------------+
| Type   | String                          | String            | Variant NULL |
| Domain | {"[\"a\",\"b\"]"..="{\"k\":1}"} | {"[\"a\"]"..="k"} | Unknown      |
| Row 0  | 'true'                          | 'k'               | NULL         |
| Row 1  | '{"k":1}'                       | '["k"]'           | '1'          |
| Row 2  | '["a","b"]'                     | '["a"]'           | NULL         |
+--------+---------------------------------+-------------------+--------------+
evaluation (internal):
+--------+----------------------------------------------------------------------------------------------+
| Column | Data                                                                                         |
+--------+----------------------------------------------------------------------------------------------+
| s      | StringColumn[true, {"k":1}, ["a","b"]]                                                       |
| k      | StringColumn[k, ["k"], ["a"]]                                                                |
| Output | NullableColumn { column: Variant([0x, 0x20000000200000025001, 0x]), validity: [0b_____010] } |
+--------+----------------------------------------------------------------------------------------------+


ast            : get_path(parse_json(s), k)
raw expr       : get_path(parse_json(s::String NULL), k::String)
checked expr   : get_path<Variant NULL, String NULL>(CAST<String NULL>(s AS Variant NULL), CAST<String>(k AS String NULL))
evaluation:
+--------+------------------------------------------+--------------+--------------+
|        | s                                        | k            | Output       |
+--------+------------------------------------------+--------------+--------------+
| Type   | String NULL                              | String       | Variant NULL |
| Domain | {"[\"a\",\"b\"]"..="{\"k\":1}"} ∪ {NULL} | {""..="[0]"} | Unknown      |
| Row 0  | 'true'                                   | '[0]'        | NULL         |
| Row 1  | '{"k":1}'                                | '["k"]'      | '1'          |
| Row 2  | NULL                                     | ''           | NULL         |
| Row 3  | '["a","b"]'                              | '[0]'        | '"a"'        |
+--------+------------------------------------------+--------------+--------------+
evaluation (internal):
+--------+--------------------------------------------------------------------------------------------------------------------+
| Column | Data                                                                                                               |
+--------+--------------------------------------------------------------------------------------------------------------------+
| s      | NullableColumn { column: StringColumn[true, {"k":1}, , ["a","b"]], validity: [0b____1011] }                        |
| k      | StringColumn[[0], ["k"], , [0]]                                                                                    |
| Output | NullableColumn { column: Variant([0x, 0x20000000200000025001, 0x, 0x200000001000000161]), validity: [0b____1010] } |
+--------+--------------------------------------------------------------------------------------------------------------------+


ast            : json_extract_path_text('[[1,2],3]', '[0]')
raw expr       : json_extract_path_text('[[1,2],3]', '[0]')
checked expr   : json_extract_path_text<String, String>("[[1,2],3]", "[0]")
optimized expr : "[1,2]"
output type    : String NULL
output domain  : {"[1,2]"..="[1,2]"}
output         : '[1,2]'


ast            : json_extract_path_text('[[1,2],3]', '[0][1]')
raw expr       : json_extract_path_text('[[1,2],3]', '[0][1]')
checked expr   : json_extract_path_text<String, String>("[[1,2],3]", "[0][1]")
optimized expr : "2"
output type    : String NULL
output domain  : {"2"..="2"}
output         : '2'


ast            : json_extract_path_text('[1,2,3]', '[0]')
raw expr       : json_extract_path_text('[1,2,3]', '[0]')
checked expr   : json_extract_path_text<String, String>("[1,2,3]", "[0]")
optimized expr : "1"
output type    : String NULL
output domain  : {"1"..="1"}
output         : '1'


ast            : json_extract_path_text('[1,2,3]', 'k2:k3')
raw expr       : json_extract_path_text('[1,2,3]', 'k2:k3')
checked expr   : json_extract_path_text<String, String>("[1,2,3]", "k2:k3")
optimized expr : NULL
output type    : String NULL
output domain  : {NULL}
output         : NULL


ast            : json_extract_path_text('{"a":{"b":2}}', '["a"]["b"]')
raw expr       : json_extract_path_text('{"a":{"b":2}}', '["a"]["b"]')
checked expr   : json_extract_path_text<String, String>("{\"a\":{\"b\":2}}", "[\"a\"][\"b\"]")
optimized expr : "2"
output type    : String NULL
output domain  : {"2"..="2"}
output         : '2'


ast            : json_extract_path_text('{"a":{"b":2}}', 'a:b')
raw expr       : json_extract_path_text('{"a":{"b":2}}', 'a:b')
checked expr   : json_extract_path_text<String, String>("{\"a\":{\"b\":2}}", "a:b")
optimized expr : "2"
output type    : String NULL
output domain  : {"2"..="2"}
output         : '2'


ast            : json_extract_path_text('{"a":{"b":2}}', '["a"]')
raw expr       : json_extract_path_text('{"a":{"b":2}}', '["a"]')
checked expr   : json_extract_path_text<String, String>("{\"a\":{\"b\":2}}", "[\"a\"]")
optimized expr : "{\"b\":2}"
output type    : String NULL
output domain  : {"{\"b\":2}"..="{\"b\":2}"}
output         : '{"b":2}'


ast            : json_extract_path_text('{"a":{"b":2}}', 'a')
raw expr       : json_extract_path_text('{"a":{"b":2}}', 'a')
checked expr   : json_extract_path_text<String, String>("{\"a\":{\"b\":2}}", "a")
optimized expr : "{\"b\":2}"
output type    : String NULL
output domain  : {"{\"b\":2}"..="{\"b\":2}"}
output         : '{"b":2}'


ast            : json_extract_path_text('{"a":null}', 'a')
raw expr       : json_extract_path_text('{"a":null}', 'a')
checked expr   : json_extract_path_text<String, String>("{\"a\":null}", "a")
optimized expr : NULL
output type    : String NULL
output domain  : {NULL}
output         : NULL


ast            : json_extract_path_text(s, k)
raw expr       : json_extract_path_text(s::String, k::String)
checked expr   : json_extract_path_text<String, String>(s, k)
evaluation:
+--------+---------------------------------+-------------------+-------------+
|        | s                               | k                 | Output      |
+--------+---------------------------------+-------------------+-------------+
| Type   | String                          | String            | String NULL |
| Domain | {"[\"a\",\"b\"]"..="{\"k\":1}"} | {"[\"a\"]"..="k"} | Unknown     |
| Row 0  | 'true'                          | 'k'               | NULL        |
| Row 1  | '{"k":1}'                       | '["k"]'           | '1'         |
| Row 2  | '["a","b"]'                     | '["a"]'           | NULL        |
+--------+---------------------------------+-------------------+-------------+
evaluation (internal):
+--------+------------------------------------------------------------------------+
| Column | Data                                                                   |
+--------+------------------------------------------------------------------------+
| s      | StringColumn[true, {"k":1}, ["a","b"]]                                 |
| k      | StringColumn[k, ["k"], ["a"]]                                          |
| Output | NullableColumn { column: StringColumn[, 1, ], validity: [0b_____010] } |
+--------+------------------------------------------------------------------------+


ast            : json_extract_path_text(s, k)
raw expr       : json_extract_path_text(s::String NULL, k::String)
checked expr   : json_extract_path_text<String NULL, String NULL>(s, CAST<String>(k AS String NULL))
evaluation:
+--------+------------------------------------------+--------------+-------------+
|        | s                                        | k            | Output      |
+--------+------------------------------------------+--------------+-------------+
| Type   | String NULL                              | String       | String NULL |
| Domain | {"[\"a\",\"b\"]"..="{\"k\":1}"} ∪ {NULL} | {""..="[0]"} | Unknown     |
| Row 0  | 'true'                                   | '[0]'        | NULL        |
| Row 1  | '{"k":1}'                                | '["k"]'      | '1'         |
| Row 2  | NULL                                     | ''           | NULL        |
| Row 3  | '["a","b"]'                              | '[0]'        | 'a'         |
+--------+------------------------------------------+--------------+-------------+
evaluation (internal):
+--------+---------------------------------------------------------------------------------------------+
| Column | Data                                                                                        |
+--------+---------------------------------------------------------------------------------------------+
| s      | NullableColumn { column: StringColumn[true, {"k":1}, , ["a","b"]], validity: [0b____1011] } |
| k      | StringColumn[[0], ["k"], , [0]]                                                             |
| Output | NullableColumn { column: StringColumn[, 1, , a], validity: [0b____1010] }                   |
+--------+---------------------------------------------------------------------------------------------+


ast            : as_boolean(parse_json('true'))
raw expr       : as_boolean(parse_json('true'))
checked expr   : as_boolean<Variant>(CAST<String>("true" AS Variant))
optimized expr : true
output type    : Boolean NULL
output domain  : {TRUE}
output         : true


ast            : as_boolean(parse_json('123'))
raw expr       : as_boolean(parse_json('123'))
checked expr   : as_boolean<Variant>(CAST<String>("123" AS Variant))
optimized expr : NULL
output type    : Boolean NULL
output domain  : {NULL}
output         : NULL


ast            : as_integer(parse_json('true'))
raw expr       : as_integer(parse_json('true'))
checked expr   : as_integer<Variant>(CAST<String>("true" AS Variant))
optimized expr : NULL
output type    : Int64 NULL
output domain  : {NULL}
output         : NULL


ast            : as_integer(parse_json('123'))
raw expr       : as_integer(parse_json('123'))
checked expr   : as_integer<Variant>(CAST<String>("123" AS Variant))
optimized expr : 123_i64
output type    : Int64 NULL
output domain  : {123..=123}
output         : 123


ast            : as_float(parse_json('"ab"'))
raw expr       : as_float(parse_json('"ab"'))
checked expr   : as_float<Variant>(CAST<String>("\"ab\"" AS Variant))
optimized expr : NULL
output type    : Float64 NULL
output domain  : {NULL}
output         : NULL


ast            : as_float(parse_json('12.34'))
raw expr       : as_float(parse_json('12.34'))
checked expr   : as_float<Variant>(CAST<String>("12.34" AS Variant))
optimized expr : 12.34_f64
output type    : Float64 NULL
output domain  : {12.34..=12.34}
output         : 12.34


ast            : as_decimal(parse_json('12.34'))
raw expr       : as_decimal(parse_json('12.34'))
checked expr   : as_decimal<Variant>(CAST<String>("12.34" AS Variant))
optimized expr : 12_d128(38,0)
output type    : Decimal(38, 0) NULL
output domain  : {12..=12}
output         : 12


ast            : as_decimal(10, 2)(parse_json('12.34'))
raw expr       : as_decimal(10, 2)(parse_json('12.34'))
checked expr   : as_decimal<Variant>(10, 2)(CAST<String>("12.34" AS Variant))
optimized expr : 12.34_d64(10,2)
output type    : Decimal(10, 2) NULL
output domain  : {12.34..=12.34}
output         : 12.34


ast            : as_string(parse_json('"ab"'))
raw expr       : as_string(parse_json('"ab"'))
checked expr   : as_string<Variant>(CAST<String>("\"ab\"" AS Variant))
optimized expr : "ab"
output type    : String NULL
output domain  : {"ab"..="ab"}
output         : 'ab'


ast            : as_string(parse_json('12.34'))
raw expr       : as_string(parse_json('12.34'))
checked expr   : as_string<Variant>(CAST<String>("12.34" AS Variant))
optimized expr : NULL
output type    : String NULL
output domain  : {NULL}
output         : NULL


ast            : as_array(parse_json('[1,2,3]'))
raw expr       : as_array(parse_json('[1,2,3]'))
checked expr   : as_array<Variant>(CAST<String>("[1,2,3]" AS Variant))
optimized expr : 0x80000003200000022000000220000002500150025003
output type    : Variant NULL
output domain  : Undefined
output         : '[1,2,3]'


ast            : as_array(parse_json('{"a":"b"}'))
raw expr       : as_array(parse_json('{"a":"b"}'))
checked expr   : as_array<Variant>(CAST<String>("{\"a\":\"b\"}" AS Variant))
optimized expr : NULL
output type    : Variant NULL
output domain  : {NULL}
output         : NULL


ast            : as_object(parse_json('[1,2,3]'))
raw expr       : as_object(parse_json('[1,2,3]'))
checked expr   : as_object<Variant>(CAST<String>("[1,2,3]" AS Variant))
optimized expr : NULL
output type    : Variant NULL
output domain  : {NULL}
output         : NULL


ast            : as_object(parse_json('{"a":"b"}'))
raw expr       : as_object(parse_json('{"a":"b"}'))
checked expr   : as_object<Variant>(CAST<String>("{\"a\":\"b\"}" AS Variant))
optimized expr : 0x4000000110000001100000016162
output type    : Variant NULL
output domain  : Undefined
output         : '{"a":"b"}'


ast            : as_binary(to_binary('abcd')::variant)
raw expr       : as_binary(CAST(to_binary('abcd') AS Variant))
checked expr   : as_binary<Variant>(CAST<Binary>(CAST<String>("abcd" AS Binary) AS Variant))
optimized expr : 61626364
output type    : Binary NULL
output domain  : Undefined
output         : 61626364


ast            : as_date(to_date('2025-10-11')::variant)
raw expr       : as_date(CAST(to_date('2025-10-11') AS Variant))
checked expr   : as_date<Variant>(CAST<Date>(CAST<String>("2025-10-11" AS Date) AS Variant))
optimized expr : 20372
output type    : Date NULL
output domain  : {20372..=20372}
output         : '2025-10-11'


ast            : as_timestamp(to_timestamp('2025-05-01 10:00:00')::variant)
raw expr       : as_timestamp(CAST(to_timestamp('2025-05-01 10:00:00') AS Variant))
checked expr   : as_timestamp<Variant>(CAST<Timestamp>(CAST<String>("2025-05-01 10:00:00" AS Timestamp) AS Variant))
optimized expr : 1746093600000000
output type    : Timestamp NULL
output domain  : {1746093600000000..=1746093600000000}
output         : '2025-05-01 10:00:00.000000'


ast            : as_interval(to_interval('1 year 2 month')::variant)
raw expr       : as_interval(CAST(to_interval('1 year 2 month') AS Variant))
checked expr   : as_interval<Variant>(CAST<Interval>(CAST<String>("1 year 2 month" AS Interval) AS Variant))
optimized expr : 1 year 2 months
output type    : Interval NULL
output domain  : SimpleDomain { min: months_days_micros(1109194275199700726309615304704), max: months_days_micros(1109194275199700726309615304704) }
output         : '1 year 2 months'


ast            : as_boolean(parse_json(s))
raw expr       : as_boolean(parse_json(s::String))
checked expr   : as_boolean<Variant>(CAST<String>(s AS Variant))
evaluation:
+--------+------------------------------+--------------+
|        | s                            | Output       |
+--------+------------------------------+--------------+
| Type   | String                       | Boolean NULL |
| Domain | {"\"ab\""..="{\"a\":\"b\"}"} | Unknown      |
| Row 0  | 'null'                       | NULL         |
| Row 1  | 'true'                       | true         |
| Row 2  | '123'                        | NULL         |
| Row 3  | '12.34'                      | NULL         |
| Row 4  | '"ab"'                       | NULL         |
| Row 5  | '[1,2,3]'                    | NULL         |
| Row 6  | '{"a":"b"}'                  | NULL         |
+--------+------------------------------+--------------+
evaluation (internal):
+--------+--------------------------------------------------------------------------+
| Column | Data                                                                     |
+--------+--------------------------------------------------------------------------+
| s      | StringColumn[null, true, 123, 12.34, "ab", [1,2,3], {"a":"b"}]           |
| Output | NullableColumn { column: Boolean([0b_0000010]), validity: [0b_0000010] } |
+--------+--------------------------------------------------------------------------+


ast            : as_integer(parse_json(s))
raw expr       : as_integer(parse_json(s::String))
checked expr   : as_integer<Variant>(CAST<String>(s AS Variant))
evaluation:
+--------+------------------------------+------------+
|        | s                            | Output     |
+--------+------------------------------+------------+
| Type   | String                       | Int64 NULL |
| Domain | {"\"ab\""..="{\"a\":\"b\"}"} | Unknown    |
| Row 0  | 'null'                       | NULL       |
| Row 1  | 'true'                       | NULL       |
| Row 2  | '123'                        | 123        |
| Row 3  | '12.34'                      | NULL       |
| Row 4  | '"ab"'                       | NULL       |
| Row 5  | '[1,2,3]'                    | NULL       |
| Row 6  | '{"a":"b"}'                  | NULL       |
+--------+------------------------------+------------+
evaluation (internal):
+--------+-----------------------------------------------------------------------------------+
| Column | Data                                                                              |
+--------+-----------------------------------------------------------------------------------+
| s      | StringColumn[null, true, 123, 12.34, "ab", [1,2,3], {"a":"b"}]                    |
| Output | NullableColumn { column: Int64([0, 0, 123, 0, 0, 0, 0]), validity: [0b_0000100] } |
+--------+-----------------------------------------------------------------------------------+


ast            : as_float(parse_json(s))
raw expr       : as_float(parse_json(s::String))
checked expr   : as_float<Variant>(CAST<String>(s AS Variant))
evaluation:
+--------+------------------------------+--------------+
|        | s                            | Output       |
+--------+------------------------------+--------------+
| Type   | String                       | Float64 NULL |
| Domain | {"\"ab\""..="{\"a\":\"b\"}"} | Unknown      |
| Row 0  | 'null'                       | NULL         |
| Row 1  | 'true'                       | NULL         |
| Row 2  | '123'                        | 123          |
| Row 3  | '12.34'                      | 12.34        |
| Row 4  | '"ab"'                       | NULL         |
| Row 5  | '[1,2,3]'                    | NULL         |
| Row 6  | '{"a":"b"}'                  | NULL         |
+--------+------------------------------+--------------+
evaluation (internal):
+--------+-----------------------------------------------------------------------------------------+
| Column | Data                                                                                    |
+--------+-----------------------------------------------------------------------------------------+
| s      | StringColumn[null, true, 123, 12.34, "ab", [1,2,3], {"a":"b"}]                          |
| Output | NullableColumn { column: Float64([0, 0, 123, 12.34, 0, 0, 0]), validity: [0b_0001100] } |
+--------+-----------------------------------------------------------------------------------------+


ast            : as_string(parse_json(s))
raw expr       : as_string(parse_json(s::String))
checked expr   : as_string<Variant>(CAST<String>(s AS Variant))
evaluation:
+--------+------------------------------+-------------+
|        | s                            | Output      |
+--------+------------------------------+-------------+
| Type   | String                       | String NULL |
| Domain | {"\"ab\""..="{\"a\":\"b\"}"} | Unknown     |
| Row 0  | 'null'                       | NULL        |
| Row 1  | 'true'                       | NULL        |
| Row 2  | '123'                        | NULL        |
| Row 3  | '12.34'                      | NULL        |
| Row 4  | '"ab"'                       | 'ab'        |
| Row 5  | '[1,2,3]'                    | NULL        |
| Row 6  | '{"a":"b"}'                  | NULL        |
+--------+------------------------------+-------------+
evaluation (internal):
+--------+---------------------------------------------------------------------------------+
| Column | Data                                                                            |
+--------+---------------------------------------------------------------------------------+
| s      | StringColumn[null, true, 123, 12.34, "ab", [1,2,3], {"a":"b"}]                  |
| Output | NullableColumn { column: StringColumn[, , , , ab, , ], validity: [0b_0010000] } |
+--------+---------------------------------------------------------------------------------+


ast            : as_array(parse_json(s))
raw expr       : as_array(parse_json(s::String))
checked expr   : as_array<Variant>(CAST<String>(s AS Variant))
evaluation:
+--------+------------------------------+--------------+
|        | s                            | Output       |
+--------+------------------------------+--------------+
| Type   | String                       | Variant NULL |
| Domain | {"\"ab\""..="{\"a\":\"b\"}"} | Unknown      |
| Row 0  | 'null'                       | NULL         |
| Row 1  | 'true'                       | NULL         |
| Row 2  | '123'                        | NULL         |
| Row 3  | '12.34'                      | NULL         |
| Row 4  | '"ab"'                       | NULL         |
| Row 5  | '[1,2,3]'                    | '[1,2,3]'    |
| Row 6  | '{"a":"b"}'                  | NULL         |
+--------+------------------------------+--------------+
evaluation (internal):
+--------+--------------------------------------------------------------------------------------------------------------------------------------+
| Column | Data                                                                                                                                 |
+--------+--------------------------------------------------------------------------------------------------------------------------------------+
| s      | StringColumn[null, true, 123, 12.34, "ab", [1,2,3], {"a":"b"}]                                                                       |
| Output | NullableColumn { column: Variant([0x, 0x, 0x, 0x, 0x, 0x80000003200000022000000220000002500150025003, 0x]), validity: [0b_0100000] } |
+--------+--------------------------------------------------------------------------------------------------------------------------------------+


ast            : as_object(parse_json(s))
raw expr       : as_object(parse_json(s::String))
checked expr   : as_object<Variant>(CAST<String>(s AS Variant))
evaluation:
+--------+------------------------------+--------------+
|        | s                            | Output       |
+--------+------------------------------+--------------+
| Type   | String                       | Variant NULL |
| Domain | {"\"ab\""..="{\"a\":\"b\"}"} | Unknown      |
| Row 0  | 'null'                       | NULL         |
| Row 1  | 'true'                       | NULL         |
| Row 2  | '123'                        | NULL         |
| Row 3  | '12.34'                      | NULL         |
| Row 4  | '"ab"'                       | NULL         |
| Row 5  | '[1,2,3]'                    | NULL         |
| Row 6  | '{"a":"b"}'                  | '{"a":"b"}'  |
+--------+------------------------------+--------------+
evaluation (internal):
+--------+----------------------------------------------------------------------------------------------------------------------+
| Column | Data                                                                                                                 |
+--------+----------------------------------------------------------------------------------------------------------------------+
| s      | StringColumn[null, true, 123, 12.34, "ab", [1,2,3], {"a":"b"}]                                                       |
| Output | NullableColumn { column: Variant([0x, 0x, 0x, 0x, 0x, 0x, 0x4000000110000001100000016162]), validity: [0b_1000000] } |
+--------+----------------------------------------------------------------------------------------------------------------------+


ast            : is_null_value(parse_json('null'))
raw expr       : is_null_value(parse_json('null'))
checked expr   : is_null_value<Variant>(CAST<String>("null" AS Variant))
optimized expr : true
output type    : Boolean
output domain  : {TRUE}
output         : true


ast            : is_null_value(parse_json('[1,2]'))
raw expr       : is_null_value(parse_json('[1,2]'))
checked expr   : is_null_value<Variant>(CAST<String>("[1,2]" AS Variant))
optimized expr : false
output type    : Boolean
output domain  : {FALSE}
output         : false


ast            : is_boolean(parse_json('true'))
raw expr       : is_boolean(parse_json('true'))
checked expr   : is_boolean<Variant>(CAST<String>("true" AS Variant))
optimized expr : true
output type    : Boolean
output domain  : {TRUE}
output         : true


ast            : is_boolean(parse_json('123'))
raw expr       : is_boolean(parse_json('123'))
checked expr   : is_boolean<Variant>(CAST<String>("123" AS Variant))
optimized expr : false
output type    : Boolean
output domain  : {FALSE}
output         : false


ast            : is_integer(parse_json('true'))
raw expr       : is_integer(parse_json('true'))
checked expr   : is_integer<Variant>(CAST<String>("true" AS Variant))
optimized expr : false
output type    : Boolean
output domain  : {FALSE}
output         : false


ast            : is_integer(parse_json('123'))
raw expr       : is_integer(parse_json('123'))
checked expr   : is_integer<Variant>(CAST<String>("123" AS Variant))
optimized expr : true
output type    : Boolean
output domain  : {TRUE}
output         : true


ast            : is_float(parse_json('"ab"'))
raw expr       : is_float(parse_json('"ab"'))
checked expr   : is_float<Variant>(CAST<String>("\"ab\"" AS Variant))
optimized expr : false
output type    : Boolean
output domain  : {FALSE}
output         : false


ast            : is_float(parse_json('12.34'))
raw expr       : is_float(parse_json('12.34'))
checked expr   : is_float<Variant>(CAST<String>("12.34" AS Variant))
optimized expr : true
output type    : Boolean
output domain  : {TRUE}
output         : true


ast            : is_decimal(parse_json('99999999999999999999999999999999999999'))
raw expr       : is_decimal(parse_json('99999999999999999999999999999999999999'))
checked expr   : is_decimal<Variant>(CAST<String>("99999999999999999999999999999999999999" AS Variant))
optimized expr : true
output type    : Boolean
output domain  : {TRUE}
output         : true


ast            : is_decimal(parse_json('99999999999999999999999999999999999999999999999999999999999999999999999999991'))
raw expr       : is_decimal(parse_json('99999999999999999999999999999999999999999999999999999999999999999999999999991'))
checked expr   : is_decimal<Variant>(CAST<String>("99999999999999999999999999999999999999999999999999999999999999999999999999991" AS Variant))
optimized expr : false
output type    : Boolean
output domain  : {FALSE}
output         : false


ast            : is_string(parse_json('"ab"'))
raw expr       : is_string(parse_json('"ab"'))
checked expr   : is_string<Variant>(CAST<String>("\"ab\"" AS Variant))
optimized expr : true
output type    : Boolean
output domain  : {TRUE}
output         : true


ast            : is_string(parse_json('12.34'))
raw expr       : is_string(parse_json('12.34'))
checked expr   : is_string<Variant>(CAST<String>("12.34" AS Variant))
optimized expr : false
output type    : Boolean
output domain  : {FALSE}
output         : false


ast            : is_array(parse_json('[1,2,3]'))
raw expr       : is_array(parse_json('[1,2,3]'))
checked expr   : is_array<Variant>(CAST<String>("[1,2,3]" AS Variant))
optimized expr : true
output type    : Boolean
output domain  : {TRUE}
output         : true


ast            : is_array(parse_json('{"a":"b"}'))
raw expr       : is_array(parse_json('{"a":"b"}'))
checked expr   : is_array<Variant>(CAST<String>("{\"a\":\"b\"}" AS Variant))
optimized expr : false
output type    : Boolean
output domain  : {FALSE}
output         : false


ast            : is_object(parse_json('[1,2,3]'))
raw expr       : is_object(parse_json('[1,2,3]'))
checked expr   : is_object<Variant>(CAST<String>("[1,2,3]" AS Variant))
optimized expr : false
output type    : Boolean
output domain  : {FALSE}
output         : false


ast            : is_object(parse_json('{"a":"b"}'))
raw expr       : is_object(parse_json('{"a":"b"}'))
checked expr   : is_object<Variant>(CAST<String>("{\"a\":\"b\"}" AS Variant))
optimized expr : true
output type    : Boolean
output domain  : {TRUE}
output         : true


ast            : is_binary(to_binary('abcd')::variant)
raw expr       : is_binary(CAST(to_binary('abcd') AS Variant))
checked expr   : is_binary<Variant>(CAST<Binary>(CAST<String>("abcd" AS Binary) AS Variant))
optimized expr : true
output type    : Boolean
output domain  : {TRUE}
output         : true


ast            : is_date(to_date('2025-10-11')::variant)
raw expr       : is_date(CAST(to_date('2025-10-11') AS Variant))
checked expr   : is_date<Variant>(CAST<Date>(CAST<String>("2025-10-11" AS Date) AS Variant))
optimized expr : true
output type    : Boolean
output domain  : {TRUE}
output         : true


ast            : is_timestamp(to_timestamp('2025-05-01 10:00:00')::variant)
raw expr       : is_timestamp(CAST(to_timestamp('2025-05-01 10:00:00') AS Variant))
checked expr   : is_timestamp<Variant>(CAST<Timestamp>(CAST<String>("2025-05-01 10:00:00" AS Timestamp) AS Variant))
optimized expr : true
output type    : Boolean
output domain  : {TRUE}
output         : true


ast            : is_interval(to_interval('1 year 2 month')::variant)
raw expr       : is_interval(CAST(to_interval('1 year 2 month') AS Variant))
checked expr   : is_interval<Variant>(CAST<Interval>(CAST<String>("1 year 2 month" AS Interval) AS Variant))
optimized expr : true
output type    : Boolean
output domain  : {TRUE}
output         : true


ast            : is_null_value(parse_json(s))
raw expr       : is_null_value(parse_json(s::String))
checked expr   : is_null_value<Variant>(CAST<String>(s AS Variant))
evaluation:
+--------+------------------------------+---------+
|        | s                            | Output  |
+--------+------------------------------+---------+
| Type   | String                       | Boolean |
| Domain | {"\"ab\""..="{\"a\":\"b\"}"} | Unknown |
| Row 0  | 'null'                       | true    |
| Row 1  | 'true'                       | false   |
| Row 2  | '123'                        | false   |
| Row 3  | '12.34'                      | false   |
| Row 4  | '"ab"'                       | false   |
| Row 5  | '[1,2,3]'                    | false   |
| Row 6  | '{"a":"b"}'                  | false   |
+--------+------------------------------+---------+
evaluation (internal):
+--------+----------------------------------------------------------------+
| Column | Data                                                           |
+--------+----------------------------------------------------------------+
| s      | StringColumn[null, true, 123, 12.34, "ab", [1,2,3], {"a":"b"}] |
| Output | Boolean([0b_0000001])                                          |
+--------+----------------------------------------------------------------+


ast            : is_boolean(parse_json(s))
raw expr       : is_boolean(parse_json(s::String))
checked expr   : is_boolean<Variant>(CAST<String>(s AS Variant))
evaluation:
+--------+------------------------------+---------+
|        | s                            | Output  |
+--------+------------------------------+---------+
| Type   | String                       | Boolean |
| Domain | {"\"ab\""..="{\"a\":\"b\"}"} | Unknown |
| Row 0  | 'null'                       | false   |
| Row 1  | 'true'                       | true    |
| Row 2  | '123'                        | false   |
| Row 3  | '12.34'                      | false   |
| Row 4  | '"ab"'                       | false   |
| Row 5  | '[1,2,3]'                    | false   |
| Row 6  | '{"a":"b"}'                  | false   |
+--------+------------------------------+---------+
evaluation (internal):
+--------+----------------------------------------------------------------+
| Column | Data                                                           |
+--------+----------------------------------------------------------------+
| s      | StringColumn[null, true, 123, 12.34, "ab", [1,2,3], {"a":"b"}] |
| Output | Boolean([0b_0000010])                                          |
+--------+----------------------------------------------------------------+


ast            : is_integer(parse_json(s))
raw expr       : is_integer(parse_json(s::String))
checked expr   : is_integer<Variant>(CAST<String>(s AS Variant))
evaluation:
+--------+------------------------------+---------+
|        | s                            | Output  |
+--------+------------------------------+---------+
| Type   | String                       | Boolean |
| Domain | {"\"ab\""..="{\"a\":\"b\"}"} | Unknown |
| Row 0  | 'null'                       | false   |
| Row 1  | 'true'                       | false   |
| Row 2  | '123'                        | true    |
| Row 3  | '12.34'                      | false   |
| Row 4  | '"ab"'                       | false   |
| Row 5  | '[1,2,3]'                    | false   |
| Row 6  | '{"a":"b"}'                  | false   |
+--------+------------------------------+---------+
evaluation (internal):
+--------+----------------------------------------------------------------+
| Column | Data                                                           |
+--------+----------------------------------------------------------------+
| s      | StringColumn[null, true, 123, 12.34, "ab", [1,2,3], {"a":"b"}] |
| Output | Boolean([0b_0000100])                                          |
+--------+----------------------------------------------------------------+


ast            : is_float(parse_json(s))
raw expr       : is_float(parse_json(s::String))
checked expr   : is_float<Variant>(CAST<String>(s AS Variant))
evaluation:
+--------+------------------------------+---------+
|        | s                            | Output  |
+--------+------------------------------+---------+
| Type   | String                       | Boolean |
| Domain | {"\"ab\""..="{\"a\":\"b\"}"} | Unknown |
| Row 0  | 'null'                       | false   |
| Row 1  | 'true'                       | false   |
| Row 2  | '123'                        | true    |
| Row 3  | '12.34'                      | true    |
| Row 4  | '"ab"'                       | false   |
| Row 5  | '[1,2,3]'                    | false   |
| Row 6  | '{"a":"b"}'                  | false   |
+--------+------------------------------+---------+
evaluation (internal):
+--------+----------------------------------------------------------------+
| Column | Data                                                           |
+--------+----------------------------------------------------------------+
| s      | StringColumn[null, true, 123, 12.34, "ab", [1,2,3], {"a":"b"}] |
| Output | Boolean([0b_0001100])                                          |
+--------+----------------------------------------------------------------+


ast            : is_string(parse_json(s))
raw expr       : is_string(parse_json(s::String))
checked expr   : is_string<Variant>(CAST<String>(s AS Variant))
evaluation:
+--------+------------------------------+---------+
|        | s                            | Output  |
+--------+------------------------------+---------+
| Type   | String                       | Boolean |
| Domain | {"\"ab\""..="{\"a\":\"b\"}"} | Unknown |
| Row 0  | 'null'                       | false   |
| Row 1  | 'true'                       | false   |
| Row 2  | '123'                        | false   |
| Row 3  | '12.34'                      | false   |
| Row 4  | '"ab"'                       | true    |
| Row 5  | '[1,2,3]'                    | false   |
| Row 6  | '{"a":"b"}'                  | false   |
+--------+------------------------------+---------+
evaluation (internal):
+--------+----------------------------------------------------------------+
| Column | Data                                                           |
+--------+----------------------------------------------------------------+
| s      | StringColumn[null, true, 123, 12.34, "ab", [1,2,3], {"a":"b"}] |
| Output | Boolean([0b_0010000])                                          |
+--------+----------------------------------------------------------------+


ast            : is_array(parse_json(s))
raw expr       : is_array(parse_json(s::String))
checked expr   : is_array<Variant>(CAST<String>(s AS Variant))
evaluation:
+--------+------------------------------+---------+
|        | s                            | Output  |
+--------+------------------------------+---------+
| Type   | String                       | Boolean |
| Domain | {"\"ab\""..="{\"a\":\"b\"}"} | Unknown |
| Row 0  | 'null'                       | false   |
| Row 1  | 'true'                       | false   |
| Row 2  | '123'                        | false   |
| Row 3  | '12.34'                      | false   |
| Row 4  | '"ab"'                       | false   |
| Row 5  | '[1,2,3]'                    | true    |
| Row 6  | '{"a":"b"}'                  | false   |
+--------+------------------------------+---------+
evaluation (internal):
+--------+----------------------------------------------------------------+
| Column | Data                                                           |
+--------+----------------------------------------------------------------+
| s      | StringColumn[null, true, 123, 12.34, "ab", [1,2,3], {"a":"b"}] |
| Output | Boolean([0b_0100000])                                          |
+--------+----------------------------------------------------------------+


ast            : is_object(parse_json(s))
raw expr       : is_object(parse_json(s::String))
checked expr   : is_object<Variant>(CAST<String>(s AS Variant))
evaluation:
+--------+------------------------------+---------+
|        | s                            | Output  |
+--------+------------------------------+---------+
| Type   | String                       | Boolean |
| Domain | {"\"ab\""..="{\"a\":\"b\"}"} | Unknown |
| Row 0  | 'null'                       | false   |
| Row 1  | 'true'                       | false   |
| Row 2  | '123'                        | false   |
| Row 3  | '12.34'                      | false   |
| Row 4  | '"ab"'                       | false   |
| Row 5  | '[1,2,3]'                    | false   |
| Row 6  | '{"a":"b"}'                  | true    |
+--------+------------------------------+---------+
evaluation (internal):
+--------+----------------------------------------------------------------+
| Column | Data                                                           |
+--------+----------------------------------------------------------------+
| s      | StringColumn[null, true, 123, 12.34, "ab", [1,2,3], {"a":"b"}] |
| Output | Boolean([0b_1000000])                                          |
+--------+----------------------------------------------------------------+


ast            : to_boolean(parse_json('null'))
raw expr       : to_boolean(parse_json('null'))
checked expr   : CAST<Variant>(CAST<String>("null" AS Variant) AS Boolean NULL)
optimized expr : NULL
output type    : Boolean NULL
output domain  : {NULL}
output         : NULL


ast            : to_boolean(parse_json('true'))
raw expr       : to_boolean(parse_json('true'))
checked expr   : CAST<Variant>(CAST<String>("true" AS Variant) AS Boolean NULL)
optimized expr : true
output type    : Boolean NULL
output domain  : {TRUE}
output         : true


error: 
  --> SQL:1:1
  |
1 | to_boolean(parse_json('123'))
  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ InvalidCast while evaluating function `to_boolean('123')` in expr `CAST(CAST('123' AS Variant) AS Boolean NULL)`



error: 
  --> SQL:1:1
  |
1 | to_boolean(parse_json('"abc"'))
  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ InvalidCast while evaluating function `to_boolean('"abc"')` in expr `CAST(CAST('"abc"' AS Variant) AS Boolean NULL)`



ast            : to_uint64(parse_json('null'))
raw expr       : to_uint64(parse_json('null'))
checked expr   : CAST<Variant>(CAST<String>("null" AS Variant) AS UInt64 NULL)
optimized expr : NULL
output type    : UInt64 NULL
output domain  : {NULL}
output         : NULL


ast            : to_uint64(parse_json('123'))
raw expr       : to_uint64(parse_json('123'))
checked expr   : CAST<Variant>(CAST<String>("123" AS Variant) AS UInt64 NULL)
optimized expr : 123_u64
output type    : UInt64 NULL
output domain  : {123..=123}
output         : 123


error: 
  --> SQL:1:1
  |
1 | to_uint64(parse_json('-123'))
  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ unable to cast to type UInt64 while evaluating function `to_uint64('-123')` in expr `CAST(CAST('-123' AS Variant) AS UInt64 NULL)`



error: 
  --> SQL:1:1
  |
1 | to_uint64(parse_json('"abc"'))
  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ unable to cast to type UInt64 while evaluating function `to_uint64('"abc"')` in expr `CAST(CAST('"abc"' AS Variant) AS UInt64 NULL)`



ast            : to_int64(parse_json('123'))
raw expr       : to_int64(parse_json('123'))
checked expr   : CAST<Variant>(CAST<String>("123" AS Variant) AS Int64 NULL)
optimized expr : 123_i64
output type    : Int64 NULL
output domain  : {123..=123}
output         : 123


ast            : to_int64(parse_json('-123'))
raw expr       : to_int64(parse_json('-123'))
checked expr   : CAST<Variant>(CAST<String>("-123" AS Variant) AS Int64 NULL)
optimized expr : -123_i64
output type    : Int64 NULL
output domain  : {-123..=-123}
output         : -123


error: 
  --> SQL:1:1
  |
1 | to_int64(parse_json('"abc"'))
  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ unable to cast to type Int64 while evaluating function `to_int64('"abc"')` in expr `CAST(CAST('"abc"' AS Variant) AS Int64 NULL)`



ast            : to_float64(parse_json('12.34'))
raw expr       : to_float64(parse_json('12.34'))
checked expr   : CAST<Variant>(CAST<String>("12.34" AS Variant) AS Float64 NULL)
optimized expr : 12.34_f64
output type    : Float64 NULL
output domain  : {12.34..=12.34}
output         : 12.34


error: 
  --> SQL:1:1
  |
1 | to_float64(parse_json('"abc"'))
  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ unable to cast to type Float64 while evaluating function `to_float64('"abc"')` in expr `CAST(CAST('"abc"' AS Variant) AS Float64 NULL)`



ast            : to_date(parse_json('null'))
raw expr       : to_date(parse_json('null'))
checked expr   : CAST<Variant>(CAST<String>("null" AS Variant) AS Date NULL)
optimized expr : NULL
output type    : Date NULL
output domain  : {NULL}
output         : NULL


ast            : to_date(parse_json('"2023-01-01"'))
raw expr       : to_date(parse_json('"2023-01-01"'))
checked expr   : CAST<Variant>(CAST<String>("\"2023-01-01\"" AS Variant) AS Date NULL)
optimized expr : 19358
output type    : Date NULL
output domain  : {19358..=19358}
output         : '2023-01-01'


error: 
  --> SQL:1:1
  |
1 | to_date(parse_json('"abc"'))
  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ unable to cast to type `DATE` unexpected argument. while evaluating function `to_date('"abc"')` in expr `CAST(CAST('"abc"' AS Variant) AS Date NULL)`



ast            : to_timestamp(parse_json('null'))
raw expr       : to_timestamp(parse_json('null'))
checked expr   : CAST<Variant>(CAST<String>("null" AS Variant) AS Timestamp NULL)
optimized expr : NULL
output type    : Timestamp NULL
output domain  : {NULL}
output         : NULL


ast            : to_timestamp(parse_json('"2023-01-01 00:00:00"'))
raw expr       : to_timestamp(parse_json('"2023-01-01 00:00:00"'))
checked expr   : CAST<Variant>(CAST<String>("\"2023-01-01 00:00:00\"" AS Variant) AS Timestamp NULL)
optimized expr : 1672531200000000
output type    : Timestamp NULL
output domain  : {1672531200000000..=1672531200000000}
output         : '2023-01-01 00:00:00.000000'


error: 
  --> SQL:1:1
  |
1 | to_timestamp(parse_json('"abc"'))
  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ unable to cast to type `TIMESTAMP` unexpected argument. while evaluating function `to_timestamp('"abc"')` in expr `CAST(CAST('"abc"' AS Variant) AS Timestamp NULL)`



ast            : to_string(parse_json('null'))
raw expr       : to_string(parse_json('null'))
checked expr   : CAST<Variant>(CAST<String>("null" AS Variant) AS String NULL)
optimized expr : NULL
output type    : String NULL
output domain  : {NULL}
output         : NULL


ast            : to_string(parse_json('12.34'))
raw expr       : to_string(parse_json('12.34'))
checked expr   : CAST<Variant>(CAST<String>("12.34" AS Variant) AS String NULL)
optimized expr : "12.34"
output type    : String NULL
output domain  : {"12.34"..="12.34"}
output         : '12.34'


ast            : to_string(parse_json('"abc"'))
raw expr       : to_string(parse_json('"abc"'))
checked expr   : CAST<Variant>(CAST<String>("\"abc\"" AS Variant) AS String NULL)
optimized expr : "abc"
output type    : String NULL
output domain  : {"abc"..="abc"}
output         : 'abc'


ast            : to_decimal(3, 2)(to_variant(1.23))
raw expr       : to_decimal(3, 2)(to_variant(1.23))
checked expr   : to_decimal<Variant>(3, 2)(to_variant<T0=Decimal(3, 2)><T0>(1.23_d64(3,2)))
optimized expr : 1.23_d64(3,2)
output type    : Decimal(3, 2) NULL
output domain  : {1.23..=1.23}
output         : 1.23


ast            : to_decimal(2, 1)(to_variant(1.23))
raw expr       : to_decimal(2, 1)(to_variant(1.23))
checked expr   : to_decimal<Variant>(2, 1)(to_variant<T0=Decimal(3, 2)><T0>(1.23_d64(3,2)))
optimized expr : 1.2_d64(2,1)
output type    : Decimal(2, 1) NULL
output domain  : {1.2..=1.2}
output         : 1.2


error: 
  --> SQL:1:1
  |
1 | to_decimal(1, 1)(to_variant(1.23))
  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Decimal overflow while evaluating function `to_decimal(1, 1)('1.23')` in expr `to_decimal(1, 1)(to_variant(1.23))`



ast            : to_decimal(76, 1)(to_variant(1.23))
raw expr       : to_decimal(76, 1)(to_variant(1.23))
checked expr   : to_decimal<Variant>(76, 1)(to_variant<T0=Decimal(3, 2)><T0>(1.23_d64(3,2)))
optimized expr : 1.2_d256(76,1)
output type    : Decimal(76, 1) NULL
output domain  : {1.2..=1.2}
output         : 1.2


ast            : to_decimal(4, 3)(to_variant(1.23))
raw expr       : to_decimal(4, 3)(to_variant(1.23))
checked expr   : to_decimal<Variant>(4, 3)(to_variant<T0=Decimal(3, 2)><T0>(1.23_d64(3,2)))
optimized expr : 1.230_d64(4,3)
output type    : Decimal(4, 3) NULL
output domain  : {1.230..=1.230}
output         : 1.230


error: 
  --> SQL:1:1
  |
1 | to_decimal(3, 3)(to_variant(1.23))
  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Decimal overflow while evaluating function `to_decimal(3, 3)('1.23')` in expr `to_decimal(3, 3)(to_variant(1.23))`



ast            : to_decimal(38, 2)(to_variant(100000000000000000000000000000000000.01))
raw expr       : to_decimal(38, 2)(to_variant(100000000000000000000000000000000000.01))
checked expr   : to_decimal<Variant>(38, 2)(to_variant<T0=Decimal(38, 2)><T0>(100000000000000000000000000000000000.01_d128(38,2)))
optimized expr : 100000000000000000000000000000000000.01_d128(38,2)
output type    : Decimal(38, 2) NULL
output domain  : {100000000000000000000000000000000000.01..=100000000000000000000000000000000000.01}
output         : 100000000000000000000000000000000000.01


ast            : to_decimal(39, 2)(to_variant(1000000000000000000000000000000000000.01))
raw expr       : to_decimal(39, 2)(to_variant(1000000000000000000000000000000000000.01))
checked expr   : to_decimal<Variant>(39, 2)(to_variant<T0=Decimal(39, 2)><T0>(1000000000000000000000000000000000000.01_d256(39,2)))
optimized expr : 1000000000000000000000000000000000000.01_d256(39,2)
output type    : Decimal(39, 2) NULL
output domain  : {1000000000000000000000000000000000000.01..=1000000000000000000000000000000000000.01}
output         : 1000000000000000000000000000000000000.01


ast            : to_decimal(38, 1)(to_variant(1000000000000000000000000000000000000.01))
raw expr       : to_decimal(38, 1)(to_variant(1000000000000000000000000000000000000.01))
checked expr   : to_decimal<Variant>(38, 1)(to_variant<T0=Decimal(39, 2)><T0>(1000000000000000000000000000000000000.01_d256(39,2)))
optimized expr : 1000000000000000000000000000000000000.0_d128(38,1)
output type    : Decimal(38, 1) NULL
output domain  : {1000000000000000000000000000000000000.0..=1000000000000000000000000000000000000.0}
output         : 1000000000000000000000000000000000000.0


error: 
  --> SQL:1:1
  |
1 | to_decimal(38, 3)(to_variant(1000000000000000000000000000000000000.01))
  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Decimal overflow while evaluating function `to_decimal(38, 3)('1000000000000000000000000000000000000.01')` in expr `to_decimal(38, 3)(to_variant(1000000000000000000000000000000000000.01))`



ast            : to_decimal(39, 1)(to_variant(1000000000000000000000000000000000000.01))
raw expr       : to_decimal(39, 1)(to_variant(1000000000000000000000000000000000000.01))
checked expr   : to_decimal<Variant>(39, 1)(to_variant<T0=Decimal(39, 2)><T0>(1000000000000000000000000000000000000.01_d256(39,2)))
optimized expr : 1000000000000000000000000000000000000.0_d256(39,1)
output type    : Decimal(39, 1) NULL
output domain  : {1000000000000000000000000000000000000.0..=1000000000000000000000000000000000000.0}
output         : 1000000000000000000000000000000000000.0


error: 
  --> SQL:1:1
  |
1 | to_decimal(39, 3)(to_variant(1000000000000000000000000000000000000.01))
  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Decimal overflow while evaluating function `to_decimal(39, 3)('1000000000000000000000000000000000000.01')` in expr `to_decimal(39, 3)(to_variant(1000000000000000000000000000000000000.01))`



ast            : to_decimal(3, 2)(parse_json('null'))
raw expr       : to_decimal(3, 2)(parse_json('null'))
checked expr   : to_decimal<Variant>(3, 2)(CAST<String>("null" AS Variant))
optimized expr : NULL
output type    : Decimal(3, 2) NULL
output domain  : {NULL}
output         : NULL


ast            : to_decimal(3, 2)(parse_json('"3.14"'))
raw expr       : to_decimal(3, 2)(parse_json('"3.14"'))
checked expr   : to_decimal<Variant>(3, 2)(CAST<String>("\"3.14\"" AS Variant))
optimized expr : 3.14_d64(3,2)
output type    : Decimal(3, 2) NULL
output domain  : {3.14..=3.14}
output         : 3.14


ast            : to_decimal(2, 1)(parse_json('true'))
raw expr       : to_decimal(2, 1)(parse_json('true'))
checked expr   : to_decimal<Variant>(2, 1)(CAST<String>("true" AS Variant))
optimized expr : 1.0_d64(2,1)
output type    : Decimal(2, 1) NULL
output domain  : {1.0..=1.0}
output         : 1.0


ast            : to_boolean(parse_json(s))
raw expr       : to_boolean(parse_json(s::String NULL))
checked expr   : CAST<Variant NULL>(CAST<String NULL>(s AS Variant NULL) AS Boolean NULL)
evaluation:
+--------+----------------------------+--------------+
|        | s                          | Output       |
+--------+----------------------------+--------------+
| Type   | String NULL                | Boolean NULL |
| Domain | {"true"..="true"} ∪ {NULL} | Unknown      |
| Row 0  | 'true'                     | true         |
| Row 1  | NULL                       | NULL         |
| Row 2  | 'true'                     | true         |
+--------+----------------------------+--------------+
evaluation (internal):
+--------+-------------------------------------------------------------------------------+
| Column | Data                                                                          |
+--------+-------------------------------------------------------------------------------+
| s      | NullableColumn { column: StringColumn[true, , true], validity: [0b_____101] } |
| Output | NullableColumn { column: Boolean([0b_____101]), validity: [0b_____101] }      |
+--------+-------------------------------------------------------------------------------+


ast            : to_int64(parse_json(s))
raw expr       : to_int64(parse_json(s::String NULL))
checked expr   : CAST<Variant NULL>(CAST<String NULL>(s AS Variant NULL) AS Int64 NULL)
evaluation:
+--------+------------------------+------------+
|        | s                      | Output     |
+--------+------------------------+------------+
| Type   | String NULL            | Int64 NULL |
| Domain | {"-10"..="1"} ∪ {NULL} | Unknown    |
| Row 0  | '1'                    | 1          |
| Row 1  | NULL                   | NULL       |
| Row 2  | '-10'                  | -10        |
+--------+------------------------+------------+
evaluation (internal):
+--------+---------------------------------------------------------------------------+
| Column | Data                                                                      |
+--------+---------------------------------------------------------------------------+
| s      | NullableColumn { column: StringColumn[1, , -10], validity: [0b_____101] } |
| Output | NullableColumn { column: Int64([1, 0, -10]), validity: [0b_____101] }     |
+--------+---------------------------------------------------------------------------+


ast            : to_uint64(parse_json(s))
raw expr       : to_uint64(parse_json(s::String NULL))
checked expr   : CAST<Variant NULL>(CAST<String NULL>(s AS Variant NULL) AS UInt64 NULL)
evaluation:
+--------+-----------------------+-------------+
|        | s                     | Output      |
+--------+-----------------------+-------------+
| Type   | String NULL           | UInt64 NULL |
| Domain | {"1"..="20"} ∪ {NULL} | Unknown     |
| Row 0  | '1'                   | 1           |
| Row 1  | NULL                  | NULL        |
| Row 2  | '20'                  | 20          |
+--------+-----------------------+-------------+
evaluation (internal):
+--------+--------------------------------------------------------------------------+
| Column | Data                                                                     |
+--------+--------------------------------------------------------------------------+
| s      | NullableColumn { column: StringColumn[1, , 20], validity: [0b_____101] } |
| Output | NullableColumn { column: UInt64([1, 0, 20]), validity: [0b_____101] }    |
+--------+--------------------------------------------------------------------------+


ast            : to_float64(parse_json(s))
raw expr       : to_float64(parse_json(s::String NULL))
checked expr   : CAST<Variant NULL>(CAST<String NULL>(s AS Variant NULL) AS Float64 NULL)
evaluation:
+--------+----------------------------+--------------+
|        | s                          | Output       |
+--------+----------------------------+--------------+
| Type   | String NULL                | Float64 NULL |
| Domain | {"1.2"..="100.2"} ∪ {NULL} | Unknown      |
| Row 0  | '1.2'                      | 1.2          |
| Row 1  | NULL                       | NULL         |
| Row 2  | '100.2'                    | 100.2        |
+--------+----------------------------+--------------+
evaluation (internal):
+--------+-------------------------------------------------------------------------------+
| Column | Data                                                                          |
+--------+-------------------------------------------------------------------------------+
| s      | NullableColumn { column: StringColumn[1.2, , 100.2], validity: [0b_____101] } |
| Output | NullableColumn { column: Float64([1.2, 0, 100.2]), validity: [0b_____101] }   |
+--------+-------------------------------------------------------------------------------+


ast            : to_date(parse_json(s))
raw expr       : to_date(parse_json(s::String NULL))
checked expr   : CAST<Variant NULL>(CAST<String NULL>(s AS Variant NULL) AS Date NULL)
evaluation:
+--------+------------------------------------------------+--------------+
|        | s                                              | Output       |
+--------+------------------------------------------------+--------------+
| Type   | String NULL                                    | Date NULL    |
| Domain | {"\"2020-01-01\""..="\"2023-10-01\""} ∪ {NULL} | Unknown      |
| Row 0  | '"2020-01-01"'                                 | '2020-01-01' |
| Row 1  | NULL                                           | NULL         |
| Row 2  | '"2023-10-01"'                                 | '2023-10-01' |
+--------+------------------------------------------------+--------------+
evaluation (internal):
+--------+-----------------------------------------------------------------------------------------------+
| Column | Data                                                                                          |
+--------+-----------------------------------------------------------------------------------------------+
| s      | NullableColumn { column: StringColumn["2020-01-01", , "2023-10-01"], validity: [0b_____101] } |
| Output | NullableColumn { column: Date([18262, 0, 19631]), validity: [0b_____101] }                    |
+--------+-----------------------------------------------------------------------------------------------+


ast            : to_timestamp(parse_json(s))
raw expr       : to_timestamp(parse_json(s::String NULL))
checked expr   : CAST<Variant NULL>(CAST<String NULL>(s AS Variant NULL) AS Timestamp NULL)
evaluation:
+--------+------------------------------------------------------------------+------------------------------+
|        | s                                                                | Output                       |
+--------+------------------------------------------------------------------+------------------------------+
| Type   | String NULL                                                      | Timestamp NULL               |
| Domain | {"\"2020-01-01 00:00:00\""..="\"2023-10-01 10:11:12\""} ∪ {NULL} | Unknown                      |
| Row 0  | '"2020-01-01 00:00:00"'                                          | '2020-01-01 00:00:00.000000' |
| Row 1  | NULL                                                             | NULL                         |
| Row 2  | '"2023-10-01 10:11:12"'                                          | '2023-10-01 10:11:12.000000' |
+--------+------------------------------------------------------------------+------------------------------+
evaluation (internal):
+--------+-----------------------------------------------------------------------------------------------------------------+
| Column | Data                                                                                                            |
+--------+-----------------------------------------------------------------------------------------------------------------+
| s      | NullableColumn { column: StringColumn["2020-01-01 00:00:00", , "2023-10-01 10:11:12"], validity: [0b_____101] } |
| Output | NullableColumn { column: Timestamp([1577836800000000, 0, 1696155072000000]), validity: [0b_____101] }           |
+--------+-----------------------------------------------------------------------------------------------------------------+


ast            : to_string(parse_json(s))
raw expr       : to_string(parse_json(s::String NULL))
checked expr   : CAST<Variant NULL>(CAST<String NULL>(s AS Variant NULL) AS String NULL)
evaluation:
+--------+------------------------------+-------------+
|        | s                            | Output      |
+--------+------------------------------+-------------+
| Type   | String NULL                  | String NULL |
| Domain | {"\"abc\""..="123"} ∪ {NULL} | Unknown     |
| Row 0  | '"abc"'                      | 'abc'       |
| Row 1  | NULL                         | NULL        |
| Row 2  | '123'                        | '123'       |
+--------+------------------------------+-------------+
evaluation (internal):
+--------+-------------------------------------------------------------------------------+
| Column | Data                                                                          |
+--------+-------------------------------------------------------------------------------+
| s      | NullableColumn { column: StringColumn["abc", , 123], validity: [0b_____101] } |
| Output | NullableColumn { column: StringColumn[abc, , 123], validity: [0b_____101] }   |
+--------+-------------------------------------------------------------------------------+


ast            : try_to_boolean(parse_json('null'))
raw expr       : try_to_boolean(parse_json('null'))
checked expr   : TRY_CAST<Variant>(CAST<String>("null" AS Variant) AS Boolean NULL)
optimized expr : NULL
output type    : Boolean NULL
output domain  : {NULL}
output         : NULL


ast            : try_to_boolean(parse_json('true'))
raw expr       : try_to_boolean(parse_json('true'))
checked expr   : TRY_CAST<Variant>(CAST<String>("true" AS Variant) AS Boolean NULL)
optimized expr : true
output type    : Boolean NULL
output domain  : {TRUE}
output         : true


ast            : try_to_boolean(parse_json('123'))
raw expr       : try_to_boolean(parse_json('123'))
checked expr   : TRY_CAST<Variant>(CAST<String>("123" AS Variant) AS Boolean NULL)
optimized expr : NULL
output type    : Boolean NULL
output domain  : {NULL}
output         : NULL


ast            : try_to_boolean(parse_json('"abc"'))
raw expr       : try_to_boolean(parse_json('"abc"'))
checked expr   : TRY_CAST<Variant>(CAST<String>("\"abc\"" AS Variant) AS Boolean NULL)
optimized expr : NULL
output type    : Boolean NULL
output domain  : {NULL}
output         : NULL


ast            : try_to_uint64(parse_json('null'))
raw expr       : try_to_uint64(parse_json('null'))
checked expr   : TRY_CAST<Variant>(CAST<String>("null" AS Variant) AS UInt64 NULL)
optimized expr : NULL
output type    : UInt64 NULL
output domain  : {NULL}
output         : NULL


ast            : try_to_uint64(parse_json('123'))
raw expr       : try_to_uint64(parse_json('123'))
checked expr   : TRY_CAST<Variant>(CAST<String>("123" AS Variant) AS UInt64 NULL)
optimized expr : 123_u64
output type    : UInt64 NULL
output domain  : {123..=123}
output         : 123


ast            : try_to_uint64(parse_json('-123'))
raw expr       : try_to_uint64(parse_json('-123'))
checked expr   : TRY_CAST<Variant>(CAST<String>("-123" AS Variant) AS UInt64 NULL)
optimized expr : NULL
output type    : UInt64 NULL
output domain  : {NULL}
output         : NULL


ast            : try_to_uint64(parse_json('"abc"'))
raw expr       : try_to_uint64(parse_json('"abc"'))
checked expr   : TRY_CAST<Variant>(CAST<String>("\"abc\"" AS Variant) AS UInt64 NULL)
optimized expr : NULL
output type    : UInt64 NULL
output domain  : {NULL}
output         : NULL


ast            : try_to_int64(parse_json('123'))
raw expr       : try_to_int64(parse_json('123'))
checked expr   : TRY_CAST<Variant>(CAST<String>("123" AS Variant) AS Int64 NULL)
optimized expr : 123_i64
output type    : Int64 NULL
output domain  : {123..=123}
output         : 123


ast            : try_to_int64(parse_json('-123'))
raw expr       : try_to_int64(parse_json('-123'))
checked expr   : TRY_CAST<Variant>(CAST<String>("-123" AS Variant) AS Int64 NULL)
optimized expr : -123_i64
output type    : Int64 NULL
output domain  : {-123..=-123}
output         : -123


ast            : try_to_int64(parse_json('"abc"'))
raw expr       : try_to_int64(parse_json('"abc"'))
checked expr   : TRY_CAST<Variant>(CAST<String>("\"abc\"" AS Variant) AS Int64 NULL)
optimized expr : NULL
output type    : Int64 NULL
output domain  : {NULL}
output         : NULL


ast            : try_to_float64(parse_json('12.34'))
raw expr       : try_to_float64(parse_json('12.34'))
checked expr   : TRY_CAST<Variant>(CAST<String>("12.34" AS Variant) AS Float64 NULL)
optimized expr : 12.34_f64
output type    : Float64 NULL
output domain  : {12.34..=12.34}
output         : 12.34


ast            : try_to_float64(parse_json('"abc"'))
raw expr       : try_to_float64(parse_json('"abc"'))
checked expr   : TRY_CAST<Variant>(CAST<String>("\"abc\"" AS Variant) AS Float64 NULL)
optimized expr : NULL
output type    : Float64 NULL
output domain  : {NULL}
output         : NULL


ast            : try_to_date(parse_json('null'))
raw expr       : try_to_date(parse_json('null'))
checked expr   : TRY_CAST<Variant>(CAST<String>("null" AS Variant) AS Date NULL)
optimized expr : NULL
output type    : Date NULL
output domain  : {NULL}
output         : NULL


ast            : try_to_date(parse_json('"2023-01-01"'))
raw expr       : try_to_date(parse_json('"2023-01-01"'))
checked expr   : TRY_CAST<Variant>(CAST<String>("\"2023-01-01\"" AS Variant) AS Date NULL)
optimized expr : 19358
output type    : Date NULL
output domain  : {19358..=19358}
output         : '2023-01-01'


ast            : try_to_date(parse_json('"abc"'))
raw expr       : try_to_date(parse_json('"abc"'))
checked expr   : TRY_CAST<Variant>(CAST<String>("\"abc\"" AS Variant) AS Date NULL)
optimized expr : NULL
output type    : Date NULL
output domain  : {NULL}
output         : NULL


ast            : try_to_timestamp(parse_json('null'))
raw expr       : try_to_timestamp(parse_json('null'))
checked expr   : TRY_CAST<Variant>(CAST<String>("null" AS Variant) AS Timestamp NULL)
optimized expr : NULL
output type    : Timestamp NULL
output domain  : {NULL}
output         : NULL


ast            : try_to_timestamp(parse_json('"2023-01-01 00:00:00"'))
raw expr       : try_to_timestamp(parse_json('"2023-01-01 00:00:00"'))
checked expr   : TRY_CAST<Variant>(CAST<String>("\"2023-01-01 00:00:00\"" AS Variant) AS Timestamp NULL)
optimized expr : 1672531200000000
output type    : Timestamp NULL
output domain  : {1672531200000000..=1672531200000000}
output         : '2023-01-01 00:00:00.000000'


ast            : try_to_timestamp(parse_json('"abc"'))
raw expr       : try_to_timestamp(parse_json('"abc"'))
checked expr   : TRY_CAST<Variant>(CAST<String>("\"abc\"" AS Variant) AS Timestamp NULL)
optimized expr : NULL
output type    : Timestamp NULL
output domain  : {NULL}
output         : NULL


ast            : try_to_string(parse_json('null'))
raw expr       : try_to_string(parse_json('null'))
checked expr   : TRY_CAST<Variant>(CAST<String>("null" AS Variant) AS String NULL)
optimized expr : NULL
output type    : String NULL
output domain  : {NULL}
output         : NULL


ast            : try_to_string(parse_json('12.34'))
raw expr       : try_to_string(parse_json('12.34'))
checked expr   : TRY_CAST<Variant>(CAST<String>("12.34" AS Variant) AS String NULL)
optimized expr : "12.34"
output type    : String NULL
output domain  : {"12.34"..="12.34"}
output         : '12.34'


ast            : try_to_string(parse_json('"abc"'))
raw expr       : try_to_string(parse_json('"abc"'))
checked expr   : TRY_CAST<Variant>(CAST<String>("\"abc\"" AS Variant) AS String NULL)
optimized expr : "abc"
output type    : String NULL
output domain  : {"abc"..="abc"}
output         : 'abc'


ast            : try_to_boolean(parse_json(s))
raw expr       : try_to_boolean(parse_json(s::String NULL))
checked expr   : TRY_CAST<Variant NULL>(CAST<String NULL>(s AS Variant NULL) AS Boolean NULL)
evaluation:
+--------+--------------------------------------+--------------+
|        | s                                    | Output       |
+--------+--------------------------------------+--------------+
| Type   | String NULL                          | Boolean NULL |
| Domain | {"\"2020-01-01\""..="true"} ∪ {NULL} | Unknown      |
| Row 0  | 'true'                               | true         |
| Row 1  | '123'                                | NULL         |
| Row 2  | '-100'                               | NULL         |
| Row 3  | '12.34'                              | NULL         |
| Row 4  | NULL                                 | NULL         |
| Row 5  | '"2020-01-01"'                       | NULL         |
| Row 6  | '"2021-01-01 20:00:00"'              | NULL         |
| Row 7  | '"abc"'                              | NULL         |
+--------+--------------------------------------+--------------+
evaluation (internal):
+--------+---------------------------------------------------------------------------------------------------------------------------------------+
| Column | Data                                                                                                                                  |
+--------+---------------------------------------------------------------------------------------------------------------------------------------+
| s      | NullableColumn { column: StringColumn[true, 123, -100, 12.34, , "2020-01-01", "2021-01-01 20:00:00", "abc"], validity: [0b11101111] } |
| Output | NullableColumn { column: Boolean([0b00000001]), validity: [0b00000001] }                                                              |
+--------+---------------------------------------------------------------------------------------------------------------------------------------+


ast            : try_to_int64(parse_json(s))
raw expr       : try_to_int64(parse_json(s::String NULL))
checked expr   : TRY_CAST<Variant NULL>(CAST<String NULL>(s AS Variant NULL) AS Int64 NULL)
evaluation:
+--------+--------------------------------------+------------+
|        | s                                    | Output     |
+--------+--------------------------------------+------------+
| Type   | String NULL                          | Int64 NULL |
| Domain | {"\"2020-01-01\""..="true"} ∪ {NULL} | Unknown    |
| Row 0  | 'true'                               | 1          |
| Row 1  | '123'                                | 123        |
| Row 2  | '-100'                               | -100       |
| Row 3  | '12.34'                              | NULL       |
| Row 4  | NULL                                 | NULL       |
| Row 5  | '"2020-01-01"'                       | NULL       |
| Row 6  | '"2021-01-01 20:00:00"'              | NULL       |
| Row 7  | '"abc"'                              | NULL       |
+--------+--------------------------------------+------------+
evaluation (internal):
+--------+---------------------------------------------------------------------------------------------------------------------------------------+
| Column | Data                                                                                                                                  |
+--------+---------------------------------------------------------------------------------------------------------------------------------------+
| s      | NullableColumn { column: StringColumn[true, 123, -100, 12.34, , "2020-01-01", "2021-01-01 20:00:00", "abc"], validity: [0b11101111] } |
| Output | NullableColumn { column: Int64([1, 123, -100, 0, 0, 0, 0, 0]), validity: [0b00000111] }                                               |
+--------+---------------------------------------------------------------------------------------------------------------------------------------+


ast            : try_to_uint64(parse_json(s))
raw expr       : try_to_uint64(parse_json(s::String NULL))
checked expr   : TRY_CAST<Variant NULL>(CAST<String NULL>(s AS Variant NULL) AS UInt64 NULL)
evaluation:
+--------+--------------------------------------+-------------+
|        | s                                    | Output      |
+--------+--------------------------------------+-------------+
| Type   | String NULL                          | UInt64 NULL |
| Domain | {"\"2020-01-01\""..="true"} ∪ {NULL} | Unknown     |
| Row 0  | 'true'                               | 1           |
| Row 1  | '123'                                | 123         |
| Row 2  | '-100'                               | NULL        |
| Row 3  | '12.34'                              | NULL        |
| Row 4  | NULL                                 | NULL        |
| Row 5  | '"2020-01-01"'                       | NULL        |
| Row 6  | '"2021-01-01 20:00:00"'              | NULL        |
| Row 7  | '"abc"'                              | NULL        |
+--------+--------------------------------------+-------------+
evaluation (internal):
+--------+---------------------------------------------------------------------------------------------------------------------------------------+
| Column | Data                                                                                                                                  |
+--------+---------------------------------------------------------------------------------------------------------------------------------------+
| s      | NullableColumn { column: StringColumn[true, 123, -100, 12.34, , "2020-01-01", "2021-01-01 20:00:00", "abc"], validity: [0b11101111] } |
| Output | NullableColumn { column: UInt64([1, 123, 0, 0, 0, 0, 0, 0]), validity: [0b00000011] }                                                 |
+--------+---------------------------------------------------------------------------------------------------------------------------------------+


ast            : try_to_float64(parse_json(s))
raw expr       : try_to_float64(parse_json(s::String NULL))
checked expr   : TRY_CAST<Variant NULL>(CAST<String NULL>(s AS Variant NULL) AS Float64 NULL)
evaluation:
+--------+--------------------------------------+--------------+
|        | s                                    | Output       |
+--------+--------------------------------------+--------------+
| Type   | String NULL                          | Float64 NULL |
| Domain | {"\"2020-01-01\""..="true"} ∪ {NULL} | Unknown      |
| Row 0  | 'true'                               | 1            |
| Row 1  | '123'                                | 123          |
| Row 2  | '-100'                               | -100         |
| Row 3  | '12.34'                              | 12.34        |
| Row 4  | NULL                                 | NULL         |
| Row 5  | '"2020-01-01"'                       | NULL         |
| Row 6  | '"2021-01-01 20:00:00"'              | NULL         |
| Row 7  | '"abc"'                              | NULL         |
+--------+--------------------------------------+--------------+
evaluation (internal):
+--------+---------------------------------------------------------------------------------------------------------------------------------------+
| Column | Data                                                                                                                                  |
+--------+---------------------------------------------------------------------------------------------------------------------------------------+
| s      | NullableColumn { column: StringColumn[true, 123, -100, 12.34, , "2020-01-01", "2021-01-01 20:00:00", "abc"], validity: [0b11101111] } |
| Output | NullableColumn { column: Float64([1, 123, -100, 12.34, 0, 0, 0, 0]), validity: [0b00001111] }                                         |
+--------+---------------------------------------------------------------------------------------------------------------------------------------+


ast            : try_to_date(parse_json(s))
raw expr       : try_to_date(parse_json(s::String NULL))
checked expr   : TRY_CAST<Variant NULL>(CAST<String NULL>(s AS Variant NULL) AS Date NULL)
evaluation:
+--------+--------------------------------------+--------------+
|        | s                                    | Output       |
+--------+--------------------------------------+--------------+
| Type   | String NULL                          | Date NULL    |
| Domain | {"\"2020-01-01\""..="true"} ∪ {NULL} | Unknown      |
| Row 0  | 'true'                               | NULL         |
| Row 1  | '123'                                | NULL         |
| Row 2  | '-100'                               | NULL         |
| Row 3  | '12.34'                              | NULL         |
| Row 4  | NULL                                 | NULL         |
| Row 5  | '"2020-01-01"'                       | '2020-01-01' |
| Row 6  | '"2021-01-01 20:00:00"'              | '2021-01-01' |
| Row 7  | '"abc"'                              | NULL         |
+--------+--------------------------------------+--------------+
evaluation (internal):
+--------+---------------------------------------------------------------------------------------------------------------------------------------+
| Column | Data                                                                                                                                  |
+--------+---------------------------------------------------------------------------------------------------------------------------------------+
| s      | NullableColumn { column: StringColumn[true, 123, -100, 12.34, , "2020-01-01", "2021-01-01 20:00:00", "abc"], validity: [0b11101111] } |
| Output | NullableColumn { column: Date([0, 0, 0, 0, 0, 18262, 18628, 0]), validity: [0b01100000] }                                             |
+--------+---------------------------------------------------------------------------------------------------------------------------------------+


ast            : try_to_timestamp(parse_json(s))
raw expr       : try_to_timestamp(parse_json(s::String NULL))
checked expr   : TRY_CAST<Variant NULL>(CAST<String NULL>(s AS Variant NULL) AS Timestamp NULL)
evaluation:
+--------+--------------------------------------+------------------------------+
|        | s                                    | Output                       |
+--------+--------------------------------------+------------------------------+
| Type   | String NULL                          | Timestamp NULL               |
| Domain | {"\"2020-01-01\""..="true"} ∪ {NULL} | Unknown                      |
| Row 0  | 'true'                               | NULL                         |
| Row 1  | '123'                                | NULL                         |
| Row 2  | '-100'                               | NULL                         |
| Row 3  | '12.34'                              | NULL                         |
| Row 4  | NULL                                 | NULL                         |
| Row 5  | '"2020-01-01"'                       | '2020-01-01 00:00:00.000000' |
| Row 6  | '"2021-01-01 20:00:00"'              | '2021-01-01 20:00:00.000000' |
| Row 7  | '"abc"'                              | NULL                         |
+--------+--------------------------------------+------------------------------+
evaluation (internal):
+--------+---------------------------------------------------------------------------------------------------------------------------------------+
| Column | Data                                                                                                                                  |
+--------+---------------------------------------------------------------------------------------------------------------------------------------+
| s      | NullableColumn { column: StringColumn[true, 123, -100, 12.34, , "2020-01-01", "2021-01-01 20:00:00", "abc"], validity: [0b11101111] } |
| Output | NullableColumn { column: Timestamp([0, 0, 0, 0, 0, 1577836800000000, 1609531200000000, 0]), validity: [0b01100000] }                  |
+--------+---------------------------------------------------------------------------------------------------------------------------------------+


ast            : try_to_string(parse_json(s))
raw expr       : try_to_string(parse_json(s::String NULL))
checked expr   : TRY_CAST<Variant NULL>(CAST<String NULL>(s AS Variant NULL) AS String NULL)
evaluation:
+--------+--------------------------------------+-----------------------+
|        | s                                    | Output                |
+--------+--------------------------------------+-----------------------+
| Type   | String NULL                          | String NULL           |
| Domain | {"\"2020-01-01\""..="true"} ∪ {NULL} | Unknown               |
| Row 0  | 'true'                               | 'true'                |
| Row 1  | '123'                                | '123'                 |
| Row 2  | '-100'                               | '-100'                |
| Row 3  | '12.34'                              | '12.34'               |
| Row 4  | NULL                                 | NULL                  |
| Row 5  | '"2020-01-01"'                       | '2020-01-01'          |
| Row 6  | '"2021-01-01 20:00:00"'              | '2021-01-01 20:00:00' |
| Row 7  | '"abc"'                              | 'abc'                 |
+--------+--------------------------------------+-----------------------+
evaluation (internal):
+--------+---------------------------------------------------------------------------------------------------------------------------------------+
| Column | Data                                                                                                                                  |
+--------+---------------------------------------------------------------------------------------------------------------------------------------+
| s      | NullableColumn { column: StringColumn[true, 123, -100, 12.34, , "2020-01-01", "2021-01-01 20:00:00", "abc"], validity: [0b11101111] } |
| Output | NullableColumn { column: StringColumn[true, 123, -100, 12.34, , 2020-01-01, 2021-01-01 20:00:00, abc], validity: [0b11101111] }       |
+--------+---------------------------------------------------------------------------------------------------------------------------------------+


ast            : object_construct()
raw expr       : object_construct()
checked expr   : object_construct<>()
optimized expr : 0x40000000
output type    : Variant
output domain  : Undefined
output         : '{}'


ast            : object_construct('a', true, 'b', 1, 'c', 'str', 'd', [1,2], 'e', {'k':'v'})
raw expr       : object_construct('a', true, 'b', 1, 'c', 'str', 'd', array(1, 2), 'e', map(array('k'), array('v')))
checked expr   : object_construct<T0=String, T1=Boolean, T2=String, T3=UInt8, T4=String, T5=String, T6=String, T7=Array(UInt8), T8=String, T9=Map(String, String)><T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>("a", true, "b", 1_u8, "c", "str", "d", array<T0=UInt8><T0, T0>(1_u8, 2_u8), "e", map<T0=String, T1=String><Array(T0), Array(T1)>(array<T0=String><T0>("k"), array<T0=String><T0>("v")))
optimized expr : 0x400000051000000110000001100000011000000110000001400000002000000210000003500000105000000e61626364655001737472800000022000000220000002500150024000000110000001100000016b76
output type    : Variant
output domain  : Undefined
output         : '{"a":true,"b":1,"c":"str","d":[1,2],"e":{"k":"v"}}'


ast            : object_construct('k1', 1, 'k2', null, 'k3', 2, null, 3)
raw expr       : object_construct('k1', 1, 'k2', NULL, 'k3', 2, NULL, 3)
checked expr   : object_construct<T0=String, T1=UInt8, T2=String, T3=NULL, T4=String, T5=UInt8, T6=NULL, T7=UInt8><T0, T1, T2, T3, T4, T5, T6, T7>("k1", 1_u8, "k2", NULL, "k3", 2_u8, NULL, 3_u8)
optimized expr : 0x40000002100000021000000220000002200000026b316b3350015002
output type    : Variant
output domain  : Undefined
output         : '{"k1":1,"k3":2}'


error: 
  --> SQL:1:1
  |
1 | object_construct('k1', 1, 'k1')
  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ The number of keys and values must be equal while evaluating function `object_construct('k1', 1, 'k1')` in expr `object_construct('k1', 1, 'k1')`



error: 
  --> SQL:1:1
  |
1 | object_construct('k1', 1, 'k1', 2)
  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Keys have to be unique while evaluating function `object_construct('k1', 1, 'k1', 2)` in expr `object_construct('k1', 1, 'k1', 2)`



error: 
  --> SQL:1:1
  |
1 | object_construct(1, 'k1', 2, 'k2')
  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Key must be a string value while evaluating function `object_construct(1, 'k1', 2, 'k2')` in expr `object_construct(1, 'k1', 2, 'k2')`



ast            : object_construct(k1, v1, k2, v2)
raw expr       : object_construct(k1::String NULL, v1::String NULL, k2::String NULL, v2::String NULL)
checked expr   : object_construct<T0=String NULL, T1=String NULL, T2=String NULL, T3=String NULL><T0, T1, T2, T3>(k1, v1, k2, v2)
evaluation:
+--------+------------------------+------------------------+------------------------+---------------+-------------------------+
|        | k1                     | v1                     | k2                     | v2            | Output                  |
+--------+------------------------+------------------------+------------------------+---------------+-------------------------+
| Type   | String NULL            | String NULL            | String NULL            | String NULL   | Variant                 |
| Domain | {"a1"..="d1"} ∪ {NULL} | {"j1"..="l1"} ∪ {NULL} | {"a2"..="d2"} ∪ {NULL} | {"j2"..="m2"} | Unknown                 |
| Row 0  | 'a1'                   | 'j1'                   | 'a2'                   | 'j2'          | '{"a1":"j1","a2":"j2"}' |
| Row 1  | 'b1'                   | 'k1'                   | NULL                   | 'k2'          | '{"b1":"k1"}'           |
| Row 2  | NULL                   | 'l1'                   | 'c2'                   | 'l2'          | '{"c2":"l2"}'           |
| Row 3  | 'd1'                   | NULL                   | 'd2'                   | 'm2'          | '{"d2":"m2"}'           |
+--------+------------------------+------------------------+------------------------+---------------+-------------------------+
evaluation (internal):
+--------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| Column | Data                                                                                                                                                                              |
+--------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| k1     | NullableColumn { column: StringColumn[a1, b1, , d1], validity: [0b____1011] }                                                                                                     |
| v1     | NullableColumn { column: StringColumn[j1, k1, l1, ], validity: [0b____0111] }                                                                                                     |
| k2     | NullableColumn { column: StringColumn[a2, , c2, d2], validity: [0b____1101] }                                                                                                     |
| v2     | NullableColumn { column: StringColumn[j2, k2, l2, m2], validity: [0b____1111] }                                                                                                   |
| Output | Variant([0x4000000210000002100000021000000210000002613161326a316a32, 0x40000001100000021000000262316b31, 0x40000001100000021000000263326c32, 0x40000001100000021000000264326d32]) |
+--------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+


ast            : try_object_construct()
raw expr       : try_object_construct()
checked expr   : try_object_construct<>()
optimized expr : 0x40000000
output type    : Variant NULL
output domain  : Undefined
output         : '{}'


ast            : try_object_construct('a', true, 'b', 1, 'c', 'str', 'd', [1,2], 'e', {'k':'v'})
raw expr       : try_object_construct('a', true, 'b', 1, 'c', 'str', 'd', array(1, 2), 'e', map(array('k'), array('v')))
checked expr   : try_object_construct<T0=String, T1=Boolean, T2=String, T3=UInt8, T4=String, T5=String, T6=String, T7=Array(UInt8), T8=String, T9=Map(String, String)><T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>("a", true, "b", 1_u8, "c", "str", "d", array<T0=UInt8><T0, T0>(1_u8, 2_u8), "e", map<T0=String, T1=String><Array(T0), Array(T1)>(array<T0=String><T0>("k"), array<T0=String><T0>("v")))
optimized expr : 0x400000051000000110000001100000011000000110000001400000002000000210000003500000105000000e61626364655001737472800000022000000220000002500150024000000110000001100000016b76
output type    : Variant NULL
output domain  : Undefined
output         : '{"a":true,"b":1,"c":"str","d":[1,2],"e":{"k":"v"}}'


ast            : try_object_construct('k1', 1, 'k2', null, 'k3', 2, null, 3)
raw expr       : try_object_construct('k1', 1, 'k2', NULL, 'k3', 2, NULL, 3)
checked expr   : try_object_construct<T0=String, T1=UInt8, T2=String, T3=NULL, T4=String, T5=UInt8, T6=NULL, T7=UInt8><T0, T1, T2, T3, T4, T5, T6, T7>("k1", 1_u8, "k2", NULL, "k3", 2_u8, NULL, 3_u8)
optimized expr : 0x40000002100000021000000220000002200000026b316b3350015002
output type    : Variant NULL
output domain  : Undefined
output         : '{"k1":1,"k3":2}'


ast            : try_object_construct('k1', 1, 'k1')
raw expr       : try_object_construct('k1', 1, 'k1')
checked expr   : try_object_construct<T0=String, T1=UInt8, T2=String><T0, T1, T2>("k1", 1_u8, "k1")
optimized expr : NULL
output type    : Variant NULL
output domain  : {NULL}
output         : NULL


ast            : try_object_construct('k1', 1, 'k1', 2)
raw expr       : try_object_construct('k1', 1, 'k1', 2)
checked expr   : try_object_construct<T0=String, T1=UInt8, T2=String, T3=UInt8><T0, T1, T2, T3>("k1", 1_u8, "k1", 2_u8)
optimized expr : NULL
output type    : Variant NULL
output domain  : {NULL}
output         : NULL


ast            : try_object_construct(1, 'k1', 2, 'k2')
raw expr       : try_object_construct(1, 'k1', 2, 'k2')
checked expr   : try_object_construct<T0=UInt8, T1=String, T2=UInt8, T3=String><T0, T1, T2, T3>(1_u8, "k1", 2_u8, "k2")
optimized expr : NULL
output type    : Variant NULL
output domain  : {NULL}
output         : NULL


ast            : try_object_construct(k1, v1, k2, v2)
raw expr       : try_object_construct(k1::String NULL, v1::String NULL, k2::String NULL, v2::String NULL)
checked expr   : try_object_construct<T0=String NULL, T1=String NULL, T2=String NULL, T3=String NULL><T0, T1, T2, T3>(k1, v1, k2, v2)
evaluation:
+--------+------------------------+------------------------+------------------------+---------------+-------------------------+
|        | k1                     | v1                     | k2                     | v2            | Output                  |
+--------+------------------------+------------------------+------------------------+---------------+-------------------------+
| Type   | String NULL            | String NULL            | String NULL            | String NULL   | Variant NULL            |
| Domain | {"a1"..="d1"} ∪ {NULL} | {"j1"..="l1"} ∪ {NULL} | {"a2"..="d2"} ∪ {NULL} | {"j2"..="m2"} | Undefined ∪ {NULL}      |
| Row 0  | 'a1'                   | 'j1'                   | 'a2'                   | 'j2'          | '{"a1":"j1","a2":"j2"}' |
| Row 1  | 'b1'                   | 'k1'                   | NULL                   | 'k2'          | '{"b1":"k1"}'           |
| Row 2  | NULL                   | 'l1'                   | 'c2'                   | 'l2'          | '{"c2":"l2"}'           |
| Row 3  | 'd1'                   | NULL                   | 'd2'                   | 'm2'          | '{"d2":"m2"}'           |
+--------+------------------------+------------------------+------------------------+---------------+-------------------------+
evaluation (internal):
+--------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| Column | Data                                                                                                                                                                                                                                 |
+--------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| k1     | NullableColumn { column: StringColumn[a1, b1, , d1], validity: [0b____1011] }                                                                                                                                                        |
| v1     | NullableColumn { column: StringColumn[j1, k1, l1, ], validity: [0b____0111] }                                                                                                                                                        |
| k2     | NullableColumn { column: StringColumn[a2, , c2, d2], validity: [0b____1101] }                                                                                                                                                        |
| v2     | NullableColumn { column: StringColumn[j2, k2, l2, m2], validity: [0b____1111] }                                                                                                                                                      |
| Output | NullableColumn { column: Variant([0x4000000210000002100000021000000210000002613161326a316a32, 0x40000001100000021000000262316b31, 0x40000001100000021000000263326c32, 0x40000001100000021000000264326d32]), validity: [0b____1111] } |
+--------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+


ast            : object_construct_keep_null()
raw expr       : object_construct_keep_null()
checked expr   : object_construct_keep_null<>()
optimized expr : 0x40000000
output type    : Variant
output domain  : Undefined
output         : '{}'


ast            : object_construct_keep_null('a', true, 'b', 1, 'c', 'str', 'd', [1,2], 'e', {'k':'v'})
raw expr       : object_construct_keep_null('a', true, 'b', 1, 'c', 'str', 'd', array(1, 2), 'e', map(array('k'), array('v')))
checked expr   : object_construct_keep_null<T0=String, T1=Boolean, T2=String, T3=UInt8, T4=String, T5=String, T6=String, T7=Array(UInt8), T8=String, T9=Map(String, String)><T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>("a", true, "b", 1_u8, "c", "str", "d", array<T0=UInt8><T0, T0>(1_u8, 2_u8), "e", map<T0=String, T1=String><Array(T0), Array(T1)>(array<T0=String><T0>("k"), array<T0=String><T0>("v")))
optimized expr : 0x400000051000000110000001100000011000000110000001400000002000000210000003500000105000000e61626364655001737472800000022000000220000002500150024000000110000001100000016b76
output type    : Variant
output domain  : Undefined
output         : '{"a":true,"b":1,"c":"str","d":[1,2],"e":{"k":"v"}}'


ast            : object_construct_keep_null('k1', 1, 'k2', null, 'k3', 2, null, 3)
raw expr       : object_construct_keep_null('k1', 1, 'k2', NULL, 'k3', 2, NULL, 3)
checked expr   : object_construct_keep_null<T0=String, T1=UInt8, T2=String, T3=NULL, T4=String, T5=UInt8, T6=NULL, T7=UInt8><T0, T1, T2, T3, T4, T5, T6, T7>("k1", 1_u8, "k2", NULL, "k3", 2_u8, NULL, 3_u8)
optimized expr : 0x400000031000000210000002100000022000000200000000200000026b316b326b3350015002
output type    : Variant
output domain  : Undefined
output         : '{"k1":1,"k2":null,"k3":2}'


error: 
  --> SQL:1:1
  |
1 | object_construct_keep_null('k1', 1, 'k1')
  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ The number of keys and values must be equal while evaluating function `object_construct_keep_null('k1', 1, 'k1')` in expr `object_construct_keep_null('k1', 1, 'k1')`



error: 
  --> SQL:1:1
  |
1 | object_construct_keep_null('k1', 1, 'k1', 2)
  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Keys have to be unique while evaluating function `object_construct_keep_null('k1', 1, 'k1', 2)` in expr `object_construct_keep_null('k1', 1, 'k1', 2)`



error: 
  --> SQL:1:1
  |
1 | object_construct_keep_null(1, 'k1', 2, 'k2')
  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Key must be a string value while evaluating function `object_construct_keep_null(1, 'k1', 2, 'k2')` in expr `object_construct_keep_null(1, 'k1', 2, 'k2')`



ast            : object_construct_keep_null(k1, v1, k2, v2)
raw expr       : object_construct_keep_null(k1::String NULL, v1::String NULL, k2::String NULL, v2::String NULL)
checked expr   : object_construct_keep_null<T0=String NULL, T1=String NULL, T2=String NULL, T3=String NULL><T0, T1, T2, T3>(k1, v1, k2, v2)
evaluation:
+--------+------------------------+------------------------+------------------------+---------------+-------------------------+
|        | k1                     | v1                     | k2                     | v2            | Output                  |
+--------+------------------------+------------------------+------------------------+---------------+-------------------------+
| Type   | String NULL            | String NULL            | String NULL            | String NULL   | Variant                 |
| Domain | {"a1"..="d1"} ∪ {NULL} | {"j1"..="l1"} ∪ {NULL} | {"a2"..="d2"} ∪ {NULL} | {"j2"..="m2"} | Unknown                 |
| Row 0  | 'a1'                   | 'j1'                   | 'a2'                   | 'j2'          | '{"a1":"j1","a2":"j2"}' |
| Row 1  | 'b1'                   | 'k1'                   | NULL                   | 'k2'          | '{"b1":"k1"}'           |
| Row 2  | NULL                   | 'l1'                   | 'c2'                   | 'l2'          | '{"c2":"l2"}'           |
| Row 3  | 'd1'                   | NULL                   | 'd2'                   | 'm2'          | '{"d1":null,"d2":"m2"}' |
+--------+------------------------+------------------------+------------------------+---------------+-------------------------+
evaluation (internal):
+--------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| Column | Data                                                                                                                                                                                                  |
+--------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| k1     | NullableColumn { column: StringColumn[a1, b1, , d1], validity: [0b____1011] }                                                                                                                         |
| v1     | NullableColumn { column: StringColumn[j1, k1, l1, ], validity: [0b____0111] }                                                                                                                         |
| k2     | NullableColumn { column: StringColumn[a2, , c2, d2], validity: [0b____1101] }                                                                                                                         |
| v2     | NullableColumn { column: StringColumn[j2, k2, l2, m2], validity: [0b____1111] }                                                                                                                       |
| Output | Variant([0x4000000210000002100000021000000210000002613161326a316a32, 0x40000001100000021000000262316b31, 0x40000001100000021000000263326c32, 0x4000000210000002100000020000000010000002643164326d32]) |
+--------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+


ast            : try_object_construct_keep_null()
raw expr       : try_object_construct_keep_null()
checked expr   : try_object_construct_keep_null<>()
optimized expr : 0x40000000
output type    : Variant NULL
output domain  : Undefined
output         : '{}'


ast            : try_object_construct_keep_null('a', true, 'b', 1, 'c', 'str', 'd', [1,2], 'e', {'k':'v'})
raw expr       : try_object_construct_keep_null('a', true, 'b', 1, 'c', 'str', 'd', array(1, 2), 'e', map(array('k'), array('v')))
checked expr   : try_object_construct_keep_null<T0=String, T1=Boolean, T2=String, T3=UInt8, T4=String, T5=String, T6=String, T7=Array(UInt8), T8=String, T9=Map(String, String)><T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>("a", true, "b", 1_u8, "c", "str", "d", array<T0=UInt8><T0, T0>(1_u8, 2_u8), "e", map<T0=String, T1=String><Array(T0), Array(T1)>(array<T0=String><T0>("k"), array<T0=String><T0>("v")))
optimized expr : 0x400000051000000110000001100000011000000110000001400000002000000210000003500000105000000e61626364655001737472800000022000000220000002500150024000000110000001100000016b76
output type    : Variant NULL
output domain  : Undefined
output         : '{"a":true,"b":1,"c":"str","d":[1,2],"e":{"k":"v"}}'


ast            : try_object_construct_keep_null('k1', 1, 'k2', null, 'k3', 2, null, 3)
raw expr       : try_object_construct_keep_null('k1', 1, 'k2', NULL, 'k3', 2, NULL, 3)
checked expr   : try_object_construct_keep_null<T0=String, T1=UInt8, T2=String, T3=NULL, T4=String, T5=UInt8, T6=NULL, T7=UInt8><T0, T1, T2, T3, T4, T5, T6, T7>("k1", 1_u8, "k2", NULL, "k3", 2_u8, NULL, 3_u8)
optimized expr : 0x400000031000000210000002100000022000000200000000200000026b316b326b3350015002
output type    : Variant NULL
output domain  : Undefined
output         : '{"k1":1,"k2":null,"k3":2}'


ast            : try_object_construct_keep_null('k1', 1, 'k1')
raw expr       : try_object_construct_keep_null('k1', 1, 'k1')
checked expr   : try_object_construct_keep_null<T0=String, T1=UInt8, T2=String><T0, T1, T2>("k1", 1_u8, "k1")
optimized expr : NULL
output type    : Variant NULL
output domain  : {NULL}
output         : NULL


ast            : try_object_construct_keep_null('k1', 1, 'k1', 2)
raw expr       : try_object_construct_keep_null('k1', 1, 'k1', 2)
checked expr   : try_object_construct_keep_null<T0=String, T1=UInt8, T2=String, T3=UInt8><T0, T1, T2, T3>("k1", 1_u8, "k1", 2_u8)
optimized expr : NULL
output type    : Variant NULL
output domain  : {NULL}
output         : NULL


ast            : try_object_construct_keep_null(1, 'k1', 2, 'k2')
raw expr       : try_object_construct_keep_null(1, 'k1', 2, 'k2')
checked expr   : try_object_construct_keep_null<T0=UInt8, T1=String, T2=UInt8, T3=String><T0, T1, T2, T3>(1_u8, "k1", 2_u8, "k2")
optimized expr : NULL
output type    : Variant NULL
output domain  : {NULL}
output         : NULL


ast            : try_object_construct_keep_null(k1, v1, k2, v2)
raw expr       : try_object_construct_keep_null(k1::String NULL, v1::String NULL, k2::String NULL, v2::String NULL)
checked expr   : try_object_construct_keep_null<T0=String NULL, T1=String NULL, T2=String NULL, T3=String NULL><T0, T1, T2, T3>(k1, v1, k2, v2)
evaluation:
+--------+------------------------+------------------------+------------------------+---------------+-------------------------+
|        | k1                     | v1                     | k2                     | v2            | Output                  |
+--------+------------------------+------------------------+------------------------+---------------+-------------------------+
| Type   | String NULL            | String NULL            | String NULL            | String NULL   | Variant NULL            |
| Domain | {"a1"..="d1"} ∪ {NULL} | {"j1"..="l1"} ∪ {NULL} | {"a2"..="d2"} ∪ {NULL} | {"j2"..="m2"} | Undefined ∪ {NULL}      |
| Row 0  | 'a1'                   | 'j1'                   | 'a2'                   | 'j2'          | '{"a1":"j1","a2":"j2"}' |
| Row 1  | 'b1'                   | 'k1'                   | NULL                   | 'k2'          | '{"b1":"k1"}'           |
| Row 2  | NULL                   | 'l1'                   | 'c2'                   | 'l2'          | '{"c2":"l2"}'           |
| Row 3  | 'd1'                   | NULL                   | 'd2'                   | 'm2'          | '{"d1":null,"d2":"m2"}' |
+--------+------------------------+------------------------+------------------------+---------------+-------------------------+
evaluation (internal):
+--------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| Column | Data                                                                                                                                                                                                                                                     |
+--------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| k1     | NullableColumn { column: StringColumn[a1, b1, , d1], validity: [0b____1011] }                                                                                                                                                                            |
| v1     | NullableColumn { column: StringColumn[j1, k1, l1, ], validity: [0b____0111] }                                                                                                                                                                            |
| k2     | NullableColumn { column: StringColumn[a2, , c2, d2], validity: [0b____1101] }                                                                                                                                                                            |
| v2     | NullableColumn { column: StringColumn[j2, k2, l2, m2], validity: [0b____1111] }                                                                                                                                                                          |
| Output | NullableColumn { column: Variant([0x4000000210000002100000021000000210000002613161326a316a32, 0x40000001100000021000000262316b31, 0x40000001100000021000000263326c32, 0x4000000210000002100000020000000010000002643164326d32]), validity: [0b____1111] } |
+--------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+


ast            : json_path_query_array(parse_json('[1, 2, 3, 4, 5, 6]'), '$[0, 2 to last, 4]')
raw expr       : json_path_query_array(parse_json('[1, 2, 3, 4, 5, 6]'), '$[0, 2 to last, 4]')
checked expr   : json_path_query_array<Variant, String>(CAST<String>("[1, 2, 3, 4, 5, 6]" AS Variant), "$[0, 2 to last, 4]")
optimized expr : 0x80000006200000022000000220000002200000022000000220000002500150035004500550065005
output type    : Variant NULL
output domain  : Undefined
output         : '[1,3,4,5,6,5]'


ast            : json_path_query_array(parse_json('[1, 2, 3, 4, 5, 6]'), '$[100]')
raw expr       : json_path_query_array(parse_json('[1, 2, 3, 4, 5, 6]'), '$[100]')
checked expr   : json_path_query_array<Variant, String>(CAST<String>("[1, 2, 3, 4, 5, 6]" AS Variant), "$[100]")
optimized expr : 0x80000000
output type    : Variant NULL
output domain  : Undefined
output         : '[]'


ast            : json_path_query_array(parse_json('[{"a": 1}, {"a": 2}]'), '$[*].a')
raw expr       : json_path_query_array(parse_json('[{"a": 1}, {"a": 2}]'), '$[*].a')
checked expr   : json_path_query_array<Variant, String>(CAST<String>("[{\"a\": 1}, {\"a\": 2}]" AS Variant), "$[*].a")
optimized expr : 0x80000002200000022000000250015002
output type    : Variant NULL
output domain  : Undefined
output         : '[1,2]'


ast            : json_path_query_array(parse_json('[{"a": 1}, {"a": 2}]'), '$[*].a ? (@ == 1)')
raw expr       : json_path_query_array(parse_json('[{"a": 1}, {"a": 2}]'), '$[*].a ? (@ == 1)')
checked expr   : json_path_query_array<Variant, String>(CAST<String>("[{\"a\": 1}, {\"a\": 2}]" AS Variant), "$[*].a ? (@ == 1)")
optimized expr : 0x80000001200000025001
output type    : Variant NULL
output domain  : Undefined
output         : '[1]'


ast            : json_path_query_array(parse_json('[{"a": 1}, {"a": 2}]'), '$[*].a ? (@ > 10)')
raw expr       : json_path_query_array(parse_json('[{"a": 1}, {"a": 2}]'), '$[*].a ? (@ > 10)')
checked expr   : json_path_query_array<Variant, String>(CAST<String>("[{\"a\": 1}, {\"a\": 2}]" AS Variant), "$[*].a ? (@ > 10)")
optimized expr : 0x80000000
output type    : Variant NULL
output domain  : Undefined
output         : '[]'


ast            : json_path_query_array(parse_json('[{"a": {"b":10}}, {"a": 2}]'), '$[*].a.b')
raw expr       : json_path_query_array(parse_json('[{"a": {"b":10}}, {"a": 2}]'), '$[*].a.b')
checked expr   : json_path_query_array<Variant, String>(CAST<String>("[{\"a\": {\"b\":10}}, {\"a\": 2}]" AS Variant), "$[*].a.b")
optimized expr : 0x8000000120000002500a
output type    : Variant NULL
output domain  : Undefined
output         : '[10]'


ast            : json_path_query_array(parse_json(s), p)
raw expr       : json_path_query_array(parse_json(s::String NULL), p::String)
checked expr   : json_path_query_array<Variant NULL, String NULL>(CAST<String NULL>(s AS Variant NULL), CAST<String>(p AS String NULL))
evaluation:
+--------+---------------------------------+------------------+--------------+
|        | s                               | p                | Output       |
+--------+---------------------------------+------------------+--------------+
| Type   | String NULL                     | String           | Variant NULL |
| Domain | {"[1,2,3,4]"..="true"} ∪ {NULL} | {"$.a"..="$[0]"} | Unknown      |
| Row 0  | 'true'                          | '$[0]'           | '[]'         |
| Row 1  | '[{"k":1},{"k":2}]'             | '$[*].k'         | '[1,2]'      |
| Row 2  | NULL                            | '$.a'            | NULL         |
| Row 3  | '[1,2,3,4]'                     | '$[0,2]'         | '[1,3]'      |
+--------+---------------------------------+------------------+--------------+
evaluation (internal):
+--------+------------------------------------------------------------------------------------------------------------------------------------------------------+
| Column | Data                                                                                                                                                 |
+--------+------------------------------------------------------------------------------------------------------------------------------------------------------+
| s      | NullableColumn { column: StringColumn[true, [{"k":1},{"k":2}], , [1,2,3,4]], validity: [0b____1011] }                                                |
| p      | StringColumn[$[0], $[*].k, $.a, $[0,2]]                                                                                                              |
| Output | NullableColumn { column: Variant([0x80000000, 0x80000002200000022000000250015002, 0x, 0x80000002200000022000000250015003]), validity: [0b____1011] } |
+--------+------------------------------------------------------------------------------------------------------------------------------------------------------+


ast            : json_path_query_first(parse_json('[1, 2, 3, 4, 5, 6]'), '$[0, 2 to last, 4]')
raw expr       : json_path_query_first(parse_json('[1, 2, 3, 4, 5, 6]'), '$[0, 2 to last, 4]')
checked expr   : json_path_query_first<Variant, String>(CAST<String>("[1, 2, 3, 4, 5, 6]" AS Variant), "$[0, 2 to last, 4]")
optimized expr : 0x20000000200000025001
output type    : Variant NULL
output domain  : Undefined
output         : '1'


ast            : json_path_query_first(parse_json('[1, 2, 3, 4, 5, 6]'), '$[100]')
raw expr       : json_path_query_first(parse_json('[1, 2, 3, 4, 5, 6]'), '$[100]')
checked expr   : json_path_query_first<Variant, String>(CAST<String>("[1, 2, 3, 4, 5, 6]" AS Variant), "$[100]")
optimized expr : NULL
output type    : Variant NULL
output domain  : {NULL}
output         : NULL


ast            : json_path_query_first(parse_json('[{"a": 1}, {"a": 2}]'), '$[*].a')
raw expr       : json_path_query_first(parse_json('[{"a": 1}, {"a": 2}]'), '$[*].a')
checked expr   : json_path_query_first<Variant, String>(CAST<String>("[{\"a\": 1}, {\"a\": 2}]" AS Variant), "$[*].a")
optimized expr : 0x20000000200000025001
output type    : Variant NULL
output domain  : Undefined
output         : '1'


ast            : json_path_query_first(parse_json('[{"a": 1}, {"a": 2}]'), '$[*].a ? (@ == 1)')
raw expr       : json_path_query_first(parse_json('[{"a": 1}, {"a": 2}]'), '$[*].a ? (@ == 1)')
checked expr   : json_path_query_first<Variant, String>(CAST<String>("[{\"a\": 1}, {\"a\": 2}]" AS Variant), "$[*].a ? (@ == 1)")
optimized expr : 0x20000000200000025001
output type    : Variant NULL
output domain  : Undefined
output         : '1'


ast            : json_path_query_first(parse_json('[{"a": 1}, {"a": 2}]'), '$[*].a ? (@ > 10)')
raw expr       : json_path_query_first(parse_json('[{"a": 1}, {"a": 2}]'), '$[*].a ? (@ > 10)')
checked expr   : json_path_query_first<Variant, String>(CAST<String>("[{\"a\": 1}, {\"a\": 2}]" AS Variant), "$[*].a ? (@ > 10)")
optimized expr : NULL
output type    : Variant NULL
output domain  : {NULL}
output         : NULL


ast            : json_path_query_first(parse_json('[{"a": {"b":10}}, {"a": 2}]'), '$[*].a.b')
raw expr       : json_path_query_first(parse_json('[{"a": {"b":10}}, {"a": 2}]'), '$[*].a.b')
checked expr   : json_path_query_first<Variant, String>(CAST<String>("[{\"a\": {\"b\":10}}, {\"a\": 2}]" AS Variant), "$[*].a.b")
optimized expr : 0x2000000020000002500a
output type    : Variant NULL
output domain  : Undefined
output         : '10'


ast            : json_path_query_first(parse_json(s), p)
raw expr       : json_path_query_first(parse_json(s::String NULL), p::String)
checked expr   : json_path_query_first<Variant NULL, String NULL>(CAST<String NULL>(s AS Variant NULL), CAST<String>(p AS String NULL))
evaluation:
+--------+---------------------------------+------------------+--------------+
|        | s                               | p                | Output       |
+--------+---------------------------------+------------------+--------------+
| Type   | String NULL                     | String           | Variant NULL |
| Domain | {"[1,2,3,4]"..="true"} ∪ {NULL} | {"$.a"..="$[0]"} | Unknown      |
| Row 0  | 'true'                          | '$[0]'           | NULL         |
| Row 1  | '[{"k":1},{"k":2}]'             | '$[*].k'         | '1'          |
| Row 2  | NULL                            | '$.a'            | NULL         |
| Row 3  | '[1,2,3,4]'                     | '$[0,2]'         | '1'          |
+--------+---------------------------------+------------------+--------------+
evaluation (internal):
+--------+----------------------------------------------------------------------------------------------------------------------+
| Column | Data                                                                                                                 |
+--------+----------------------------------------------------------------------------------------------------------------------+
| s      | NullableColumn { column: StringColumn[true, [{"k":1},{"k":2}], , [1,2,3,4]], validity: [0b____1011] }                |
| p      | StringColumn[$[0], $[*].k, $.a, $[0,2]]                                                                              |
| Output | NullableColumn { column: Variant([0x, 0x20000000200000025001, 0x, 0x20000000200000025001]), validity: [0b____1010] } |
+--------+----------------------------------------------------------------------------------------------------------------------+


ast            : json_to_string(parse_json('true'))
raw expr       : json_to_string(parse_json('true'))
checked expr   : CAST<Variant>(CAST<String>("true" AS Variant) AS String NULL)
optimized expr : "true"
output type    : String NULL
output domain  : {"true"..="true"}
output         : 'true'


ast            : json_to_string(parse_json('123456'))
raw expr       : json_to_string(parse_json('123456'))
checked expr   : CAST<Variant>(CAST<String>("123456" AS Variant) AS String NULL)
optimized expr : "123456"
output type    : String NULL
output domain  : {"123456"..="123456"}
output         : '123456'


ast            : json_to_string(parse_json('"abcd"'))
raw expr       : json_to_string(parse_json('"abcd"'))
checked expr   : CAST<Variant>(CAST<String>("\"abcd\"" AS Variant) AS String NULL)
optimized expr : "abcd"
output type    : String NULL
output domain  : {"abcd"..="abcd"}
output         : 'abcd'


ast            : json_to_string(parse_json('[1, 2, 3, 4, 5, 6]'))
raw expr       : json_to_string(parse_json('[1, 2, 3, 4, 5, 6]'))
checked expr   : CAST<Variant>(CAST<String>("[1, 2, 3, 4, 5, 6]" AS Variant) AS String NULL)
optimized expr : "[1,2,3,4,5,6]"
output type    : String NULL
output domain  : {"[1,2,3,4,5,6]"..="[1,2,3,4,5,6]"}
output         : '[1,2,3,4,5,6]'


ast            : json_to_string(parse_json('{"k1":123, "k2":"abc"}'))
raw expr       : json_to_string(parse_json('{"k1":123, "k2":"abc"}'))
checked expr   : CAST<Variant>(CAST<String>("{\"k1\":123, \"k2\":\"abc\"}" AS Variant) AS String NULL)
optimized expr : "{\"k1\":123,\"k2\":\"abc\"}"
output type    : String NULL
output domain  : {"{\"k1\":123,\"k2\":\"abc\"}"..="{\"k1\":123,\"k2\":\"abc\"}"}
output         : '{"k1":123,"k2":"abc"}'


ast            : json_pretty(parse_json('true'))
raw expr       : json_pretty(parse_json('true'))
checked expr   : json_pretty<Variant>(CAST<String>("true" AS Variant))
optimized expr : "true"
output type    : String
output domain  : {"true"..="true"}
output         : 'true'


ast            : json_pretty(parse_json('123456'))
raw expr       : json_pretty(parse_json('123456'))
checked expr   : json_pretty<Variant>(CAST<String>("123456" AS Variant))
optimized expr : "123456"
output type    : String
output domain  : {"123456"..="123456"}
output         : '123456'


ast            : json_pretty(parse_json('"abcd"'))
raw expr       : json_pretty(parse_json('"abcd"'))
checked expr   : json_pretty<Variant>(CAST<String>("\"abcd\"" AS Variant))
optimized expr : "\"abcd\""
output type    : String
output domain  : {"\"abcd\""..="\"abcd\""}
output         : '"abcd"'


ast            : json_pretty(parse_json('[1, 2, 3, 4, 5, 6]'))
raw expr       : json_pretty(parse_json('[1, 2, 3, 4, 5, 6]'))
checked expr   : json_pretty<Variant>(CAST<String>("[1, 2, 3, 4, 5, 6]" AS Variant))
optimized expr : "[\n  1,\n  2,\n  3,\n  4,\n  5,\n  6\n]"
output type    : String
output domain  : {"[\n  1,\n  2,\n  3,\n  4,\n  5,\n  6\n]"..="[\n  1,\n  2,\n  3,\n  4,\n  5,\n  6\n]"}
output         : '[\n  1,\n  2,\n  3,\n  4,\n  5,\n  6\n]'


ast            : json_pretty(parse_json('{"k1":123, "k2":"abc"}'))
raw expr       : json_pretty(parse_json('{"k1":123, "k2":"abc"}'))
checked expr   : json_pretty<Variant>(CAST<String>("{\"k1\":123, \"k2\":\"abc\"}" AS Variant))
optimized expr : "{\n  \"k1\": 123,\n  \"k2\": \"abc\"\n}"
output type    : String
output domain  : {"{\n  \"k1\": 123,\n  \"k2\": \"abc\"\n}"..="{\n  \"k1\": 123,\n  \"k2\": \"abc\"\n}"}
output         : '{\n  "k1": 123,\n  "k2": "abc"\n}'


ast            : json_pretty(parse_json('{"a":1,"b":true,"c":["1","2","3"],"d":{"a":1,"b":[1,2,3],"c":{"a":1,"b":2}}}'))
raw expr       : json_pretty(parse_json('{"a":1,"b":true,"c":["1","2","3"],"d":{"a":1,"b":[1,2,3],"c":{"a":1,"b":2}}}'))
checked expr   : json_pretty<Variant>(CAST<String>("{\"a\":1,\"b\":true,\"c\":[\"1\",\"2\",\"3\"],\"d\":{\"a\":1,\"b\":[1,2,3],\"c\":{\"a\":1,\"b\":2}}}" AS Variant))
optimized expr : "{\n  \"a\": 1,\n  \"b\": true,\n  \"c\": [\n    \"1\",\n    \"2\",\n    \"3\"\n  ],\n  \"d\": {\n    \"a\": 1,\n    \"b\": [\n      1,\n      2,\n      3\n    ],\n    \"c\": {\n      \"a\": 1,\n      \"b\": 2\n    }\n  }\n}"
output type    : String
output domain  : {"{\n  \"a\": 1,\n  \"b\": true,\n  \"c\": [\n    \"1\",\n    \"2\",\n    \"3\"\n  ],\n  \"d\": {\n    \"a\": 1,\n    \"b\": [\n      1,\n      2,\n      3\n    ],\n    \"c\": {\n      \"a\": 1,\n      \"b\": 2\n    }\n  }\n}"..="{\n  \"a\": 1,\n  \"b\": true,\n  \"c\": [\n    \"1\",\n    \"2\",\n    \"3\"\n  ],\n  \"d\": {\n    \"a\": 1,\n    \"b\": [\n      1,\n      2,\n      3\n    ],\n    \"c\": {\n      \"a\": 1,\n      \"b\": 2\n    }\n  }\n}"}
output         : '{\n  "a": 1,\n  "b": true,\n  "c": [\n    "1",\n    "2",\n    "3"\n  ],\n  "d": {\n    "a": 1,\n    "b": [\n      1,\n      2,\n      3\n    ],\n    "c": {\n      "a": 1,\n      "b": 2\n    }\n  }\n}'


ast            : json_strip_nulls(parse_json('true'))
raw expr       : json_strip_nulls(parse_json('true'))
checked expr   : json_strip_nulls<Variant>(CAST<String>("true" AS Variant))
optimized expr : 0x2000000040000000
output type    : Variant
output domain  : Undefined
output         : 'true'


ast            : json_strip_nulls(parse_json('null'))
raw expr       : json_strip_nulls(parse_json('null'))
checked expr   : json_strip_nulls<Variant>(CAST<String>("null" AS Variant))
optimized expr : 0x2000000000000000
output type    : Variant
output domain  : Undefined
output         : 'null'


ast            : json_strip_nulls(parse_json('[1, 2, 3, null]'))
raw expr       : json_strip_nulls(parse_json('[1, 2, 3, null]'))
checked expr   : json_strip_nulls<Variant>(CAST<String>("[1, 2, 3, null]" AS Variant))
optimized expr : 0x8000000420000002200000022000000200000000500150025003
output type    : Variant
output domain  : Undefined
output         : '[1,2,3,null]'


ast            : json_strip_nulls(parse_json('{"a":null, "b": {"c": 1, "d": null}, "c": [{"a": 1, "b": null}]}'))
raw expr       : json_strip_nulls(parse_json('{"a":null, "b": {"c": 1, "d": null}, "c": [{"a": 1, "b": null}]}'))
checked expr   : json_strip_nulls<Variant>(CAST<String>("{\"a\":null, \"b\": {\"c\": 1, \"d\": null}, \"c\": [{\"a\": 1, \"b\": null}]}" AS Variant))
optimized expr : 0x4000000210000001100000015000000f500000176263400000011000000120000002635001800000015000000f400000011000000120000002615001
output type    : Variant
output domain  : Undefined
output         : '{"b":{"c":1},"c":[{"a":1}]}'


ast            : json_typeof(NULL)
raw expr       : json_typeof(NULL)
checked expr   : json_typeof<Variant NULL>(CAST<NULL>(NULL AS Variant NULL))
optimized expr : NULL
output type    : String NULL
output domain  : {NULL}
output         : NULL


ast            : json_typeof(parse_json('null'))
raw expr       : json_typeof(parse_json('null'))
checked expr   : json_typeof<Variant>(CAST<String>("null" AS Variant))
optimized expr : "NULL_VALUE"
output type    : String
output domain  : {"NULL_VALUE"..="NULL_VALUE"}
output         : 'NULL_VALUE'


ast            : json_typeof(parse_json('true'))
raw expr       : json_typeof(parse_json('true'))
checked expr   : json_typeof<Variant>(CAST<String>("true" AS Variant))
optimized expr : "BOOLEAN"
output type    : String
output domain  : {"BOOLEAN"..="BOOLEAN"}
output         : 'BOOLEAN'


ast            : json_typeof(parse_json('"test"'))
raw expr       : json_typeof(parse_json('"test"'))
checked expr   : json_typeof<Variant>(CAST<String>("\"test\"" AS Variant))
optimized expr : "STRING"
output type    : String
output domain  : {"STRING"..="STRING"}
output         : 'STRING'


ast            : json_typeof(parse_json('123'))
raw expr       : json_typeof(parse_json('123'))
checked expr   : json_typeof<Variant>(CAST<String>("123" AS Variant))
optimized expr : "INTEGER"
output type    : String
output domain  : {"INTEGER"..="INTEGER"}
output         : 'INTEGER'


ast            : json_typeof(parse_json('-1.12'))
raw expr       : json_typeof(parse_json('-1.12'))
checked expr   : json_typeof<Variant>(CAST<String>("-1.12" AS Variant))
optimized expr : "DECIMAL"
output type    : String
output domain  : {"DECIMAL"..="DECIMAL"}
output         : 'DECIMAL'


ast            : json_typeof(parse_json('1.12e10'))
raw expr       : json_typeof(parse_json('1.12e10'))
checked expr   : json_typeof<Variant>(CAST<String>("1.12e10" AS Variant))
optimized expr : "DOUBLE"
output type    : String
output domain  : {"DOUBLE"..="DOUBLE"}
output         : 'DOUBLE'


ast            : json_typeof(parse_json('[1,2,3]'))
raw expr       : json_typeof(parse_json('[1,2,3]'))
checked expr   : json_typeof<Variant>(CAST<String>("[1,2,3]" AS Variant))
optimized expr : "ARRAY"
output type    : String
output domain  : {"ARRAY"..="ARRAY"}
output         : 'ARRAY'


ast            : json_typeof(parse_json('{"a":1,"b":2}'))
raw expr       : json_typeof(parse_json('{"a":1,"b":2}'))
checked expr   : json_typeof<Variant>(CAST<String>("{\"a\":1,\"b\":2}" AS Variant))
optimized expr : "OBJECT"
output type    : String
output domain  : {"OBJECT"..="OBJECT"}
output         : 'OBJECT'


ast            : array_construct()
raw expr       : array_construct()
checked expr   : array_construct<>()
optimized expr : 0x80000000
output type    : Variant
output domain  : Undefined
output         : '[]'


ast            : array_construct(true, 1, 'str', [1,2], {'k':'v'}, null)
raw expr       : array_construct(true, 1, 'str', array(1, 2), map(array('k'), array('v')), NULL)
checked expr   : array_construct<T0=Boolean, T1=UInt8, T2=String, T3=Array(UInt8), T4=Map(String, String), T5=NULL><T0, T1, T2, T3, T4, T5>(true, 1_u8, "str", array<T0=UInt8><T0, T0>(1_u8, 2_u8), map<T0=String, T1=String><Array(T0), Array(T1)>(array<T0=String><T0>("k"), array<T0=String><T0>("v")), NULL)
optimized expr : 0x80000006400000002000000210000003500000105000000e000000005001737472800000022000000220000002500150024000000110000001100000016b76
output type    : Variant
output domain  : Undefined
output         : '[true,1,"str",[1,2],{"k":"v"},null]'


ast            : array_construct(v1, v2, v3)
raw expr       : array_construct(v1::String NULL, v2::String NULL, v3::String NULL)
checked expr   : array_construct<T0=String NULL, T1=String NULL, T2=String NULL><T0, T1, T2>(v1, v2, v3)
evaluation:
+--------+------------------------+------------------------+------------------------+--------------------+
|        | v1                     | v2                     | v3                     | Output             |
+--------+------------------------+------------------------+------------------------+--------------------+
| Type   | String NULL            | String NULL            | String NULL            | Variant            |
| Domain | {"a1"..="d1"} ∪ {NULL} | {"j1"..="l1"} ∪ {NULL} | {"a2"..="d2"} ∪ {NULL} | Unknown            |
| Row 0  | 'a1'                   | 'j1'                   | 'a2'                   | '["a1","j1","a2"]' |
| Row 1  | 'b1'                   | 'k1'                   | NULL                   | '["b1","k1",null]' |
| Row 2  | NULL                   | 'l1'                   | 'c2'                   | '[null,"l1","c2"]' |
| Row 3  | 'd1'                   | NULL                   | 'd2'                   | '["d1",null,"d2"]' |
+--------+------------------------+------------------------+------------------------+--------------------+
evaluation (internal):
+--------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| Column | Data                                                                                                                                                                                          |
+--------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| v1     | NullableColumn { column: StringColumn[a1, b1, , d1], validity: [0b____1011] }                                                                                                                 |
| v2     | NullableColumn { column: StringColumn[j1, k1, l1, ], validity: [0b____0111] }                                                                                                                 |
| v3     | NullableColumn { column: StringColumn[a2, , c2, d2], validity: [0b____1101] }                                                                                                                 |
| Output | Variant([0x8000000310000002100000021000000261316a316132, 0x8000000310000002100000020000000062316b31, 0x800000030000000010000002100000026c316332, 0x8000000310000002000000001000000264316432]) |
+--------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+


ast            : json_path_exists(NULL, '$.a')
raw expr       : json_path_exists(NULL, '$.a')
checked expr   : json_path_exists<NULL, String>(NULL, "$.a")
optimized expr : NULL
output type    : Boolean NULL
output domain  : {NULL}
output         : NULL


ast            : json_path_exists(parse_json('{"a": 1, "b": 2}'), NULL)
raw expr       : json_path_exists(parse_json('{"a": 1, "b": 2}'), NULL)
checked expr   : json_path_exists<Variant, NULL>(CAST<String>("{\"a\": 1, \"b\": 2}" AS Variant), NULL)
optimized expr : NULL
output type    : Boolean NULL
output domain  : {NULL}
output         : NULL


ast            : json_path_exists(parse_json('{"a": 1, "b": 2}'), '$.a')
raw expr       : json_path_exists(parse_json('{"a": 1, "b": 2}'), '$.a')
checked expr   : json_path_exists<Variant, String>(CAST<String>("{\"a\": 1, \"b\": 2}" AS Variant), "$.a")
optimized expr : true
output type    : Boolean NULL
output domain  : {TRUE}
output         : true


ast            : json_path_exists(parse_json('{"a": 1, "b": 2}'), '$.c')
raw expr       : json_path_exists(parse_json('{"a": 1, "b": 2}'), '$.c')
checked expr   : json_path_exists<Variant, String>(CAST<String>("{\"a\": 1, \"b\": 2}" AS Variant), "$.c")
optimized expr : false
output type    : Boolean NULL
output domain  : {FALSE}
output         : false


ast            : json_path_exists(parse_json('{"a": 1, "b": 2}'), '$.a ? (@ == 1)')
raw expr       : json_path_exists(parse_json('{"a": 1, "b": 2}'), '$.a ? (@ == 1)')
checked expr   : json_path_exists<Variant, String>(CAST<String>("{\"a\": 1, \"b\": 2}" AS Variant), "$.a ? (@ == 1)")
optimized expr : true
output type    : Boolean NULL
output domain  : {TRUE}
output         : true


ast            : json_path_exists(parse_json('{"a": 1, "b": 2}'), '$.a ? (@ > 1)')
raw expr       : json_path_exists(parse_json('{"a": 1, "b": 2}'), '$.a ? (@ > 1)')
checked expr   : json_path_exists<Variant, String>(CAST<String>("{\"a\": 1, \"b\": 2}" AS Variant), "$.a ? (@ > 1)")
optimized expr : false
output type    : Boolean NULL
output domain  : {FALSE}
output         : false


ast            : json_path_exists(parse_json('{"a": 1, "b": [1,2,3]}'), '$.b[0]')
raw expr       : json_path_exists(parse_json('{"a": 1, "b": [1,2,3]}'), '$.b[0]')
checked expr   : json_path_exists<Variant, String>(CAST<String>("{\"a\": 1, \"b\": [1,2,3]}" AS Variant), "$.b[0]")
optimized expr : true
output type    : Boolean NULL
output domain  : {TRUE}
output         : true


ast            : json_path_exists(parse_json('{"a": 1, "b": [1,2,3]}'), '$.b[3]')
raw expr       : json_path_exists(parse_json('{"a": 1, "b": [1,2,3]}'), '$.b[3]')
checked expr   : json_path_exists<Variant, String>(CAST<String>("{\"a\": 1, \"b\": [1,2,3]}" AS Variant), "$.b[3]")
optimized expr : false
output type    : Boolean NULL
output domain  : {FALSE}
output         : false


ast            : json_path_exists(parse_json('{"a": 1, "b": [1,2,3]}'), '$.b[1 to last] ? (@ >=2 && @ <=3)')
raw expr       : json_path_exists(parse_json('{"a": 1, "b": [1,2,3]}'), '$.b[1 to last] ? (@ >=2 && @ <=3)')
checked expr   : json_path_exists<Variant, String>(CAST<String>("{\"a\": 1, \"b\": [1,2,3]}" AS Variant), "$.b[1 to last] ? (@ >=2 && @ <=3)")
optimized expr : true
output type    : Boolean NULL
output domain  : {TRUE}
output         : true


ast            : parse_json('null')->1
raw expr       : get(parse_json('null'), 1)
checked expr   : get<Variant, Int64>(CAST<String>("null" AS Variant), CAST<UInt8>(1_u8 AS Int64))
optimized expr : NULL
output type    : Variant NULL
output domain  : {NULL}
output         : NULL


ast            : parse_json('null')->'k'
raw expr       : get(parse_json('null'), 'k')
checked expr   : get<Variant, String>(CAST<String>("null" AS Variant), "k")
optimized expr : NULL
output type    : Variant NULL
output domain  : {NULL}
output         : NULL


ast            : parse_json('[1,2,3,4]')->1
raw expr       : get(parse_json('[1,2,3,4]'), 1)
checked expr   : get<Variant, Int64>(CAST<String>("[1,2,3,4]" AS Variant), CAST<UInt8>(1_u8 AS Int64))
optimized expr : 0x20000000200000025002
output type    : Variant NULL
output domain  : Undefined
output         : '2'


ast            : parse_json('[1,2,3,4]')->(2+3)
raw expr       : get(parse_json('[1,2,3,4]'), plus(2, 3))
checked expr   : get<Variant, Int64>(CAST<String>("[1,2,3,4]" AS Variant), CAST<UInt16>(plus<UInt8, UInt8>(2_u8, 3_u8) AS Int64))
optimized expr : NULL
output type    : Variant NULL
output domain  : {NULL}
output         : NULL


ast            : parse_json('{"k":"v"}')->'k'
raw expr       : get(parse_json('{"k":"v"}'), 'k')
checked expr   : get<Variant, String>(CAST<String>("{\"k\":\"v\"}" AS Variant), "k")
optimized expr : 0x200000001000000176
output type    : Variant NULL
output domain  : Undefined
output         : '"v"'


ast            : parse_json('{"k":"v"}')->'x'
raw expr       : get(parse_json('{"k":"v"}'), 'x')
checked expr   : get<Variant, String>(CAST<String>("{\"k\":\"v\"}" AS Variant), "x")
optimized expr : NULL
output type    : Variant NULL
output domain  : {NULL}
output         : NULL


ast            : CAST(('a', 'b') AS VARIANT)->'2'
raw expr       : get(CAST(tuple('a', 'b') AS Variant), '2')
checked expr   : get<Variant, String>(CAST<Tuple(String, String)>(tuple<String, String>("a", "b") AS Variant), "2")
optimized expr : 0x200000001000000162
output type    : Variant NULL
output domain  : Undefined
output         : '"b"'


ast            : parse_json(s)->i
raw expr       : get(parse_json(s::String), i::UInt64)
checked expr   : get<Variant, Int64>(CAST<String>(s AS Variant), CAST<UInt64>(i AS Int64))
evaluation:
+--------+----------------------------------+---------+--------------+
|        | s                                | i       | Output       |
+--------+----------------------------------+---------+--------------+
| Type   | String                           | UInt64  | Variant NULL |
| Domain | {"[\"a\",\"b\",\"c\"]"..="true"} | {0..=1} | Unknown      |
| Row 0  | 'true'                           | 0       | NULL         |
| Row 1  | '[1,2,3,4]'                      | 0       | '1'          |
| Row 2  | '["a","b","c"]'                  | 1       | '"b"'        |
+--------+----------------------------------+---------+--------------+
evaluation (internal):
+--------+----------------------------------------------------------------------------------------------------------------+
| Column | Data                                                                                                           |
+--------+----------------------------------------------------------------------------------------------------------------+
| s      | StringColumn[true, [1,2,3,4], ["a","b","c"]]                                                                   |
| i      | UInt64([0, 0, 1])                                                                                              |
| Output | NullableColumn { column: Variant([0x, 0x20000000200000025001, 0x200000001000000162]), validity: [0b_____110] } |
+--------+----------------------------------------------------------------------------------------------------------------+


ast            : parse_json(s)->i
raw expr       : get(parse_json(s::String NULL), i::UInt64 NULL)
checked expr   : get<Variant NULL, Int64 NULL>(CAST<String NULL>(s AS Variant NULL), CAST<UInt64 NULL>(i AS Int64 NULL))
evaluation:
+--------+-------------------------------------------+------------------+--------------+
|        | s                                         | i                | Output       |
+--------+-------------------------------------------+------------------+--------------+
| Type   | String NULL                               | UInt64 NULL      | Variant NULL |
| Domain | {"[\"a\",\"b\",\"c\"]"..="true"} ∪ {NULL} | {1..=2} ∪ {NULL} | Unknown      |
| Row 0  | 'true'                                    | NULL             | NULL         |
| Row 1  | '[1,2,3,4]'                               | 2                | '3'          |
| Row 2  | NULL                                      | NULL             | NULL         |
| Row 3  | '["a","b","c"]'                           | 1                | '"b"'        |
+--------+-------------------------------------------+------------------+--------------+
evaluation (internal):
+--------+--------------------------------------------------------------------------------------------------------------------+
| Column | Data                                                                                                               |
+--------+--------------------------------------------------------------------------------------------------------------------+
| s      | NullableColumn { column: StringColumn[true, [1,2,3,4], , ["a","b","c"]], validity: [0b____1011] }                  |
| i      | NullableColumn { column: UInt64([0, 2, 0, 1]), validity: [0b____1010] }                                            |
| Output | NullableColumn { column: Variant([0x, 0x20000000200000025003, 0x, 0x200000001000000162]), validity: [0b____1010] } |
+--------+--------------------------------------------------------------------------------------------------------------------+


ast            : parse_json(s)->k
raw expr       : get(parse_json(s::String), k::String)
checked expr   : get<Variant, String>(CAST<String>(s AS Variant), k)
evaluation:
+--------+------------------------+-------------+--------------+
|        | s                      | k           | Output       |
+--------+------------------------+-------------+--------------+
| Type   | String                 | String      | Variant NULL |
| Domain | {"true"..="{\"k\":1}"} | {"k"..="x"} | Unknown      |
| Row 0  | 'true'                 | 'k'         | NULL         |
| Row 1  | '{"k":1}'              | 'k'         | '1'          |
| Row 2  | '{"a":"b"}'            | 'x'         | NULL         |
+--------+------------------------+-------------+--------------+
evaluation (internal):
+--------+----------------------------------------------------------------------------------------------+
| Column | Data                                                                                         |
+--------+----------------------------------------------------------------------------------------------+
| s      | StringColumn[true, {"k":1}, {"a":"b"}]                                                       |
| k      | StringColumn[k, k, x]                                                                        |
| Output | NullableColumn { column: Variant([0x, 0x20000000200000025001, 0x]), validity: [0b_____010] } |
+--------+----------------------------------------------------------------------------------------------+


ast            : parse_json(s)->k
raw expr       : get(parse_json(s::String NULL), k::String)
checked expr   : get<Variant NULL, String NULL>(CAST<String NULL>(s AS Variant NULL), CAST<String>(k AS String NULL))
evaluation:
+--------+---------------------------------+------------+--------------+
|        | s                               | k          | Output       |
+--------+---------------------------------+------------+--------------+
| Type   | String NULL                     | String     | Variant NULL |
| Domain | {"true"..="{\"k\":1}"} ∪ {NULL} | {""..="k"} | Unknown      |
| Row 0  | 'true'                          | ''         | NULL         |
| Row 1  | '{"k":1}'                       | 'k'        | '1'          |
| Row 2  | NULL                            | ''         | NULL         |
| Row 3  | '{"a":"b"}'                     | 'a'        | '"b"'        |
+--------+---------------------------------+------------+--------------+
evaluation (internal):
+--------+--------------------------------------------------------------------------------------------------------------------+
| Column | Data                                                                                                               |
+--------+--------------------------------------------------------------------------------------------------------------------+
| s      | NullableColumn { column: StringColumn[true, {"k":1}, , {"a":"b"}], validity: [0b____1011] }                        |
| k      | StringColumn[, k, , a]                                                                                             |
| Output | NullableColumn { column: Variant([0x, 0x20000000200000025001, 0x, 0x200000001000000162]), validity: [0b____1010] } |
+--------+--------------------------------------------------------------------------------------------------------------------+


ast            : parse_json('null')->>1
raw expr       : get_string(parse_json('null'), 1)
checked expr   : get_string<Variant, Int64>(CAST<String>("null" AS Variant), CAST<UInt8>(1_u8 AS Int64))
optimized expr : NULL
output type    : String NULL
output domain  : {NULL}
output         : NULL


ast            : parse_json('null')->>'k'
raw expr       : get_string(parse_json('null'), 'k')
checked expr   : get_string<Variant, String>(CAST<String>("null" AS Variant), "k")
optimized expr : NULL
output type    : String NULL
output domain  : {NULL}
output         : NULL


ast            : parse_json('[1,2,3,4]')->>1
raw expr       : get_string(parse_json('[1,2,3,4]'), 1)
checked expr   : get_string<Variant, Int64>(CAST<String>("[1,2,3,4]" AS Variant), CAST<UInt8>(1_u8 AS Int64))
optimized expr : "2"
output type    : String NULL
output domain  : {"2"..="2"}
output         : '2'


ast            : parse_json('[1,2,3,4]')->>(2+3)
raw expr       : get_string(parse_json('[1,2,3,4]'), plus(2, 3))
checked expr   : get_string<Variant, Int64>(CAST<String>("[1,2,3,4]" AS Variant), CAST<UInt16>(plus<UInt8, UInt8>(2_u8, 3_u8) AS Int64))
optimized expr : NULL
output type    : String NULL
output domain  : {NULL}
output         : NULL


ast            : parse_json('{"k":"v"}')->>'k'
raw expr       : get_string(parse_json('{"k":"v"}'), 'k')
checked expr   : get_string<Variant, String>(CAST<String>("{\"k\":\"v\"}" AS Variant), "k")
optimized expr : "v"
output type    : String NULL
output domain  : {"v"..="v"}
output         : 'v'


ast            : parse_json('{"k":"v"}')->>'x'
raw expr       : get_string(parse_json('{"k":"v"}'), 'x')
checked expr   : get_string<Variant, String>(CAST<String>("{\"k\":\"v\"}" AS Variant), "x")
optimized expr : NULL
output type    : String NULL
output domain  : {NULL}
output         : NULL


ast            : parse_json('{"k":null}')->>'k'
raw expr       : get_string(parse_json('{"k":null}'), 'k')
checked expr   : get_string<Variant, String>(CAST<String>("{\"k\":null}" AS Variant), "k")
optimized expr : NULL
output type    : String NULL
output domain  : {NULL}
output         : NULL


ast            : CAST(('a', 'b') AS VARIANT)->>'2'
raw expr       : get_string(CAST(tuple('a', 'b') AS Variant), '2')
checked expr   : get_string<Variant, String>(CAST<Tuple(String, String)>(tuple<String, String>("a", "b") AS Variant), "2")
optimized expr : "b"
output type    : String NULL
output domain  : {"b"..="b"}
output         : 'b'


ast            : parse_json(s)->>i
raw expr       : get_string(parse_json(s::String), i::UInt64)
checked expr   : get_string<Variant, Int64>(CAST<String>(s AS Variant), CAST<UInt64>(i AS Int64))
evaluation:
+--------+----------------------------------+---------+-------------+
|        | s                                | i       | Output      |
+--------+----------------------------------+---------+-------------+
| Type   | String                           | UInt64  | String NULL |
| Domain | {"[\"a\",\"b\",\"c\"]"..="true"} | {0..=1} | Unknown     |
| Row 0  | 'true'                           | 0       | NULL        |
| Row 1  | '[1,2,3,4]'                      | 0       | '1'         |
| Row 2  | '["a","b","c"]'                  | 1       | 'b'         |
+--------+----------------------------------+---------+-------------+
evaluation (internal):
+--------+-------------------------------------------------------------------------+
| Column | Data                                                                    |
+--------+-------------------------------------------------------------------------+
| s      | StringColumn[true, [1,2,3,4], ["a","b","c"]]                            |
| i      | UInt64([0, 0, 1])                                                       |
| Output | NullableColumn { column: StringColumn[, 1, b], validity: [0b_____110] } |
+--------+-------------------------------------------------------------------------+


ast            : parse_json(s)->>i
raw expr       : get_string(parse_json(s::String NULL), i::UInt64 NULL)
checked expr   : get_string<Variant NULL, Int64 NULL>(CAST<String NULL>(s AS Variant NULL), CAST<UInt64 NULL>(i AS Int64 NULL))
evaluation:
+--------+-------------------------------------------+------------------+-------------+
|        | s                                         | i                | Output      |
+--------+-------------------------------------------+------------------+-------------+
| Type   | String NULL                               | UInt64 NULL      | String NULL |
| Domain | {"[\"a\",\"b\",\"c\"]"..="true"} ∪ {NULL} | {1..=2} ∪ {NULL} | Unknown     |
| Row 0  | 'true'                                    | NULL             | NULL        |
| Row 1  | '[1,2,3,4]'                               | 2                | '3'         |
| Row 2  | NULL                                      | NULL             | NULL        |
| Row 3  | '["a","b","c"]'                           | 1                | 'b'         |
+--------+-------------------------------------------+------------------+-------------+
evaluation (internal):
+--------+---------------------------------------------------------------------------------------------------+
| Column | Data                                                                                              |
+--------+---------------------------------------------------------------------------------------------------+
| s      | NullableColumn { column: StringColumn[true, [1,2,3,4], , ["a","b","c"]], validity: [0b____1011] } |
| i      | NullableColumn { column: UInt64([0, 2, 0, 1]), validity: [0b____1010] }                           |
| Output | NullableColumn { column: StringColumn[, 3, , b], validity: [0b____1010] }                         |
+--------+---------------------------------------------------------------------------------------------------+


ast            : parse_json(s)->>k
raw expr       : get_string(parse_json(s::String), k::String)
checked expr   : get_string<Variant, String>(CAST<String>(s AS Variant), k)
evaluation:
+--------+------------------------+-------------+-------------+
|        | s                      | k           | Output      |
+--------+------------------------+-------------+-------------+
| Type   | String                 | String      | String NULL |
| Domain | {"true"..="{\"k\":1}"} | {"k"..="x"} | Unknown     |
| Row 0  | 'true'                 | 'k'         | NULL        |
| Row 1  | '{"k":1}'              | 'k'         | '1'         |
| Row 2  | '{"a":"b"}'            | 'x'         | NULL        |
+--------+------------------------+-------------+-------------+
evaluation (internal):
+--------+------------------------------------------------------------------------+
| Column | Data                                                                   |
+--------+------------------------------------------------------------------------+
| s      | StringColumn[true, {"k":1}, {"a":"b"}]                                 |
| k      | StringColumn[k, k, x]                                                  |
| Output | NullableColumn { column: StringColumn[, 1, ], validity: [0b_____010] } |
+--------+------------------------------------------------------------------------+


ast            : parse_json(s)->>k
raw expr       : get_string(parse_json(s::String NULL), k::String)
checked expr   : get_string<Variant NULL, String NULL>(CAST<String NULL>(s AS Variant NULL), CAST<String>(k AS String NULL))
evaluation:
+--------+---------------------------------+------------+-------------+
|        | s                               | k          | Output      |
+--------+---------------------------------+------------+-------------+
| Type   | String NULL                     | String     | String NULL |
| Domain | {"true"..="{\"k\":1}"} ∪ {NULL} | {""..="k"} | Unknown     |
| Row 0  | 'true'                          | ''         | NULL        |
| Row 1  | '{"k":1}'                       | 'k'        | '1'         |
| Row 2  | NULL                            | ''         | NULL        |
| Row 3  | '{"a":"b"}'                     | 'a'        | 'b'         |
+--------+---------------------------------+------------+-------------+
evaluation (internal):
+--------+---------------------------------------------------------------------------------------------+
| Column | Data                                                                                        |
+--------+---------------------------------------------------------------------------------------------+
| s      | NullableColumn { column: StringColumn[true, {"k":1}, , {"a":"b"}], validity: [0b____1011] } |
| k      | StringColumn[, k, , a]                                                                      |
| Output | NullableColumn { column: StringColumn[, 1, , b], validity: [0b____1010] }                   |
+--------+---------------------------------------------------------------------------------------------+


error: 
  --> SQL:1:28
  |
1 | parse_json('[10, 20, 30]') #> '1'
  |                            ^^ InvalidKeyPath while evaluating function `get_by_keypath('[10,20,30]', '1')` in expr `get_by_keypath(CAST('[10, 20, 30]' AS Variant), '1')`



ast            : NULL #> NULL
raw expr       : get_by_keypath(NULL, NULL)
checked expr   : get_by_keypath<NULL, NULL>(NULL, NULL)
optimized expr : NULL
output type    : Variant NULL
output domain  : {NULL}
output         : NULL


ast            : NULL #> '{0}'
raw expr       : get_by_keypath(NULL, '{0}')
checked expr   : get_by_keypath<NULL, String>(NULL, "{0}")
optimized expr : NULL
output type    : Variant NULL
output domain  : {NULL}
output         : NULL


ast            : parse_json('"string"') #> '{0}'
raw expr       : get_by_keypath(parse_json('"string"'), '{0}')
checked expr   : get_by_keypath<Variant, String>(CAST<String>("\"string\"" AS Variant), "{0}")
optimized expr : NULL
output type    : Variant NULL
output domain  : {NULL}
output         : NULL


ast            : parse_json('1') #> '{0}'
raw expr       : get_by_keypath(parse_json('1'), '{0}')
checked expr   : get_by_keypath<Variant, String>(CAST<String>("1" AS Variant), "{0}")
optimized expr : NULL
output type    : Variant NULL
output domain  : {NULL}
output         : NULL


ast            : parse_json('[10, 20, 30]') #> '{1}'
raw expr       : get_by_keypath(parse_json('[10, 20, 30]'), '{1}')
checked expr   : get_by_keypath<Variant, String>(CAST<String>("[10, 20, 30]" AS Variant), "{1}")
optimized expr : 0x20000000200000025014
output type    : Variant NULL
output domain  : Undefined
output         : '20'


ast            : parse_json('[10, 20, 30]') #> '{3}'
raw expr       : get_by_keypath(parse_json('[10, 20, 30]'), '{3}')
checked expr   : get_by_keypath<Variant, String>(CAST<String>("[10, 20, 30]" AS Variant), "{3}")
optimized expr : NULL
output type    : Variant NULL
output domain  : {NULL}
output         : NULL


ast            : parse_json('[10, 20, 30]') #> '{a}'
raw expr       : get_by_keypath(parse_json('[10, 20, 30]'), '{a}')
checked expr   : get_by_keypath<Variant, String>(CAST<String>("[10, 20, 30]" AS Variant), "{a}")
optimized expr : NULL
output type    : Variant NULL
output domain  : {NULL}
output         : NULL


ast            : parse_json('{"k": null}') #> '{k}'
raw expr       : get_by_keypath(parse_json('{"k": null}'), '{k}')
checked expr   : get_by_keypath<Variant, String>(CAST<String>("{\"k\": null}" AS Variant), "{k}")
optimized expr : 0x2000000000000000
output type    : Variant NULL
output domain  : Undefined
output         : 'null'


ast            : parse_json('[10, 20, null]') #> '{2}'
raw expr       : get_by_keypath(parse_json('[10, 20, null]'), '{2}')
checked expr   : get_by_keypath<Variant, String>(CAST<String>("[10, 20, null]" AS Variant), "{2}")
optimized expr : 0x2000000000000000
output type    : Variant NULL
output domain  : Undefined
output         : 'null'


ast            : parse_json('[10, {"a":{"k1":[1,2,3], "k2":2}}, 30]') #> '{1, a, k1}'
raw expr       : get_by_keypath(parse_json('[10, {"a":{"k1":[1,2,3], "k2":2}}, 30]'), '{1, a, k1}')
checked expr   : get_by_keypath<Variant, String>(CAST<String>("[10, {\"a\":{\"k1\":[1,2,3], \"k2\":2}}, 30]" AS Variant), "{1, a, k1}")
optimized expr : 0x80000003200000022000000220000002500150025003
output type    : Variant NULL
output domain  : Undefined
output         : '[1,2,3]'


ast            : parse_json('[10, {"a":{"k1":[1,2,3], "k2":2}}, 30]') #> '{1, a, k1, 0}'
raw expr       : get_by_keypath(parse_json('[10, {"a":{"k1":[1,2,3], "k2":2}}, 30]'), '{1, a, k1, 0}')
checked expr   : get_by_keypath<Variant, String>(CAST<String>("[10, {\"a\":{\"k1\":[1,2,3], \"k2\":2}}, 30]" AS Variant), "{1, a, k1, 0}")
optimized expr : 0x20000000200000025001
output type    : Variant NULL
output domain  : Undefined
output         : '1'


ast            : parse_json('[10, {"a":{"k1":[1,2,3], "k2":2}}, 30]') #> '{1, a, k1, 0, 10}'
raw expr       : get_by_keypath(parse_json('[10, {"a":{"k1":[1,2,3], "k2":2}}, 30]'), '{1, a, k1, 0, 10}')
checked expr   : get_by_keypath<Variant, String>(CAST<String>("[10, {\"a\":{\"k1\":[1,2,3], \"k2\":2}}, 30]" AS Variant), "{1, a, k1, 0, 10}")
optimized expr : NULL
output type    : Variant NULL
output domain  : {NULL}
output         : NULL


ast            : parse_json(s) #> '{0}'
raw expr       : get_by_keypath(parse_json(s::String NULL), '{0}')
checked expr   : get_by_keypath<Variant NULL, String>(CAST<String NULL>(s AS Variant NULL), "{0}")
evaluation:
+--------+------------------------------------+--------------+
|        | s                                  | Output       |
+--------+------------------------------------+--------------+
| Type   | String NULL                        | Variant NULL |
| Domain | {"[1,2,3]"..="{\"k\":1}"} ∪ {NULL} | Unknown      |
| Row 0  | '[1,2,3]'                          | '1'          |
| Row 1  | '{"k":1}'                          | NULL         |
| Row 2  | NULL                               | NULL         |
| Row 3  | '{"a":"b"}'                        | NULL         |
+--------+------------------------------------+--------------+
evaluation (internal):
+--------+--------------------------------------------------------------------------------------------------+
| Column | Data                                                                                             |
+--------+--------------------------------------------------------------------------------------------------+
| s      | NullableColumn { column: StringColumn[[1,2,3], {"k":1}, , {"a":"b"}], validity: [0b____1011] }   |
| Output | NullableColumn { column: Variant([0x20000000200000025001, 0x, 0x, 0x]), validity: [0b____0001] } |
+--------+--------------------------------------------------------------------------------------------------+


ast            : parse_json(s) #> k
raw expr       : get_by_keypath(parse_json(s::String NULL), k::String NULL)
checked expr   : get_by_keypath<Variant NULL, String NULL>(CAST<String NULL>(s AS Variant NULL), k)
evaluation:
+--------+---------------------------------+--------------------------+--------------+
|        | s                               | k                        | Output       |
+--------+---------------------------------+--------------------------+--------------+
| Type   | String NULL                     | String NULL              | Variant NULL |
| Domain | {"true"..="{\"k\":1}"} ∪ {NULL} | {"{1}"..="{k}"} ∪ {NULL} | Unknown      |
| Row 0  | 'true'                          | '{1}'                    | NULL         |
| Row 1  | '{"k":1}'                       | '{k}'                    | '1'          |
| Row 2  | NULL                            | NULL                     | NULL         |
| Row 3  | '{"a":"b"}'                     | '{a}'                    | '"b"'        |
+--------+---------------------------------+--------------------------+--------------+
evaluation (internal):
+--------+--------------------------------------------------------------------------------------------------------------------+
| Column | Data                                                                                                               |
+--------+--------------------------------------------------------------------------------------------------------------------+
| s      | NullableColumn { column: StringColumn[true, {"k":1}, , {"a":"b"}], validity: [0b____1011] }                        |
| k      | NullableColumn { column: StringColumn[{1}, {k}, , {a}], validity: [0b____1011] }                                   |
| Output | NullableColumn { column: Variant([0x, 0x20000000200000025001, 0x, 0x200000001000000162]), validity: [0b____1010] } |
+--------+--------------------------------------------------------------------------------------------------------------------+


ast            : NULL #>> '{0}'
raw expr       : get_by_keypath_string(NULL, '{0}')
checked expr   : get_by_keypath_string<NULL, String>(NULL, "{0}")
optimized expr : NULL
output type    : String NULL
output domain  : {NULL}
output         : NULL


ast            : parse_json('"string"') #>> '{0}'
raw expr       : get_by_keypath_string(parse_json('"string"'), '{0}')
checked expr   : get_by_keypath_string<Variant, String>(CAST<String>("\"string\"" AS Variant), "{0}")
optimized expr : NULL
output type    : String NULL
output domain  : {NULL}
output         : NULL


ast            : parse_json('1') #>> '{0}'
raw expr       : get_by_keypath_string(parse_json('1'), '{0}')
checked expr   : get_by_keypath_string<Variant, String>(CAST<String>("1" AS Variant), "{0}")
optimized expr : NULL
output type    : String NULL
output domain  : {NULL}
output         : NULL


ast            : parse_json('[10, 20, 30]') #>> '{1}'
raw expr       : get_by_keypath_string(parse_json('[10, 20, 30]'), '{1}')
checked expr   : get_by_keypath_string<Variant, String>(CAST<String>("[10, 20, 30]" AS Variant), "{1}")
optimized expr : "20"
output type    : String NULL
output domain  : {"20"..="20"}
output         : '20'


ast            : parse_json('[10, 20, 30]') #>> '{3}'
raw expr       : get_by_keypath_string(parse_json('[10, 20, 30]'), '{3}')
checked expr   : get_by_keypath_string<Variant, String>(CAST<String>("[10, 20, 30]" AS Variant), "{3}")
optimized expr : NULL
output type    : String NULL
output domain  : {NULL}
output         : NULL


ast            : parse_json('[10, 20, 30]') #>> '{a}'
raw expr       : get_by_keypath_string(parse_json('[10, 20, 30]'), '{a}')
checked expr   : get_by_keypath_string<Variant, String>(CAST<String>("[10, 20, 30]" AS Variant), "{a}")
optimized expr : NULL
output type    : String NULL
output domain  : {NULL}
output         : NULL


ast            : parse_json('{"k": null}') #>> '{k}'
raw expr       : get_by_keypath_string(parse_json('{"k": null}'), '{k}')
checked expr   : get_by_keypath_string<Variant, String>(CAST<String>("{\"k\": null}" AS Variant), "{k}")
optimized expr : NULL
output type    : String NULL
output domain  : {NULL}
output         : NULL


ast            : parse_json('[10, 20, null]') #>> '{2}'
raw expr       : get_by_keypath_string(parse_json('[10, 20, null]'), '{2}')
checked expr   : get_by_keypath_string<Variant, String>(CAST<String>("[10, 20, null]" AS Variant), "{2}")
optimized expr : NULL
output type    : String NULL
output domain  : {NULL}
output         : NULL


ast            : parse_json('[10, {"a":{"k1":[1,2,3], "k2":2}}, 30]') #>> '{1, a, k1}'
raw expr       : get_by_keypath_string(parse_json('[10, {"a":{"k1":[1,2,3], "k2":2}}, 30]'), '{1, a, k1}')
checked expr   : get_by_keypath_string<Variant, String>(CAST<String>("[10, {\"a\":{\"k1\":[1,2,3], \"k2\":2}}, 30]" AS Variant), "{1, a, k1}")
optimized expr : "[1,2,3]"
output type    : String NULL
output domain  : {"[1,2,3]"..="[1,2,3]"}
output         : '[1,2,3]'


ast            : parse_json('[10, {"a":{"k1":[1,2,3], "k2":2}}, 30]') #>> '{1, a, k1, 0}'
raw expr       : get_by_keypath_string(parse_json('[10, {"a":{"k1":[1,2,3], "k2":2}}, 30]'), '{1, a, k1, 0}')
checked expr   : get_by_keypath_string<Variant, String>(CAST<String>("[10, {\"a\":{\"k1\":[1,2,3], \"k2\":2}}, 30]" AS Variant), "{1, a, k1, 0}")
optimized expr : "1"
output type    : String NULL
output domain  : {"1"..="1"}
output         : '1'


ast            : parse_json('[10, {"a":{"k1":[1,2,3], "k2":2}}, 30]') #>> '{1, a, k1, 0, 10}'
raw expr       : get_by_keypath_string(parse_json('[10, {"a":{"k1":[1,2,3], "k2":2}}, 30]'), '{1, a, k1, 0, 10}')
checked expr   : get_by_keypath_string<Variant, String>(CAST<String>("[10, {\"a\":{\"k1\":[1,2,3], \"k2\":2}}, 30]" AS Variant), "{1, a, k1, 0, 10}")
optimized expr : NULL
output type    : String NULL
output domain  : {NULL}
output         : NULL


ast            : parse_json(s) #>> '{0}'
raw expr       : get_by_keypath_string(parse_json(s::String NULL), '{0}')
checked expr   : get_by_keypath_string<Variant NULL, String>(CAST<String NULL>(s AS Variant NULL), "{0}")
evaluation:
+--------+------------------------------------+-------------+
|        | s                                  | Output      |
+--------+------------------------------------+-------------+
| Type   | String NULL                        | String NULL |
| Domain | {"[1,2,3]"..="{\"k\":1}"} ∪ {NULL} | Unknown     |
| Row 0  | '[1,2,3]'                          | '1'         |
| Row 1  | '{"k":1}'                          | NULL        |
| Row 2  | NULL                               | NULL        |
| Row 3  | '{"a":"b"}'                        | NULL        |
+--------+------------------------------------+-------------+
evaluation (internal):
+--------+------------------------------------------------------------------------------------------------+
| Column | Data                                                                                           |
+--------+------------------------------------------------------------------------------------------------+
| s      | NullableColumn { column: StringColumn[[1,2,3], {"k":1}, , {"a":"b"}], validity: [0b____1011] } |
| Output | NullableColumn { column: StringColumn[1, , , ], validity: [0b____0001] }                       |
+--------+------------------------------------------------------------------------------------------------+


ast            : parse_json(s) #>> k
raw expr       : get_by_keypath_string(parse_json(s::String NULL), k::String NULL)
checked expr   : get_by_keypath_string<Variant NULL, String NULL>(CAST<String NULL>(s AS Variant NULL), k)
evaluation:
+--------+---------------------------------+--------------------------+-------------+
|        | s                               | k                        | Output      |
+--------+---------------------------------+--------------------------+-------------+
| Type   | String NULL                     | String NULL              | String NULL |
| Domain | {"true"..="{\"k\":1}"} ∪ {NULL} | {"{1}"..="{k}"} ∪ {NULL} | Unknown     |
| Row 0  | 'true'                          | '{1}'                    | NULL        |
| Row 1  | '{"k":1}'                       | '{k}'                    | '1'         |
| Row 2  | NULL                            | NULL                     | NULL        |
| Row 3  | '{"a":"b"}'                     | '{a}'                    | 'b'         |
+--------+---------------------------------+--------------------------+-------------+
evaluation (internal):
+--------+---------------------------------------------------------------------------------------------+
| Column | Data                                                                                        |
+--------+---------------------------------------------------------------------------------------------+
| s      | NullableColumn { column: StringColumn[true, {"k":1}, , {"a":"b"}], validity: [0b____1011] } |
| k      | NullableColumn { column: StringColumn[{1}, {k}, , {a}], validity: [0b____1011] }            |
| Output | NullableColumn { column: StringColumn[, 1, , b], validity: [0b____1010] }                   |
+--------+---------------------------------------------------------------------------------------------+


ast            : parse_json('["1","2","3"]') ? NULL
raw expr       : json_exists_key(parse_json('["1","2","3"]'), NULL)
checked expr   : json_exists_key<Variant NULL, String NULL>(CAST<Variant>(CAST<String>("[\"1\",\"2\",\"3\"]" AS Variant) AS Variant NULL), CAST<NULL>(NULL AS String NULL))
optimized expr : NULL
output type    : Boolean NULL
output domain  : {NULL}
output         : NULL


ast            : parse_json('true') ? '1'
raw expr       : json_exists_key(parse_json('true'), '1')
checked expr   : json_exists_key<Variant, String>(CAST<String>("true" AS Variant), "1")
optimized expr : false
output type    : Boolean
output domain  : {FALSE}
output         : false


ast            : parse_json('["1","2","3"]') ? '1'
raw expr       : json_exists_key(parse_json('["1","2","3"]'), '1')
checked expr   : json_exists_key<Variant, String>(CAST<String>("[\"1\",\"2\",\"3\"]" AS Variant), "1")
optimized expr : true
output type    : Boolean
output domain  : {TRUE}
output         : true


ast            : parse_json('["1","2","3"]') ? '4'
raw expr       : json_exists_key(parse_json('["1","2","3"]'), '4')
checked expr   : json_exists_key<Variant, String>(CAST<String>("[\"1\",\"2\",\"3\"]" AS Variant), "4")
optimized expr : false
output type    : Boolean
output domain  : {FALSE}
output         : false


ast            : parse_json('{"a":1,"b":2,"c":3}') ? 'a'
raw expr       : json_exists_key(parse_json('{"a":1,"b":2,"c":3}'), 'a')
checked expr   : json_exists_key<Variant, String>(CAST<String>("{\"a\":1,\"b\":2,\"c\":3}" AS Variant), "a")
optimized expr : true
output type    : Boolean
output domain  : {TRUE}
output         : true


ast            : parse_json('{"a":1,"b":2,"c":3}') ? 'd'
raw expr       : json_exists_key(parse_json('{"a":1,"b":2,"c":3}'), 'd')
checked expr   : json_exists_key<Variant, String>(CAST<String>("{\"a\":1,\"b\":2,\"c\":3}" AS Variant), "d")
optimized expr : false
output type    : Boolean
output domain  : {FALSE}
output         : false


ast            : parse_json(s) ? 'a'
raw expr       : json_exists_key(parse_json(s::String NULL), 'a')
checked expr   : json_exists_key<Variant NULL, String NULL>(CAST<String NULL>(s AS Variant NULL), CAST<String>("a" AS String NULL))
optimized expr : json_exists_key<Variant NULL, String NULL>(CAST<String NULL>(s AS Variant NULL), "a")
evaluation:
+--------+------------------------------------+--------------+
|        | s                                  | Output       |
+--------+------------------------------------+--------------+
| Type   | String NULL                        | Boolean NULL |
| Domain | {"[1,2,3]"..="{\"b\":1}"} ∪ {NULL} | Unknown      |
| Row 0  | '[1,2,3]'                          | false        |
| Row 1  | '{"a":1}'                          | true         |
| Row 2  | NULL                               | NULL         |
| Row 3  | '{"b":1}'                          | false        |
+--------+------------------------------------+--------------+
evaluation (internal):
+--------+----------------------------------------------------------------------------------------------+
| Column | Data                                                                                         |
+--------+----------------------------------------------------------------------------------------------+
| s      | NullableColumn { column: StringColumn[[1,2,3], {"a":1}, , {"b":1}], validity: [0b____1011] } |
| Output | NullableColumn { column: Boolean([0b____0010]), validity: [0b____1011] }                     |
+--------+----------------------------------------------------------------------------------------------+


ast            : parse_json('["1","2","3"]') ?| NULL
raw expr       : json_exists_any_keys(parse_json('["1","2","3"]'), NULL)
checked expr   : json_exists_any_keys<Variant NULL, Array(String) NULL>(CAST<Variant>(CAST<String>("[\"1\",\"2\",\"3\"]" AS Variant) AS Variant NULL), CAST<NULL>(NULL AS Array(String) NULL))
optimized expr : NULL
output type    : Boolean NULL
output domain  : {NULL}
output         : NULL


ast            : parse_json('true') ?| ['1','2']
raw expr       : json_exists_any_keys(parse_json('true'), array('1', '2'))
checked expr   : json_exists_any_keys<Variant, Array(String)>(CAST<String>("true" AS Variant), array<T0=String><T0, T0>("1", "2"))
optimized expr : false
output type    : Boolean
output domain  : {FALSE}
output         : false


ast            : parse_json('["1","2","3"]') ?| ['1','2']
raw expr       : json_exists_any_keys(parse_json('["1","2","3"]'), array('1', '2'))
checked expr   : json_exists_any_keys<Variant, Array(String)>(CAST<String>("[\"1\",\"2\",\"3\"]" AS Variant), array<T0=String><T0, T0>("1", "2"))
optimized expr : true
output type    : Boolean
output domain  : {TRUE}
output         : true


ast            : parse_json('["1","2","3"]') ?| ['4','5']
raw expr       : json_exists_any_keys(parse_json('["1","2","3"]'), array('4', '5'))
checked expr   : json_exists_any_keys<Variant, Array(String)>(CAST<String>("[\"1\",\"2\",\"3\"]" AS Variant), array<T0=String><T0, T0>("4", "5"))
optimized expr : false
output type    : Boolean
output domain  : {FALSE}
output         : false


ast            : parse_json('{"a":1,"b":2,"c":3}') ?| ['a','b']
raw expr       : json_exists_any_keys(parse_json('{"a":1,"b":2,"c":3}'), array('a', 'b'))
checked expr   : json_exists_any_keys<Variant, Array(String)>(CAST<String>("{\"a\":1,\"b\":2,\"c\":3}" AS Variant), array<T0=String><T0, T0>("a", "b"))
optimized expr : true
output type    : Boolean
output domain  : {TRUE}
output         : true


ast            : parse_json('{"a":1,"b":2,"c":3}') ?| ['d','e']
raw expr       : json_exists_any_keys(parse_json('{"a":1,"b":2,"c":3}'), array('d', 'e'))
checked expr   : json_exists_any_keys<Variant, Array(String)>(CAST<String>("{\"a\":1,\"b\":2,\"c\":3}" AS Variant), array<T0=String><T0, T0>("d", "e"))
optimized expr : false
output type    : Boolean
output domain  : {FALSE}
output         : false


ast            : parse_json(s) ?| ['a','b']
raw expr       : json_exists_any_keys(parse_json(s::String NULL), array('a', 'b'))
checked expr   : json_exists_any_keys<Variant NULL, Array(String) NULL>(CAST<String NULL>(s AS Variant NULL), CAST<Array(String)>(array<T0=String><T0, T0>("a", "b") AS Array(String) NULL))
optimized expr : json_exists_any_keys<Variant NULL, Array(String) NULL>(CAST<String NULL>(s AS Variant NULL), ['a', 'b'])
evaluation:
+--------+------------------------------------------------+--------------+
|        | s                                              | Output       |
+--------+------------------------------------------------+--------------+
| Type   | String NULL                                    | Boolean NULL |
| Domain | {"[\"a\",\"e\",\"d\"]"..="{\"c\":1}"} ∪ {NULL} | Unknown      |
| Row 0  | '["a","e","d"]'                                | true         |
| Row 1  | '{"a":1,"b":2}'                                | true         |
| Row 2  | NULL                                           | NULL         |
| Row 3  | '{"c":1}'                                      | false        |
+--------+------------------------------------------------+--------------+
evaluation (internal):
+--------+----------------------------------------------------------------------------------------------------------+
| Column | Data                                                                                                     |
+--------+----------------------------------------------------------------------------------------------------------+
| s      | NullableColumn { column: StringColumn[["a","e","d"], {"a":1,"b":2}, , {"c":1}], validity: [0b____1011] } |
| Output | NullableColumn { column: Boolean([0b____0011]), validity: [0b____1011] }                                 |
+--------+----------------------------------------------------------------------------------------------------------+


ast            : parse_json('["1","2","3"]') ?& NULL
raw expr       : json_exists_all_keys(parse_json('["1","2","3"]'), NULL)
checked expr   : json_exists_all_keys<Variant NULL, Array(String) NULL>(CAST<Variant>(CAST<String>("[\"1\",\"2\",\"3\"]" AS Variant) AS Variant NULL), CAST<NULL>(NULL AS Array(String) NULL))
optimized expr : NULL
output type    : Boolean NULL
output domain  : {NULL}
output         : NULL


ast            : parse_json('true') ?& ['1','2']
raw expr       : json_exists_all_keys(parse_json('true'), array('1', '2'))
checked expr   : json_exists_all_keys<Variant, Array(String)>(CAST<String>("true" AS Variant), array<T0=String><T0, T0>("1", "2"))
optimized expr : false
output type    : Boolean
output domain  : {FALSE}
output         : false


ast            : parse_json('["1","2","3"]') ?& ['1','2']
raw expr       : json_exists_all_keys(parse_json('["1","2","3"]'), array('1', '2'))
checked expr   : json_exists_all_keys<Variant, Array(String)>(CAST<String>("[\"1\",\"2\",\"3\"]" AS Variant), array<T0=String><T0, T0>("1", "2"))
optimized expr : true
output type    : Boolean
output domain  : {TRUE}
output         : true


ast            : parse_json('["1","2","3"]') ?& ['3','5']
raw expr       : json_exists_all_keys(parse_json('["1","2","3"]'), array('3', '5'))
checked expr   : json_exists_all_keys<Variant, Array(String)>(CAST<String>("[\"1\",\"2\",\"3\"]" AS Variant), array<T0=String><T0, T0>("3", "5"))
optimized expr : false
output type    : Boolean
output domain  : {FALSE}
output         : false


ast            : parse_json('{"a":1,"b":2,"c":3}') ?& ['a','b']
raw expr       : json_exists_all_keys(parse_json('{"a":1,"b":2,"c":3}'), array('a', 'b'))
checked expr   : json_exists_all_keys<Variant, Array(String)>(CAST<String>("{\"a\":1,\"b\":2,\"c\":3}" AS Variant), array<T0=String><T0, T0>("a", "b"))
optimized expr : true
output type    : Boolean
output domain  : {TRUE}
output         : true


ast            : parse_json('{"a":1,"b":2,"c":3}') ?& ['c','e']
raw expr       : json_exists_all_keys(parse_json('{"a":1,"b":2,"c":3}'), array('c', 'e'))
checked expr   : json_exists_all_keys<Variant, Array(String)>(CAST<String>("{\"a\":1,\"b\":2,\"c\":3}" AS Variant), array<T0=String><T0, T0>("c", "e"))
optimized expr : false
output type    : Boolean
output domain  : {FALSE}
output         : false


ast            : parse_json(s) ?& ['a','b']
raw expr       : json_exists_all_keys(parse_json(s::String NULL), array('a', 'b'))
checked expr   : json_exists_all_keys<Variant NULL, Array(String) NULL>(CAST<String NULL>(s AS Variant NULL), CAST<Array(String)>(array<T0=String><T0, T0>("a", "b") AS Array(String) NULL))
optimized expr : json_exists_all_keys<Variant NULL, Array(String) NULL>(CAST<String NULL>(s AS Variant NULL), ['a', 'b'])
evaluation:
+--------+--------------------------------------------------------+--------------+
|        | s                                                      | Output       |
+--------+--------------------------------------------------------+--------------+
| Type   | String NULL                                            | Boolean NULL |
| Domain | {"[\"a\",\"e\",\"b\"]"..="{\"a\":1,\"b\":2}"} ∪ {NULL} | Unknown      |
| Row 0  | '["a","e","b"]'                                        | true         |
| Row 1  | '{"a":1,"b":2}'                                        | true         |
| Row 2  | NULL                                                   | NULL         |
| Row 3  | '{"a":0,"c":1}'                                        | false        |
+--------+--------------------------------------------------------+--------------+
evaluation (internal):
+--------+----------------------------------------------------------------------------------------------------------------+
| Column | Data                                                                                                           |
+--------+----------------------------------------------------------------------------------------------------------------+
| s      | NullableColumn { column: StringColumn[["a","e","b"], {"a":1,"b":2}, , {"a":0,"c":1}], validity: [0b____1011] } |
| Output | NullableColumn { column: Boolean([0b____0011]), validity: [0b____1011] }                                       |
+--------+----------------------------------------------------------------------------------------------------------------+


ast            : NULL @> NULL
raw expr       : json_contains_in_left(NULL, NULL)
checked expr   : json_contains_in_left<Variant NULL, Variant NULL>(CAST<NULL>(NULL AS Variant NULL), CAST<NULL>(NULL AS Variant NULL))
optimized expr : NULL
output type    : Boolean NULL
output domain  : {NULL}
output         : NULL


ast            : parse_json('[1,2,3]') @> NULL
raw expr       : json_contains_in_left(parse_json('[1,2,3]'), NULL)
checked expr   : json_contains_in_left<Variant NULL, Variant NULL>(CAST<Variant>(CAST<String>("[1,2,3]" AS Variant) AS Variant NULL), CAST<NULL>(NULL AS Variant NULL))
optimized expr : NULL
output type    : Boolean NULL
output domain  : {NULL}
output         : NULL


ast            : NULL @> parse_json('1')
raw expr       : json_contains_in_left(NULL, parse_json('1'))
checked expr   : json_contains_in_left<Variant NULL, Variant NULL>(CAST<NULL>(NULL AS Variant NULL), CAST<Variant>(CAST<String>("1" AS Variant) AS Variant NULL))
optimized expr : NULL
output type    : Boolean NULL
output domain  : {NULL}
output         : NULL


ast            : parse_json('true') @> parse_json('true')
raw expr       : json_contains_in_left(parse_json('true'), parse_json('true'))
checked expr   : json_contains_in_left<Variant, Variant>(CAST<String>("true" AS Variant), CAST<String>("true" AS Variant))
optimized expr : true
output type    : Boolean
output domain  : {TRUE}
output         : true


ast            : parse_json('true') @> parse_json('false')
raw expr       : json_contains_in_left(parse_json('true'), parse_json('false'))
checked expr   : json_contains_in_left<Variant, Variant>(CAST<String>("true" AS Variant), CAST<String>("false" AS Variant))
optimized expr : false
output type    : Boolean
output domain  : {FALSE}
output         : false


ast            : parse_json('"asd"') @> parse_json('"asd"')
raw expr       : json_contains_in_left(parse_json('"asd"'), parse_json('"asd"'))
checked expr   : json_contains_in_left<Variant, Variant>(CAST<String>("\"asd\"" AS Variant), CAST<String>("\"asd\"" AS Variant))
optimized expr : true
output type    : Boolean
output domain  : {TRUE}
output         : true


ast            : parse_json('"asd"') @> parse_json('"asdd"')
raw expr       : json_contains_in_left(parse_json('"asd"'), parse_json('"asdd"'))
checked expr   : json_contains_in_left<Variant, Variant>(CAST<String>("\"asd\"" AS Variant), CAST<String>("\"asdd\"" AS Variant))
optimized expr : false
output type    : Boolean
output domain  : {FALSE}
output         : false


ast            : parse_json('[1,2,3]') @> parse_json('1')
raw expr       : json_contains_in_left(parse_json('[1,2,3]'), parse_json('1'))
checked expr   : json_contains_in_left<Variant, Variant>(CAST<String>("[1,2,3]" AS Variant), CAST<String>("1" AS Variant))
optimized expr : true
output type    : Boolean
output domain  : {TRUE}
output         : true


ast            : parse_json('[1,2,3]') @> parse_json('4')
raw expr       : json_contains_in_left(parse_json('[1,2,3]'), parse_json('4'))
checked expr   : json_contains_in_left<Variant, Variant>(CAST<String>("[1,2,3]" AS Variant), CAST<String>("4" AS Variant))
optimized expr : false
output type    : Boolean
output domain  : {FALSE}
output         : false


ast            : parse_json('[1,2,3,4]') @> parse_json('[2,1,3]')
raw expr       : json_contains_in_left(parse_json('[1,2,3,4]'), parse_json('[2,1,3]'))
checked expr   : json_contains_in_left<Variant, Variant>(CAST<String>("[1,2,3,4]" AS Variant), CAST<String>("[2,1,3]" AS Variant))
optimized expr : true
output type    : Boolean
output domain  : {TRUE}
output         : true


ast            : parse_json('[1,2,3,4]') @> parse_json('[2,1,1]')
raw expr       : json_contains_in_left(parse_json('[1,2,3,4]'), parse_json('[2,1,1]'))
checked expr   : json_contains_in_left<Variant, Variant>(CAST<String>("[1,2,3,4]" AS Variant), CAST<String>("[2,1,1]" AS Variant))
optimized expr : true
output type    : Boolean
output domain  : {TRUE}
output         : true


ast            : parse_json('[1,2,[1,3]]') @> parse_json('[1,3]')
raw expr       : json_contains_in_left(parse_json('[1,2,[1,3]]'), parse_json('[1,3]'))
checked expr   : json_contains_in_left<Variant, Variant>(CAST<String>("[1,2,[1,3]]" AS Variant), CAST<String>("[1,3]" AS Variant))
optimized expr : false
output type    : Boolean
output domain  : {FALSE}
output         : false


ast            : parse_json('[1,2,[1,3]]') @> parse_json('[[1,3]]')
raw expr       : json_contains_in_left(parse_json('[1,2,[1,3]]'), parse_json('[[1,3]]'))
checked expr   : json_contains_in_left<Variant, Variant>(CAST<String>("[1,2,[1,3]]" AS Variant), CAST<String>("[[1,3]]" AS Variant))
optimized expr : true
output type    : Boolean
output domain  : {TRUE}
output         : true


ast            : parse_json('[1,2,[1,3]]') @> parse_json('[[[1,3]]]')
raw expr       : json_contains_in_left(parse_json('[1,2,[1,3]]'), parse_json('[[[1,3]]]'))
checked expr   : json_contains_in_left<Variant, Variant>(CAST<String>("[1,2,[1,3]]" AS Variant), CAST<String>("[[[1,3]]]" AS Variant))
optimized expr : false
output type    : Boolean
output domain  : {FALSE}
output         : false


ast            : parse_json('[{"a":1}]') @> parse_json('{"a":1}')
raw expr       : json_contains_in_left(parse_json('[{"a":1}]'), parse_json('{"a":1}'))
checked expr   : json_contains_in_left<Variant, Variant>(CAST<String>("[{\"a\":1}]" AS Variant), CAST<String>("{\"a\":1}" AS Variant))
optimized expr : false
output type    : Boolean
output domain  : {FALSE}
output         : false


ast            : parse_json('[{"a":1},{"b":2}]') @> parse_json('[{"a":1}]')
raw expr       : json_contains_in_left(parse_json('[{"a":1},{"b":2}]'), parse_json('[{"a":1}]'))
checked expr   : json_contains_in_left<Variant, Variant>(CAST<String>("[{\"a\":1},{\"b\":2}]" AS Variant), CAST<String>("[{\"a\":1}]" AS Variant))
optimized expr : true
output type    : Boolean
output domain  : {TRUE}
output         : true


ast            : parse_json('{"a":1,"b":2}') @> parse_json('{"a":1}')
raw expr       : json_contains_in_left(parse_json('{"a":1,"b":2}'), parse_json('{"a":1}'))
checked expr   : json_contains_in_left<Variant, Variant>(CAST<String>("{\"a\":1,\"b\":2}" AS Variant), CAST<String>("{\"a\":1}" AS Variant))
optimized expr : true
output type    : Boolean
output domain  : {TRUE}
output         : true


ast            : parse_json('{"a":1,"b":2}') @> parse_json('{"a":2}')
raw expr       : json_contains_in_left(parse_json('{"a":1,"b":2}'), parse_json('{"a":2}'))
checked expr   : json_contains_in_left<Variant, Variant>(CAST<String>("{\"a\":1,\"b\":2}" AS Variant), CAST<String>("{\"a\":2}" AS Variant))
optimized expr : false
output type    : Boolean
output domain  : {FALSE}
output         : false


ast            : parse_json('{"z":2,"b":{"a":1}}') @> parse_json('{"a":1}')
raw expr       : json_contains_in_left(parse_json('{"z":2,"b":{"a":1}}'), parse_json('{"a":1}'))
checked expr   : json_contains_in_left<Variant, Variant>(CAST<String>("{\"z\":2,\"b\":{\"a\":1}}" AS Variant), CAST<String>("{\"a\":1}" AS Variant))
optimized expr : false
output type    : Boolean
output domain  : {FALSE}
output         : false


ast            : parse_json('{"a":{"c":100,"d":200},"b":2}') @> parse_json('{"a":{}}')
raw expr       : json_contains_in_left(parse_json('{"a":{"c":100,"d":200},"b":2}'), parse_json('{"a":{}}'))
checked expr   : json_contains_in_left<Variant, Variant>(CAST<String>("{\"a\":{\"c\":100,\"d\":200},\"b\":2}" AS Variant), CAST<String>("{\"a\":{}}" AS Variant))
optimized expr : true
output type    : Boolean
output domain  : {TRUE}
output         : true


ast            : NULL <@ NULL
raw expr       : json_contains_in_right(NULL, NULL)
checked expr   : json_contains_in_right<Variant NULL, Variant NULL>(CAST<NULL>(NULL AS Variant NULL), CAST<NULL>(NULL AS Variant NULL))
optimized expr : NULL
output type    : Boolean NULL
output domain  : {NULL}
output         : NULL


ast            : parse_json('[1,2,3]') <@ NULL
raw expr       : json_contains_in_right(parse_json('[1,2,3]'), NULL)
checked expr   : json_contains_in_right<Variant NULL, Variant NULL>(CAST<Variant>(CAST<String>("[1,2,3]" AS Variant) AS Variant NULL), CAST<NULL>(NULL AS Variant NULL))
optimized expr : NULL
output type    : Boolean NULL
output domain  : {NULL}
output         : NULL


ast            : NULL <@ parse_json('1')
raw expr       : json_contains_in_right(NULL, parse_json('1'))
checked expr   : json_contains_in_right<Variant NULL, Variant NULL>(CAST<NULL>(NULL AS Variant NULL), CAST<Variant>(CAST<String>("1" AS Variant) AS Variant NULL))
optimized expr : NULL
output type    : Boolean NULL
output domain  : {NULL}
output         : NULL


ast            : parse_json('true') <@ parse_json('true')
raw expr       : json_contains_in_right(parse_json('true'), parse_json('true'))
checked expr   : json_contains_in_right<Variant, Variant>(CAST<String>("true" AS Variant), CAST<String>("true" AS Variant))
optimized expr : true
output type    : Boolean
output domain  : {TRUE}
output         : true


ast            : parse_json('true') <@ parse_json('false')
raw expr       : json_contains_in_right(parse_json('true'), parse_json('false'))
checked expr   : json_contains_in_right<Variant, Variant>(CAST<String>("true" AS Variant), CAST<String>("false" AS Variant))
optimized expr : false
output type    : Boolean
output domain  : {FALSE}
output         : false


ast            : parse_json('"asd"') <@ parse_json('"asd"')
raw expr       : json_contains_in_right(parse_json('"asd"'), parse_json('"asd"'))
checked expr   : json_contains_in_right<Variant, Variant>(CAST<String>("\"asd\"" AS Variant), CAST<String>("\"asd\"" AS Variant))
optimized expr : true
output type    : Boolean
output domain  : {TRUE}
output         : true


ast            : parse_json('"asd"') <@ parse_json('"asdd"')
raw expr       : json_contains_in_right(parse_json('"asd"'), parse_json('"asdd"'))
checked expr   : json_contains_in_right<Variant, Variant>(CAST<String>("\"asd\"" AS Variant), CAST<String>("\"asdd\"" AS Variant))
optimized expr : false
output type    : Boolean
output domain  : {FALSE}
output         : false


ast            : parse_json('1') <@ parse_json('[1,2,3]')
raw expr       : json_contains_in_right(parse_json('1'), parse_json('[1,2,3]'))
checked expr   : json_contains_in_right<Variant, Variant>(CAST<String>("1" AS Variant), CAST<String>("[1,2,3]" AS Variant))
optimized expr : true
output type    : Boolean
output domain  : {TRUE}
output         : true


ast            : parse_json('4') <@ parse_json('[1,2,3]')
raw expr       : json_contains_in_right(parse_json('4'), parse_json('[1,2,3]'))
checked expr   : json_contains_in_right<Variant, Variant>(CAST<String>("4" AS Variant), CAST<String>("[1,2,3]" AS Variant))
optimized expr : false
output type    : Boolean
output domain  : {FALSE}
output         : false


ast            : parse_json('[2,1,3]') <@ parse_json('[1,2,3,4]')
raw expr       : json_contains_in_right(parse_json('[2,1,3]'), parse_json('[1,2,3,4]'))
checked expr   : json_contains_in_right<Variant, Variant>(CAST<String>("[2,1,3]" AS Variant), CAST<String>("[1,2,3,4]" AS Variant))
optimized expr : true
output type    : Boolean
output domain  : {TRUE}
output         : true


ast            : parse_json('[2,1,1]') <@ parse_json('[1,2,3,4]')
raw expr       : json_contains_in_right(parse_json('[2,1,1]'), parse_json('[1,2,3,4]'))
checked expr   : json_contains_in_right<Variant, Variant>(CAST<String>("[2,1,1]" AS Variant), CAST<String>("[1,2,3,4]" AS Variant))
optimized expr : true
output type    : Boolean
output domain  : {TRUE}
output         : true


ast            : parse_json('[1,3]') <@ parse_json('[1,2,[1,3]]')
raw expr       : json_contains_in_right(parse_json('[1,3]'), parse_json('[1,2,[1,3]]'))
checked expr   : json_contains_in_right<Variant, Variant>(CAST<String>("[1,3]" AS Variant), CAST<String>("[1,2,[1,3]]" AS Variant))
optimized expr : false
output type    : Boolean
output domain  : {FALSE}
output         : false


ast            : parse_json('[[1,3]]') <@ parse_json('[1,2,[1,3]]')
raw expr       : json_contains_in_right(parse_json('[[1,3]]'), parse_json('[1,2,[1,3]]'))
checked expr   : json_contains_in_right<Variant, Variant>(CAST<String>("[[1,3]]" AS Variant), CAST<String>("[1,2,[1,3]]" AS Variant))
optimized expr : true
output type    : Boolean
output domain  : {TRUE}
output         : true


ast            : parse_json('[[[1,3]]]') <@ parse_json('[1,2,[1,3]]')
raw expr       : json_contains_in_right(parse_json('[[[1,3]]]'), parse_json('[1,2,[1,3]]'))
checked expr   : json_contains_in_right<Variant, Variant>(CAST<String>("[[[1,3]]]" AS Variant), CAST<String>("[1,2,[1,3]]" AS Variant))
optimized expr : false
output type    : Boolean
output domain  : {FALSE}
output         : false


ast            : parse_json('{"a":1}') <@ parse_json('[{"a":1}]')
raw expr       : json_contains_in_right(parse_json('{"a":1}'), parse_json('[{"a":1}]'))
checked expr   : json_contains_in_right<Variant, Variant>(CAST<String>("{\"a\":1}" AS Variant), CAST<String>("[{\"a\":1}]" AS Variant))
optimized expr : false
output type    : Boolean
output domain  : {FALSE}
output         : false


ast            : parse_json('[{"a":1}]') <@ parse_json('[{"a":1},{"b":2}]')
raw expr       : json_contains_in_right(parse_json('[{"a":1}]'), parse_json('[{"a":1},{"b":2}]'))
checked expr   : json_contains_in_right<Variant, Variant>(CAST<String>("[{\"a\":1}]" AS Variant), CAST<String>("[{\"a\":1},{\"b\":2}]" AS Variant))
optimized expr : true
output type    : Boolean
output domain  : {TRUE}
output         : true


ast            : parse_json('{"a":1}') <@ parse_json('{"a":1,"b":2}')
raw expr       : json_contains_in_right(parse_json('{"a":1}'), parse_json('{"a":1,"b":2}'))
checked expr   : json_contains_in_right<Variant, Variant>(CAST<String>("{\"a\":1}" AS Variant), CAST<String>("{\"a\":1,\"b\":2}" AS Variant))
optimized expr : true
output type    : Boolean
output domain  : {TRUE}
output         : true


ast            : parse_json('{"a":2}') <@ parse_json('{"a":1,"b":2}')
raw expr       : json_contains_in_right(parse_json('{"a":2}'), parse_json('{"a":1,"b":2}'))
checked expr   : json_contains_in_right<Variant, Variant>(CAST<String>("{\"a\":2}" AS Variant), CAST<String>("{\"a\":1,\"b\":2}" AS Variant))
optimized expr : false
output type    : Boolean
output domain  : {FALSE}
output         : false


ast            : parse_json('{"a":1}') <@ parse_json('{"z":2,"b":{"a":1}}')
raw expr       : json_contains_in_right(parse_json('{"a":1}'), parse_json('{"z":2,"b":{"a":1}}'))
checked expr   : json_contains_in_right<Variant, Variant>(CAST<String>("{\"a\":1}" AS Variant), CAST<String>("{\"z\":2,\"b\":{\"a\":1}}" AS Variant))
optimized expr : false
output type    : Boolean
output domain  : {FALSE}
output         : false


ast            : parse_json('{"a":{}}') <@ parse_json('{"a":{"c":100,"d":200},"b":2}')
raw expr       : json_contains_in_right(parse_json('{"a":{}}'), parse_json('{"a":{"c":100,"d":200},"b":2}'))
checked expr   : json_contains_in_right<Variant, Variant>(CAST<String>("{\"a\":{}}" AS Variant), CAST<String>("{\"a\":{\"c\":100,\"d\":200},\"b\":2}" AS Variant))
optimized expr : true
output type    : Boolean
output domain  : {TRUE}
output         : true


ast            : json_path_match(parse_json('{"a":1,"b":2}'), '$.a == 1')
raw expr       : json_path_match(parse_json('{"a":1,"b":2}'), '$.a == 1')
checked expr   : json_path_match<Variant, String>(CAST<String>("{\"a\":1,\"b\":2}" AS Variant), "$.a == 1")
optimized expr : true
output type    : Boolean NULL
output domain  : {TRUE}
output         : true


ast            : json_path_match(parse_json('{"a":1,"b":2}'), '$.a > 1')
raw expr       : json_path_match(parse_json('{"a":1,"b":2}'), '$.a > 1')
checked expr   : json_path_match<Variant, String>(CAST<String>("{\"a\":1,\"b\":2}" AS Variant), "$.a > 1")
optimized expr : false
output type    : Boolean NULL
output domain  : {FALSE}
output         : false


ast            : json_path_match(parse_json('{"a":1,"b":2}'), '$.c > 0')
raw expr       : json_path_match(parse_json('{"a":1,"b":2}'), '$.c > 0')
checked expr   : json_path_match<Variant, String>(CAST<String>("{\"a\":1,\"b\":2}" AS Variant), "$.c > 0")
optimized expr : false
output type    : Boolean NULL
output domain  : {FALSE}
output         : false


ast            : json_path_match(parse_json('{"a":1,"b":2}'), '$.b < 2')
raw expr       : json_path_match(parse_json('{"a":1,"b":2}'), '$.b < 2')
checked expr   : json_path_match<Variant, String>(CAST<String>("{\"a\":1,\"b\":2}" AS Variant), "$.b < 2")
optimized expr : false
output type    : Boolean NULL
output domain  : {FALSE}
output         : false


ast            : json_path_match(parse_json('{"a":1,"b":[1,2,3]}'), '$.b[0] == 1')
raw expr       : json_path_match(parse_json('{"a":1,"b":[1,2,3]}'), '$.b[0] == 1')
checked expr   : json_path_match<Variant, String>(CAST<String>("{\"a\":1,\"b\":[1,2,3]}" AS Variant), "$.b[0] == 1")
optimized expr : true
output type    : Boolean NULL
output domain  : {TRUE}
output         : true


ast            : json_path_match(parse_json('{"a":1,"b":[1,2,3]}'), '$.b[0] > 1')
raw expr       : json_path_match(parse_json('{"a":1,"b":[1,2,3]}'), '$.b[0] > 1')
checked expr   : json_path_match<Variant, String>(CAST<String>("{\"a\":1,\"b\":[1,2,3]}" AS Variant), "$.b[0] > 1")
optimized expr : false
output type    : Boolean NULL
output domain  : {FALSE}
output         : false


ast            : json_path_match(parse_json('{"a":1,"b":[1,2,3]}'), '$.b[3] == 0')
raw expr       : json_path_match(parse_json('{"a":1,"b":[1,2,3]}'), '$.b[3] == 0')
checked expr   : json_path_match<Variant, String>(CAST<String>("{\"a\":1,\"b\":[1,2,3]}" AS Variant), "$.b[3] == 0")
optimized expr : false
output type    : Boolean NULL
output domain  : {FALSE}
output         : false


ast            : json_path_match(parse_json('{"a":1,"b":[1,2,3]}'), '$.b[1 to last] >= 2')
raw expr       : json_path_match(parse_json('{"a":1,"b":[1,2,3]}'), '$.b[1 to last] >= 2')
checked expr   : json_path_match<Variant, String>(CAST<String>("{\"a\":1,\"b\":[1,2,3]}" AS Variant), "$.b[1 to last] >= 2")
optimized expr : true
output type    : Boolean NULL
output domain  : {TRUE}
output         : true


ast            : json_path_match(parse_json('{"a":1,"b":[1,2,3]}'), '$.b[1 to last] == 2 || $.b[1 to last] == 3')
raw expr       : json_path_match(parse_json('{"a":1,"b":[1,2,3]}'), '$.b[1 to last] == 2 || $.b[1 to last] == 3')
checked expr   : json_path_match<Variant, String>(CAST<String>("{\"a\":1,\"b\":[1,2,3]}" AS Variant), "$.b[1 to last] == 2 || $.b[1 to last] == 3")
optimized expr : true
output type    : Boolean NULL
output domain  : {TRUE}
output         : true


ast            : json_path_match(parse_json(s), p)
raw expr       : json_path_match(parse_json(s::String NULL), p::String)
checked expr   : json_path_match<Variant NULL, String>(CAST<String NULL>(s AS Variant NULL), p)
evaluation:
+--------+---------------------------------+-----------------------------+--------------+
|        | s                               | p                           | Output       |
+--------+---------------------------------+-----------------------------+--------------+
| Type   | String NULL                     | String                      | Boolean NULL |
| Domain | {"[1,2,3,4]"..="true"} ∪ {NULL} | {"$.a > 0"..="$[*].k == 1"} | Unknown      |
| Row 0  | 'true'                          | '$.a > 0'                   | false        |
| Row 1  | '[{"k":1},{"k":2}]'             | '$[*].k == 1'               | true         |
| Row 2  | NULL                            | '$[*] > 1'                  | NULL         |
| Row 3  | '[1,2,3,4]'                     | '$[*] > 2'                  | true         |
+--------+---------------------------------+-----------------------------+--------------+
evaluation (internal):
+--------+-------------------------------------------------------------------------------------------------------+
| Column | Data                                                                                                  |
+--------+-------------------------------------------------------------------------------------------------------+
| s      | NullableColumn { column: StringColumn[true, [{"k":1},{"k":2}], , [1,2,3,4]], validity: [0b____1011] } |
| p      | StringColumn[$.a > 0, $[*].k == 1, $[*] > 1, $[*] > 2]                                                |
| Output | NullableColumn { column: Boolean([0b____1010]), validity: [0b____1011] }                              |
+--------+-------------------------------------------------------------------------------------------------------+


ast            : parse_json('{"a":1,"b":2}') @@ '$.a == 1'
raw expr       : json_path_match(parse_json('{"a":1,"b":2}'), '$.a == 1')
checked expr   : json_path_match<Variant, String>(CAST<String>("{\"a\":1,\"b\":2}" AS Variant), "$.a == 1")
optimized expr : true
output type    : Boolean NULL
output domain  : {TRUE}
output         : true


ast            : parse_json('{"a":1,"b":2}') @@ '$.a > 1'
raw expr       : json_path_match(parse_json('{"a":1,"b":2}'), '$.a > 1')
checked expr   : json_path_match<Variant, String>(CAST<String>("{\"a\":1,\"b\":2}" AS Variant), "$.a > 1")
optimized expr : false
output type    : Boolean NULL
output domain  : {FALSE}
output         : false


ast            : parse_json('{"a":1,"b":2}') @@ '$.c > 0'
raw expr       : json_path_match(parse_json('{"a":1,"b":2}'), '$.c > 0')
checked expr   : json_path_match<Variant, String>(CAST<String>("{\"a\":1,\"b\":2}" AS Variant), "$.c > 0")
optimized expr : false
output type    : Boolean NULL
output domain  : {FALSE}
output         : false


ast            : parse_json('{"a":1,"b":2}') @@ '$.b < 2'
raw expr       : json_path_match(parse_json('{"a":1,"b":2}'), '$.b < 2')
checked expr   : json_path_match<Variant, String>(CAST<String>("{\"a\":1,\"b\":2}" AS Variant), "$.b < 2")
optimized expr : false
output type    : Boolean NULL
output domain  : {FALSE}
output         : false


ast            : parse_json('{"a":1,"b":[1,2,3]}') @@ '$.b[0] == 1'
raw expr       : json_path_match(parse_json('{"a":1,"b":[1,2,3]}'), '$.b[0] == 1')
checked expr   : json_path_match<Variant, String>(CAST<String>("{\"a\":1,\"b\":[1,2,3]}" AS Variant), "$.b[0] == 1")
optimized expr : true
output type    : Boolean NULL
output domain  : {TRUE}
output         : true


ast            : parse_json('{"a":1,"b":[1,2,3]}') @@ '$.b[0] > 1'
raw expr       : json_path_match(parse_json('{"a":1,"b":[1,2,3]}'), '$.b[0] > 1')
checked expr   : json_path_match<Variant, String>(CAST<String>("{\"a\":1,\"b\":[1,2,3]}" AS Variant), "$.b[0] > 1")
optimized expr : false
output type    : Boolean NULL
output domain  : {FALSE}
output         : false


ast            : parse_json('{"a":1,"b":[1,2,3]}') @@ '$.b[3] == 0'
raw expr       : json_path_match(parse_json('{"a":1,"b":[1,2,3]}'), '$.b[3] == 0')
checked expr   : json_path_match<Variant, String>(CAST<String>("{\"a\":1,\"b\":[1,2,3]}" AS Variant), "$.b[3] == 0")
optimized expr : false
output type    : Boolean NULL
output domain  : {FALSE}
output         : false


ast            : parse_json('{"a":1,"b":[1,2,3]}') @@ '$.b[1 to last] >= 2'
raw expr       : json_path_match(parse_json('{"a":1,"b":[1,2,3]}'), '$.b[1 to last] >= 2')
checked expr   : json_path_match<Variant, String>(CAST<String>("{\"a\":1,\"b\":[1,2,3]}" AS Variant), "$.b[1 to last] >= 2")
optimized expr : true
output type    : Boolean NULL
output domain  : {TRUE}
output         : true


ast            : parse_json('{"a":1,"b":[1,2,3]}') @@ '$.b[1 to last] == 2 || $.b[1 to last] == 3'
raw expr       : json_path_match(parse_json('{"a":1,"b":[1,2,3]}'), '$.b[1 to last] == 2 || $.b[1 to last] == 3')
checked expr   : json_path_match<Variant, String>(CAST<String>("{\"a\":1,\"b\":[1,2,3]}" AS Variant), "$.b[1 to last] == 2 || $.b[1 to last] == 3")
optimized expr : true
output type    : Boolean NULL
output domain  : {TRUE}
output         : true


ast            : parse_json(s) @@ p
raw expr       : json_path_match(parse_json(s::String NULL), p::String)
checked expr   : json_path_match<Variant NULL, String>(CAST<String NULL>(s AS Variant NULL), p)
evaluation:
+--------+---------------------------------+-----------------------------+--------------+
|        | s                               | p                           | Output       |
+--------+---------------------------------+-----------------------------+--------------+
| Type   | String NULL                     | String                      | Boolean NULL |
| Domain | {"[1,2,3,4]"..="true"} ∪ {NULL} | {"$.a > 0"..="$[*].k == 1"} | Unknown      |
| Row 0  | 'true'                          | '$.a > 0'                   | false        |
| Row 1  | '[{"k":1},{"k":2}]'             | '$[*].k == 1'               | true         |
| Row 2  | NULL                            | '$[*] > 1'                  | NULL         |
| Row 3  | '[1,2,3,4]'                     | '$[*] > 2'                  | true         |
+--------+---------------------------------+-----------------------------+--------------+
evaluation (internal):
+--------+-------------------------------------------------------------------------------------------------------+
| Column | Data                                                                                                  |
+--------+-------------------------------------------------------------------------------------------------------+
| s      | NullableColumn { column: StringColumn[true, [{"k":1},{"k":2}], , [1,2,3,4]], validity: [0b____1011] } |
| p      | StringColumn[$.a > 0, $[*].k == 1, $[*] > 1, $[*] > 2]                                                |
| Output | NullableColumn { column: Boolean([0b____1010]), validity: [0b____1011] }                              |
+--------+-------------------------------------------------------------------------------------------------------+


ast            : NULL @? '$.a'
raw expr       : json_path_exists(NULL, '$.a')
checked expr   : json_path_exists<NULL, String>(NULL, "$.a")
optimized expr : NULL
output type    : Boolean NULL
output domain  : {NULL}
output         : NULL


ast            : parse_json('{"a": 1, "b": 2}') @? NULL
raw expr       : json_path_exists(parse_json('{"a": 1, "b": 2}'), NULL)
checked expr   : json_path_exists<Variant, NULL>(CAST<String>("{\"a\": 1, \"b\": 2}" AS Variant), NULL)
optimized expr : NULL
output type    : Boolean NULL
output domain  : {NULL}
output         : NULL


ast            : parse_json('{"a": 1, "b": 2}') @? '$.a'
raw expr       : json_path_exists(parse_json('{"a": 1, "b": 2}'), '$.a')
checked expr   : json_path_exists<Variant, String>(CAST<String>("{\"a\": 1, \"b\": 2}" AS Variant), "$.a")
optimized expr : true
output type    : Boolean NULL
output domain  : {TRUE}
output         : true


ast            : parse_json('{"a": 1, "b": 2}') @? '$.c'
raw expr       : json_path_exists(parse_json('{"a": 1, "b": 2}'), '$.c')
checked expr   : json_path_exists<Variant, String>(CAST<String>("{\"a\": 1, \"b\": 2}" AS Variant), "$.c")
optimized expr : false
output type    : Boolean NULL
output domain  : {FALSE}
output         : false


ast            : parse_json('{"a": 1, "b": 2}') @? '$.a ? (@ == 1)'
raw expr       : json_path_exists(parse_json('{"a": 1, "b": 2}'), '$.a ? (@ == 1)')
checked expr   : json_path_exists<Variant, String>(CAST<String>("{\"a\": 1, \"b\": 2}" AS Variant), "$.a ? (@ == 1)")
optimized expr : true
output type    : Boolean NULL
output domain  : {TRUE}
output         : true


ast            : parse_json('{"a": 1, "b": 2}') @? '$.a ? (@ > 1)'
raw expr       : json_path_exists(parse_json('{"a": 1, "b": 2}'), '$.a ? (@ > 1)')
checked expr   : json_path_exists<Variant, String>(CAST<String>("{\"a\": 1, \"b\": 2}" AS Variant), "$.a ? (@ > 1)")
optimized expr : false
output type    : Boolean NULL
output domain  : {FALSE}
output         : false


ast            : parse_json('{"a": 1, "b": [1,2,3]}') @? '$.b[0]'
raw expr       : json_path_exists(parse_json('{"a": 1, "b": [1,2,3]}'), '$.b[0]')
checked expr   : json_path_exists<Variant, String>(CAST<String>("{\"a\": 1, \"b\": [1,2,3]}" AS Variant), "$.b[0]")
optimized expr : true
output type    : Boolean NULL
output domain  : {TRUE}
output         : true


ast            : parse_json('{"a": 1, "b": [1,2,3]}') @? '$.b[3]'
raw expr       : json_path_exists(parse_json('{"a": 1, "b": [1,2,3]}'), '$.b[3]')
checked expr   : json_path_exists<Variant, String>(CAST<String>("{\"a\": 1, \"b\": [1,2,3]}" AS Variant), "$.b[3]")
optimized expr : false
output type    : Boolean NULL
output domain  : {FALSE}
output         : false


ast            : parse_json('{"a": 1, "b": [1,2,3]}') @? '$.b[1 to last] ? (@ >=2 && @ <=3)'
raw expr       : json_path_exists(parse_json('{"a": 1, "b": [1,2,3]}'), '$.b[1 to last] ? (@ >=2 && @ <=3)')
checked expr   : json_path_exists<Variant, String>(CAST<String>("{\"a\": 1, \"b\": [1,2,3]}" AS Variant), "$.b[1 to last] ? (@ >=2 && @ <=3)")
optimized expr : true
output type    : Boolean NULL
output domain  : {TRUE}
output         : true


ast            : parse_json('[1,2,3]') || NULL
raw expr       : concat(parse_json('[1,2,3]'), NULL)
checked expr   : concat<Variant NULL, Variant NULL>(CAST<Variant>(CAST<String>("[1,2,3]" AS Variant) AS Variant NULL), CAST<NULL>(NULL AS Variant NULL))
optimized expr : NULL
output type    : Variant NULL
output domain  : {NULL}
output         : NULL


ast            : parse_json('[1,2,3]') || parse_json('10')
raw expr       : concat(parse_json('[1,2,3]'), parse_json('10'))
checked expr   : concat<Variant, Variant>(CAST<String>("[1,2,3]" AS Variant), CAST<String>("10" AS Variant))
optimized expr : 0x8000000420000002200000022000000220000002500150025003500a
output type    : Variant
output domain  : Undefined
output         : '[1,2,3,10]'


ast            : parse_json('"asd"') || parse_json('[1,2,3]')
raw expr       : concat(parse_json('"asd"'), parse_json('[1,2,3]'))
checked expr   : concat<Variant, Variant>(CAST<String>("\"asd\"" AS Variant), CAST<String>("[1,2,3]" AS Variant))
optimized expr : 0x8000000410000003200000022000000220000002617364500150025003
output type    : Variant
output domain  : Undefined
output         : '["asd",1,2,3]'


ast            : parse_json('[1,{"a":1,"b":2,"c":[1,2,3]},3]') || parse_json('"asd"')
raw expr       : concat(parse_json('[1,{"a":1,"b":2,"c":[1,2,3]},3]'), parse_json('"asd"'))
checked expr   : concat<Variant, Variant>(CAST<String>("[1,{\"a\":1,\"b\":2,\"c\":[1,2,3]},3]" AS Variant), CAST<String>("\"asd\"" AS Variant))
optimized expr : 0x800000042000000250000039200000021000000350014000000310000001100000011000000120000002200000025000001661626350015002800000032000000220000002200000025001500250035003617364
output type    : Variant
output domain  : Undefined
output         : '[1,{"a":1,"b":2,"c":[1,2,3]},3,"asd"]'


ast            : parse_json('[1,{"a":1,"b":2,"c":[1,2,3]},3]') || parse_json('[10,20,30]')
raw expr       : concat(parse_json('[1,{"a":1,"b":2,"c":[1,2,3]},3]'), parse_json('[10,20,30]'))
checked expr   : concat<Variant, Variant>(CAST<String>("[1,{\"a\":1,\"b\":2,\"c\":[1,2,3]},3]" AS Variant), CAST<String>("[10,20,30]" AS Variant))
optimized expr : 0x8000000620000002500000392000000220000002200000022000000250014000000310000001100000011000000120000002200000025000001661626350015002800000032000000220000002200000025001500250035003500a5014501e
output type    : Variant
output domain  : Undefined
output         : '[1,{"a":1,"b":2,"c":[1,2,3]},3,10,20,30]'


ast            : parse_json('[1,[1,2,3],3]') || parse_json('[[10,20,30]]')
raw expr       : concat(parse_json('[1,[1,2,3],3]'), parse_json('[[10,20,30]]'))
checked expr   : concat<Variant, Variant>(CAST<String>("[1,[1,2,3],3]" AS Variant), CAST<String>("[[10,20,30]]" AS Variant))
optimized expr : 0x8000000420000002500000162000000250000016500180000003200000022000000220000002500150025003500380000003200000022000000220000002500a5014501e
output type    : Variant
output domain  : Undefined
output         : '[1,[1,2,3],3,[10,20,30]]'


ast            : parse_json('{"a":1,"b":2}') || parse_json('true')
raw expr       : concat(parse_json('{"a":1,"b":2}'), parse_json('true'))
checked expr   : concat<Variant, Variant>(CAST<String>("{\"a\":1,\"b\":2}" AS Variant), CAST<String>("true" AS Variant))
optimized expr : 0x800000025000001a400000004000000210000001100000012000000220000002616250015002
output type    : Variant
output domain  : Undefined
output         : '[{"a":1,"b":2},true]'


ast            : parse_json('[1,2,3]') || parse_json('{"a":1,"b":2}')
raw expr       : concat(parse_json('[1,2,3]'), parse_json('{"a":1,"b":2}'))
checked expr   : concat<Variant, Variant>(CAST<String>("[1,2,3]" AS Variant), CAST<String>("{\"a\":1,\"b\":2}" AS Variant))
optimized expr : 0x800000042000000220000002200000025000001a5001500250034000000210000001100000012000000220000002616250015002
output type    : Variant
output domain  : Undefined
output         : '[1,2,3,{"a":1,"b":2}]'


ast            : parse_json('{"a":1,"b":2}') || parse_json('[1,2,3]')
raw expr       : concat(parse_json('{"a":1,"b":2}'), parse_json('[1,2,3]'))
checked expr   : concat<Variant, Variant>(CAST<String>("{\"a\":1,\"b\":2}" AS Variant), CAST<String>("[1,2,3]" AS Variant))
optimized expr : 0x800000045000001a2000000220000002200000024000000210000001100000012000000220000002616250015002500150025003
output type    : Variant
output domain  : Undefined
output         : '[{"a":1,"b":2},1,2,3]'


ast            : parse_json('{"a":1,"b":2}') || parse_json('{"c":3,"d":4}')
raw expr       : concat(parse_json('{"a":1,"b":2}'), parse_json('{"c":3,"d":4}'))
checked expr   : concat<Variant, Variant>(CAST<String>("{\"a\":1,\"b\":2}" AS Variant), CAST<String>("{\"c\":3,\"d\":4}" AS Variant))
optimized expr : 0x400000041000000110000001100000011000000120000002200000022000000220000002616263645001500250035004
output type    : Variant
output domain  : Undefined
output         : '{"a":1,"b":2,"c":3,"d":4}'


ast            : parse_json('{"a":1,"b":2,"d":10}') || parse_json('{"a":3,"b":4}')
raw expr       : concat(parse_json('{"a":1,"b":2,"d":10}'), parse_json('{"a":3,"b":4}'))
checked expr   : concat<Variant, Variant>(CAST<String>("{\"a\":1,\"b\":2,\"d\":10}" AS Variant), CAST<String>("{\"a\":3,\"b\":4}" AS Variant))
optimized expr : 0x4000000310000001100000011000000120000002200000022000000261626450035004500a
output type    : Variant
output domain  : Undefined
output         : '{"a":3,"b":4,"d":10}'


error: 
  --> SQL:1:20
  |
1 | parse_json('true') - '1'
  |                    ^ InvalidJsonType while evaluating function `minus('true', '1')` in expr `CAST('true' AS Variant) - '1'`



ast            : parse_json('[1,2,3]') - '1'
raw expr       : minus(parse_json('[1,2,3]'), '1')
checked expr   : minus<Variant, String>(CAST<String>("[1,2,3]" AS Variant), "1")
optimized expr : 0x80000003200000022000000220000002500150025003
output type    : Variant
output domain  : Undefined
output         : '[1,2,3]'


ast            : parse_json('["1","2","3"]') - '0'
raw expr       : minus(parse_json('["1","2","3"]'), '0')
checked expr   : minus<Variant, String>(CAST<String>("[\"1\",\"2\",\"3\"]" AS Variant), "0")
optimized expr : 0x80000003100000011000000110000001313233
output type    : Variant
output domain  : Undefined
output         : '["1","2","3"]'


ast            : parse_json('["1","2","3"]') - '1'
raw expr       : minus(parse_json('["1","2","3"]'), '1')
checked expr   : minus<Variant, String>(CAST<String>("[\"1\",\"2\",\"3\"]" AS Variant), "1")
optimized expr : 0x8000000210000001100000013233
output type    : Variant
output domain  : Undefined
output         : '["2","3"]'


ast            : parse_json('["1","2","3",{"a":1,"b":2}]') - '1'
raw expr       : minus(parse_json('["1","2","3",{"a":1,"b":2}]'), '1')
checked expr   : minus<Variant, String>(CAST<String>("[\"1\",\"2\",\"3\",{\"a\":1,\"b\":2}]" AS Variant), "1")
optimized expr : 0x8000000310000001100000015000001a32334000000210000001100000012000000220000002616250015002
output type    : Variant
output domain  : Undefined
output         : '["2","3",{"a":1,"b":2}]'


ast            : parse_json('{"a":1,"b":2}') - 'c'
raw expr       : minus(parse_json('{"a":1,"b":2}'), 'c')
checked expr   : minus<Variant, String>(CAST<String>("{\"a\":1,\"b\":2}" AS Variant), "c")
optimized expr : 0x4000000210000001100000012000000220000002616250015002
output type    : Variant
output domain  : Undefined
output         : '{"a":1,"b":2}'


ast            : parse_json('{"a":1,"b":2}') - 'a'
raw expr       : minus(parse_json('{"a":1,"b":2}'), 'a')
checked expr   : minus<Variant, String>(CAST<String>("{\"a\":1,\"b\":2}" AS Variant), "a")
optimized expr : 0x400000011000000120000002625002
output type    : Variant
output domain  : Undefined
output         : '{"b":2}'


ast            : parse_json('{"b":2}') - 'b'
raw expr       : minus(parse_json('{"b":2}'), 'b')
checked expr   : minus<Variant, String>(CAST<String>("{\"b\":2}" AS Variant), "b")
optimized expr : 0x40000000
output type    : Variant
output domain  : Undefined
output         : '{}'


error: 
  --> SQL:1:20
  |
1 | parse_json('true') - 1
  |                    ^ InvalidJsonType while evaluating function `minus('true', 1)` in expr `CAST('true' AS Variant) - CAST(1 AS Int32)`



ast            : parse_json('[1,2,3]') - 0
raw expr       : minus(parse_json('[1,2,3]'), 0)
checked expr   : minus<Variant, Int32>(CAST<String>("[1,2,3]" AS Variant), CAST<UInt8>(0_u8 AS Int32))
optimized expr : 0x80000002200000022000000250025003
output type    : Variant
output domain  : Undefined
output         : '[2,3]'


ast            : parse_json('[1,2,3]') - 1
raw expr       : minus(parse_json('[1,2,3]'), 1)
checked expr   : minus<Variant, Int32>(CAST<String>("[1,2,3]" AS Variant), CAST<UInt8>(1_u8 AS Int32))
optimized expr : 0x80000002200000022000000250015003
output type    : Variant
output domain  : Undefined
output         : '[1,3]'


ast            : parse_json('[1,2,3]') - 2
raw expr       : minus(parse_json('[1,2,3]'), 2)
checked expr   : minus<Variant, Int32>(CAST<String>("[1,2,3]" AS Variant), CAST<UInt8>(2_u8 AS Int32))
optimized expr : 0x80000002200000022000000250015002
output type    : Variant
output domain  : Undefined
output         : '[1,2]'


ast            : parse_json('[1,2,3]') - -1
raw expr       : minus(parse_json('[1,2,3]'), minus(1))
checked expr   : minus<Variant, Int32>(CAST<String>("[1,2,3]" AS Variant), CAST<Int16>(minus<UInt8>(1_u8) AS Int32))
optimized expr : 0x80000002200000022000000250015002
output type    : Variant
output domain  : Undefined
output         : '[1,2]'


ast            : parse_json('[1,2,3]') - -2
raw expr       : minus(parse_json('[1,2,3]'), minus(2))
checked expr   : minus<Variant, Int32>(CAST<String>("[1,2,3]" AS Variant), CAST<Int16>(minus<UInt8>(2_u8) AS Int32))
optimized expr : 0x80000002200000022000000250015003
output type    : Variant
output domain  : Undefined
output         : '[1,3]'


ast            : parse_json('[1,2,3]') - -3
raw expr       : minus(parse_json('[1,2,3]'), minus(3))
checked expr   : minus<Variant, Int32>(CAST<String>("[1,2,3]" AS Variant), CAST<Int16>(minus<UInt8>(3_u8) AS Int32))
optimized expr : 0x80000002200000022000000250025003
output type    : Variant
output domain  : Undefined
output         : '[2,3]'


ast            : parse_json('[1,2,3]') - -4
raw expr       : minus(parse_json('[1,2,3]'), minus(4))
checked expr   : minus<Variant, Int32>(CAST<String>("[1,2,3]" AS Variant), CAST<Int16>(minus<UInt8>(4_u8) AS Int32))
optimized expr : 0x80000003200000022000000220000002500150025003
output type    : Variant
output domain  : Undefined
output         : '[1,2,3]'


ast            : parse_json('[1,2,{"a":[1,2,3],"b":[40,50,60]}]') - 2
raw expr       : minus(parse_json('[1,2,{"a":[1,2,3],"b":[40,50,60]}]'), 2)
checked expr   : minus<Variant, Int32>(CAST<String>("[1,2,{\"a\":[1,2,3],\"b\":[40,50,60]}]" AS Variant), CAST<UInt8>(2_u8 AS Int32))
optimized expr : 0x80000002200000022000000250015002
output type    : Variant
output domain  : Undefined
output         : '[1,2]'


ast            : parse_json('[1,2,3]') #- NULL
raw expr       : delete_by_keypath(parse_json('[1,2,3]'), NULL)
checked expr   : delete_by_keypath<Variant, NULL>(CAST<String>("[1,2,3]" AS Variant), NULL)
optimized expr : NULL
output type    : Variant NULL
output domain  : {NULL}
output         : NULL


ast            : parse_json('[1,2,3]') #- '{}'
raw expr       : delete_by_keypath(parse_json('[1,2,3]'), '{}')
checked expr   : delete_by_keypath<Variant, String>(CAST<String>("[1,2,3]" AS Variant), "{}")
optimized expr : 0x80000003200000022000000220000002500150025003
output type    : Variant NULL
output domain  : Undefined
output         : '[1,2,3]'


ast            : parse_json('[1,2,3]') #- '{0}'
raw expr       : delete_by_keypath(parse_json('[1,2,3]'), '{0}')
checked expr   : delete_by_keypath<Variant, String>(CAST<String>("[1,2,3]" AS Variant), "{0}")
optimized expr : 0x80000002200000022000000250025003
output type    : Variant NULL
output domain  : Undefined
output         : '[2,3]'


ast            : parse_json('[1,2,3]') #- '{-1}'
raw expr       : delete_by_keypath(parse_json('[1,2,3]'), '{-1}')
checked expr   : delete_by_keypath<Variant, String>(CAST<String>("[1,2,3]" AS Variant), "{-1}")
optimized expr : 0x80000002200000022000000250015002
output type    : Variant NULL
output domain  : Undefined
output         : '[1,2]'


ast            : parse_json('[1,2,3]') #- '{3}'
raw expr       : delete_by_keypath(parse_json('[1,2,3]'), '{3}')
checked expr   : delete_by_keypath<Variant, String>(CAST<String>("[1,2,3]" AS Variant), "{3}")
optimized expr : 0x80000003200000022000000220000002500150025003
output type    : Variant NULL
output domain  : Undefined
output         : '[1,2,3]'


ast            : parse_json('{"a":1,"b":[1,2,3]}') #- '{b}'
raw expr       : delete_by_keypath(parse_json('{"a":1,"b":[1,2,3]}'), '{b}')
checked expr   : delete_by_keypath<Variant, String>(CAST<String>("{\"a\":1,\"b\":[1,2,3]}" AS Variant), "{b}")
optimized expr : 0x400000011000000120000002615001
output type    : Variant NULL
output domain  : Undefined
output         : '{"a":1}'


ast            : parse_json('{"a":1,"b":[1,2,3]}') #- '{c}'
raw expr       : delete_by_keypath(parse_json('{"a":1,"b":[1,2,3]}'), '{c}')
checked expr   : delete_by_keypath<Variant, String>(CAST<String>("{\"a\":1,\"b\":[1,2,3]}" AS Variant), "{c}")
optimized expr : 0x40000002100000011000000120000002500000166162500180000003200000022000000220000002500150025003
output type    : Variant NULL
output domain  : Undefined
output         : '{"a":1,"b":[1,2,3]}'


ast            : parse_json('{"a":1,"b":[1,2,3]}') #- '{b,2}'
raw expr       : delete_by_keypath(parse_json('{"a":1,"b":[1,2,3]}'), '{b,2}')
checked expr   : delete_by_keypath<Variant, String>(CAST<String>("{\"a\":1,\"b\":[1,2,3]}" AS Variant), "{b,2}")
optimized expr : 0x40000002100000011000000120000002500000106162500180000002200000022000000250015002
output type    : Variant NULL
output domain  : Undefined
output         : '{"a":1,"b":[1,2]}'


ast            : parse_json('{"a":1,"b":[1,2,3]}') #- '{b,-2}'
raw expr       : delete_by_keypath(parse_json('{"a":1,"b":[1,2,3]}'), '{b,-2}')
checked expr   : delete_by_keypath<Variant, String>(CAST<String>("{\"a\":1,\"b\":[1,2,3]}" AS Variant), "{b,-2}")
optimized expr : 0x40000002100000011000000120000002500000106162500180000002200000022000000250015003
output type    : Variant NULL
output domain  : Undefined
output         : '{"a":1,"b":[1,3]}'


ast            : parse_json('{"a":1,"b":[1,2,3]}') #- '{b,20}'
raw expr       : delete_by_keypath(parse_json('{"a":1,"b":[1,2,3]}'), '{b,20}')
checked expr   : delete_by_keypath<Variant, String>(CAST<String>("{\"a\":1,\"b\":[1,2,3]}" AS Variant), "{b,20}")
optimized expr : 0x40000002100000011000000120000002500000166162500180000003200000022000000220000002500150025003
output type    : Variant NULL
output domain  : Undefined
output         : '{"a":1,"b":[1,2,3]}'


ast            : parse_json('{"a":1,"b":[1,2,3]}') #- '{b,20,c,e}'
raw expr       : delete_by_keypath(parse_json('{"a":1,"b":[1,2,3]}'), '{b,20,c,e}')
checked expr   : delete_by_keypath<Variant, String>(CAST<String>("{\"a\":1,\"b\":[1,2,3]}" AS Variant), "{b,20,c,e}")
optimized expr : 0x40000002100000011000000120000002500000166162500180000003200000022000000220000002500150025003
output type    : Variant NULL
output domain  : Undefined
output         : '{"a":1,"b":[1,2,3]}'


ast            : parse_json('{"a":1,"b":[{"c":1,"d":10},2,3]}') #- '{b,0,d}'
raw expr       : delete_by_keypath(parse_json('{"a":1,"b":[{"c":1,"d":10},2,3]}'), '{b,0,d}')
checked expr   : delete_by_keypath<Variant, String>(CAST<String>("{\"a\":1,\"b\":[{\"c\":1,\"d\":10},2,3]}" AS Variant), "{b,0,d}")
optimized expr : 0x400000021000000110000001200000025000002361625001800000035000000f200000022000000240000001100000012000000263500150025003
output type    : Variant NULL
output domain  : Undefined
output         : '{"a":1,"b":[{"c":1},2,3]}'


ast            : parse_json(s) #- '{0,a}'
raw expr       : delete_by_keypath(parse_json(s::String NULL), '{0,a}')
checked expr   : delete_by_keypath<Variant NULL, String>(CAST<String NULL>(s AS Variant NULL), "{0,a}")
evaluation:
+--------+----------------------------------------+--------------+
|        | s                                      | Output       |
+--------+----------------------------------------+--------------+
| Type   | String NULL                            | Variant NULL |
| Domain | {"[1,2,3]"..="{\"a\":\"b\"}"} ∪ {NULL} | Unknown      |
| Row 0  | '[{"a":1},2,3]'                        | '[{},2,3]'   |
| Row 1  | '[1,2,3]'                              | '[1,2,3]'    |
| Row 2  | NULL                                   | NULL         |
| Row 3  | '{"a":"b"}'                            | '{"a":"b"}'  |
+--------+----------------------------------------+--------------+
evaluation (internal):
+--------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| Column | Data                                                                                                                                                                                                 |
+--------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| s      | NullableColumn { column: StringColumn[[{"a":1},2,3], [1,2,3], , {"a":"b"}], validity: [0b____1011] }                                                                                                 |
| Output | NullableColumn { column: Variant([0x800000035000000420000002200000024000000050025003, 0x80000003200000022000000220000002500150025003, 0x, 0x4000000110000001100000016162]), validity: [0b____1011] } |
+--------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+


ast            : parse_json(s) #- k
raw expr       : delete_by_keypath(parse_json(s::String NULL), k::String NULL)
checked expr   : delete_by_keypath<Variant NULL, String NULL>(CAST<String NULL>(s AS Variant NULL), k)
evaluation:
+--------+--------------------------------------------------+-------------------------------+---------------+
|        | s                                                | k                             | Output        |
+--------+--------------------------------------------------+-------------------------------+---------------+
| Type   | String NULL                                      | String NULL                   | Variant NULL  |
| Domain | {"[1,{\"a\":2},3]"..="{\"k\":[1,2,3]}"} ∪ {NULL} | {"{1,a}"..="{k,-1}"} ∪ {NULL} | Unknown       |
| Row 0  | '[1,{"a":2},3]'                                  | '{1,a}'                       | '[1,{},3]'    |
| Row 1  | '{"k":[1,2,3]}'                                  | '{k,-1}'                      | '{"k":[1,2]}' |
| Row 2  | NULL                                             | NULL                          | NULL          |
| Row 3  | '{"a":"b"}'                                      | '{c}'                         | '{"a":"b"}'   |
+--------+--------------------------------------------------+-------------------------------+---------------+
evaluation (internal):
+--------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| Column | Data                                                                                                                                                                                                               |
+--------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| s      | NullableColumn { column: StringColumn[[1,{"a":2},3], {"k":[1,2,3]}, , {"a":"b"}], validity: [0b____1011] }                                                                                                         |
| k      | NullableColumn { column: StringColumn[{1,a}, {k,-1}, {k}, {c}], validity: [0b____1011] }                                                                                                                           |
| Output | NullableColumn { column: Variant([0x800000032000000250000004200000025001400000005003, 0x4000000110000001500000106b80000002200000022000000250015002, 0x, 0x4000000110000001100000016162]), validity: [0b____1011] } |
+--------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+


ast            : array_insert('[0,1,2,3]'::variant, 2, '"hello"'::variant)
raw expr       : array_insert(CAST('[0,1,2,3]' AS Variant), 2, CAST('"hello"' AS Variant))
checked expr   : array_insert<Variant, Int32, Variant>(CAST<String>("[0,1,2,3]" AS Variant), CAST<UInt8>(2_u8 AS Int32), CAST<String>("\"hello\"" AS Variant))
optimized expr : 0x80000005200000012000000210000005200000022000000200500168656c6c6f50025003
output type    : Variant
output domain  : Undefined
output         : '[0,1,"hello",2,3]'


ast            : array_insert('[0,1,2,3]'::variant, 10, '100'::variant)
raw expr       : array_insert(CAST('[0,1,2,3]' AS Variant), 10, CAST('100' AS Variant))
checked expr   : array_insert<Variant, Int32, Variant>(CAST<String>("[0,1,2,3]" AS Variant), CAST<UInt8>(10_u8 AS Int32), CAST<String>("100" AS Variant))
optimized expr : 0x800000052000000120000002200000022000000220000002005001500250035064
output type    : Variant
output domain  : Undefined
output         : '[0,1,2,3,100]'


ast            : array_insert('[0,1,2,3]'::variant, 0, 'true'::variant)
raw expr       : array_insert(CAST('[0,1,2,3]' AS Variant), 0, CAST('true' AS Variant))
checked expr   : array_insert<Variant, Int32, Variant>(CAST<String>("[0,1,2,3]" AS Variant), CAST<UInt8>(0_u8 AS Int32), CAST<String>("true" AS Variant))
optimized expr : 0x80000005400000002000000120000002200000022000000200500150025003
output type    : Variant
output domain  : Undefined
output         : '[true,0,1,2,3]'


ast            : array_insert('[0,1,2,3]'::variant, -1, '{"k":"v"}'::variant)
raw expr       : array_insert(CAST('[0,1,2,3]' AS Variant), minus(1), CAST('{"k":"v"}' AS Variant))
checked expr   : array_insert<Variant, Int32, Variant>(CAST<String>("[0,1,2,3]" AS Variant), CAST<Int16>(minus<UInt8>(1_u8) AS Int32), CAST<String>("{\"k\":\"v\"}" AS Variant))
optimized expr : 0x800000052000000120000002200000025000000e2000000200500150024000000110000001100000016b765003
output type    : Variant
output domain  : Undefined
output         : '[0,1,2,{"k":"v"},3]'


ast            : array_insert('1'::variant, 1, '{"k":"v"}'::variant)
raw expr       : array_insert(CAST('1' AS Variant), 1, CAST('{"k":"v"}' AS Variant))
checked expr   : array_insert<Variant, Int32, Variant>(CAST<String>("1" AS Variant), CAST<UInt8>(1_u8 AS Int32), CAST<String>("{\"k\":\"v\"}" AS Variant))
optimized expr : 0x80000002200000025000000e50014000000110000001100000016b76
output type    : Variant
output domain  : Undefined
output         : '[1,{"k":"v"}]'


ast            : array_insert('{"k":"v"}'::variant, 2, 'true'::variant)
raw expr       : array_insert(CAST('{"k":"v"}' AS Variant), 2, CAST('true' AS Variant))
checked expr   : array_insert<Variant, Int32, Variant>(CAST<String>("{\"k\":\"v\"}" AS Variant), CAST<UInt8>(2_u8 AS Int32), CAST<String>("true" AS Variant))
optimized expr : 0x800000025000000e400000004000000110000001100000016b76
output type    : Variant
output domain  : Undefined
output         : '[{"k":"v"},true]'


ast            : array_insert(parse_json(v), 2, parse_json(n))
raw expr       : array_insert(parse_json(v::String NULL), 2, parse_json(n::String NULL))
checked expr   : array_insert<Variant NULL, Int32 NULL, Variant NULL>(CAST<String NULL>(v AS Variant NULL), CAST<UInt8>(2_u8 AS Int32 NULL), CAST<String NULL>(n AS Variant NULL))
optimized expr : array_insert<Variant NULL, Int32 NULL, Variant NULL>(CAST<String NULL>(v AS Variant NULL), 2_i32, CAST<String NULL>(n AS Variant NULL))
evaluation:
+--------+----------------------------------------------+------------------------------+-----------------------+
|        | v                                            | n                            | Output                |
+--------+----------------------------------------------+------------------------------+-----------------------+
| Type   | String NULL                                  | String NULL                  | Variant NULL          |
| Domain | {"[\"A\",\"B\"]"..="{\"a\":\"b\"}"} ∪ {NULL} | {"\"hi\""..="true"} ∪ {NULL} | Unknown               |
| Row 0  | '[1,2,3,null]'                               | '"hi"'                       | '[1,2,"hi",3,null]'   |
| Row 1  | '["A","B"]'                                  | NULL                         | NULL                  |
| Row 2  | NULL                                         | 'true'                       | NULL                  |
| Row 3  | '{"a":"b"}'                                  | '[1,2,3]'                    | '[{"a":"b"},[1,2,3]]' |
+--------+----------------------------------------------+------------------------------+-----------------------+
evaluation (internal):
+--------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| Column | Data                                                                                                                                                                                                                                         |
+--------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| v      | NullableColumn { column: StringColumn[[1,2,3,null], ["A","B"], , {"a":"b"}], validity: [0b____1011] }                                                                                                                                        |
| n      | NullableColumn { column: StringColumn["hi", , true, [1,2,3]], validity: [0b____1101] }                                                                                                                                                       |
| Output | NullableColumn { column: Variant([0x8000000520000002200000021000000220000002000000005001500268695003, 0x, 0x, 0x800000025000000e50000016400000011000000110000001616280000003200000022000000220000002500150025003]), validity: [0b____1001] } |
+--------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+


ast            : array_distinct('[0,1,1,2,2,2,3,4]'::variant)
raw expr       : array_distinct(CAST('[0,1,1,2,2,2,3,4]' AS Variant))
checked expr   : array_distinct<Variant>(CAST<String>("[0,1,1,2,2,2,3,4]" AS Variant))
optimized expr : 0x800000052000000120000002200000022000000220000002005001500250035004
output type    : Variant
output domain  : Undefined
output         : '[0,1,2,3,4]'


ast            : array_distinct('["A","A","B","C","A","C"]'::variant)
raw expr       : array_distinct(CAST('["A","A","B","C","A","C"]' AS Variant))
checked expr   : array_distinct<Variant>(CAST<String>("[\"A\",\"A\",\"B\",\"C\",\"A\",\"C\"]" AS Variant))
optimized expr : 0x80000003100000011000000110000001414243
output type    : Variant
output domain  : Undefined
output         : '["A","B","C"]'


ast            : array_distinct('["A","A",10,false,null,false,null,10]'::variant)
raw expr       : array_distinct(CAST('["A","A",10,false,null,false,null,10]' AS Variant))
checked expr   : array_distinct<Variant>(CAST<String>("[\"A\",\"A\",10,false,null,false,null,10]" AS Variant))
optimized expr : 0x800000041000000120000002300000000000000041500a
output type    : Variant
output domain  : Undefined
output         : '["A",10,false,null]'


ast            : array_distinct('[[1,2,2],3,4,[1,2,2]]'::variant)
raw expr       : array_distinct(CAST('[[1,2,2],3,4,[1,2,2]]' AS Variant))
checked expr   : array_distinct<Variant>(CAST<String>("[[1,2,2],3,4,[1,2,2]]" AS Variant))
optimized expr : 0x800000035000001620000002200000028000000320000002200000022000000250015002500250035004
output type    : Variant
output domain  : Undefined
output         : '[[1,2,2],3,4]'


ast            : array_distinct('[{"k":"v"},"A","A","B",{"k":"v"}]'::variant)
raw expr       : array_distinct(CAST('[{"k":"v"},"A","A","B",{"k":"v"}]' AS Variant))
checked expr   : array_distinct<Variant>(CAST<String>("[{\"k\":\"v\"},\"A\",\"A\",\"B\",{\"k\":\"v\"}]" AS Variant))
optimized expr : 0x800000035000000e10000001100000014000000110000001100000016b764142
output type    : Variant
output domain  : Undefined
output         : '[{"k":"v"},"A","B"]'


ast            : array_distinct('1'::variant)
raw expr       : array_distinct(CAST('1' AS Variant))
checked expr   : array_distinct<Variant>(CAST<String>("1" AS Variant))
optimized expr : 0x80000001200000025001
output type    : Variant
output domain  : Undefined
output         : '[1]'


ast            : array_distinct('{"k":"v"}'::variant)
raw expr       : array_distinct(CAST('{"k":"v"}' AS Variant))
checked expr   : array_distinct<Variant>(CAST<String>("{\"k\":\"v\"}" AS Variant))
optimized expr : 0x800000015000000e4000000110000001100000016b76
output type    : Variant
output domain  : Undefined
output         : '[{"k":"v"}]'


ast            : array_distinct(parse_json(v))
raw expr       : array_distinct(parse_json(v::String NULL))
checked expr   : array_distinct<Variant NULL>(CAST<String NULL>(v AS Variant NULL))
evaluation:
+--------+----------------------------------------------------------------+-----------------+
|        | v                                                              | Output          |
+--------+----------------------------------------------------------------+-----------------+
| Type   | String NULL                                                    | Variant NULL    |
| Domain | {"[\"A\",\"B\",\"A\",\"B\",\"C\"]"..="{\"a\":\"b\"}"} ∪ {NULL} | Unknown         |
| Row 0  | '[1,1,2,3,3,null,2,1,null]'                                    | '[1,2,3,null]'  |
| Row 1  | '["A","B","A","B","C"]'                                        | '["A","B","C"]' |
| Row 2  | NULL                                                           | NULL            |
| Row 3  | '{"a":"b"}'                                                    | '[{"a":"b"}]'   |
+--------+----------------------------------------------------------------+-----------------+
evaluation (internal):
+--------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| Column | Data                                                                                                                                                                                                               |
+--------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| v      | NullableColumn { column: StringColumn[[1,1,2,3,3,null,2,1,null], ["A","B","A","B","C"], , {"a":"b"}], validity: [0b____1011] }                                                                                     |
| Output | NullableColumn { column: Variant([0x8000000420000002200000022000000200000000500150025003, 0x80000003100000011000000110000001414243, 0x, 0x800000015000000e4000000110000001100000016162]), validity: [0b____1011] } |
+--------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+


ast            : array_intersection('["A","B","C"]'::variant, '["B","C"]'::variant)
raw expr       : array_intersection(CAST('["A","B","C"]' AS Variant), CAST('["B","C"]' AS Variant))
checked expr   : array_intersection<Variant, Variant>(CAST<String>("[\"A\",\"B\",\"C\"]" AS Variant), CAST<String>("[\"B\",\"C\"]" AS Variant))
optimized expr : 0x8000000210000001100000014243
output type    : Variant
output domain  : Undefined
output         : '["B","C"]'


ast            : array_intersection('["A","B","B","B","C"]'::variant, '["B","B"]'::variant)
raw expr       : array_intersection(CAST('["A","B","B","B","C"]' AS Variant), CAST('["B","B"]' AS Variant))
checked expr   : array_intersection<Variant, Variant>(CAST<String>("[\"A\",\"B\",\"B\",\"B\",\"C\"]" AS Variant), CAST<String>("[\"B\",\"B\"]" AS Variant))
optimized expr : 0x8000000210000001100000014242
output type    : Variant
output domain  : Undefined
output         : '["B","B"]'


ast            : array_intersection('[1,2]'::variant, '[3,4]'::variant)
raw expr       : array_intersection(CAST('[1,2]' AS Variant), CAST('[3,4]' AS Variant))
checked expr   : array_intersection<Variant, Variant>(CAST<String>("[1,2]" AS Variant), CAST<String>("[3,4]" AS Variant))
optimized expr : 0x80000000
output type    : Variant
output domain  : Undefined
output         : '[]'


ast            : array_intersection('[null,102,null]'::variant, '[null,null,103]'::variant)
raw expr       : array_intersection(CAST('[null,102,null]' AS Variant), CAST('[null,null,103]' AS Variant))
checked expr   : array_intersection<Variant, Variant>(CAST<String>("[null,102,null]" AS Variant), CAST<String>("[null,null,103]" AS Variant))
optimized expr : 0x800000020000000000000000
output type    : Variant
output domain  : Undefined
output         : '[null,null]'


ast            : array_intersection('[{"a":1,"b":2},1,2]'::variant, '[{"a":1,"b":2},3,4]'::variant)
raw expr       : array_intersection(CAST('[{"a":1,"b":2},1,2]' AS Variant), CAST('[{"a":1,"b":2},3,4]' AS Variant))
checked expr   : array_intersection<Variant, Variant>(CAST<String>("[{\"a\":1,\"b\":2},1,2]" AS Variant), CAST<String>("[{\"a\":1,\"b\":2},3,4]" AS Variant))
optimized expr : 0x800000015000001a4000000210000001100000012000000220000002616250015002
output type    : Variant
output domain  : Undefined
output         : '[{"a":1,"b":2}]'


ast            : array_intersection('[{"a":1,"b":2},1,2]'::variant, '[{"a":2,"c":3},3,4]'::variant)
raw expr       : array_intersection(CAST('[{"a":1,"b":2},1,2]' AS Variant), CAST('[{"a":2,"c":3},3,4]' AS Variant))
checked expr   : array_intersection<Variant, Variant>(CAST<String>("[{\"a\":1,\"b\":2},1,2]" AS Variant), CAST<String>("[{\"a\":2,\"c\":3},3,4]" AS Variant))
optimized expr : 0x80000000
output type    : Variant
output domain  : Undefined
output         : '[]'


ast            : array_intersection('[{"a":1,"b":2,"c":3}]'::variant, '[{"c":3,"b":2,"a":1},3,4]'::variant)
raw expr       : array_intersection(CAST('[{"a":1,"b":2,"c":3}]' AS Variant), CAST('[{"c":3,"b":2,"a":1},3,4]' AS Variant))
checked expr   : array_intersection<Variant, Variant>(CAST<String>("[{\"a\":1,\"b\":2,\"c\":3}]" AS Variant), CAST<String>("[{\"c\":3,\"b\":2,\"a\":1},3,4]" AS Variant))
optimized expr : 0x800000015000002540000003100000011000000110000001200000022000000220000002616263500150025003
output type    : Variant
output domain  : Undefined
output         : '[{"a":1,"b":2,"c":3}]'


ast            : array_intersection('1'::variant, '1'::variant)
raw expr       : array_intersection(CAST('1' AS Variant), CAST('1' AS Variant))
checked expr   : array_intersection<Variant, Variant>(CAST<String>("1" AS Variant), CAST<String>("1" AS Variant))
optimized expr : 0x80000001200000025001
output type    : Variant
output domain  : Undefined
output         : '[1]'


ast            : array_intersection('1'::variant, '2'::variant)
raw expr       : array_intersection(CAST('1' AS Variant), CAST('2' AS Variant))
checked expr   : array_intersection<Variant, Variant>(CAST<String>("1" AS Variant), CAST<String>("2" AS Variant))
optimized expr : 0x80000000
output type    : Variant
output domain  : Undefined
output         : '[]'


ast            : array_intersection('{"k":"v"}'::variant, '{"k":"v"}'::variant)
raw expr       : array_intersection(CAST('{"k":"v"}' AS Variant), CAST('{"k":"v"}' AS Variant))
checked expr   : array_intersection<Variant, Variant>(CAST<String>("{\"k\":\"v\"}" AS Variant), CAST<String>("{\"k\":\"v\"}" AS Variant))
optimized expr : 0x800000015000000e4000000110000001100000016b76
output type    : Variant
output domain  : Undefined
output         : '[{"k":"v"}]'


ast            : array_intersection(parse_json(v1), parse_json(v2))
raw expr       : array_intersection(parse_json(v1::String NULL), parse_json(v2::String NULL))
checked expr   : array_intersection<Variant NULL, Variant NULL>(CAST<String NULL>(v1 AS Variant NULL), CAST<String NULL>(v2 AS Variant NULL))
evaluation:
+--------+----------------------------------------------------------------+----------------------------------------------------+----------------+
|        | v1                                                             | v2                                                 | Output         |
+--------+----------------------------------------------------------------+----------------------------------------------------+----------------+
| Type   | String NULL                                                    | String NULL                                        | Variant NULL   |
| Domain | {"[\"A\",\"B\",\"A\",\"B\",\"C\"]"..="{\"a\":\"b\"}"} ∪ {NULL} | {"[\"X\",\"Y\",\"Z\"]"..="{\"a\":\"b\"}"} ∪ {NULL} | Unknown        |
| Row 0  | '[1,2,3,3,null,null]'                                          | '[1,1,2,3,4,5,null]'                               | '[1,2,3,null]' |
| Row 1  | '["A","B","A","B","C"]'                                        | '["X","Y","Z"]'                                    | '[]'           |
| Row 2  | NULL                                                           | NULL                                               | NULL           |
| Row 3  | '{"a":"b"}'                                                    | '{"a":"b"}'                                        | '[{"a":"b"}]'  |
+--------+----------------------------------------------------------------+----------------------------------------------------+----------------+
evaluation (internal):
+--------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| Column | Data                                                                                                                                                                                 |
+--------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| v1     | NullableColumn { column: StringColumn[[1,2,3,3,null,null], ["A","B","A","B","C"], , {"a":"b"}], validity: [0b____1011] }                                                             |
| v2     | NullableColumn { column: StringColumn[[1,1,2,3,4,5,null], ["X","Y","Z"], , {"a":"b"}], validity: [0b____1011] }                                                                      |
| Output | NullableColumn { column: Variant([0x8000000420000002200000022000000200000000500150025003, 0x80000000, 0x, 0x800000015000000e4000000110000001100000016162]), validity: [0b____1011] } |
+--------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+


ast            : array_except('["A","B","C"]'::variant, '["B","C"]'::variant)
raw expr       : array_except(CAST('["A","B","C"]' AS Variant), CAST('["B","C"]' AS Variant))
checked expr   : array_except<Variant, Variant>(CAST<String>("[\"A\",\"B\",\"C\"]" AS Variant), CAST<String>("[\"B\",\"C\"]" AS Variant))
optimized expr : 0x800000011000000141
output type    : Variant
output domain  : Undefined
output         : '["A"]'


ast            : array_except('["A","B","B","B","C"]'::variant, '["B","B"]'::variant)
raw expr       : array_except(CAST('["A","B","B","B","C"]' AS Variant), CAST('["B","B"]' AS Variant))
checked expr   : array_except<Variant, Variant>(CAST<String>("[\"A\",\"B\",\"B\",\"B\",\"C\"]" AS Variant), CAST<String>("[\"B\",\"B\"]" AS Variant))
optimized expr : 0x80000003100000011000000110000001414243
output type    : Variant
output domain  : Undefined
output         : '["A","B","C"]'


ast            : array_except('[1,2]'::variant, '[3,4]'::variant)
raw expr       : array_except(CAST('[1,2]' AS Variant), CAST('[3,4]' AS Variant))
checked expr   : array_except<Variant, Variant>(CAST<String>("[1,2]" AS Variant), CAST<String>("[3,4]" AS Variant))
optimized expr : 0x80000002200000022000000250015002
output type    : Variant
output domain  : Undefined
output         : '[1,2]'


ast            : array_except('[null,102,null]'::variant, '[null,null,103]'::variant)
raw expr       : array_except(CAST('[null,102,null]' AS Variant), CAST('[null,null,103]' AS Variant))
checked expr   : array_except<Variant, Variant>(CAST<String>("[null,102,null]" AS Variant), CAST<String>("[null,null,103]" AS Variant))
optimized expr : 0x80000001200000025066
output type    : Variant
output domain  : Undefined
output         : '[102]'


ast            : array_except('[{"a":1,"b":2},1,2]'::variant, '[{"a":1,"b":2},3,4]'::variant)
raw expr       : array_except(CAST('[{"a":1,"b":2},1,2]' AS Variant), CAST('[{"a":1,"b":2},3,4]' AS Variant))
checked expr   : array_except<Variant, Variant>(CAST<String>("[{\"a\":1,\"b\":2},1,2]" AS Variant), CAST<String>("[{\"a\":1,\"b\":2},3,4]" AS Variant))
optimized expr : 0x80000002200000022000000250015002
output type    : Variant
output domain  : Undefined
output         : '[1,2]'


ast            : array_except('[{"a":1,"b":2},1,2]'::variant, '[{"a":2,"c":3},3,4]'::variant)
raw expr       : array_except(CAST('[{"a":1,"b":2},1,2]' AS Variant), CAST('[{"a":2,"c":3},3,4]' AS Variant))
checked expr   : array_except<Variant, Variant>(CAST<String>("[{\"a\":1,\"b\":2},1,2]" AS Variant), CAST<String>("[{\"a\":2,\"c\":3},3,4]" AS Variant))
optimized expr : 0x800000035000001a2000000220000002400000021000000110000001200000022000000261625001500250015002
output type    : Variant
output domain  : Undefined
output         : '[{"a":1,"b":2},1,2]'


ast            : array_except('[{"a":1,"b":2,"c":3}]'::variant, '[{"c":3,"b":2,"a":1},3,4]'::variant)
raw expr       : array_except(CAST('[{"a":1,"b":2,"c":3}]' AS Variant), CAST('[{"c":3,"b":2,"a":1},3,4]' AS Variant))
checked expr   : array_except<Variant, Variant>(CAST<String>("[{\"a\":1,\"b\":2,\"c\":3}]" AS Variant), CAST<String>("[{\"c\":3,\"b\":2,\"a\":1},3,4]" AS Variant))
optimized expr : 0x80000000
output type    : Variant
output domain  : Undefined
output         : '[]'


ast            : array_except('1'::variant, '1'::variant)
raw expr       : array_except(CAST('1' AS Variant), CAST('1' AS Variant))
checked expr   : array_except<Variant, Variant>(CAST<String>("1" AS Variant), CAST<String>("1" AS Variant))
optimized expr : 0x80000000
output type    : Variant
output domain  : Undefined
output         : '[]'


ast            : array_except('1'::variant, '2'::variant)
raw expr       : array_except(CAST('1' AS Variant), CAST('2' AS Variant))
checked expr   : array_except<Variant, Variant>(CAST<String>("1" AS Variant), CAST<String>("2" AS Variant))
optimized expr : 0x80000001200000025001
output type    : Variant
output domain  : Undefined
output         : '[1]'


ast            : array_except('{"k":"v"}'::variant, '{"k":"v"}'::variant)
raw expr       : array_except(CAST('{"k":"v"}' AS Variant), CAST('{"k":"v"}' AS Variant))
checked expr   : array_except<Variant, Variant>(CAST<String>("{\"k\":\"v\"}" AS Variant), CAST<String>("{\"k\":\"v\"}" AS Variant))
optimized expr : 0x80000000
output type    : Variant
output domain  : Undefined
output         : '[]'


ast            : array_except(parse_json(v1), parse_json(v2))
raw expr       : array_except(parse_json(v1::String NULL), parse_json(v2::String NULL))
checked expr   : array_except<Variant NULL, Variant NULL>(CAST<String NULL>(v1 AS Variant NULL), CAST<String NULL>(v2 AS Variant NULL))
evaluation:
+--------+----------------------------------------------------------------+----------------------------------------------------+-------------------------+
|        | v1                                                             | v2                                                 | Output                  |
+--------+----------------------------------------------------------------+----------------------------------------------------+-------------------------+
| Type   | String NULL                                                    | String NULL                                        | Variant NULL            |
| Domain | {"[\"A\",\"B\",\"A\",\"B\",\"C\"]"..="{\"a\":\"b\"}"} ∪ {NULL} | {"[\"X\",\"Y\",\"Z\"]"..="{\"a\":\"b\"}"} ∪ {NULL} | Unknown                 |
| Row 0  | '[1,2,3,3,null,null]'                                          | '[1,1,2,3,4,5,null]'                               | '[3,null]'              |
| Row 1  | '["A","B","A","B","C"]'                                        | '["X","Y","Z"]'                                    | '["A","B","A","B","C"]' |
| Row 2  | NULL                                                           | NULL                                               | NULL                    |
| Row 3  | '{"a":"b"}'                                                    | '{"a":"b"}'                                        | '[]'                    |
+--------+----------------------------------------------------------------+----------------------------------------------------+-------------------------+
evaluation (internal):
+--------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| Column | Data                                                                                                                                                                       |
+--------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| v1     | NullableColumn { column: StringColumn[[1,2,3,3,null,null], ["A","B","A","B","C"], , {"a":"b"}], validity: [0b____1011] }                                                   |
| v2     | NullableColumn { column: StringColumn[[1,1,2,3,4,5,null], ["X","Y","Z"], , {"a":"b"}], validity: [0b____1011] }                                                            |
| Output | NullableColumn { column: Variant([0x8000000220000002000000005003, 0x8000000510000001100000011000000110000001100000014142414243, 0x, 0x80000000]), validity: [0b____1011] } |
+--------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------+


ast            : array_overlap('["A","B","C"]'::variant, '["B","C"]'::variant)
raw expr       : array_overlap(CAST('["A","B","C"]' AS Variant), CAST('["B","C"]' AS Variant))
checked expr   : array_overlap<Variant, Variant>(CAST<String>("[\"A\",\"B\",\"C\"]" AS Variant), CAST<String>("[\"B\",\"C\"]" AS Variant))
optimized expr : true
output type    : Boolean
output domain  : {TRUE}
output         : true


ast            : array_overlap('["A","B","B","B","C"]'::variant, '["B","B"]'::variant)
raw expr       : array_overlap(CAST('["A","B","B","B","C"]' AS Variant), CAST('["B","B"]' AS Variant))
checked expr   : array_overlap<Variant, Variant>(CAST<String>("[\"A\",\"B\",\"B\",\"B\",\"C\"]" AS Variant), CAST<String>("[\"B\",\"B\"]" AS Variant))
optimized expr : true
output type    : Boolean
output domain  : {TRUE}
output         : true


ast            : array_overlap('[1,2]'::variant, '[3,4]'::variant)
raw expr       : array_overlap(CAST('[1,2]' AS Variant), CAST('[3,4]' AS Variant))
checked expr   : array_overlap<Variant, Variant>(CAST<String>("[1,2]" AS Variant), CAST<String>("[3,4]" AS Variant))
optimized expr : false
output type    : Boolean
output domain  : {FALSE}
output         : false


ast            : array_overlap('[null,102,null]'::variant, '[null,null,103]'::variant)
raw expr       : array_overlap(CAST('[null,102,null]' AS Variant), CAST('[null,null,103]' AS Variant))
checked expr   : array_overlap<Variant, Variant>(CAST<String>("[null,102,null]" AS Variant), CAST<String>("[null,null,103]" AS Variant))
optimized expr : true
output type    : Boolean
output domain  : {TRUE}
output         : true


ast            : array_overlap('[{"a":1,"b":2},1,2]'::variant, '[{"a":1,"b":2},3,4]'::variant)
raw expr       : array_overlap(CAST('[{"a":1,"b":2},1,2]' AS Variant), CAST('[{"a":1,"b":2},3,4]' AS Variant))
checked expr   : array_overlap<Variant, Variant>(CAST<String>("[{\"a\":1,\"b\":2},1,2]" AS Variant), CAST<String>("[{\"a\":1,\"b\":2},3,4]" AS Variant))
optimized expr : true
output type    : Boolean
output domain  : {TRUE}
output         : true


ast            : array_overlap('[{"a":1,"b":2},1,2]'::variant, '[{"a":2,"c":3},3,4]'::variant)
raw expr       : array_overlap(CAST('[{"a":1,"b":2},1,2]' AS Variant), CAST('[{"a":2,"c":3},3,4]' AS Variant))
checked expr   : array_overlap<Variant, Variant>(CAST<String>("[{\"a\":1,\"b\":2},1,2]" AS Variant), CAST<String>("[{\"a\":2,\"c\":3},3,4]" AS Variant))
optimized expr : false
output type    : Boolean
output domain  : {FALSE}
output         : false


ast            : array_overlap('[{"a":1,"b":2,"c":3}]'::variant, '[{"c":3,"b":2,"a":1},3,4]'::variant)
raw expr       : array_overlap(CAST('[{"a":1,"b":2,"c":3}]' AS Variant), CAST('[{"c":3,"b":2,"a":1},3,4]' AS Variant))
checked expr   : array_overlap<Variant, Variant>(CAST<String>("[{\"a\":1,\"b\":2,\"c\":3}]" AS Variant), CAST<String>("[{\"c\":3,\"b\":2,\"a\":1},3,4]" AS Variant))
optimized expr : true
output type    : Boolean
output domain  : {TRUE}
output         : true


ast            : array_overlap('1'::variant, '1'::variant)
raw expr       : array_overlap(CAST('1' AS Variant), CAST('1' AS Variant))
checked expr   : array_overlap<Variant, Variant>(CAST<String>("1" AS Variant), CAST<String>("1" AS Variant))
optimized expr : true
output type    : Boolean
output domain  : {TRUE}
output         : true


ast            : array_overlap('1'::variant, '2'::variant)
raw expr       : array_overlap(CAST('1' AS Variant), CAST('2' AS Variant))
checked expr   : array_overlap<Variant, Variant>(CAST<String>("1" AS Variant), CAST<String>("2" AS Variant))
optimized expr : false
output type    : Boolean
output domain  : {FALSE}
output         : false


ast            : array_overlap('{"k":"v"}'::variant, '{"k":"v"}'::variant)
raw expr       : array_overlap(CAST('{"k":"v"}' AS Variant), CAST('{"k":"v"}' AS Variant))
checked expr   : array_overlap<Variant, Variant>(CAST<String>("{\"k\":\"v\"}" AS Variant), CAST<String>("{\"k\":\"v\"}" AS Variant))
optimized expr : true
output type    : Boolean
output domain  : {TRUE}
output         : true


ast            : array_overlap(parse_json(v1), parse_json(v2))
raw expr       : array_overlap(parse_json(v1::String NULL), parse_json(v2::String NULL))
checked expr   : array_overlap<Variant NULL, Variant NULL>(CAST<String NULL>(v1 AS Variant NULL), CAST<String NULL>(v2 AS Variant NULL))
evaluation:
+--------+----------------------------------------------------------------+----------------------------------------------------+--------------+
|        | v1                                                             | v2                                                 | Output       |
+--------+----------------------------------------------------------------+----------------------------------------------------+--------------+
| Type   | String NULL                                                    | String NULL                                        | Boolean NULL |
| Domain | {"[\"A\",\"B\",\"A\",\"B\",\"C\"]"..="{\"a\":\"b\"}"} ∪ {NULL} | {"[\"X\",\"Y\",\"Z\"]"..="{\"a\":\"b\"}"} ∪ {NULL} | Unknown      |
| Row 0  | '[1,2,3,3,null,null]'                                          | '[1,1,2,3,4,5,null]'                               | true         |
| Row 1  | '["A","B","A","B","C"]'                                        | '["X","Y","Z"]'                                    | false        |
| Row 2  | NULL                                                           | NULL                                               | NULL         |
| Row 3  | '{"a":"b"}'                                                    | '{"a":"b"}'                                        | true         |
+--------+----------------------------------------------------------------+----------------------------------------------------+--------------+
evaluation (internal):
+--------+--------------------------------------------------------------------------------------------------------------------------+
| Column | Data                                                                                                                     |
+--------+--------------------------------------------------------------------------------------------------------------------------+
| v1     | NullableColumn { column: StringColumn[[1,2,3,3,null,null], ["A","B","A","B","C"], , {"a":"b"}], validity: [0b____1011] } |
| v2     | NullableColumn { column: StringColumn[[1,1,2,3,4,5,null], ["X","Y","Z"], , {"a":"b"}], validity: [0b____1011] }          |
| Output | NullableColumn { column: Boolean([0b____1001]), validity: [0b____1011] }                                                 |
+--------+--------------------------------------------------------------------------------------------------------------------------+


ast            : object_insert('{"b":12,"d":34,"m":[1,2],"x":{"k":"v"}}'::variant, 'a', 'hello')
raw expr       : object_insert(CAST('{"b":12,"d":34,"m":[1,2],"x":{"k":"v"}}' AS Variant), 'a', 'hello')
checked expr   : object_insert<Variant, String, String>(CAST<String>("{\"b\":12,\"d\":34,\"m\":[1,2],\"x\":{\"k\":\"v\"}}" AS Variant), "a", "hello")
optimized expr : 0x400000051000000110000001100000011000000110000001100000052000000220000002500000105000000e6162646d7868656c6c6f500c5022800000022000000220000002500150024000000110000001100000016b76
output type    : Variant
output domain  : Undefined
output         : '{"a":"hello","b":12,"d":34,"m":[1,2],"x":{"k":"v"}}'


ast            : object_insert('{"b":12,"d":34,"m":[1,2],"x":{"k":"v"}}'::variant, 'n', 100)
raw expr       : object_insert(CAST('{"b":12,"d":34,"m":[1,2],"x":{"k":"v"}}' AS Variant), 'n', 100)
checked expr   : object_insert<Variant, String, UInt8>(CAST<String>("{\"b\":12,\"d\":34,\"m\":[1,2],\"x\":{\"k\":\"v\"}}" AS Variant), "n", 100_u8)
optimized expr : 0x400000051000000110000001100000011000000110000001200000022000000250000010200000025000000e62646d6e78500c50228000000220000002200000025001500250644000000110000001100000016b76
output type    : Variant
output domain  : Undefined
output         : '{"b":12,"d":34,"m":[1,2],"n":100,"x":{"k":"v"}}'


ast            : object_insert('{"b":12,"d":34,"m":[1,2],"x":{"k":"v"}}'::variant, 'z', [10,20])
raw expr       : object_insert(CAST('{"b":12,"d":34,"m":[1,2],"x":{"k":"v"}}' AS Variant), 'z', array(10, 20))
checked expr   : object_insert<Variant, String, Array(UInt8)>(CAST<String>("{\"b\":12,\"d\":34,\"m\":[1,2],\"x\":{\"k\":\"v\"}}" AS Variant), "z", array<T0=UInt8><T0, T0>(10_u8, 20_u8))
optimized expr : 0x4000000510000001100000011000000110000001100000012000000220000002500000105000000e5000001062646d787a500c5022800000022000000220000002500150024000000110000001100000016b76800000022000000220000002500a5014
output type    : Variant
output domain  : Undefined
output         : '{"b":12,"d":34,"m":[1,2],"x":{"k":"v"},"z":[10,20]}'


error: 
  --> SQL:1:1
  |
1 | object_insert('{"b":12,"d":34,"m":[1,2],"x":{"k":"v"}}'::variant, 'x', '{"a":"b"}'::variant)
  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ObjectDuplicateKey while evaluating function `object_insert('{"b":12,"d":34,"m":[1,2],"x":{"k":"v"}}', 'x', '{"a":"b"}')` in expr `object_insert(CAST('{"b":12,"d":34,"m":[1,2],"x":{"k":"v"}}' AS Variant), 'x', CAST('{"a":"b"}' AS Variant))`



ast            : object_insert('{"b":12,"d":34,"m":[1,2],"x":{"k":"v"}}'::variant, 'v', null)
raw expr       : object_insert(CAST('{"b":12,"d":34,"m":[1,2],"x":{"k":"v"}}' AS Variant), 'v', NULL)
checked expr   : object_insert<Variant, String, NULL>(CAST<String>("{\"b\":12,\"d\":34,\"m\":[1,2],\"x\":{\"k\":\"v\"}}" AS Variant), "v", NULL)
optimized expr : 0x40000004100000011000000110000001100000012000000220000002500000105000000e62646d78500c5022800000022000000220000002500150024000000110000001100000016b76
output type    : Variant
output domain  : Undefined
output         : '{"b":12,"d":34,"m":[1,2],"x":{"k":"v"}}'


ast            : object_insert('{"b":12,"d":34,"m":[1,2],"x":{"k":"v"}}'::variant, 'b', null)
raw expr       : object_insert(CAST('{"b":12,"d":34,"m":[1,2],"x":{"k":"v"}}' AS Variant), 'b', NULL)
checked expr   : object_insert<Variant, String, NULL>(CAST<String>("{\"b\":12,\"d\":34,\"m\":[1,2],\"x\":{\"k\":\"v\"}}" AS Variant), "b", NULL)
optimized expr : 0x40000004100000011000000110000001100000012000000220000002500000105000000e62646d78500c5022800000022000000220000002500150024000000110000001100000016b76
output type    : Variant
output domain  : Undefined
output         : '{"b":12,"d":34,"m":[1,2],"x":{"k":"v"}}'


ast            : object_insert('{}'::variant, 'v', 'vv')
raw expr       : object_insert(CAST('{}' AS Variant), 'v', 'vv')
checked expr   : object_insert<Variant, String, String>(CAST<String>("{}" AS Variant), "v", "vv")
optimized expr : 0x400000011000000110000002767676
output type    : Variant
output domain  : Undefined
output         : '{"v":"vv"}'


error: 
  --> SQL:1:1
  |
1 | object_insert('123'::variant, 'v', 'vv')
  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Invalid json object while evaluating function `object_insert('123', 'v', 'vv')` in expr `object_insert(CAST('123' AS Variant), 'v', 'vv')`



ast            : object_insert('{"b":12,"d":34,"m":[1,2],"x":{"k":"v"}}'::variant, 'a', 'hello', true)
raw expr       : object_insert(CAST('{"b":12,"d":34,"m":[1,2],"x":{"k":"v"}}' AS Variant), 'a', 'hello', true)
checked expr   : object_insert<Variant, String, String, Boolean>(CAST<String>("{\"b\":12,\"d\":34,\"m\":[1,2],\"x\":{\"k\":\"v\"}}" AS Variant), "a", "hello", true)
optimized expr : 0x400000051000000110000001100000011000000110000001100000052000000220000002500000105000000e6162646d7868656c6c6f500c5022800000022000000220000002500150024000000110000001100000016b76
output type    : Variant
output domain  : Undefined
output         : '{"a":"hello","b":12,"d":34,"m":[1,2],"x":{"k":"v"}}'


ast            : object_insert('{"b":12,"d":34,"m":[1,2],"x":{"k":"v"}}'::variant, 'n', 100, true)
raw expr       : object_insert(CAST('{"b":12,"d":34,"m":[1,2],"x":{"k":"v"}}' AS Variant), 'n', 100, true)
checked expr   : object_insert<Variant, String, UInt8, Boolean>(CAST<String>("{\"b\":12,\"d\":34,\"m\":[1,2],\"x\":{\"k\":\"v\"}}" AS Variant), "n", 100_u8, true)
optimized expr : 0x400000051000000110000001100000011000000110000001200000022000000250000010200000025000000e62646d6e78500c50228000000220000002200000025001500250644000000110000001100000016b76
output type    : Variant
output domain  : Undefined
output         : '{"b":12,"d":34,"m":[1,2],"n":100,"x":{"k":"v"}}'


ast            : object_insert('{"b":12,"d":34,"m":[1,2],"x":{"k":"v"}}'::variant, 'z', [10,20], true)
raw expr       : object_insert(CAST('{"b":12,"d":34,"m":[1,2],"x":{"k":"v"}}' AS Variant), 'z', array(10, 20), true)
checked expr   : object_insert<Variant, String, Array(UInt8), Boolean>(CAST<String>("{\"b\":12,\"d\":34,\"m\":[1,2],\"x\":{\"k\":\"v\"}}" AS Variant), "z", array<T0=UInt8><T0, T0>(10_u8, 20_u8), true)
optimized expr : 0x4000000510000001100000011000000110000001100000012000000220000002500000105000000e5000001062646d787a500c5022800000022000000220000002500150024000000110000001100000016b76800000022000000220000002500a5014
output type    : Variant
output domain  : Undefined
output         : '{"b":12,"d":34,"m":[1,2],"x":{"k":"v"},"z":[10,20]}'


ast            : object_insert('{"b":12,"d":34,"m":[1,2],"x":{"k":"v"}}'::variant, 'x', '{"a":"b"}'::variant, true)
raw expr       : object_insert(CAST('{"b":12,"d":34,"m":[1,2],"x":{"k":"v"}}' AS Variant), 'x', CAST('{"a":"b"}' AS Variant), true)
checked expr   : object_insert<Variant, String, Variant, Boolean>(CAST<String>("{\"b\":12,\"d\":34,\"m\":[1,2],\"x\":{\"k\":\"v\"}}" AS Variant), "x", CAST<String>("{\"a\":\"b\"}" AS Variant), true)
optimized expr : 0x40000004100000011000000110000001100000012000000220000002500000105000000e62646d78500c5022800000022000000220000002500150024000000110000001100000016162
output type    : Variant
output domain  : Undefined
output         : '{"b":12,"d":34,"m":[1,2],"x":{"a":"b"}}'


ast            : object_insert('{"b":12,"d":34,"m":[1,2],"x":{"k":"v"}}'::variant, 'v', null, true)
raw expr       : object_insert(CAST('{"b":12,"d":34,"m":[1,2],"x":{"k":"v"}}' AS Variant), 'v', NULL, true)
checked expr   : object_insert<Variant, String, NULL, Boolean>(CAST<String>("{\"b\":12,\"d\":34,\"m\":[1,2],\"x\":{\"k\":\"v\"}}" AS Variant), "v", NULL, true)
optimized expr : 0x40000004100000011000000110000001100000012000000220000002500000105000000e62646d78500c5022800000022000000220000002500150024000000110000001100000016b76
output type    : Variant
output domain  : Undefined
output         : '{"b":12,"d":34,"m":[1,2],"x":{"k":"v"}}'


ast            : object_insert('{"b":12,"d":34,"m":[1,2],"x":{"k":"v"}}'::variant, 'b', null, true)
raw expr       : object_insert(CAST('{"b":12,"d":34,"m":[1,2],"x":{"k":"v"}}' AS Variant), 'b', NULL, true)
checked expr   : object_insert<Variant, String, NULL, Boolean>(CAST<String>("{\"b\":12,\"d\":34,\"m\":[1,2],\"x\":{\"k\":\"v\"}}" AS Variant), "b", NULL, true)
optimized expr : 0x4000000310000001100000011000000120000002500000105000000e646d785022800000022000000220000002500150024000000110000001100000016b76
output type    : Variant
output domain  : Undefined
output         : '{"d":34,"m":[1,2],"x":{"k":"v"}}'


ast            : object_insert('{}'::variant, 'v', 'vv', true)
raw expr       : object_insert(CAST('{}' AS Variant), 'v', 'vv', true)
checked expr   : object_insert<Variant, String, String, Boolean>(CAST<String>("{}" AS Variant), "v", "vv", true)
optimized expr : 0x400000011000000110000002767676
output type    : Variant
output domain  : Undefined
output         : '{"v":"vv"}'


error: 
  --> SQL:1:1
  |
1 | object_insert('123'::variant, 'v', 'vv', true)
  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Invalid json object while evaluating function `object_insert('123', 'v', 'vv', true)` in expr `object_insert(CAST('123' AS Variant), 'v', 'vv', true)`



ast            : object_insert(parse_json(v), 'x', parse_json(n))
raw expr       : object_insert(parse_json(v::String NULL), 'x', parse_json(n::String NULL))
checked expr   : object_insert<Variant NULL, String, Variant NULL>(CAST<String NULL>(v AS Variant NULL), "x", CAST<String NULL>(n AS Variant NULL))
evaluation:
+--------+----------------------------------------------------------------------+------------------------------+-----------------------------------------+
|        | v                                                                    | n                            | Output                                  |
+--------+----------------------------------------------------------------------+------------------------------+-----------------------------------------+
| Type   | String NULL                                                          | String NULL                  | Variant NULL                            |
| Domain | {"{\"a\":\"b\",\"c\":\"d\",\"y\":\"z\"}"..="{\"m\":\"n\"}"} ∪ {NULL} | {"\"hi\""..="true"} ∪ {NULL} | Unknown                                 |
| Row 0  | '{"k":"v"}'                                                          | '"hi"'                       | '{"k":"v","x":"hi"}'                    |
| Row 1  | '{"m":"n"}'                                                          | NULL                         | '{"m":"n"}'                             |
| Row 2  | NULL                                                                 | 'true'                       | NULL                                    |
| Row 3  | '{"a":"b","c":"d","y":"z"}'                                          | '[1,2,3]'                    | '{"a":"b","c":"d","x":[1,2,3],"y":"z"}' |
+--------+----------------------------------------------------------------------+------------------------------+-----------------------------------------+
evaluation (internal):
+--------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| Column | Data                                                                                                                                                                                                                                                                                         |
+--------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| v      | NullableColumn { column: StringColumn[{"k":"v"}, {"m":"n"}, , {"a":"b","c":"d","y":"z"}], validity: [0b____1011] }                                                                                                                                                                           |
| n      | NullableColumn { column: StringColumn["hi", , true, [1,2,3]], validity: [0b____1101] }                                                                                                                                                                                                       |
| Output | NullableColumn { column: Variant([0x40000002100000011000000110000001100000026b78766869, 0x4000000110000001100000016d6e, 0x, 0x400000041000000110000001100000011000000110000001100000015000001610000001616378796264800000032000000220000002200000025001500250037a]), validity: [0b____1011] } |
+--------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+


ast            : object_insert(parse_json(v), 'c', parse_json(n), true)
raw expr       : object_insert(parse_json(v::String NULL), 'c', parse_json(n::String NULL), true)
checked expr   : object_insert<Variant NULL, String, Variant NULL, Boolean>(CAST<String NULL>(v AS Variant NULL), "c", CAST<String NULL>(n AS Variant NULL), true)
evaluation:
+--------+----------------------------------------------------------------------+------------------------------+---------------------------------+
|        | v                                                                    | n                            | Output                          |
+--------+----------------------------------------------------------------------+------------------------------+---------------------------------+
| Type   | String NULL                                                          | String NULL                  | Variant NULL                    |
| Domain | {"{\"a\":\"b\",\"c\":\"d\",\"y\":\"z\"}"..="{\"m\":\"n\"}"} ∪ {NULL} | {"\"hi\""..="true"} ∪ {NULL} | Unknown                         |
| Row 0  | '{"k":"v"}'                                                          | '"hi"'                       | '{"c":"hi","k":"v"}'            |
| Row 1  | '{"m":"n"}'                                                          | NULL                         | '{"m":"n"}'                     |
| Row 2  | NULL                                                                 | 'true'                       | NULL                            |
| Row 3  | '{"a":"b","c":"d","y":"z"}'                                          | '[1,2,3]'                    | '{"a":"b","c":[1,2,3],"y":"z"}' |
+--------+----------------------------------------------------------------------+------------------------------+---------------------------------+
evaluation (internal):
+--------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| Column | Data                                                                                                                                                                                                                                                                     |
+--------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| v      | NullableColumn { column: StringColumn[{"k":"v"}, {"m":"n"}, , {"a":"b","c":"d","y":"z"}], validity: [0b____1011] }                                                                                                                                                       |
| n      | NullableColumn { column: StringColumn["hi", , true, [1,2,3]], validity: [0b____1101] }                                                                                                                                                                                   |
| Output | NullableColumn { column: Variant([0x4000000210000001100000011000000210000001636b686976, 0x4000000110000001100000016d6e, 0x, 0x4000000310000001100000011000000110000001500000161000000161637962800000032000000220000002200000025001500250037a]), validity: [0b____1011] } |
+--------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+


ast            : object_delete('{"b":12,"d":34,"m":[1,2],"x":{"k":"v"}}'::variant, 'a', 'b', 'c')
raw expr       : object_delete(CAST('{"b":12,"d":34,"m":[1,2],"x":{"k":"v"}}' AS Variant), 'a', 'b', 'c')
checked expr   : object_delete<Variant, String, String, String>(CAST<String>("{\"b\":12,\"d\":34,\"m\":[1,2],\"x\":{\"k\":\"v\"}}" AS Variant), "a", "b", "c")
optimized expr : 0x4000000310000001100000011000000120000002500000105000000e646d785022800000022000000220000002500150024000000110000001100000016b76
output type    : Variant
output domain  : Undefined
output         : '{"d":34,"m":[1,2],"x":{"k":"v"}}'


ast            : object_delete('{"b":12,"d":34,"m":[1,2],"x":{"k":"v"}}'::variant, 'm', 'n', 'm', 'x')
raw expr       : object_delete(CAST('{"b":12,"d":34,"m":[1,2],"x":{"k":"v"}}' AS Variant), 'm', 'n', 'm', 'x')
checked expr   : object_delete<Variant, String, String, String, String>(CAST<String>("{\"b\":12,\"d\":34,\"m\":[1,2],\"x\":{\"k\":\"v\"}}" AS Variant), "m", "n", "m", "x")
optimized expr : 0x40000002100000011000000120000002200000026264500c5022
output type    : Variant
output domain  : Undefined
output         : '{"b":12,"d":34}'


ast            : object_delete('{"b":12,"d":34,"m":[1,2],"x":{"k":"v"}}'::variant, 'z', null)
raw expr       : object_delete(CAST('{"b":12,"d":34,"m":[1,2],"x":{"k":"v"}}' AS Variant), 'z', NULL)
checked expr   : object_delete<Variant, String, NULL>(CAST<String>("{\"b\":12,\"d\":34,\"m\":[1,2],\"x\":{\"k\":\"v\"}}" AS Variant), "z", NULL)
optimized expr : 0x40000004100000011000000110000001100000012000000220000002500000105000000e62646d78500c5022800000022000000220000002500150024000000110000001100000016b76
output type    : Variant
output domain  : Undefined
output         : '{"b":12,"d":34,"m":[1,2],"x":{"k":"v"}}'


ast            : object_delete('{}'::variant, 'v', 'vv')
raw expr       : object_delete(CAST('{}' AS Variant), 'v', 'vv')
checked expr   : object_delete<Variant, String, String>(CAST<String>("{}" AS Variant), "v", "vv")
optimized expr : 0x40000000
output type    : Variant
output domain  : Undefined
output         : '{}'


error: 
  --> SQL:1:1
  |
1 | object_delete('123'::variant, 'v', 'vv')
  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Invalid json object while evaluating function `object_delete('123', 'v', 'vv')` in expr `object_delete(CAST('123' AS Variant), 'v', 'vv')`



ast            : object_delete(parse_json(v), 'a', 'm')
raw expr       : object_delete(parse_json(v::String NULL), 'a', 'm')
checked expr   : object_delete<Variant NULL, String, String>(CAST<String NULL>(v AS Variant NULL), "a", "m")
evaluation:
+--------+----------------------------------------------------------------------+---------------------+
|        | v                                                                    | Output              |
+--------+----------------------------------------------------------------------+---------------------+
| Type   | String NULL                                                          | Variant NULL        |
| Domain | {"{\"a\":\"b\",\"c\":\"d\",\"y\":\"z\"}"..="{\"m\":\"n\"}"} ∪ {NULL} | Unknown             |
| Row 0  | '{"k":"v"}'                                                          | '{"k":"v"}'         |
| Row 1  | '{"m":"n"}'                                                          | '{}'                |
| Row 2  | NULL                                                                 | NULL                |
| Row 3  | '{"a":"b","c":"d","y":"z"}'                                          | '{"c":"d","y":"z"}' |
+--------+----------------------------------------------------------------------+---------------------+
evaluation (internal):
+--------+------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| Column | Data                                                                                                                                                             |
+--------+------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| v      | NullableColumn { column: StringColumn[{"k":"v"}, {"m":"n"}, , {"a":"b","c":"d","y":"z"}], validity: [0b____1011] }                                               |
| Output | NullableColumn { column: Variant([0x4000000110000001100000016b76, 0x40000000, 0x, 0x40000002100000011000000110000001100000016379647a]), validity: [0b____1011] } |
+--------+------------------------------------------------------------------------------------------------------------------------------------------------------------------+


ast            : object_pick('{"b":12,"d":34,"m":[1,2],"x":{"k":"v"}}'::variant, 'a', 'b', 'c')
raw expr       : object_pick(CAST('{"b":12,"d":34,"m":[1,2],"x":{"k":"v"}}' AS Variant), 'a', 'b', 'c')
checked expr   : object_pick<Variant, String, String, String>(CAST<String>("{\"b\":12,\"d\":34,\"m\":[1,2],\"x\":{\"k\":\"v\"}}" AS Variant), "a", "b", "c")
optimized expr : 0x40000001100000012000000262500c
output type    : Variant
output domain  : Undefined
output         : '{"b":12}'


ast            : object_pick('{"b":12,"d":34,"m":[1,2],"x":{"k":"v"}}'::variant, 'm', 'n', 'm', 'x')
raw expr       : object_pick(CAST('{"b":12,"d":34,"m":[1,2],"x":{"k":"v"}}' AS Variant), 'm', 'n', 'm', 'x')
checked expr   : object_pick<Variant, String, String, String, String>(CAST<String>("{\"b\":12,\"d\":34,\"m\":[1,2],\"x\":{\"k\":\"v\"}}" AS Variant), "m", "n", "m", "x")
optimized expr : 0x400000021000000110000001500000105000000e6d78800000022000000220000002500150024000000110000001100000016b76
output type    : Variant
output domain  : Undefined
output         : '{"m":[1,2],"x":{"k":"v"}}'


ast            : object_pick('{"b":12,"d":34,"m":[1,2],"x":{"k":"v"}}'::variant, 'z', null)
raw expr       : object_pick(CAST('{"b":12,"d":34,"m":[1,2],"x":{"k":"v"}}' AS Variant), 'z', NULL)
checked expr   : object_pick<Variant, String, NULL>(CAST<String>("{\"b\":12,\"d\":34,\"m\":[1,2],\"x\":{\"k\":\"v\"}}" AS Variant), "z", NULL)
optimized expr : 0x40000000
output type    : Variant
output domain  : Undefined
output         : '{}'


ast            : object_pick('{}'::variant, 'v', 'vv')
raw expr       : object_pick(CAST('{}' AS Variant), 'v', 'vv')
checked expr   : object_pick<Variant, String, String>(CAST<String>("{}" AS Variant), "v", "vv")
optimized expr : 0x40000000
output type    : Variant
output domain  : Undefined
output         : '{}'


error: 
  --> SQL:1:1
  |
1 | object_pick('123'::variant, 'v', 'vv')
  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Invalid json object while evaluating function `object_pick('123', 'v', 'vv')` in expr `object_pick(CAST('123' AS Variant), 'v', 'vv')`



ast            : object_pick(parse_json(v), 'a', 'm')
raw expr       : object_pick(parse_json(v::String NULL), 'a', 'm')
checked expr   : object_pick<Variant NULL, String, String>(CAST<String NULL>(v AS Variant NULL), "a", "m")
evaluation:
+--------+----------------------------------------------------------------------+--------------+
|        | v                                                                    | Output       |
+--------+----------------------------------------------------------------------+--------------+
| Type   | String NULL                                                          | Variant NULL |
| Domain | {"{\"a\":\"b\",\"c\":\"d\",\"y\":\"z\"}"..="{\"m\":\"n\"}"} ∪ {NULL} | Unknown      |
| Row 0  | '{"k":"v"}'                                                          | '{}'         |
| Row 1  | '{"m":"n"}'                                                          | '{"m":"n"}'  |
| Row 2  | NULL                                                                 | NULL         |
| Row 3  | '{"a":"b","c":"d","y":"z"}'                                          | '{"a":"b"}'  |
+--------+----------------------------------------------------------------------+--------------+
evaluation (internal):
+--------+----------------------------------------------------------------------------------------------------------------------------------------------+
| Column | Data                                                                                                                                         |
+--------+----------------------------------------------------------------------------------------------------------------------------------------------+
| v      | NullableColumn { column: StringColumn[{"k":"v"}, {"m":"n"}, , {"a":"b","c":"d","y":"z"}], validity: [0b____1011] }                           |
| Output | NullableColumn { column: Variant([0x40000000, 0x4000000110000001100000016d6e, 0x, 0x4000000110000001100000016162]), validity: [0b____1011] } |
+--------+----------------------------------------------------------------------------------------------------------------------------------------------+


ast            : strip_null_value(parse_json('1234'))
raw expr       : strip_null_value(parse_json('1234'))
checked expr   : strip_null_value<Variant NULL>(CAST<Variant>(CAST<String>("1234" AS Variant) AS Variant NULL))
optimized expr : 0x20000000200000035004d2
output type    : Variant NULL
output domain  : Undefined
output         : '1234'


ast            : strip_null_value(parse_json('null'))
raw expr       : strip_null_value(parse_json('null'))
checked expr   : strip_null_value<Variant NULL>(CAST<Variant>(CAST<String>("null" AS Variant) AS Variant NULL))
optimized expr : NULL
output type    : Variant NULL
output domain  : {NULL}
output         : NULL


ast            : strip_null_value(null)
raw expr       : strip_null_value(NULL)
checked expr   : strip_null_value<Variant NULL>(CAST<NULL>(NULL AS Variant NULL))
optimized expr : NULL
output type    : Variant NULL
output domain  : {NULL}
output         : NULL


ast            : strip_null_value(parse_json(s))
raw expr       : strip_null_value(parse_json(s::String))
checked expr   : strip_null_value<Variant NULL>(CAST<Variant>(CAST<String>(s AS Variant) AS Variant NULL))
evaluation:
+--------+-------------------------------------------------------+--------------------+
|        | s                                                     | Output             |
+--------+-------------------------------------------------------+--------------------+
| Type   | String                                                | Variant NULL       |
| Domain | {"[\"a\",\"b\",\"c\"]"..="{ \"a\": 1, \"b\": null }"} | Unknown            |
| Row 0  | '{ "a": 1, "b": null }'                               | '{"a":1,"b":null}' |
| Row 1  | 'null'                                                | NULL               |
| Row 2  | '["a","b","c"]'                                       | '["a","b","c"]'    |
+--------+-------------------------------------------------------+--------------------+
evaluation (internal):
+--------+----------------------------------------------------------------------------------------------------------------------------------------------------------------+
| Column | Data                                                                                                                                                           |
+--------+----------------------------------------------------------------------------------------------------------------------------------------------------------------+
| s      | StringColumn[{ "a": 1, "b": null }, null, ["a","b","c"]]                                                                                                       |
| Output | NullableColumn { column: Variant([0x400000021000000110000001200000020000000061625001, 0x, 0x80000003100000011000000110000001616263]), validity: [0b_____101] } |
+--------+----------------------------------------------------------------------------------------------------------------------------------------------------------------+


ast            : strip_null_value(parse_json(s))
raw expr       : strip_null_value(parse_json(s::String NULL))
checked expr   : strip_null_value<Variant NULL>(CAST<String NULL>(s AS Variant NULL))
evaluation:
+--------+----------------------------------------------------------------+--------------------+
|        | s                                                              | Output             |
+--------+----------------------------------------------------------------+--------------------+
| Type   | String NULL                                                    | Variant NULL       |
| Domain | {"[\"a\",\"b\",\"c\"]"..="{ \"a\": 1, \"b\": null }"} ∪ {NULL} | Unknown            |
| Row 0  | '{ "a": 1, "b": null }'                                        | '{"a":1,"b":null}' |
| Row 1  | 'null'                                                         | NULL               |
| Row 2  | NULL                                                           | NULL               |
| Row 3  | '["a","b","c"]'                                                | '["a","b","c"]'    |
+--------+----------------------------------------------------------------+--------------------+
evaluation (internal):
+--------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| Column | Data                                                                                                                                                               |
+--------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| s      | NullableColumn { column: StringColumn[{ "a": 1, "b": null }, null, , ["a","b","c"]], validity: [0b____1011] }                                                      |
| Output | NullableColumn { column: Variant([0x400000021000000110000001200000020000000061625001, 0x, 0x, 0x80000003100000011000000110000001616263]), validity: [0b____1001] } |
+--------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------+


ast            : array_append(parse_json('[1, 2, 3]'), 4)
raw expr       : array_append(parse_json('[1, 2, 3]'), 4)
checked expr   : array_append<T0=UInt8><Variant NULL, T0>(CAST<Variant>(CAST<String>("[1, 2, 3]" AS Variant) AS Variant NULL), 4_u8)
optimized expr : 0x80000004200000022000000220000002200000025001500250035004
output type    : Variant
output domain  : Undefined
output         : '[1,2,3,4]'


ast            : array_append(parse_json('[]'), 1)
raw expr       : array_append(parse_json('[]'), 1)
checked expr   : array_append<T0=UInt8><Variant NULL, T0>(CAST<Variant>(CAST<String>("[]" AS Variant) AS Variant NULL), 1_u8)
optimized expr : 0x80000001200000025001
output type    : Variant
output domain  : Undefined
output         : '[1]'


ast            : array_append(null, 1)
raw expr       : array_append(NULL, 1)
checked expr   : array_append<T0=UInt8><Variant NULL, T0>(CAST<NULL>(NULL AS Variant NULL), 1_u8)
optimized expr : 0x80000001200000025001
output type    : Variant
output domain  : Undefined
output         : '[1]'


ast            : array_append(parse_json('[1, 2, 3]'), null)
raw expr       : array_append(parse_json('[1, 2, 3]'), NULL)
checked expr   : array_append<T0=NULL><Variant NULL, T0>(CAST<Variant>(CAST<String>("[1, 2, 3]" AS Variant) AS Variant NULL), NULL)
optimized expr : 0x8000000420000002200000022000000200000000500150025003
output type    : Variant
output domain  : Undefined
output         : '[1,2,3,null]'


ast            : array_append(parse_json('[1, 2]'), 'string')
raw expr       : array_append(parse_json('[1, 2]'), 'string')
checked expr   : array_append<T0=String><Variant NULL, T0>(CAST<Variant>(CAST<String>("[1, 2]" AS Variant) AS Variant NULL), "string")
optimized expr : 0x8000000320000002200000021000000650015002737472696e67
output type    : Variant
output domain  : Undefined
output         : '[1,2,"string"]'


ast            : array_append(parse_json('[1, 2]'), true)
raw expr       : array_append(parse_json('[1, 2]'), true)
checked expr   : array_append<T0=Boolean><Variant NULL, T0>(CAST<Variant>(CAST<String>("[1, 2]" AS Variant) AS Variant NULL), true)
optimized expr : 0x8000000320000002200000024000000050015002
output type    : Variant
output domain  : Undefined
output         : '[1,2,true]'


ast            : array_append(parse_json('[1, 2]'), parse_json('{"a": 1}'))
raw expr       : array_append(parse_json('[1, 2]'), parse_json('{"a": 1}'))
checked expr   : array_append<T0=Variant><Variant NULL, T0>(CAST<Variant>(CAST<String>("[1, 2]" AS Variant) AS Variant NULL), CAST<String>("{\"a\": 1}" AS Variant))
optimized expr : 0x8000000320000002200000025000000f50015002400000011000000120000002615001
output type    : Variant
output domain  : Undefined
output         : '[1,2,{"a":1}]'


ast            : array_append(parse_json(c1), c2)
raw expr       : array_append(parse_json(c1::String), c2::String)
checked expr   : array_append<T0=String><Variant NULL, T0>(CAST<Variant>(CAST<String>(c1 AS Variant) AS Variant NULL), c2)
evaluation:
+--------+------------------------+-------------+---------------+
|        | c1                     | c2          | Output        |
+--------+------------------------+-------------+---------------+
| Type   | String                 | String      | Variant       |
| Domain | {"[1, 2, 3]"..="null"} | {"a"..="c"} | Unknown       |
| Row 0  | '[1, 2, 3]'            | 'a'         | '[1,2,3,"a"]' |
| Row 1  | '[]'                   | 'b'         | '["b"]'       |
| Row 2  | 'null'                 | 'c'         | '[null,"c"]'  |
+--------+------------------------+-------------+---------------+
evaluation (internal):
+--------+-------------------------------------------------------------------------------------------------------------------------+
| Column | Data                                                                                                                    |
+--------+-------------------------------------------------------------------------------------------------------------------------+
| c1     | StringColumn[[1, 2, 3], [], null]                                                                                       |
| c2     | StringColumn[a, b, c]                                                                                                   |
| Output | Variant([0x800000042000000220000002200000021000000150015002500361, 0x800000011000000162, 0x80000002000000001000000163]) |
+--------+-------------------------------------------------------------------------------------------------------------------------+


ast            : array_prepend(4, parse_json('[1, 2, 3]'))
raw expr       : array_prepend(4, parse_json('[1, 2, 3]'))
checked expr   : array_prepend<T0=UInt8><T0, Variant NULL>(4_u8, CAST<Variant>(CAST<String>("[1, 2, 3]" AS Variant) AS Variant NULL))
optimized expr : 0x80000004200000022000000220000002200000025004500150025003
output type    : Variant
output domain  : Undefined
output         : '[4,1,2,3]'


ast            : array_prepend(1, parse_json('[]'))
raw expr       : array_prepend(1, parse_json('[]'))
checked expr   : array_prepend<T0=UInt8><T0, Variant NULL>(1_u8, CAST<Variant>(CAST<String>("[]" AS Variant) AS Variant NULL))
optimized expr : 0x80000001200000025001
output type    : Variant
output domain  : Undefined
output         : '[1]'


ast            : array_prepend(1, null)
raw expr       : array_prepend(1, NULL)
checked expr   : array_prepend<T0=UInt8><T0, Variant NULL>(1_u8, CAST<NULL>(NULL AS Variant NULL))
optimized expr : 0x80000001200000025001
output type    : Variant
output domain  : Undefined
output         : '[1]'


ast            : array_prepend(null, parse_json('[1, 2, 3]'))
raw expr       : array_prepend(NULL, parse_json('[1, 2, 3]'))
checked expr   : array_prepend<T0=NULL><T0, Variant NULL>(NULL, CAST<Variant>(CAST<String>("[1, 2, 3]" AS Variant) AS Variant NULL))
optimized expr : 0x8000000400000000200000022000000220000002500150025003
output type    : Variant
output domain  : Undefined
output         : '[null,1,2,3]'


ast            : array_prepend('string', parse_json('[1, 2]'))
raw expr       : array_prepend('string', parse_json('[1, 2]'))
checked expr   : array_prepend<T0=String><T0, Variant NULL>("string", CAST<Variant>(CAST<String>("[1, 2]" AS Variant) AS Variant NULL))
optimized expr : 0x80000003100000062000000220000002737472696e6750015002
output type    : Variant
output domain  : Undefined
output         : '["string",1,2]'


ast            : array_prepend(true, parse_json('[1, 2]'))
raw expr       : array_prepend(true, parse_json('[1, 2]'))
checked expr   : array_prepend<T0=Boolean><T0, Variant NULL>(true, CAST<Variant>(CAST<String>("[1, 2]" AS Variant) AS Variant NULL))
optimized expr : 0x8000000340000000200000022000000250015002
output type    : Variant
output domain  : Undefined
output         : '[true,1,2]'


ast            : array_prepend(parse_json('{"a": 1}'), parse_json('[1, 2]'))
raw expr       : array_prepend(parse_json('{"a": 1}'), parse_json('[1, 2]'))
checked expr   : array_prepend<T0=Variant><T0, Variant NULL>(CAST<String>("{\"a\": 1}" AS Variant), CAST<Variant>(CAST<String>("[1, 2]" AS Variant) AS Variant NULL))
optimized expr : 0x800000035000000f200000022000000240000001100000012000000261500150015002
output type    : Variant
output domain  : Undefined
output         : '[{"a":1},1,2]'


ast            : array_prepend(c2, parse_json(c1))
raw expr       : array_prepend(c2::String, parse_json(c1::String))
checked expr   : array_prepend<T0=String><T0, Variant NULL>(c2, CAST<Variant>(CAST<String>(c1 AS Variant) AS Variant NULL))
evaluation:
+--------+------------------------+-------------+---------------+
|        | c1                     | c2          | Output        |
+--------+------------------------+-------------+---------------+
| Type   | String                 | String      | Variant       |
| Domain | {"[1, 2, 3]"..="null"} | {"a"..="c"} | Unknown       |
| Row 0  | '[1, 2, 3]'            | 'a'         | '["a",1,2,3]' |
| Row 1  | '[]'                   | 'b'         | '["b"]'       |
| Row 2  | 'null'                 | 'c'         | '["c",null]'  |
+--------+------------------------+-------------+---------------+
evaluation (internal):
+--------+-------------------------------------------------------------------------------------------------------------------------+
| Column | Data                                                                                                                    |
+--------+-------------------------------------------------------------------------------------------------------------------------+
| c1     | StringColumn[[1, 2, 3], [], null]                                                                                       |
| c2     | StringColumn[a, b, c]                                                                                                   |
| Output | Variant([0x800000041000000120000002200000022000000261500150025003, 0x800000011000000162, 0x80000002100000010000000063]) |
+--------+-------------------------------------------------------------------------------------------------------------------------+


ast            : array_compact(parse_json('[1, null, 3, null]'))
raw expr       : array_compact(parse_json('[1, null, 3, null]'))
checked expr   : array_compact<Variant>(CAST<String>("[1, null, 3, null]" AS Variant))
optimized expr : 0x80000002200000022000000250015003
output type    : Variant
output domain  : Undefined
output         : '[1,3]'


ast            : array_compact(parse_json('[null, null]'))
raw expr       : array_compact(parse_json('[null, null]'))
checked expr   : array_compact<Variant>(CAST<String>("[null, null]" AS Variant))
optimized expr : 0x80000000
output type    : Variant
output domain  : Undefined
output         : '[]'


ast            : array_compact(parse_json('[1, 2, 3]'))
raw expr       : array_compact(parse_json('[1, 2, 3]'))
checked expr   : array_compact<Variant>(CAST<String>("[1, 2, 3]" AS Variant))
optimized expr : 0x80000003200000022000000220000002500150025003
output type    : Variant
output domain  : Undefined
output         : '[1,2,3]'


ast            : array_compact(null)
raw expr       : array_compact(NULL)
checked expr   : array_compact<Variant NULL>(CAST<NULL>(NULL AS Variant NULL))
optimized expr : NULL
output type    : Variant NULL
output domain  : {NULL}
output         : NULL


error: 
  --> SQL:1:1
  |
1 | array_compact(parse_json('"not an array"'))
  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Input argument ARRAY_COMPACT is not an array while evaluating function `array_compact('"not an array"')` in expr `array_compact(CAST('"not an array"' AS Variant))`



ast            : array_compact(parse_json(c1))
raw expr       : array_compact(parse_json(c1::String))
checked expr   : array_compact<Variant>(CAST<String>(c1 AS Variant))
evaluation:
+--------+-------------------------------------------+--------------+
|        | c1                                        | Output       |
+--------+-------------------------------------------+--------------+
| Type   | String                                    | Variant      |
| Domain | {"[1, 2, 3]"..="[null, [1, true], null]"} | Unknown      |
| Row 0  | '[1, null, 3, null, "a"]'                 | '[1,3,"a"]'  |
| Row 1  | '[null, [1, true], null]'                 | '[[1,true]]' |
| Row 2  | '[1, 2, 3]'                               | '[1,2,3]'    |
+--------+-------------------------------------------+--------------+
evaluation (internal):
+--------+---------------------------------------------------------------------------------------------------------------------------------------------------------+
| Column | Data                                                                                                                                                    |
+--------+---------------------------------------------------------------------------------------------------------------------------------------------------------+
| c1     | StringColumn[[1, null, 3, null, "a"], [null, [1, true], null], [1, 2, 3]]                                                                               |
| Output | Variant([0x800000032000000220000002100000015001500361, 0x800000015000000e8000000220000002400000005001, 0x80000003200000022000000220000002500150025003]) |
+--------+---------------------------------------------------------------------------------------------------------------------------------------------------------+


ast            : array_flatten(parse_json('[[1, 2], [3, 4]]'))
raw expr       : array_flatten(parse_json('[[1, 2], [3, 4]]'))
checked expr   : array_flatten<Variant>(CAST<String>("[[1, 2], [3, 4]]" AS Variant))
optimized expr : 0x80000004200000022000000220000002200000025001500250035004
output type    : Variant
output domain  : Undefined
output         : '[1,2,3,4]'


ast            : array_flatten(parse_json('[[], [1, 2]]'))
raw expr       : array_flatten(parse_json('[[], [1, 2]]'))
checked expr   : array_flatten<Variant>(CAST<String>("[[], [1, 2]]" AS Variant))
optimized expr : 0x80000002200000022000000250015002
output type    : Variant
output domain  : Undefined
output         : '[1,2]'


ast            : array_flatten(parse_json('[]'))
raw expr       : array_flatten(parse_json('[]'))
checked expr   : array_flatten<Variant>(CAST<String>("[]" AS Variant))
optimized expr : 0x80000000
output type    : Variant
output domain  : Undefined
output         : '[]'


ast            : array_flatten(null)
raw expr       : array_flatten(NULL)
checked expr   : array_flatten<Variant NULL>(CAST<NULL>(NULL AS Variant NULL))
optimized expr : NULL
output type    : Variant NULL
output domain  : {NULL}
output         : NULL


error: 
  --> SQL:1:1
  |
1 | array_flatten(parse_json('"not an array"'))
  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Input argument ARRAY_FLATTEN is not an array of arrays while evaluating function `array_flatten('"not an array"')` in expr `array_flatten(CAST('"not an array"' AS Variant))`



ast            : array_flatten(parse_json(c1))
raw expr       : array_flatten(parse_json(c1::String))
checked expr   : array_flatten<Variant>(CAST<String>(c1 AS Variant))
evaluation:
+--------+------------------------------------+----------------+
|        | c1                                 | Output         |
+--------+------------------------------------+----------------+
| Type   | String                             | Variant        |
| Domain | {"[[1, 2], [3, \"aa\"]]"..="[[]]"} | Unknown        |
| Row 0  | '[[1, 2], [3, "aa"]]'              | '[1,2,3,"aa"]' |
| Row 1  | '[[], [1, 2]]'                     | '[1,2]'        |
| Row 2  | '[[]]'                             | '[]'           |
+--------+------------------------------------+----------------+
evaluation (internal):
+--------+-----------------------------------------------------------------------------------------------------------------------+
| Column | Data                                                                                                                  |
+--------+-----------------------------------------------------------------------------------------------------------------------+
| c1     | StringColumn[[[1, 2], [3, "aa"]], [[], [1, 2]], [[]]]                                                                 |
| Output | Variant([0x80000004200000022000000220000002100000025001500250036161, 0x80000002200000022000000250015002, 0x80000000]) |
+--------+-----------------------------------------------------------------------------------------------------------------------+


ast            : array_indexof(parse_json('["a", "b", "c"]'), 'b')
raw expr       : array_indexof(parse_json('["a", "b", "c"]'), 'b')
checked expr   : array_indexof<T0=String><Variant, T0>(CAST<String>("[\"a\", \"b\", \"c\"]" AS Variant), "b")
optimized expr : 1_u64
output type    : UInt64 NULL
output domain  : {1..=1}
output         : 1


ast            : array_indexof(parse_json('[1, 2, 3]'), 2)
raw expr       : array_indexof(parse_json('[1, 2, 3]'), 2)
checked expr   : array_indexof<T0=UInt8><Variant, T0>(CAST<String>("[1, 2, 3]" AS Variant), 2_u8)
optimized expr : 1_u64
output type    : UInt64 NULL
output domain  : {1..=1}
output         : 1


ast            : array_indexof(parse_json('[1, 2, 3]'), 4)
raw expr       : array_indexof(parse_json('[1, 2, 3]'), 4)
checked expr   : array_indexof<T0=UInt8><Variant, T0>(CAST<String>("[1, 2, 3]" AS Variant), 4_u8)
optimized expr : NULL
output type    : UInt64 NULL
output domain  : {NULL}
output         : NULL


ast            : array_indexof(parse_json('[]'), 'a')
raw expr       : array_indexof(parse_json('[]'), 'a')
checked expr   : array_indexof<T0=String><Variant, T0>(CAST<String>("[]" AS Variant), "a")
optimized expr : NULL
output type    : UInt64 NULL
output domain  : {NULL}
output         : NULL


ast            : array_indexof(null, 'a')
raw expr       : array_indexof(NULL, 'a')
checked expr   : array_indexof<T0=String><NULL, T0>(NULL, "a")
optimized expr : NULL
output type    : NULL
output domain  : {NULL}
output         : NULL


ast            : array_indexof(parse_json(c1), c2)
raw expr       : array_indexof(parse_json(c1::String), c2::String)
checked expr   : array_indexof<T0=String><Variant, T0>(CAST<String>(c1 AS Variant), c2)
evaluation:
+--------+-----------------------------+-------------+-------------+
|        | c1                          | c2          | Output      |
+--------+-----------------------------+-------------+-------------+
| Type   | String                      | String      | UInt64 NULL |
| Domain | {"[\"a\", \"b\"]"..="null"} | {"a"..="c"} | Unknown     |
| Row 0  | '[1, 2, 3]'                 | 'a'         | NULL        |
| Row 1  | '["a", "b"]'                | 'b'         | 1           |
| Row 2  | 'null'                      | 'c'         | NULL        |
+--------+-----------------------------+-------------+-------------+
evaluation (internal):
+--------+----------------------------------------------------------------------+
| Column | Data                                                                 |
+--------+----------------------------------------------------------------------+
| c1     | StringColumn[[1, 2, 3], ["a", "b"], null]                            |
| c2     | StringColumn[a, b, c]                                                |
| Output | NullableColumn { column: UInt64([0, 1, 0]), validity: [0b_____010] } |
+--------+----------------------------------------------------------------------+


ast            : array_remove(parse_json('["a", "b", "c", "b"]'), 'b')
raw expr       : array_remove(parse_json('["a", "b", "c", "b"]'), 'b')
checked expr   : array_remove<T0=String><Variant, T0>(CAST<String>("[\"a\", \"b\", \"c\", \"b\"]" AS Variant), "b")
optimized expr : 0x8000000210000001100000016163
output type    : Variant
output domain  : Undefined
output         : '["a","c"]'


ast            : array_remove(parse_json('[1, 2, 3, 2]'), 2)
raw expr       : array_remove(parse_json('[1, 2, 3, 2]'), 2)
checked expr   : array_remove<T0=UInt8><Variant, T0>(CAST<String>("[1, 2, 3, 2]" AS Variant), 2_u8)
optimized expr : 0x80000002200000022000000250015003
output type    : Variant
output domain  : Undefined
output         : '[1,3]'


ast            : array_remove(parse_json('[1, 2, 3]'), 4)
raw expr       : array_remove(parse_json('[1, 2, 3]'), 4)
checked expr   : array_remove<T0=UInt8><Variant, T0>(CAST<String>("[1, 2, 3]" AS Variant), 4_u8)
optimized expr : 0x80000003200000022000000220000002500150025003
output type    : Variant
output domain  : Undefined
output         : '[1,2,3]'


ast            : array_remove(parse_json('[]'), 'a')
raw expr       : array_remove(parse_json('[]'), 'a')
checked expr   : array_remove<T0=String><Variant, T0>(CAST<String>("[]" AS Variant), "a")
optimized expr : 0x80000000
output type    : Variant
output domain  : Undefined
output         : '[]'


ast            : array_remove(null, 'a')
raw expr       : array_remove(NULL, 'a')
checked expr   : array_remove<T0=String><Variant NULL, T0 NULL>(CAST<NULL>(NULL AS Variant NULL), CAST<String>("a" AS String NULL))
optimized expr : NULL
output type    : Variant NULL
output domain  : {NULL}
output         : NULL


ast            : array_remove(parse_json(c1), c2)
raw expr       : array_remove(parse_json(c1::String), c2::String)
checked expr   : array_remove<T0=String><Variant, T0>(CAST<String>(c1 AS Variant), c2)
evaluation:
+--------+-----------------------------+-------------+-----------+
|        | c1                          | c2          | Output    |
+--------+-----------------------------+-------------+-----------+
| Type   | String                      | String      | Variant   |
| Domain | {"[\"a\", \"b\"]"..="null"} | {"a"..="c"} | Unknown   |
| Row 0  | '[1, 2, 3]'                 | 'a'         | '[1,2,3]' |
| Row 1  | '["a", "b"]'                | 'b'         | '["a"]'   |
| Row 2  | 'null'                      | 'c'         | '[null]'  |
+--------+-----------------------------+-------------+-----------+
evaluation (internal):
+--------+-----------------------------------------------------------------------------------------------------+
| Column | Data                                                                                                |
+--------+-----------------------------------------------------------------------------------------------------+
| c1     | StringColumn[[1, 2, 3], ["a", "b"], null]                                                           |
| c2     | StringColumn[a, b, c]                                                                               |
| Output | Variant([0x80000003200000022000000220000002500150025003, 0x800000011000000161, 0x8000000100000000]) |
+--------+-----------------------------------------------------------------------------------------------------+


ast            : array_remove_first(parse_json('[1, 2, 3]'))
raw expr       : array_remove_first(parse_json('[1, 2, 3]'))
checked expr   : array_remove_first<Variant>(CAST<String>("[1, 2, 3]" AS Variant))
optimized expr : 0x80000002200000022000000250025003
output type    : Variant
output domain  : Undefined
output         : '[2,3]'


ast            : array_remove_first(parse_json('[1]'))
raw expr       : array_remove_first(parse_json('[1]'))
checked expr   : array_remove_first<Variant>(CAST<String>("[1]" AS Variant))
optimized expr : 0x80000000
output type    : Variant
output domain  : Undefined
output         : '[]'


ast            : array_remove_first(parse_json('[]'))
raw expr       : array_remove_first(parse_json('[]'))
checked expr   : array_remove_first<Variant>(CAST<String>("[]" AS Variant))
optimized expr : 0x80000000
output type    : Variant
output domain  : Undefined
output         : '[]'


ast            : array_remove_first(null)
raw expr       : array_remove_first(NULL)
checked expr   : array_remove_first<Variant NULL>(CAST<NULL>(NULL AS Variant NULL))
optimized expr : NULL
output type    : Variant NULL
output domain  : {NULL}
output         : NULL


ast            : array_remove_first(parse_json(c1))
raw expr       : array_remove_first(parse_json(c1::String))
checked expr   : array_remove_first<Variant>(CAST<String>(c1 AS Variant))
evaluation:
+--------+-----------------------------+---------+
|        | c1                          | Output  |
+--------+-----------------------------+---------+
| Type   | String                      | Variant |
| Domain | {"[\"a\", \"b\"]"..="null"} | Unknown |
| Row 0  | '[1, 2, 3]'                 | '[2,3]' |
| Row 1  | '["a", "b"]'                | '["b"]' |
| Row 2  | 'null'                      | '[]'    |
+--------+-----------------------------+---------+
evaluation (internal):
+--------+---------------------------------------------------------------------------------+
| Column | Data                                                                            |
+--------+---------------------------------------------------------------------------------+
| c1     | StringColumn[[1, 2, 3], ["a", "b"], null]                                       |
| Output | Variant([0x80000002200000022000000250025003, 0x800000011000000162, 0x80000000]) |
+--------+---------------------------------------------------------------------------------+


ast            : array_remove_last(parse_json('[1, 2, 3]'))
raw expr       : array_remove_last(parse_json('[1, 2, 3]'))
checked expr   : array_remove_last<Variant>(CAST<String>("[1, 2, 3]" AS Variant))
optimized expr : 0x80000002200000022000000250015002
output type    : Variant
output domain  : Undefined
output         : '[1,2]'


ast            : array_remove_last(parse_json('[1]'))
raw expr       : array_remove_last(parse_json('[1]'))
checked expr   : array_remove_last<Variant>(CAST<String>("[1]" AS Variant))
optimized expr : 0x80000000
output type    : Variant
output domain  : Undefined
output         : '[]'


ast            : array_remove_last(parse_json('[]'))
raw expr       : array_remove_last(parse_json('[]'))
checked expr   : array_remove_last<Variant>(CAST<String>("[]" AS Variant))
optimized expr : 0x80000000
output type    : Variant
output domain  : Undefined
output         : '[]'


ast            : array_remove_last(null)
raw expr       : array_remove_last(NULL)
checked expr   : array_remove_last<Variant NULL>(CAST<NULL>(NULL AS Variant NULL))
optimized expr : NULL
output type    : Variant NULL
output domain  : {NULL}
output         : NULL


ast            : array_remove_last(parse_json(c1))
raw expr       : array_remove_last(parse_json(c1::String))
checked expr   : array_remove_last<Variant>(CAST<String>(c1 AS Variant))
evaluation:
+--------+-----------------------------+---------+
|        | c1                          | Output  |
+--------+-----------------------------+---------+
| Type   | String                      | Variant |
| Domain | {"[\"a\", \"b\"]"..="null"} | Unknown |
| Row 0  | '[1, 2, 3]'                 | '[1,2]' |
| Row 1  | '["a", "b"]'                | '["a"]' |
| Row 2  | 'null'                      | '[]'    |
+--------+-----------------------------+---------+
evaluation (internal):
+--------+---------------------------------------------------------------------------------+
| Column | Data                                                                            |
+--------+---------------------------------------------------------------------------------+
| c1     | StringColumn[[1, 2, 3], ["a", "b"], null]                                       |
| Output | Variant([0x80000002200000022000000250015002, 0x800000011000000161, 0x80000000]) |
+--------+---------------------------------------------------------------------------------+


ast            : array_reverse(parse_json('[1, 2, 3]'))
raw expr       : array_reverse(parse_json('[1, 2, 3]'))
checked expr   : array_reverse<Variant>(CAST<String>("[1, 2, 3]" AS Variant))
optimized expr : 0x80000003200000022000000220000002500350025001
output type    : Variant
output domain  : Undefined
output         : '[3,2,1]'


ast            : array_reverse(parse_json('["a", "b", "c"]'))
raw expr       : array_reverse(parse_json('["a", "b", "c"]'))
checked expr   : array_reverse<Variant>(CAST<String>("[\"a\", \"b\", \"c\"]" AS Variant))
optimized expr : 0x80000003100000011000000110000001636261
output type    : Variant
output domain  : Undefined
output         : '["c","b","a"]'


ast            : array_reverse(parse_json('[]'))
raw expr       : array_reverse(parse_json('[]'))
checked expr   : array_reverse<Variant>(CAST<String>("[]" AS Variant))
optimized expr : 0x80000000
output type    : Variant
output domain  : Undefined
output         : '[]'


ast            : array_reverse(null)
raw expr       : array_reverse(NULL)
checked expr   : array_reverse<Variant NULL>(CAST<NULL>(NULL AS Variant NULL))
optimized expr : NULL
output type    : Variant NULL
output domain  : {NULL}
output         : NULL


ast            : array_reverse(parse_json(c1))
raw expr       : array_reverse(parse_json(c1::String))
checked expr   : array_reverse<Variant>(CAST<String>(c1 AS Variant))
evaluation:
+--------+-----------------------------+-------------+
|        | c1                          | Output      |
+--------+-----------------------------+-------------+
| Type   | String                      | Variant     |
| Domain | {"[\"a\", \"b\"]"..="null"} | Unknown     |
| Row 0  | '[1, 2, 3]'                 | '[3,2,1]'   |
| Row 1  | '["a", "b"]'                | '["b","a"]' |
| Row 2  | 'null'                      | '[null]'    |
+--------+-----------------------------+-------------+
evaluation (internal):
+--------+---------------------------------------------------------------------------------------------------------------+
| Column | Data                                                                                                          |
+--------+---------------------------------------------------------------------------------------------------------------+
| c1     | StringColumn[[1, 2, 3], ["a", "b"], null]                                                                     |
| Output | Variant([0x80000003200000022000000220000002500350025001, 0x8000000210000001100000016261, 0x8000000100000000]) |
+--------+---------------------------------------------------------------------------------------------------------------+


ast            : array_unique(parse_json('[1, 2, 2, 3, 3]'))
raw expr       : array_unique(parse_json('[1, 2, 2, 3, 3]'))
checked expr   : array_unique<Variant>(CAST<String>("[1, 2, 2, 3, 3]" AS Variant))
optimized expr : 3_u64
output type    : UInt64
output domain  : {3..=3}
output         : 3


ast            : array_unique(parse_json('["a", "b", "b", "c"]'))
raw expr       : array_unique(parse_json('["a", "b", "b", "c"]'))
checked expr   : array_unique<Variant>(CAST<String>("[\"a\", \"b\", \"b\", \"c\"]" AS Variant))
optimized expr : 3_u64
output type    : UInt64
output domain  : {3..=3}
output         : 3


ast            : array_unique(parse_json('[1, 2, 3]'))
raw expr       : array_unique(parse_json('[1, 2, 3]'))
checked expr   : array_unique<Variant>(CAST<String>("[1, 2, 3]" AS Variant))
optimized expr : 3_u64
output type    : UInt64
output domain  : {3..=3}
output         : 3


ast            : array_unique(parse_json('[]'))
raw expr       : array_unique(parse_json('[]'))
checked expr   : array_unique<Variant>(CAST<String>("[]" AS Variant))
optimized expr : 0_u64
output type    : UInt64
output domain  : {0..=0}
output         : 0


ast            : array_unique(null)
raw expr       : array_unique(NULL)
checked expr   : array_unique<Variant NULL>(CAST<NULL>(NULL AS Variant NULL))
optimized expr : NULL
output type    : UInt64 NULL
output domain  : {NULL}
output         : NULL


ast            : array_unique(parse_json(c1))
raw expr       : array_unique(parse_json(c1::String))
checked expr   : array_unique<Variant>(CAST<String>(c1 AS Variant))
evaluation:
+--------+------------------------------------+---------+
|        | c1                                 | Output  |
+--------+------------------------------------+---------+
| Type   | String                             | UInt64  |
| Domain | {"[\"a\", \"b\", \"a\"]"..="null"} | Unknown |
| Row 0  | '[1, 1, 2, 3]'                     | 3       |
| Row 1  | '["a", "b", "a"]'                  | 2       |
| Row 2  | 'null'                             | 1       |
+--------+------------------------------------+---------+
evaluation (internal):
+--------+---------------------------------------------------+
| Column | Data                                              |
+--------+---------------------------------------------------+
| c1     | StringColumn[[1, 1, 2, 3], ["a", "b", "a"], null] |
| Output | UInt64([3, 2, 1])                                 |
+--------+---------------------------------------------------+


ast            : contains(parse_json('[1, 2, 3]'), 3)
raw expr       : contains(parse_json('[1, 2, 3]'), 3)
checked expr   : contains<T0=UInt8><Variant, T0>(CAST<String>("[1, 2, 3]" AS Variant), 3_u8)
optimized expr : true
output type    : Boolean
output domain  : {TRUE}
output         : true


ast            : contains(parse_json('[]'), 1)
raw expr       : contains(parse_json('[]'), 1)
checked expr   : contains<T0=UInt8><Variant, T0>(CAST<String>("[]" AS Variant), 1_u8)
optimized expr : false
output type    : Boolean
output domain  : {FALSE}
output         : false


ast            : contains(parse_json('[1, 2, 3]'), null)
raw expr       : contains(parse_json('[1, 2, 3]'), NULL)
checked expr   : contains<T0=NULL><Variant, T0>(CAST<String>("[1, 2, 3]" AS Variant), NULL)
optimized expr : false
output type    : Boolean
output domain  : {FALSE}
output         : false


ast            : contains(parse_json('[1, 2]'), 'string')
raw expr       : contains(parse_json('[1, 2]'), 'string')
checked expr   : contains<T0=String><Variant, T0>(CAST<String>("[1, 2]" AS Variant), "string")
optimized expr : false
output type    : Boolean
output domain  : {FALSE}
output         : false


ast            : contains(parse_json('[1, 2, true]'), true)
raw expr       : contains(parse_json('[1, 2, true]'), true)
checked expr   : contains<T0=Boolean><Variant, T0>(CAST<String>("[1, 2, true]" AS Variant), true)
optimized expr : true
output type    : Boolean
output domain  : {TRUE}
output         : true


ast            : contains(parse_json('[1, 2, 3]'), parse_json('{"a": 1}'))
raw expr       : contains(parse_json('[1, 2, 3]'), parse_json('{"a": 1}'))
checked expr   : contains<T0=Variant><Variant, T0>(CAST<String>("[1, 2, 3]" AS Variant), CAST<String>("{\"a\": 1}" AS Variant))
optimized expr : false
output type    : Boolean
output domain  : {FALSE}
output         : false


ast            : contains(parse_json(c1), c2)
raw expr       : contains(parse_json(c1::String), c2::String)
checked expr   : contains<T0=String><Variant, T0>(CAST<String>(c1 AS Variant), c2)
evaluation:
+--------+----------------------------+-------------+---------+
|        | c1                         | c2          | Output  |
+--------+----------------------------+-------------+---------+
| Type   | String                     | String      | Boolean |
| Domain | {"[1, 2, \"a\"]"..="null"} | {"a"..="c"} | Unknown |
| Row 0  | '[1, 2, "a"]'              | 'a'         | true    |
| Row 1  | '[]'                       | 'b'         | false   |
| Row 2  | 'null'                     | 'c'         | false   |
+--------+----------------------------+-------------+---------+
evaluation (internal):
+--------+-------------------------------------+
| Column | Data                                |
+--------+-------------------------------------+
| c1     | StringColumn[[1, 2, "a"], [], null] |
| c2     | StringColumn[a, b, c]               |
| Output | Boolean([0b_____001])               |
+--------+-------------------------------------+


ast            : slice(parse_json('[]'), 1)
raw expr       : slice(parse_json('[]'), 1)
checked expr   : slice<Variant, Int64>(CAST<String>("[]" AS Variant), CAST<UInt8>(1_u8 AS Int64))
optimized expr : 0x80000000
output type    : Variant
output domain  : Undefined
output         : '[]'


ast            : slice(parse_json('[0, 1, 2, 3]'), 2)
raw expr       : slice(parse_json('[0, 1, 2, 3]'), 2)
checked expr   : slice<Variant, Int64>(CAST<String>("[0, 1, 2, 3]" AS Variant), CAST<UInt8>(2_u8 AS Int64))
optimized expr : 0x80000002200000022000000250025003
output type    : Variant
output domain  : Undefined
output         : '[2,3]'


ast            : slice(parse_json('[1]'), 1, 2)
raw expr       : slice(parse_json('[1]'), 1, 2)
checked expr   : slice<Variant, Int64, Int64>(CAST<String>("[1]" AS Variant), CAST<UInt8>(1_u8 AS Int64), CAST<UInt8>(2_u8 AS Int64))
optimized expr : 0x80000000
output type    : Variant
output domain  : Undefined
output         : '[]'


ast            : slice(parse_json('true'), 1, 2)
raw expr       : slice(parse_json('true'), 1, 2)
checked expr   : slice<Variant, Int64, Int64>(CAST<String>("true" AS Variant), CAST<UInt8>(1_u8 AS Int64), CAST<UInt8>(2_u8 AS Int64))
optimized expr : 0x80000000
output type    : Variant
output domain  : Undefined
output         : '[]'


ast            : slice(parse_json('[null, 1, 2, 3]'), 0, 2)
raw expr       : slice(parse_json('[null, 1, 2, 3]'), 0, 2)
checked expr   : slice<Variant, Int64, Int64>(CAST<String>("[null, 1, 2, 3]" AS Variant), CAST<UInt8>(0_u8 AS Int64), CAST<UInt8>(2_u8 AS Int64))
optimized expr : 0x8000000200000000200000025001
output type    : Variant
output domain  : Undefined
output         : '[null,1]'


ast            : slice(parse_json('["a", "b", "c", "d"]'), -3, -1)
raw expr       : slice(parse_json('["a", "b", "c", "d"]'), minus(3), minus(1))
checked expr   : slice<Variant, Int64, Int64>(CAST<String>("[\"a\", \"b\", \"c\", \"d\"]" AS Variant), CAST<Int16>(minus<UInt8>(3_u8) AS Int64), CAST<Int16>(minus<UInt8>(1_u8) AS Int64))
optimized expr : 0x8000000210000001100000016263
output type    : Variant
output domain  : Undefined
output         : '["b","c"]'


ast            : slice(parse_json(c1), c2, c3)
raw expr       : slice(parse_json(c1::String), c2::Int64, c3::Int64)
checked expr   : slice<Variant, Int64, Int64>(CAST<String>(c1 AS Variant), c2, c3)
evaluation:
+--------+----------------------------+----------+----------+-----------+
|        | c1                         | c2       | c3       | Output    |
+--------+----------------------------+----------+----------+-----------+
| Type   | String                     | Int64    | Int64    | Variant   |
| Domain | {"[1, 2, \"a\"]"..="null"} | {-3..=3} | {-1..=4} | Unknown   |
| Row 0  | '[1, 2, "a"]'              | 1        | 4        | '[2,"a"]' |
| Row 1  | '[4, 5, 6, 7, 8]'          | -3       | -1       | '[6,7]'   |
| Row 2  | 'null'                     | 3        | 3        | '[]'      |
+--------+----------------------------+----------+----------+-----------+
evaluation (internal):
+--------+---------------------------------------------------------------------------------------------+
| Column | Data                                                                                        |
+--------+---------------------------------------------------------------------------------------------+
| c1     | StringColumn[[1, 2, "a"], [4, 5, 6, 7, 8], null]                                            |
| c2     | Int64([1, -3, 3])                                                                           |
| c3     | Int64([4, -1, 3])                                                                           |
| Output | Variant([0x800000022000000210000001500261, 0x80000002200000022000000250065007, 0x80000000]) |
+--------+---------------------------------------------------------------------------------------------+


