name: "Q1"
description: "TPC-DS Query 1 optimizer test"

sql: |
  WITH customer_total_return
     AS (SELECT sr_customer_sk     AS ctr_customer_sk,
                sr_store_sk        AS ctr_store_sk,
                Sum(sr_return_amt) AS ctr_total_return
         FROM   store_returns,
                date_dim
         WHERE  sr_returned_date_sk = d_date_sk
                AND d_year = 2001
         GROUP  BY sr_customer_sk,
                   sr_store_sk)
  SELECT c_customer_id
  FROM   customer_total_return ctr1,
       store,
       customer
  WHERE  ctr1.ctr_total_return > (SELECT Avg(ctr_total_return) * 1.2
                                FROM   customer_total_return ctr2
                                WHERE  ctr1.ctr_store_sk = ctr2.ctr_store_sk)
       AND s_store_sk = ctr1.ctr_store_sk
       AND s_state = 'TN'
       AND ctr1.ctr_customer_sk = c_customer_sk
  ORDER  BY c_customer_id
  LIMIT 100

# Table statistics derived from snow_plan's TableScan information
table_statistics:
  date_dim:
    num_rows: 73049  # Estimated based on typical date dimension cardinality
    data_size: 2138624  # Directly from snow_plan: "bytes: 2,138,624"
    number_of_segments: 1  # From snow_plan: "partitions: 1/1"

  store_returns:
    num_rows: 287000000  # Estimated based on data size and typical row size
    data_size: 124763446272  # Directly from snow_plan: "bytes: 124,763,446,272"
    number_of_segments: 7070  # From snow_plan: "partitions: 7070/7070"

  store:
    num_rows: 1002  # Estimated based on typical store dimension cardinality
    data_size: 135680  # Directly from snow_plan: "bytes: 135,680"
    number_of_segments: 1  # From snow_plan: "partitions: 1/1"

  customer:
    num_rows: 12000000  # Estimated based on typical customer dimension size
    data_size: 2328538624  # Directly from snow_plan: "bytes: 2,328,538,624"
    number_of_segments: 261  # From snow_plan: "partitions: 261/261"

# Column statistics derived from query predicates and typical TPC-DS data distributions
column_statistics:
  # Date dimension columns used in the query
  date_dim.d_year:
    min: 1990  # Typical range for TPC-DS
    max: 2010  # Typical range for TPC-DS
    ndv: 21  # Based on min/max range (2010-1990+1)
    null_count: 0  # Primary dimension columns typically don't have nulls

  date_dim.d_date_sk:
    min: 1  # Typical starting value for surrogate key
    max: 73049  # Based on table row count
    ndv: 73049  # Primary key, so NDV equals row count
    null_count: 0  # Primary key cannot be null

  # Store returns columns used in the query
  store_returns.sr_returned_date_sk:
    min: 1  # Matches date_dim.d_date_sk min
    max: 73049  # Matches date_dim.d_date_sk max
    ndv: 73049  # Foreign key to date_dim
    null_count: 287998  # Inferred from filter in snow_plan: "STORE_RETURNS.SR_RETURNED_DATE_SK IS NOT NULL"

  store_returns.sr_customer_sk:
    min: 1  # Typical starting value for surrogate key
    max: 12000000  # Matches customer.c_customer_sk max
    ndv: 11000000  # Estimated as slightly less than customer table cardinality
    null_count: 143500  # Inferred from filter in snow_plan: "STORE_RETURNS.SR_CUSTOMER_SK IS NOT NULL"

  store_returns.sr_store_sk:
    min: 1  # Typical starting value for surrogate key
    max: 1002  # Matches store.s_store_sk max
    ndv: 1002  # Foreign key to store table
    null_count: 143500  # Inferred from filter in snow_plan: "STORE_RETURNS.SR_STORE_SK IS NOT NULL"

  store_returns.sr_return_amt:
    min: 0.01  # Minimum reasonable return amount
    max: 10000.00  # Maximum reasonable return amount
    ndv: 100000  # Estimated based on typical distribution
    null_count: 0  # Return amount is typically not null

  # Store columns used in the query
  store.s_store_sk:
    min: 1  # Typical starting value for surrogate key
    max: 1002  # Based on estimated row count
    ndv: 1002  # Primary key, so NDV equals row count
    null_count: 0  # Primary key cannot be null

  store.s_state:
    min: "AK"  # Alaska (alphabetically first US state)
    max: "WY"  # Wyoming (alphabetically last US state)
    ndv: 50  # Number of US states
    null_count: 0  # State is typically not null

  # Customer columns used in the query
  customer.c_customer_sk:
    min: 1  # Typical starting value for surrogate key
    max: 12000000  # Based on estimated row count
    ndv: 12000000  # Primary key, so NDV equals row count
    null_count: 0  # Primary key cannot be null

  customer.c_customer_id:
    min: "AAAAAAAAAAAAAA"  # Lexicographically smallest possible customer ID
    max: "ZZZZZZZZZZZZZZ"  # Lexicographically largest possible customer ID
    ndv: 12000000  # Same as c_customer_sk (1:1 relationship)
    null_count: 0  # Customer ID is typically not null

raw_plan: |
  Limit
  ├── limit: [100]
  ├── offset: [0]
  └── Sort
      ├── sort keys: [default.customer.c_customer_id (#79) ASC]
      ├── limit: [NONE]
      └── EvalScalar
          ├── scalars: [customer.c_customer_id (#79) AS (#79)]
          └── Filter
              ├── filters: [gt(ctr1.ctr_total_return (#48), SUBQUERY), eq(store.s_store_sk (#49), ctr1.ctr_store_sk (#7)), eq(store.s_state (#73), 'TN'), eq(ctr1.ctr_customer_sk (#3), customer.c_customer_sk (#78))]
              └── Join(Cross)
                  ├── build keys: []
                  ├── probe keys: []
                  ├── other filters: []
                  ├── Join(Cross)
                  │   ├── build keys: []
                  │   ├── probe keys: []
                  │   ├── other filters: []
                  │   ├── EvalScalar
                  │   │   ├── scalars: [store_returns.sr_customer_sk (#3) AS (#3), store_returns.sr_store_sk (#7) AS (#7), Sum(sr_return_amt) (#48) AS (#48)]
                  │   │   └── Aggregate(Initial)
                  │   │       ├── group items: [store_returns.sr_customer_sk (#3), store_returns.sr_store_sk (#7)]
                  │   │       ├── aggregate functions: [Sum(sr_return_amt) (#48)]
                  │   │       └── EvalScalar
                  │   │           ├── scalars: [store_returns.sr_customer_sk (#3) AS (#3), store_returns.sr_store_sk (#7) AS (#7), store_returns.sr_return_amt (#11) AS (#11)]
                  │   │           └── Filter
                  │   │               ├── filters: [eq(store_returns.sr_returned_date_sk (#0), date_dim.d_date_sk (#20)), eq(date_dim.d_year (#26), 2001)]
                  │   │               └── Join(Cross)
                  │   │                   ├── build keys: []
                  │   │                   ├── probe keys: []
                  │   │                   ├── other filters: []
                  │   │                   ├── Scan
                  │   │                   │   ├── table: default.store_returns
                  │   │                   │   ├── filters: []
                  │   │                   │   ├── order by: []
                  │   │                   │   └── limit: NONE
                  │   │                   └── Scan
                  │   │                       ├── table: default.date_dim
                  │   │                       ├── filters: []
                  │   │                       ├── order by: []
                  │   │                       └── limit: NONE
                  │   └── Scan
                  │       ├── table: default.store
                  │       ├── filters: []
                  │       ├── order by: []
                  │       └── limit: NONE
                  └── Scan
                      ├── table: default.customer
                      ├── filters: []
                      ├── order by: []
                      └── limit: NONE

optimized_plan: |
  Limit
  ├── limit: [100]
  ├── offset: [0]
  └── Sort
      ├── sort keys: [default.customer.c_customer_id (#79) ASC]
      ├── limit: [100]
      └── EvalScalar
          ├── scalars: [customer.c_customer_id (#79) AS (#79), ctr1.ctr_total_return (#48) AS (#154), scalar_subquery_147 (#147) AS (#155), store.s_store_sk (#49) AS (#156), ctr1.ctr_store_sk (#7) AS (#157), store.s_state (#73) AS (#158), ctr1.ctr_customer_sk (#3) AS (#159), customer.c_customer_sk (#78) AS (#160)]
          └── Join(Inner)
              ├── build keys: [sr_store_sk (#103)]
              ├── probe keys: [sr_store_sk (#7)]
              ├── other filters: [gt(ctr1.ctr_total_return (#48), scalar_subquery_147 (#147))]
              ├── Join(Inner)
              │   ├── build keys: [customer.c_customer_sk (#78)]
              │   ├── probe keys: [ctr1.ctr_customer_sk (#3)]
              │   ├── other filters: []
              │   ├── Aggregate(Final)
              │   │   ├── group items: [store_returns.sr_customer_sk (#3), store_returns.sr_store_sk (#7)]
              │   │   ├── aggregate functions: [Sum(sr_return_amt) (#48)]
              │   │   └── Aggregate(Partial)
              │   │       ├── group items: [store_returns.sr_customer_sk (#3), store_returns.sr_store_sk (#7)]
              │   │       ├── aggregate functions: [Sum(sr_return_amt) (#48)]
              │   │       └── EvalScalar
              │   │           ├── scalars: [store_returns.sr_customer_sk (#3) AS (#3), store_returns.sr_store_sk (#7) AS (#7), store_returns.sr_return_amt (#11) AS (#11), store_returns.sr_returned_date_sk (#0) AS (#148), date_dim.d_date_sk (#20) AS (#149), date_dim.d_year (#26) AS (#150)]
              │   │           └── Join(Inner)
              │   │               ├── build keys: [date_dim.d_date_sk (#20)]
              │   │               ├── probe keys: [store_returns.sr_returned_date_sk (#0)]
              │   │               ├── other filters: []
              │   │               ├── Scan
              │   │               │   ├── table: default.store_returns
              │   │               │   ├── filters: []
              │   │               │   ├── order by: []
              │   │               │   └── limit: NONE
              │   │               └── Scan
              │   │                   ├── table: default.date_dim
              │   │                   ├── filters: [eq(date_dim.d_year (#26), 2001)]
              │   │                   ├── order by: []
              │   │                   └── limit: NONE
              │   └── Scan
              │       ├── table: default.customer
              │       ├── filters: []
              │       ├── order by: []
              │       └── limit: NONE
              └── Join(Inner)
                  ├── build keys: [sr_store_sk (#103)]
                  ├── probe keys: [store.s_store_sk (#49)]
                  ├── other filters: []
                  ├── Scan
                  │   ├── table: default.store
                  │   ├── filters: [eq(store.s_state (#73), 'TN')]
                  │   ├── order by: []
                  │   └── limit: NONE
                  └── EvalScalar
                      ├── scalars: [outer.sr_store_sk (#103) AS (#103), multiply(divide(sum(ctr_total_return) (#145), if(eq(count(ctr_total_return) (#146), 0), 1, count(ctr_total_return) (#146))), 1.2) AS (#147)]
                      └── Aggregate(Final)
                          ├── group items: [outer.sr_store_sk (#103)]
                          ├── aggregate functions: [sum(ctr_total_return) (#145), count(ctr_total_return) (#146)]
                          └── Aggregate(Partial)
                              ├── group items: [outer.sr_store_sk (#103)]
                              ├── aggregate functions: [sum(ctr_total_return) (#145), count(ctr_total_return) (#146)]
                              └── Aggregate(Final)
                                  ├── group items: [store_returns.sr_customer_sk (#99), store_returns.sr_store_sk (#103)]
                                  ├── aggregate functions: [Sum(sr_return_amt) (#144)]
                                  └── Aggregate(Partial)
                                      ├── group items: [store_returns.sr_customer_sk (#99), store_returns.sr_store_sk (#103)]
                                      ├── aggregate functions: [Sum(sr_return_amt) (#144)]
                                      └── EvalScalar
                                          ├── scalars: [store_returns.sr_customer_sk (#99) AS (#99), store_returns.sr_store_sk (#103) AS (#103), store_returns.sr_return_amt (#107) AS (#107), store_returns.sr_returned_date_sk (#96) AS (#151), date_dim.d_date_sk (#116) AS (#152), date_dim.d_year (#122) AS (#153)]
                                          └── Join(Inner)
                                              ├── build keys: [date_dim.d_date_sk (#116)]
                                              ├── probe keys: [store_returns.sr_returned_date_sk (#96)]
                                              ├── other filters: []
                                              ├── Scan
                                              │   ├── table: default.store_returns
                                              │   ├── filters: []
                                              │   ├── order by: []
                                              │   └── limit: NONE
                                              └── Scan
                                                  ├── table: default.date_dim
                                                  ├── filters: [eq(date_dim.d_year (#122), 2001)]
                                                  ├── order by: []
                                                  └── limit: NONE

# Converted from tabular format to tree format based on parent-child relationships
good_plan: |
  Result
  └── SortWithLimit [sortKey: (CUSTOMER.C_CUSTOMER_ID ASC NULLS LAST), rowCount: 100]
      └── InnerJoin [joinKey: (CTR1.CTR_CUSTOMER_SK = CUSTOMER.C_CUSTOMER_SK)]
          ├── InnerJoin [joinKey: (STORE.S_STORE_SK = CTR1.CTR_STORE_SK)]
          │   ├── Filter [STORE.S_STATE = 'TN']
          │   │   └── TableScan [SNOWFLAKE_SAMPLE_DATA.TPCDS_SF10TCL.STORE] [S_STORE_SK, S_STATE] [partitions: 1/1, bytes: 135,680]
          │   └── InnerJoin [joinKey: (CTR2.CTR_STORE_SK = CTR1.CTR_STORE_SK), joinFilter: (CTR1.CTR_TOTAL_RETURN) > (((SUM(CTR2.CTR_TOTAL_RETURN)) / (NVL(COUNT(CTR2.CTR_TOTAL_RETURN), 0))) * 1.2)]
          │       ├── Filter [(SUM(CTR2.CTR_TOTAL_RETURN) IS NOT NULL) AND (COUNT(CTR2.CTR_TOTAL_RETURN) IS NOT NULL)]
          │       │   └── Aggregate [aggExprs: [SUM(CTR2.CTR_TOTAL_RETURN), COUNT(CTR2.CTR_TOTAL_RETURN)], groupKeys: [CTR2.CTR_STORE_SK]]
          │       │       └── JoinFilter [joinKey: (STORE.S_STORE_SK = CTR1.CTR_STORE_SK)]
          │       │           └── WithReference [CTR2]
          │       │               └── Filter [STORE_RETURNS.SR_STORE_SK IS NOT NULL]
          │       │                   └── WithClause [CUSTOMER_TOTAL_RETURN]
          │       │                       └── Aggregate [aggExprs: [SUM(SUM(SUM(STORE_RETURNS.SR_RETURN_AMT)))], groupKeys: [STORE_RETURNS.SR_CUSTOMER_SK, STORE_RETURNS.SR_STORE_SK]]
          │       │                           └── Aggregate [aggExprs: [SUM(SUM(STORE_RETURNS.SR_RETURN_AMT))], groupKeys: [STORE_RETURNS.SR_CUSTOMER_SK, STORE_RETURNS.SR_STORE_SK]]
          │       │                               └── InnerJoin [joinKey: (DATE_DIM.D_DATE_SK = STORE_RETURNS.SR_RETURNED_DATE_SK)]
          │       │                                   ├── Filter [DATE_DIM.D_YEAR = 2001]
          │       │                                   │   └── TableScan [SNOWFLAKE_SAMPLE_DATA.TPCDS_SF10TCL.DATE_DIM] [D_DATE_SK, D_YEAR] [partitions: 1/1, bytes: 2,138,624]
          │       │                                   └── Aggregate [aggExprs: [SUM(STORE_RETURNS.SR_RETURN_AMT)], groupKeys: [STORE_RETURNS.SR_CUSTOMER_SK, STORE_RETURNS.SR_STORE_SK, STORE_RETURNS.SR_RETURNED_DATE_SK]]
          │       │                                       └── Filter [STORE_RETURNS.SR_RETURNED_DATE_SK IS NOT NULL]
          │       │                                           └── JoinFilter [joinKey: (DATE_DIM.D_DATE_SK = STORE_RETURNS.SR_RETURNED_DATE_SK)]
          │       │                                               └── TableScan [SNOWFLAKE_SAMPLE_DATA.TPCDS_SF10TCL.STORE_RETURNS] [SR_RETURNED_DATE_SK, SR_CUSTOMER_SK, SR_STORE_SK, SR_RETURN_AMT] [partitions: 7070/7070, bytes: 124,763,446,272]
          │       └── JoinFilter [joinKey: (STORE.S_STORE_SK = CTR1.CTR_STORE_SK)]
          │           └── WithReference [CTR1]
          │               └── Filter [(STORE_RETURNS.SR_STORE_SK IS NOT NULL) AND (STORE_RETURNS.SR_CUSTOMER_SK IS NOT NULL)]
          │                   └── WithClause [CUSTOMER_TOTAL_RETURN] (reference to earlier WITH clause)
          └── JoinFilter [joinKey: (CTR1.CTR_CUSTOMER_SK = CUSTOMER.C_CUSTOMER_SK)]
              └── TableScan [SNOWFLAKE_SAMPLE_DATA.TPCDS_SF10TCL.CUSTOMER] [C_CUSTOMER_SK, C_CUSTOMER_ID] [partitions: 261/261, bytes: 2,328,538,624]
