-- reset user, roles, and tables
-- prepare user, roles, and tables for tests
-- grant privilege to roles
-- test 1: set role as testrole1, then SELECT current_role()
testrole1
-- test 2: set a nonexistent role, a existed but not granted role, will fail
Error: APIError: QueryFailed: [2206]Invalid role nonexisting_role for current session, available: public,testrole1,testrole2,testrole3
Error: APIError: QueryFailed: [2206]Invalid role testrole4 for current session, available: public,testrole1,testrole2,testrole3
-- test 3: set role as testrole1, secondary roles as NONE, can access table1, can not access table2
0
Error: APIError: QueryFailed: [1063]Permission denied: privilege [Insert] is required on 'default'.'default'.'t20_0015_table2' for user 'testuser1'@'%' with roles [testrole1,public]
-- test 4: set role as testrole2, secondary roles as NONE, can access table2, can not access table1
Error: APIError: QueryFailed: [1063]Permission denied: privilege [Insert] is required on 'default'.'default'.'t20_0015_table1' for user 'testuser1'@'%' with roles [testrole2,public]
0
-- test 5: set role as testrole3, secondary roles as NONE, can access table2, can not access table1, because role3 inherited from role2
Error: APIError: QueryFailed: [1063]Permission denied: privilege [Insert] is required on 'default'.'default'.'t20_0015_table1' for user 'testuser1'@'%' with roles [testrole3,public,testrole2]
"{""roles"":""public"",""value"":""None""}"
"[""public"",""testrole1"",""testrole2"",""testrole3""]"
0
-- test 6: set role as testrole1, secondary roles as ALL, can access both table1 and table2
0
"{""roles"":""public,testrole1,testrole2,testrole3"",""value"":""ALL""}"
"[""public"",""testrole1"",""testrole2"",""testrole3""]"
0
-- test 6.1: set secondary roles as testrole3, can access table2(because testrole2 can access table2, testrole2 is child of testrole3), can not access table1
Error: APIError: QueryFailed: [1063]Permission denied: privilege [Insert] is required on 'default'.'default'.'t20_0015_table1' for user 'testuser1'@'%' with roles [public,testrole3,testrole2]
"{""roles"":""public,testrole2,testrole3"",""value"":""None""}"
"[""public"",""testrole1"",""testrole2"",""testrole3""]"
Error: APIError: QueryFailed: [2206]object is invalid
-- test 7: set role as testrole1, testrole2, secondary roles defaults as ALL, can both table1 and table2
0
0
0
0
-- test 8: not change role, secondary roles defaults as ALL, can both table1 and table2
0
0
-- test 9: set default role as testrole1, secondary roles as NONE, current role will still be testrole1 in another session
testrole1
-- test 10: set default role as nonexisting_role, will fail
Error: APIError: QueryFailed: [2206]Invalid role nonexistedrole for current session, available: public,testrole1,testrole2,testrole3
-- test 11: set secondary All | None, create object only check current role
Error: APIError: QueryFailed: [1063]Permission denied: privilege [CreateDatabase] is required on *.* for user 'test_c'@'%' with roles [public]. Note: Please ensure that your current role have the appropriate permissions to create a new Warehouse|Database|Table|UDF|Stage.
Error: APIError: QueryFailed: [1063]Permission denied: privilege [CreateDatabase] is required on *.* for user 'test_c'@'%' with roles [public]. Note: Please ensure that your current role have the appropriate permissions to create a new Warehouse|Database|Table|UDF|Stage.
OWNERSHIP db_c  ROLE role_c GRANT OWNERSHIP ON 'default'.'db_c'.* TO ROLE `role_c`
OWNERSHIP db_d  ROLE role_c GRANT OWNERSHIP ON 'default'.'db_d'.* TO ROLE `role_c`
OWNERSHIP db_e  ROLE public GRANT OWNERSHIP ON 'default'.'db_e'.* TO ROLE `public`
