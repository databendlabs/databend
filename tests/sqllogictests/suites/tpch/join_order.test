statement ok
set enable_auto_materialize_cte = 0;

statement ok
set sandbox_tenant = 'test_tenant';

statement ok
use tpch_test;

statement ok
analyze table customer

statement ok
analyze table lineitem

statement ok
analyze table nation

statement ok
analyze table orders

statement ok
analyze table partsupp

statement ok
analyze table part

statement ok
analyze table region

statement ok
analyze table supplier

# Q1
query I
explain join select
    l_returnflag,
    l_linestatus,
    sum(l_quantity) as sum_qty,
    sum(l_extendedprice) as sum_base_price,
    sum(l_extendedprice * (1 - l_discount)) as sum_disc_price,
    sum(l_extendedprice * (1 - l_discount) * (1 + l_tax)) as sum_charge,
    avg(l_quantity) as avg_qty,
    avg(l_extendedprice) as avg_price,
    avg(l_discount) as avg_disc,
    count(*) as count_order
from
    lineitem
where
        l_shipdate <= add_days(to_date('1998-12-01'), -90)
group by
    l_returnflag,
    l_linestatus
order by
    l_returnflag,
    l_linestatus;
----
Scan: default.tpch_test.lineitem (#0) (read rows: 6001215)

# Q2
query I
explain join select
    s_acctbal,
    s_name,
    n_name,
    p_partkey,
    p_mfgr,
    s_address,
    s_phone,
    s_comment
from
    part,
    supplier,
    partsupp,
    nation,
    region
where
        p_partkey = ps_partkey
  and s_suppkey = ps_suppkey
  and p_size = 15
  and p_type like '%BRASS'
  and s_nationkey = n_nationkey
  and n_regionkey = r_regionkey
  and r_name = 'EUROPE'
  and ps_supplycost = (
    select
        min(ps_supplycost)
    from
        partsupp,
        supplier,
        nation,
        region
    where
            p_partkey = ps_partkey
      and s_suppkey = ps_suppkey
      and s_nationkey = n_nationkey
      and n_regionkey = r_regionkey
      and r_name = 'EUROPE'
)
order by
    s_acctbal desc,
    n_name,
    s_name,
    p_partkey;
----
HashJoin: INNER
├── Build
│   └── HashJoin: INNER
│       ├── Build
│       │   └── HashJoin: INNER
│       │       ├── Build
│       │       │   └── HashJoin: INNER
│       │       │       ├── Build
│       │       │       │   └── Scan: default.tpch_test.region (#4) (read rows: 5)
│       │       │       └── Probe
│       │       │           └── Scan: default.tpch_test.nation (#3) (read rows: 25)
│       │       └── Probe
│       │           └── Scan: default.tpch_test.supplier (#1) (read rows: 10000)
│       └── Probe
│           └── HashJoin: INNER
│               ├── Build
│               │   └── Scan: default.tpch_test.part (#0) (read rows: 200000)
│               └── Probe
│                   └── Scan: default.tpch_test.partsupp (#2) (read rows: 800000)
└── Probe
    └── HashJoin: INNER
        ├── Build
        │   └── HashJoin: INNER
        │       ├── Build
        │       │   └── HashJoin: INNER
        │       │       ├── Build
        │       │       │   └── Scan: default.tpch_test.region (#8) (read rows: 5)
        │       │       └── Probe
        │       │           └── Scan: default.tpch_test.nation (#7) (read rows: 25)
        │       └── Probe
        │           └── Scan: default.tpch_test.supplier (#6) (read rows: 10000)
        └── Probe
            └── Scan: default.tpch_test.partsupp (#5) (read rows: 800000)

# Q3
query I
explain join select
    l_orderkey,
    sum(l_extendedprice * (1 - l_discount)) as revenue,
    o_orderdate,
    o_shippriority
from
    customer,
    orders,
    lineitem
where
        c_mktsegment = 'BUILDING'
  and c_custkey = o_custkey
  and l_orderkey = o_orderkey
  and o_orderdate < to_date('1995-03-15')
  and l_shipdate > to_date('1995-03-15')
group by
    l_orderkey,
    o_orderdate,
    o_shippriority
order by
    revenue desc,
    o_orderdate
limit 5;
----
HashJoin: INNER
├── Build
│   └── HashJoin: INNER
│       ├── Build
│       │   └── Scan: default.tpch_test.customer (#0) (read rows: 150000)
│       └── Probe
│           └── Scan: default.tpch_test.orders (#1) (read rows: 1500000)
└── Probe
    └── Scan: default.tpch_test.lineitem (#2) (read rows: 6001215)

# Q4
query I
explain join select
    o_orderpriority,
    count(*) as order_count
from
    orders
where
        o_orderdate >= to_date('1993-07-01')
  and o_orderdate < add_months(to_date('1993-07-01'), 3)
  and exists (
        select
            *
        from
            lineitem
        where
                l_orderkey = o_orderkey
          and l_commitdate < l_receiptdate
    )
group by
    o_orderpriority
order by
    o_orderpriority;
----
HashJoin: RIGHT SEMI
├── Build
│   └── Scan: default.tpch_test.orders (#0) (read rows: 1500000)
└── Probe
    └── Scan: default.tpch_test.lineitem (#1) (read rows: 6001215)

# Q5
query I
explain join select
    n_name,
    ceil(sum(l_extendedprice * (1 - l_discount)) / 10) as revenue
from
    customer,
    orders,
    lineitem,
    supplier,
    nation,
    region
where
        c_custkey = o_custkey
  and l_orderkey = o_orderkey
  and l_suppkey = s_suppkey
  and c_nationkey = s_nationkey
  and s_nationkey = n_nationkey
  and n_regionkey = r_regionkey
  and r_name = 'ASIA'
  and o_orderdate >= to_date('1994-01-01')
  and o_orderdate < add_years(to_date('1994-01-01'), 1)
group by
    n_name
order by
    revenue desc;
----
HashJoin: INNER
├── Build
│   └── Scan: default.tpch_test.supplier (#3) (read rows: 10000)
└── Probe
    └── HashJoin: INNER
        ├── Build
        │   └── HashJoin: INNER
        │       ├── Build
        │       │   └── HashJoin: INNER
        │       │       ├── Build
        │       │       │   └── HashJoin: INNER
        │       │       │       ├── Build
        │       │       │       │   └── Scan: default.tpch_test.region (#5) (read rows: 5)
        │       │       │       └── Probe
        │       │       │           └── Scan: default.tpch_test.nation (#4) (read rows: 25)
        │       │       └── Probe
        │       │           └── Scan: default.tpch_test.customer (#0) (read rows: 150000)
        │       └── Probe
        │           └── Scan: default.tpch_test.orders (#1) (read rows: 1500000)
        └── Probe
            └── Scan: default.tpch_test.lineitem (#2) (read rows: 6001215)

# Q6
query I
explain join select
   truncate(sum(l_extendedprice * l_discount),3) as revenue
from
   lineitem
where
   l_shipdate >= '1994-01-01'
   and l_shipdate < date_add(year, 1, to_date('1994-01-01'))
   and l_discount between 0.05 and 0.07
   and l_quantity < 24;
----
Scan: default.tpch_test.lineitem (#0) (read rows: 6001215)

# Q7
query I
explain join select
    supp_nation,
    cust_nation,
    l_year,
    truncate(sum(volume),3) as revenue
from
    (
        select
            n1.n_name as supp_nation,
            n2.n_name as cust_nation,
            extract(year from l_shipdate) as l_year,
            l_extendedprice * (1 - l_discount) as volume
        from
            supplier,
            lineitem,
            orders,
            customer,
            nation n1,
            nation n2
        where
                s_suppkey = l_suppkey
          and o_orderkey = l_orderkey
          and c_custkey = o_custkey
          and s_nationkey = n1.n_nationkey
          and c_nationkey = n2.n_nationkey
          and (
                (n1.n_name = 'FRANCE' and n2.n_name = 'GERMANY')
                or (n1.n_name = 'GERMANY' and n2.n_name = 'FRANCE')
            )
          and l_shipdate between to_date('1995-01-01') and to_date('1996-12-31')
    ) as shipping
group by
    supp_nation,
    cust_nation,
    l_year
order by
    supp_nation,
    cust_nation,
    l_year;
----
HashJoin: INNER
├── Build
│   └── HashJoin: INNER
│       ├── Build
│       │   └── Scan: default.tpch_test.nation (#4) (read rows: 25)
│       └── Probe
│           └── Scan: default.tpch_test.supplier (#0) (read rows: 10000)
└── Probe
    └── HashJoin: INNER
        ├── Build
        │   └── HashJoin: INNER
        │       ├── Build
        │       │   └── HashJoin: INNER
        │       │       ├── Build
        │       │       │   └── Scan: default.tpch_test.nation (#5) (read rows: 25)
        │       │       └── Probe
        │       │           └── Scan: default.tpch_test.customer (#3) (read rows: 150000)
        │       └── Probe
        │           └── Scan: default.tpch_test.orders (#2) (read rows: 1500000)
        └── Probe
            └── Scan: default.tpch_test.lineitem (#1) (read rows: 6001215)

# Q8
query I
explain join select
    o_year,
    truncate(sum(case
            when nation = 'BRAZIL' then volume
            else 0
        end) / sum(volume),8) as mkt_share
from
    (
        select
            extract(year from o_orderdate) as o_year,
            l_extendedprice * (1 - l_discount) as volume,
            n2.n_name as nation
        from
            part,
            supplier,
            lineitem,
            orders,
            customer,
            nation n1,
            nation n2,
            region
        where
                p_partkey = l_partkey
          and s_suppkey = l_suppkey
          and l_orderkey = o_orderkey
          and o_custkey = c_custkey
          and c_nationkey = n1.n_nationkey
          and n1.n_regionkey = r_regionkey
          and r_name = 'AMERICA'
          and s_nationkey = n2.n_nationkey
          and o_orderdate between to_date('1995-01-01') and to_date('1996-12-31')
          and p_type = 'ECONOMY ANODIZED STEEL'
    ) as all_nations
group by
    o_year
order by
    o_year;
----
HashJoin: INNER
├── Build
│   └── Scan: default.tpch_test.nation (#6) (read rows: 25)
└── Probe
    └── HashJoin: INNER
        ├── Build
        │   └── HashJoin: INNER
        │       ├── Build
        │       │   └── HashJoin: INNER
        │       │       ├── Build
        │       │       │   └── Scan: default.tpch_test.region (#7) (read rows: 5)
        │       │       └── Probe
        │       │           └── Scan: default.tpch_test.nation (#5) (read rows: 25)
        │       └── Probe
        │           └── HashJoin: INNER
        │               ├── Build
        │               │   └── HashJoin: INNER
        │               │       ├── Build
        │               │       │   └── HashJoin: INNER
        │               │       │       ├── Build
        │               │       │       │   └── Scan: default.tpch_test.part (#0) (read rows: 200000)
        │               │       │       └── Probe
        │               │       │           └── Scan: default.tpch_test.lineitem (#2) (read rows: 6001215)
        │               │       └── Probe
        │               │           └── Scan: default.tpch_test.orders (#3) (read rows: 1500000)
        │               └── Probe
        │                   └── Scan: default.tpch_test.customer (#4) (read rows: 150000)
        └── Probe
            └── Scan: default.tpch_test.supplier (#1) (read rows: 10000)

# Q9
query I
explain join select
    nation,
    o_year,
    truncate(truncate(sum(amount),0)/10, 0) as sum_profit
from
    (
        select
            n_name as nation,
            extract(year from o_orderdate) as o_year,
            truncate(l_extendedprice * (1 - l_discount) - ps_supplycost * l_quantity, 100) as amount
        from
            part,
            supplier,
            lineitem,
            partsupp,
            orders,
            nation
        where
                s_suppkey = l_suppkey
          and ps_suppkey = l_suppkey
          and ps_partkey = l_partkey
          and p_partkey = l_partkey
          and o_orderkey = l_orderkey
          and s_nationkey = n_nationkey
          and p_name like '%green%'
    ) as profit
group by
    nation,
    o_year
order by
    sum_profit
limit 5;
----
HashJoin: INNER
├── Build
│   └── HashJoin: INNER
│       ├── Build
│       │   └── HashJoin: INNER
│       │       ├── Build
│       │       │   └── Scan: default.tpch_test.nation (#5) (read rows: 25)
│       │       └── Probe
│       │           └── Scan: default.tpch_test.supplier (#1) (read rows: 10000)
│       └── Probe
│           └── HashJoin: INNER
│               ├── Build
│               │   └── HashJoin: INNER
│               │       ├── Build
│               │       │   └── Scan: default.tpch_test.part (#0) (read rows: 200000)
│               │       └── Probe
│               │           └── Scan: default.tpch_test.lineitem (#2) (read rows: 6001215)
│               └── Probe
│                   └── Scan: default.tpch_test.orders (#4) (read rows: 1500000)
└── Probe
    └── Scan: default.tpch_test.partsupp (#3) (read rows: 800000)

# Q10
query I
explain join select
    c_custkey,
    c_name,
    TRUNCATE(sum(l_extendedprice * (1 - l_discount)), 3) as revenue,
    c_acctbal,
    n_name,
    c_address,
    c_phone,
    c_comment
from
    customer,
    orders,
    lineitem,
    nation
where
        c_custkey = o_custkey
  and l_orderkey = o_orderkey
  and o_orderdate >= to_date('1993-10-01')
  and o_orderdate < add_months(to_date('1993-10-01'), 3)
  and l_returnflag = 'R'
  and c_nationkey = n_nationkey
group by
    c_custkey,
    c_name,
    c_acctbal,
    c_phone,
    n_name,
    c_address,
    c_comment
order by
    revenue desc limit 5;
----
HashJoin: INNER
├── Build
│   └── HashJoin: INNER
│       ├── Build
│       │   └── Scan: default.tpch_test.nation (#3) (read rows: 25)
│       └── Probe
│           └── HashJoin: INNER
│               ├── Build
│               │   └── Scan: default.tpch_test.orders (#1) (read rows: 1500000)
│               └── Probe
│                   └── Scan: default.tpch_test.customer (#0) (read rows: 150000)
└── Probe
    └── Scan: default.tpch_test.lineitem (#2) (read rows: 6001215)

# Q11
query I
explain join select
    ps_partkey,
    sum(ps_supplycost * ps_availqty) as value
from
    partsupp,
    supplier,
    nation
where
    ps_suppkey = s_suppkey
  and s_nationkey = n_nationkey
  and n_name = 'GERMANY'
group by
    ps_partkey having
    sum(ps_supplycost * ps_availqty) > (
    select
    sum(ps_supplycost * ps_availqty) * 0.000002
    from
    partsupp,
    supplier,
    nation
    where
    ps_suppkey = s_suppkey
                  and s_nationkey = n_nationkey
                  and n_name = 'GERMANY'
    )
order by
    value desc limit 100;
----
HashJoin: INNER
├── Build
│   └── HashJoin: INNER
│       ├── Build
│       │   └── HashJoin: INNER
│       │       ├── Build
│       │       │   └── Scan: default.tpch_test.nation (#5) (read rows: 25)
│       │       └── Probe
│       │           └── Scan: default.tpch_test.supplier (#4) (read rows: 10000)
│       └── Probe
│           └── Scan: default.tpch_test.partsupp (#3) (read rows: 800000)
└── Probe
    └── HashJoin: INNER
        ├── Build
        │   └── HashJoin: INNER
        │       ├── Build
        │       │   └── Scan: default.tpch_test.nation (#2) (read rows: 25)
        │       └── Probe
        │           └── Scan: default.tpch_test.supplier (#1) (read rows: 10000)
        └── Probe
            └── Scan: default.tpch_test.partsupp (#0) (read rows: 800000)

# Q12
query I
explain join select
    l_shipmode,
    sum(case
            when o_orderpriority = '1-URGENT'
                or o_orderpriority = '2-HIGH'
                then 1
            else 0
        end) as high_line_count,
    sum(case
            when o_orderpriority <> '1-URGENT'
                and o_orderpriority <> '2-HIGH'
                then 1
            else 0
        end) as low_line_count
from
    orders,
    lineitem
where
        o_orderkey = l_orderkey
  and l_shipmode in ('MAIL', 'SHIP')
  and l_commitdate < l_receiptdate
  and l_shipdate < l_commitdate
  and l_receiptdate >= to_date('1994-01-01')
  and l_receiptdate < date_add(year, 1, to_date('1994-01-01'))
group by
    l_shipmode
order by
    l_shipmode;
----
HashJoin: INNER
├── Build
│   └── Scan: default.tpch_test.lineitem (#1) (read rows: 6001215)
└── Probe
    └── Scan: default.tpch_test.orders (#0) (read rows: 1500000)

# Q13
query I
explain join select
    c_count,
    count(*) as custdist
from
    (
        select
            c_custkey,
            count(o_orderkey) as c_count
        from
            customer
                left outer join
            orders
            on c_custkey = o_custkey
                and o_comment not like '%pending%deposits%'
        group by
            c_custkey
    )
        c_orders
group by
    c_count
order by
    custdist desc,
    c_count desc;
----
HashJoin: RIGHT OUTER
├── Build
│   └── Scan: default.tpch_test.customer (#0) (read rows: 150000)
└── Probe
    └── Scan: default.tpch_test.orders (#1) (read rows: 1500000)

# Q14
query I
explain join select
            TRUNCATE(100.00 * sum(case
                             when p_type like 'PROMO%'
                                 then l_extendedprice * (1 - l_discount)
                             else 0
            end) / sum(l_extendedprice * (1 - l_discount)), 5) as promo_revenue
from
    lineitem,
    part
where
        l_partkey = p_partkey
  and l_shipdate >= to_date('1995-09-01')
  and l_shipdate < add_months(to_date('1995-09-01'), 1);
----
HashJoin: INNER
├── Build
│   └── Scan: default.tpch_test.lineitem (#0) (read rows: 6001215)
└── Probe
    └── Scan: default.tpch_test.part (#1) (read rows: 200000)

# Q15
query T
explain join with revenue as (
    select
        l_suppkey as supplier_no,
        truncate(sum(l_extendedprice * (1 - l_discount)), 2) as total_revenue
    from
        lineitem
    where
            l_shipdate >= to_date ('1996-01-01')
      and l_shipdate < to_date ('1996-04-01')
    group by
        l_suppkey)
select
    s_suppkey,
    s_name,
    s_address,
    s_phone,
    total_revenue
from
    supplier,
    revenue
where
        s_suppkey = supplier_no
  and total_revenue = (
    select
        max(total_revenue)
    from
        revenue
)
order by
    s_suppkey;
----
HashJoin: INNER
├── Build
│   └── Scan: default.tpch_test.lineitem (#2) (read rows: 6001215)
└── Probe
    └── HashJoin: INNER
        ├── Build
        │   └── Scan: default.tpch_test.lineitem (#1) (read rows: 6001215)
        └── Probe
            └── Scan: default.tpch_test.supplier (#0) (read rows: 10000)

# Q15
query T
explain join with revenue as materialized (
    select
        l_suppkey as supplier_no,
        truncate(sum(l_extendedprice * (1 - l_discount)), 2) as total_revenue
    from
        lineitem
    where
            l_shipdate >= to_date ('1996-01-01')
      and l_shipdate < to_date ('1996-04-01')
    group by
        l_suppkey)
select
    s_suppkey,
    s_name,
    s_address,
    s_phone,
    total_revenue
from
    supplier,
    revenue
where
        s_suppkey = supplier_no
  and total_revenue = (
    select
        max(total_revenue)
    from
        revenue
)
order by
    s_suppkey;
----
HashJoin: INNER
├── Build
│   └── Scan: default.tpch_test.revenue (#2) (read rows: 10000)
└── Probe
    └── HashJoin: INNER
        ├── Build
        │   └── Scan: default.tpch_test.revenue (#1) (read rows: 10000)
        └── Probe
            └── Scan: default.tpch_test.supplier (#0) (read rows: 10000)


# Q16
query I
explain join select
    p_brand,
    p_type,
    p_size,
    count(distinct ps_suppkey) as supplier_cnt
from
    partsupp,
    part
where
        p_partkey = ps_partkey
  and p_brand <> 'Brand#45'
  and p_type not like 'MEDIUM POLISHED%'
  and p_size in (49, 14, 23, 45, 19, 3, 36, 9)
  and ps_suppkey not in (
    select
        s_suppkey
    from
        supplier
    where
            s_comment like '%Customer%Complaints%'
)
group by
    p_brand,
    p_type,
    p_size
order by
    supplier_cnt desc,
    p_brand,
    p_type,
    p_size
limit 20;
----
HashJoin: RIGHT MARK
├── Build
│   └── Scan: default.tpch_test.supplier (#2) (read rows: 10000)
└── Probe
    └── HashJoin: INNER
        ├── Build
        │   └── Scan: default.tpch_test.part (#1) (read rows: 200000)
        └── Probe
            └── Scan: default.tpch_test.partsupp (#0) (read rows: 800000)

#Q17
query I
explain join select
        truncate(sum(l_extendedprice) / 7.0,8) as avg_yearly
from
    lineitem,
    part
where
        p_partkey = l_partkey
  and p_brand = 'Brand#23'
  and p_container = 'MED BOX'
  and l_quantity < (
    select
            0.2 * avg(l_quantity)
    from
        lineitem
    where
            l_partkey = p_partkey
);
----
HashJoin: INNER
├── Build
│   └── HashJoin: INNER
│       ├── Build
│       │   └── Scan: default.tpch_test.part (#1) (read rows: 200000)
│       └── Probe
│           └── Scan: default.tpch_test.lineitem (#2) (read rows: 6001215)
└── Probe
    └── Scan: default.tpch_test.lineitem (#0) (read rows: 6001215)

#Q18
query I
explain join select
    c_name,
    c_custkey,
    o_orderkey,
    o_orderdate,
    o_totalprice,
    sum(l_quantity)
from
    customer,
    orders,
    lineitem
where
        o_orderkey in (
        select
            l_orderkey
        from
            lineitem
        group by
            l_orderkey having
                sum(l_quantity) > 300
    )
  and c_custkey = o_custkey
  and o_orderkey = l_orderkey
group by
    c_name,
    c_custkey,
    o_orderkey,
    o_orderdate,
    o_totalprice
order by
    o_totalprice desc,
    o_orderdate;
----
HashJoin: INNER
├── Build
│   └── HashJoin: INNER
│       ├── Build
│       │   └── HashJoin: INNER
│       │       ├── Build
│       │       │   └── Scan: default.tpch_test.lineitem (#3) (read rows: 6001215)
│       │       └── Probe
│       │           └── Scan: default.tpch_test.orders (#1) (read rows: 1500000)
│       └── Probe
│           └── Scan: default.tpch_test.customer (#0) (read rows: 150000)
└── Probe
    └── Scan: default.tpch_test.lineitem (#2) (read rows: 6001215)

# Q19
query I
explain join select
    truncate(sum(l_extendedprice* (1 - l_discount)),3) as revenue
from
    lineitem,
    part
where
    (
                p_partkey = l_partkey
            and p_brand = 'Brand#52'
            and p_container in
                (
                 'SM CASE',
                 'SM BOX',
                 'SM PACK',
                 'SM PKG'
                    )
            and l_quantity >= 4
            and l_quantity <= 4 + 10
            and p_size between 1 and 5
            and l_shipmode in
                (
                 'AIR',
                 'AIR REG'
                    )
            and l_shipinstruct = 'DELIVER IN PERSON'
        )
   or
    (
                p_partkey = l_partkey
            and p_brand = 'Brand#11'
            and p_container in
                (
                 'MED BAG',
                 'MED BOX',
                 'MED PKG',
                 'MED PACK'
                    )
            and l_quantity >= 18
            and l_quantity <= 18 + 10
            and p_size between 1 and 10
            and l_shipmode in
                (
                 'AIR',
                 'AIR REG'
                    )
            and l_shipinstruct = 'DELIVER IN PERSON'
        )
   or
    (
                p_partkey = l_partkey
            and p_brand = 'Brand#51'
            and p_container in
                (
                 'LG CASE',
                 'LG BOX',
                 'LG PACK',
                 'LG PKG'
                    )
            and l_quantity >= 29
            and l_quantity <= 29 + 10
            and p_size between 1 and 15
            and l_shipmode in
                (
                 'AIR',
                 'AIR REG'
                    )
            and l_shipinstruct = 'DELIVER IN PERSON'
        )
;
----
HashJoin: INNER
├── Build
│   └── Scan: default.tpch_test.part (#1) (read rows: 200000)
└── Probe
    └── Scan: default.tpch_test.lineitem (#0) (read rows: 6001215)

# Q20
query I
explain join select
    s_name,
    s_address
from
    supplier,
    nation
where
        s_suppkey in (
        select
            ps_suppkey
        from
            partsupp
        where
                ps_partkey in (
                select
                    p_partkey
                from
                    part
                where
                        p_name like 'forest%'
            )
          and ps_availqty > (
            select
                    0.5 * sum(l_quantity)
            from
                lineitem
            where
                    l_partkey = ps_partkey
              and l_suppkey = ps_suppkey
              and l_shipdate >= to_date('1994-01-01')
              and l_shipdate < add_years(to_date('1994-01-01'), 1)
        )
    )
  and s_nationkey = n_nationkey
  and n_name = 'CANADA'
order by
    s_name;
----
HashJoin: RIGHT SEMI
├── Build
│   └── HashJoin: INNER
│       ├── Build
│       │   └── Scan: default.tpch_test.nation (#1) (read rows: 25)
│       └── Probe
│           └── Scan: default.tpch_test.supplier (#0) (read rows: 10000)
└── Probe
    └── HashJoin: INNER
        ├── Build
        │   └── HashJoin: LEFT SEMI
        │       ├── Build
        │       │   └── Scan: default.tpch_test.part (#3) (read rows: 200000)
        │       └── Probe
        │           └── Scan: default.tpch_test.partsupp (#2) (read rows: 800000)
        └── Probe
            └── Scan: default.tpch_test.lineitem (#4) (read rows: 6001215)

# Q21
query I
explain join select
    s_name,
    truncate(count(*),4) as numwait
from
    supplier,
    lineitem l1,
    orders,
    nation
where
        s_suppkey = l1.l_suppkey
  and o_orderkey = l1.l_orderkey
  and o_orderstatus = 'F'
  and l1.l_receiptdate > l1.l_commitdate
  and exists (
        select
            *
        from
            lineitem l2
        where
                l2.l_orderkey = l1.l_orderkey
          and l2.l_suppkey <> l1.l_suppkey
    )
  and not exists (
        select
            *
        from
            lineitem l3
        where
                l3.l_orderkey = l1.l_orderkey
          and l3.l_suppkey <> l1.l_suppkey
          and l3.l_receiptdate > l3.l_commitdate
    )
  and s_nationkey = n_nationkey
  and n_name = 'SAUDI ARABIA'
group by
    s_name
order by
    numwait desc,
    s_name;
----
HashJoin: RIGHT ANTI
├── Build
│   └── HashJoin: RIGHT SEMI
│       ├── Build
│       │   └── HashJoin: INNER
│       │       ├── Build
│       │       │   └── HashJoin: INNER
│       │       │       ├── Build
│       │       │       │   └── HashJoin: INNER
│       │       │       │       ├── Build
│       │       │       │       │   └── Scan: default.tpch_test.nation (#3) (read rows: 25)
│       │       │       │       └── Probe
│       │       │       │           └── Scan: default.tpch_test.supplier (#0) (read rows: 10000)
│       │       │       └── Probe
│       │       │           └── Scan: default.tpch_test.lineitem (#1) (read rows: 6001215)
│       │       └── Probe
│       │           └── Scan: default.tpch_test.orders (#2) (read rows: 1500000)
│       └── Probe
│           └── Scan: default.tpch_test.lineitem (#4) (read rows: 6001215)
└── Probe
    └── Scan: default.tpch_test.lineitem (#5) (read rows: 6001215)

# Q22
query I
explain join select
    cntrycode,
    count(*) as numcust,
    sum(c_acctbal) as totacctbal
from
    (
        select
            substring(c_phone from 1 for 2) as cntrycode,
            c_acctbal
        from
            customer
        where
                substring(c_phone from 1 for 2) in
                ('13', '31', '23', '29', '30', '18', '17')
          and c_acctbal > (
            select
                avg(c_acctbal)
            from
                customer
            where
                    c_acctbal > 0.00
              and substring(c_phone from 1 for 2) in
                  ('13', '31', '23', '29', '30', '18', '17')
        )
          and not exists (
                select
                    *
                from
                    orders
                where
                        o_custkey = c_custkey
            )
    ) as custsale
group by
    cntrycode
order by
    cntrycode;
----
HashJoin: RIGHT ANTI
├── Build
│   └── HashJoin: INNER
│       ├── Build
│       │   └── Scan: default.tpch_test.customer (#1) (read rows: 150000)
│       └── Probe
│           └── Scan: default.tpch_test.customer (#0) (read rows: 150000)
└── Probe
    └── Scan: default.tpch_test.orders (#2) (read rows: 1500000)
