statement ok
drop table if exists dt

statement ok
create table dt(a datetime not null, b string not null)

query error 1046
copy into dt from @data/csv/bad_datetime.csv file_format = (type = CSV)


statement ok
drop table if exists iv

statement ok
create table iv(a int not null, b variant not null)

query TIITI
copy into iv from @data/csv/invalid_variant.csv FILE_FORMAT = (field_delimiter = '\t' record_delimiter = '\n' type = CSV) disable_variant_check = false ON_ERROR = CONTINUE
----
csv/invalid_variant.csv 1 1 Invalid value 'invalidvariant' for column 1 (b Variant): expected ident, pos 3 1

query IT
select * from iv
----
2 {"k":"v"}

statement ok
truncate table iv

query TIITI
copy into iv from @data/csv/invalid_variant.csv FILE_FORMAT = (field_delimiter = '\t' record_delimiter = '\n' type = CSV) disable_variant_check = true ON_ERROR = CONTINUE
----
csv/invalid_variant.csv 2 0 NULL NULL

query IT
select * from iv
----
1 null
2 {"k":"v"}

statement ok
DROP TABLE if exists books;

statement ok
CREATE TABLE books ( title VARCHAR NULL, author VARCHAR NULL, date VARCHAR NULL, publish_time TIMESTAMP NULL );

query 
copy into books from @data/csv/books.csv file_format = (type = 'csv' null_display= 'NULL')
----
csv/books.csv 3 0 NULL NULL

query 
select count(), count_if(title is null), count_if(author is null), count_if(date is null), count_if(publish_time is null) from books
----
3 0 0 1 0

statement ok
drop table if exists complex

statement ok
create table complex(a tuple(tuple(string, variant), map(int, variant), array(tuple(map(string, int), int))), b int);

query
copy into complex from @data/tsv/complex_types.tsv file_format = (type = 'tsv' field_delimiter='|');
----
tsv/complex_types.tsv 1 0 NULL NULL


query
select * from complex
----
(('c	d','{"a":1}'),{1:'["a",0]'},[({'x':2},3)]) 1

statement ok
drop stage if exists csv_types

statement ok
create stage csv_types file_format = (type = 'csv');

statement ok
copy into @csv_types from complex;


query
select $1 from @csv_types
----
(('c	d','{"a":1}'),{1:'["a",0]'},[({'x':2},3)])

statement ok
drop file format if exists csv_raw

statement ok
create file format csv_raw type = 'csv' field_delimiter='#' quote= '`'


query
select $1 from @csv_types (file_format => 'csv_raw');
----
"(('c       d','{""a"":1}'),{1:'[""a"",0]'},[({'x':2},3)])",1

statement ok
remove @csv_types

statement ok
drop file format if exists csv_special

statement ok
create file format csv_special type = 'csv' field_delimiter='|' quote= '\''

statement ok
copy into @csv_types from complex file_format = (format_name= 'csv_special');


query
select $1 from @csv_types(file_format => 'csv_special');
----
(('c        d','{"a":1}'),{1:'["a",0]'},[({'x':2},3)])


query
select $1 from @csv_types(file_format => 'csv_raw');
----
 '((''c      d'',''{"a":1}''),{1:''["a",0]''},[({''x'':2},3)])'|1

statement ok
CREATE OR REPLACE TABLE cast_ts_csv (t timestamp, tt tuple(a timestamp))

query
copy into cast_ts_csv from @data/csv/ts.csv file_format = (type = CSV) ON_ERROR=continue
----
csv/ts.csv 8 0 NULL NULL

query
select t, tt.1 from cast_ts_csv
----
2025-01-08 03:11:04.000000 2025-01-08 03:11:04.000000
2025-01-08 03:11:05.000000 2025-01-08 03:11:05.000000
2025-01-08 03:11:06.000000 2025-01-08 03:11:06.000000
1970-01-01 00:00:01.000000 1970-01-01 00:00:01.000000
1970-01-01 00:00:01.000000 1970-01-01 00:00:01.000000
1970-01-01 00:00:00.001000 1970-01-01 00:00:00.001000
1970-01-01 00:00:00.000001 1970-01-01 00:00:00.000001
1970-01-01 00:00:00.000000 1970-01-01 00:00:00.000000
