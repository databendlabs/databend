statement ok
create or replace stage s1;

# not ordered csv
statement ok
copy /*+ set_var(max_block_size=10) */ INTO @s1 from (select * from numbers(10000)) file_format=(type=csv) max_file_size=100;

query
SELECT COUNT(*)<10000 FROM (SELECT $1 AS a, rank() OVER (ORDER BY metadata$filename, metadata$file_row_number, $1) AS rank FROM '@s1' ( FILE_FORMAT => 'csv', )) WHERE a + 1 = rank
----
1

statement ok
remove @s1;

# ordered csv

statement ok
copy /*+ set_var(max_block_size=10) */ INTO @s1 from (select * from numbers(10000) order by number) file_format=(type=csv) max_file_size=100;

query
SELECT COUNT(*) FROM (SELECT $1 AS a, rank() OVER (ORDER BY metadata$filename, metadata$file_row_number, $1) AS rank FROM '@s1' ( FILE_FORMAT => 'csv', )) WHERE a + 1 = rank
----
10000

# data_af2ab6dc-8725-46e5-a601-3dad9c512769_0000_00000770.csv
query
SELECT * from list_stage(location => '@s1') where substr(name, 43, 4) != '0000'
----

statement ok
remove @s1;


# ordered parquet

statement ok
copy /*+ set_var(max_block_size=10) */ INTO @s1 from (select * from numbers(10000) order by number) file_format=(type=parquet) max_file_size=100;

query
SELECT COUNT(*) FROM (SELECT number AS a, rank() OVER (ORDER BY metadata$filename, metadata$file_row_number, number) AS rank FROM '@s1' ( FILE_FORMAT => 'parquet', )) WHERE a + 1 = rank
----
10000

statement ok
remove @s1;

# ordered ndjson

statement ok
copy /*+ set_var(max_block_size=10) */ INTO @s1 from (select * from numbers(10000) order by number) file_format=(type=ndjson) max_file_size=100;

query
SELECT COUNT(*) FROM (SELECT $1:number::int AS a, rank() OVER (ORDER BY metadata$filename, metadata$file_row_number, a) AS rank FROM '@s1' ( FILE_FORMAT => 'ndjson', )) WHERE a + 1 = rank
----
10000

statement ok
drop stage s1;
