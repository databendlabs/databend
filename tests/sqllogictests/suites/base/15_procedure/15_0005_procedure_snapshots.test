statement ok
create or replace database test_procedure_snapshots;

statement ok
use test_procedure_snapshots;

statement ok
create or replace table t(c int);

###################################
# no snapshots left if tx aborted #
###################################

statement ok
drop procedure if exists test_rollback_no_snapshots();

# Test procedure that will be rolled back - should leave no snapshots
statement ok
CREATE PROCEDURE test_rollback_no_snapshots() RETURNS int not null LANGUAGE SQL AS $$
BEGIN
    insert into t values(1);
    insert into t values(1);
    select 1/0;
    RETURN 1;
END;
$$;

statement error
begin;
call procedure test_rollback_no_snapshots();
rollback;

query I
select count() from fuse_snapshot('test_procedure_snapshots', 't');
----
0

#####################################################
# one snapshot left if table mutated multiple times #
#####################################################

statement ok
drop procedure if exists test_commit_one_snapshot();

# Test procedure that commits successfully - should create one snapshot
statement ok
CREATE PROCEDURE test_commit_one_snapshot() RETURNS int not null LANGUAGE SQL AS $$
BEGIN
    insert into t values(1);
    insert into t values(1);
    insert into t values(1);
    RETURN 1;
END;
$$;

statement ok
begin;

statement ok
call procedure test_commit_one_snapshot();

statement ok
commit;

query I
select count() from fuse_snapshot('test_procedure_snapshots', 't');
----
1

statement ok
create or replace table transaction(c int);

statement ok
drop procedure if exists test_rollback_no_snapshots();

statement ok
drop procedure if exists test_commit_one_snapshot();

statement ok
drop database test_procedure_snapshots;
