statement ok
DROP DATABASE IF EXISTS db20_13;

statement ok
CREATE DATABASE db20_13;

statement ok
USE db20_13;

statement ok
CREATE TABLE IF NOT EXISTS t1 (a INT not null);

statement ok
INSERT INTO t1 VALUES (1), (2), (3);

statement ok
set enable_parallel_multi_merge_sort = 0;

query I
SELECT * FROM t1 ORDER BY a;
----
1
2
3

statement ok
CREATE TABLE IF NOT EXISTS t2 (b VARCHAR not null);

statement ok
INSERT INTO t2 VALUES ('a'), ('b'), ('c');

query I
SELECT * FROM t2 ORDER BY b;
----
a
b
c

query I
SELECT count(*) FROM t1;
----
3

query I
select block_count as c from fuse_snapshot('db20_13','t1') order by c;
----
1

statement ok
SET enable_query_result_cache = 1;

statement ok
SET query_result_cache_min_execute_secs = 0;

# Write cache

query I
SELECT * FROM t1 ORDER BY a;
----
1
2
3

query IT
SELECT * FROM t1, t2 ORDER BY a, b;
----
1 a
1 b
1 c
2 a
2 b
2 c
3 a
3 b
3 c

# The explain results of cache reading are the same in both standalone and cluster modes.
query T
EXPLAIN SELECT * FROM t1 ORDER BY a;
----
ReadQueryResultCache
├── SQL: SELECT * FROM t1 ORDER BY a
├── Number of rows: 3
└── Result size: 12

query T
EXPLAIN SELECT * FROM t1, t2 ORDER BY a, b;
----
ReadQueryResultCache
├── SQL: SELECT * FROM t1, t2 ORDER BY a, b
├── Number of rows: 9
└── Result size: 153



# Not cached
query I
SELECT count(*) FROM t1;
----
3

query I
select block_count as c from fuse_snapshot('db20_13','t1') order by c;
----
1

# Read cache

query I
SELECT * FROM t1 ORDER BY a;
----
1
2
3

query IT
SELECT * FROM t1, t2 ORDER BY a, b;
----
1 a
1 b
1 c
2 a
2 b
2 c
3 a
3 b
3 c

# Not cached
query I
SELECT count(*) FROM t1;
----
3

query I
select block_count as c from fuse_snapshot('db20_13','t1') order by c;
----
1


# Insert new data

statement ok
INSERT INTO t1 VALUES (4), (5), (6);

# Not cached
query I
SELECT count(*) FROM t1;
----
6

query I
select block_count as c from fuse_snapshot('db20_13','t1') order by c;
----
1
2

statement ok
SET enable_query_result_cache = 0;

query I
SELECT * FROM t1 ORDER BY a;
----
1
2
3
4
5
6

query IT
SELECT * FROM t1, t2 ORDER BY a, b;
----
1 a
1 b
1 c
2 a
2 b
2 c
3 a
3 b
3 c
4 a
4 b
4 c
5 a
5 b
5 c
6 a
6 b
6 c

# Not cached
query I
SELECT count(*) FROM t1;
----
6

query I
select block_count as c from fuse_snapshot('db20_13','t1') order by c;
----
1
2

# tolerate inconsistent result cache

statement ok
SET enable_query_result_cache = 1;

statement ok
SET query_result_cache_min_execute_secs = 0;


statement ok
SET query_result_cache_allow_inconsistent = 1;

query I
SELECT * FROM t1 ORDER BY a;
----
1
2
3

# The cache can also be used even if the case of the SQL statement is different.
# Because the cache key is generated from AST.

query I
select * FRoM t1 OrDER bY a;
----
1
2
3

query IT
SELECT * FROM t1, t2 ORDER BY a, b;
----
1 a
1 b
1 c
2 a
2 b
2 c
3 a
3 b
3 c

statement ok
SET query_result_cache_allow_inconsistent = 0;

query I
SELECT * FROM t1 ORDER BY a;
----
1
2
3
4
5
6

query IT
SELECT * FROM t1, t2 ORDER BY a, b;
----
1 a
1 b
1 c
2 a
2 b
2 c
3 a
3 b
3 c
4 a
4 b
4 c
5 a
5 b
5 c
6 a
6 b
6 c

statement ok
DROP TABLE t1;

statement ok
DROP TABLE t2;

# ISSUE 11870

statement ok
create table ab(a int null, b double null);

statement ok
insert into ab values( 1, 2.3 ), ( 1, 3.3 )

statement ok
create table a(a int null)

statement ok
insert into a values( 1 ), ( 2 )

statement ok
SET enable_query_result_cache = 1;

statement ok
SET query_result_cache_min_execute_secs = 0;

query I
select 3, a as price from a union all select a, b from ab order by price
----
3 1.0
3 2.0
1 2.3
1 3.3

query I
select 3, a as price from a union all select a, b from ab order by price
----
3 1.0
3 2.0
1 2.3
1 3.3

statement ok
create table tt(a int);

statement ok
select * from tt;

statement ok
select * from tt;

statement ok
SET enable_query_result_cache = 0;

statement ok
DROP DATABASE db20_13;
