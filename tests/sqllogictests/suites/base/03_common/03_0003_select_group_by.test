statement ok
SELECT max(number) FROM numbers_mt(0) GROUP BY number % 4

statement ok
SELECT max(number) FROM numbers_mt (10) WHERE number > 99999999998 GROUP BY number % 3

query II
SELECT number%3 as c1, number%2 as c2 FROM numbers_mt(10000) where number > 2 group by number%3, number%2 order by c1,c2
----
0 0
0 1
1 0
1 1
2 0
2 1

query I
SELECT number%3 as c1 FROM numbers_mt(10) where number > 2 group by number%3 order by c1
----
0
1
2

query I
SELECT try_cast(number % 3 as string) c1, count()  FROM numbers_mt(10) where number > 2 group by c1 order by c1
----
0 3
1 2
2 2

query III
SELECT a,b,count() from (SELECT cast((number%4) AS bigint) as a, cast((number%20) AS bigint) as b from numbers(100)) group by a,b order by a,b limit 3
----
0 0 5
0 4 5
0 8 5

statement ok
DROP TABLE if EXISTS t

statement ok
CREATE TABLE t(a UInt64 null, b UInt32 null, c UInt32) Engine = Fuse

statement ok
INSERT INTO t(a,b, c)  SELECT if (number % 3 = 1, null, number) as a, number + 3 as b, number + 4 as c FROM numbers(10)

query II
SELECT a%3 as a1, count(1) as ct from t GROUP BY a1 ORDER BY a1 NULLS FIRST,ct
----
NULL 3
0 4
2 3

query III
SELECT a%2 as a1, a%3 as a2, count(0) as ct FROM t GROUP BY a1, a2 ORDER BY a1 NULLS FIRST, a2 NULLS FIRST
----
NULL NULL 3
0 0 2
0 2 2
1 0 2
1 2 1

query III
SELECT a%2 as a1, to_uint64(c % 3) as c1, count(0) as ct FROM t GROUP BY a1, c1 ORDER BY a1 NULLS FIRST, c1, ct
----
NULL 2 3
0 0 2
0 1 2
1 0 1
1 1 2

query III
SELECT to_uint64(c % 3) as c1, a%2 as a1, count(0) as ct FROM t GROUP BY a1, c1 ORDER BY a1 NULLS FIRST, c1 NULLS FIRST, ct
----
2 NULL 3
0 0 2
1 0 2
0 1 1
1 1 2

statement ok
DROP table t

statement ok
drop table if exists t_datetime all

statement ok
CREATE TABLE t_datetime(created_at Date, created_time DateTime, count Int32)

statement ok
insert into t_datetime select to_date('2022-04-01') + number % 2,  to_datetime('2022-04-01 00:00:00') + number % 2, 1 from numbers(10)

query TI
select created_at, sum(count) from t_datetime group by created_at order by created_at
----
2022-04-01 5
2022-04-02 5

query TI
select created_time, sum(count) from t_datetime group by created_time order by created_time
----
2022-04-01 00:00:00.000000 5
2022-04-01 00:00:00.000001 5

statement ok
drop table t_datetime

query II
SELECT number, count(*) FROM numbers_mt(10000) group by number order by number limit 5
----
0 1
1 1
2 1
3 1
4 1

statement ok
set group_by_two_level_threshold=10

query II
SELECT number, count(*) FROM numbers_mt(1000) group by number order by number limit 5
----
0 1
1 1
2 1
3 1
4 1

statement ok
set group_by_two_level_threshold=1000000000

query II
SELECT number, count(*) FROM numbers_mt(1000) group by number order by number limit 5
----
0 1
1 1
2 1
3 1
4 1

statement ok
CREATE TABLE IF NOT EXISTS t_variant(id Int null, var Variant null) Engine = Fuse

statement ok
INSERT INTO t_variant VALUES(1, parse_json('{"k":"v"}')),        (2, parse_json('{"k":"v"}')),        (3, parse_json('"abcd"')),        (4, parse_json('"abcd"')),        (5, parse_json('12')),        (6, parse_json('12')),        (7, parse_json('[1,2,3]')),        (8, parse_json('[1,2,3]'))

query IIT
SELECT max(id) as n, min(id), var FROM t_variant GROUP BY var ORDER BY n ASC
----
2 1 {"k":"v"}
4 3 "abcd"
6 5 12
8 7 [1,2,3]

statement ok
DROP TABLE t_variant

statement ok
CREATE TABLE IF NOT EXISTS t_array(id Int null, arr Array(Int32)) Engine = Fuse

statement ok
INSERT INTO t_array VALUES(1, []),      (2, []),      (3, [1,2,3]),      (4, [1,2,3]),      (5, [4,5,6]),      (6, [4,5,6])

query I
select count() from numbers(10) group by 'ab'
----
10

query I
select count() from numbers(10) group by to_nullable('ab')
----
10

statement ok
DROP TABLE t_array

## Decimal

query III
select (number%3 + 1) c , (number%3 + 2) d, count() from numbers(100) group by c,d order by c,d;
----
1 2 34
2 3 33
3 4 33

query II
select (number % 3)::Decimal(19, 2) c , count() from numbers(100) group by c order by c;
----
0.00 34
1.00 33
2.00 33

query ITI
select (number % 3)::Decimal(19, 2) c, to_string(number % 3) d, count() from numbers(100) group by c,d order by c, d;
----
0.00 0 34
1.00 1 33
2.00 2 33


## group by variant  https://github.com/datafuselabs/databend/issues/10603

query TI
select number::Variant a, count()  from numbers(3) group by a order by a;
----
0 1
1 1
2 1

query TI
select number::Variant a, number as b, count()  from numbers(3) group by a, b order by a;
----
0 0 1
1 1 1
2 2 1

# group by Decimal
query TI
select number::Decimal(15,2) a, number % 3 b from numbers(5) group by a, b order by a;
----
0.00 0
1.00 1
2.00 2
3.00 0
4.00 1

query IIII
select number % 3 a, max(number) - 3,  number % 2 b, sum(number) + 4 from numbers(1000) group by all order by a, b;
----
0 993 0 83170
0 996 1 83671
1 991 0 82838
1 994 1 83337
2 995 0 83504
2 992 1 83004

statement ok
CREATE OR REPLACE TABLE t_str (col1 string, col2 string);

statement ok
INSERT INTO t_str VALUES ('test', 'a1,a2'),('test', 'a1,a2,a3');

query TT
SELECT t.col1 AS col1, unnest(split(t.col2, ',')) AS col2 FROM t_str AS t GROUP BY col1, col2 ORDER BY col2;
----
test a1
test a1
test a2
test a2
test a3

query TT
SELECT t.col1 AS col1, unnest(split(t.col2, ',')) AS col3 FROM t_str AS t GROUP BY col1, col3 ORDER BY col3;
----
test a1
test a2
test a3

query T
SELECT max(unnest(split(t.col2, ','))) FROM t_str AS t;
----
a3

query T
SELECT unnest(split(max(t.col2), ',')) FROM t_str AS t;
----
a1
a2
a3

query T
SELECT distinct unnest(split(col2, ',')) AS col3 FROM t_str ORDER BY col3;
----
a1
a2
a3

query TT
SELECT t.col1 AS col1, unnest(split(t.col2, ',')) AS col2 FROM t_str AS t GROUP BY t.col1, unnest(split(t.col2, ',')) ORDER BY col2;
----
test a1
test a2
test a3

query T
SELECT t.col1 AS col1 FROM t_str AS t GROUP BY t.col1, unnest(split(t.col2, ','));
----
test
test
test

statement ok
DROP TABLE t_str

query TTT rowsort
SELECT ( null, to_hour(to_timestamp(3501857592331)), number::Date) from numbers(3) group by all
----
(NULL,18,'1970-01-01')
(NULL,18,'1970-01-02')
(NULL,18,'1970-01-03')

query TTT rowsort
SELECT TRY_CAST('1900-12-30 12:00:00' AS TIMESTAMP) AS "TEMP(Test)(4058757556)(0)",
  1.1000000000000001 AS "$__alias__0"
FROM  numbers(10)
GROUP BY  "$__alias__0";
----
1900-12-30 12:00:00.000000 1.1000000000000001

query TT rowsort
select to_string(to_bitmap(number)), to_string(to_bitmap(number+3)) FROM numbers(3) GROUP BY GROUPING SETS ((to_bitmap(number), to_bitmap(number+3)))
----
0 3
1 4
2 5


# group by aggregate functions

statement error (?s)1065.*GROUP BY items can't contain aggregate functions or window functions
select sum(number + 3 ), number % 3  from numbers(10) group by  sum(number + 3 ), number % 3;

statement error (?s)1065.*GROUP BY items can't contain aggregate functions or window functions
select sum(number + 3 ), number % 3  from numbers(10) group by  1, 2;


# test grouping sets, rollup

statement ok
CREATE OR REPLACE TABLE sales (
    brand VARCHAR NOT NULL,
    segment VARCHAR NOT NULL,
    quantity INT NOT NULL
);

statement ok
INSERT INTO sales (brand, segment, quantity)
VALUES
    ('ABC', 'Premium', 100),
    ('ABC', 'Basic', 200),
    ('XYZ', 'Premium', 100),
    ('XYZ', 'Basic', 300);

query ITTI
SELECT  quantity, brand, segment, SUM (quantity) FROM sales GROUP BY    brand, GROUPING SETS(segment, quantity) order by 1,2,3;
----
100 ABC NULL 100
100 XYZ NULL 100
200 ABC NULL 200
300 XYZ NULL 300
NULL ABC Basic 200
NULL ABC Premium 100
NULL XYZ Basic 300
NULL XYZ Premium 100

query ITTI
SELECT  quantity, brand, segment, SUM (quantity) FROM sales GROUP BY    brand, rollup(segment, quantity) order by 1,2,3;
----
100 ABC Premium 100
100 XYZ Premium 100
200 ABC Basic 200
300 XYZ Basic 300
NULL ABC Basic 200
NULL ABC Premium 100
NULL ABC NULL 300
NULL XYZ Basic 300
NULL XYZ Premium 100
NULL XYZ NULL 400

query ITTI
SELECT  quantity, brand, segment, SUM (quantity) FROM sales GROUP BY    brand, rollup(quantity) , segment order by 1,2,3;
----
100 ABC Premium 100
100 XYZ Premium 100
200 ABC Basic 200
300 XYZ Basic 300
NULL ABC Basic 200
NULL ABC Premium 100
NULL XYZ Basic 300
NULL XYZ Premium 100




## results are deduplicated in grouping sets, the results are not standard but acceptable.
query ITTI
SELECT  quantity, brand, segment, SUM (quantity) FROM sales GROUP BY    brand, rollup(quantity), GROUPING sets(brand, segment, quantity) order by 1,2,3;
----
100 ABC Premium 100
100 ABC NULL 100
100 XYZ Premium 100
100 XYZ NULL 100
200 ABC Basic 200
200 ABC NULL 200
300 XYZ Basic 300
300 XYZ NULL 300
NULL ABC Basic 200
NULL ABC Premium 100
NULL ABC NULL 300
NULL XYZ Basic 300
NULL XYZ Premium 100
NULL XYZ NULL 400

## filter push down into grouping sets
query ITTI
select * from (SELECT  quantity, brand, segment, SUM (quantity) FROM sales GROUP BY    rollup( quantity, brand, segment) ) e   where e.segment = 'Basic' order by quantity desc;
----
300 XYZ Basic 300
200 ABC Basic 200

statement error
SELECT  quantity, brand, segment, SUM (quantity) FROM sales GROUP BY    brand, rollup(quantity), all;
