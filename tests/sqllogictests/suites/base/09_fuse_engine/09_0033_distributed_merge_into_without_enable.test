statement ok
drop database if exists db;

statement ok
create database db;

statement ok
use db;

## we need to test without enable_distributed_merge_into in cluster environment.
## distributed test
statement ok
drop table if exists distributed_target_test;

statement ok
drop table if exists distributed_source_test;

statement ok
create table distributed_target_test(a int,b string) cluster by(a,b);

## multi blocks
statement ok
insert into distributed_target_test values(1,'a'),(2,'b'),(3,'c');

statement ok
insert into distributed_target_test values(1,'a'),(2,'b'),(3,'c');

statement ok
insert into distributed_target_test values(6,'z'),(7,'y'),(8,'x');

statement ok
insert into distributed_target_test values(6,'z'),(7,'y'),(8,'x');

query TT
select * from distributed_target_test order by a;
----
1 a
1 a
2 b
2 b
3 c
3 c
6 z
6 z
7 y
7 y
8 x
8 x

statement ok
create table distributed_source_test(a int,b string,is_databend_deleted bool) cluster by(a,b);

statement ok
insert into distributed_source_test values(1,'d',true),(2,'e',true),(3,'f',false),(4,'e',true),(5,'f',false);

statement ok
insert into distributed_source_test values(6,'h',true),(7,'i',true),(8,'j',false),(9,'k',true),(10,'l',false);

statement ok
drop stage if exists distributed_source_parquet;

statement ok
create stage distributed_source_parquet file_format = (type = parquet);

statement ok
remove @distributed_source_parquet;

statement ok
copy into @distributed_source_parquet from (select * from distributed_source_test);

query TTT
merge into `distributed_target_test` as tt using (select `a`,`b`,`is_databend_deleted` from @distributed_source_parquet (pattern => '.*[.]parquet')) as ss on (ss.`a` = tt.`a`) 
when matched and ss.`is_databend_deleted` = true then delete when matched then update * when not matched and ss.`is_databend_deleted` = false then insert *;
----
2 4 8

query TT
select * from distributed_target_test order by a;
----
3 f
3 f
5 f
8 j
8 j
10 l

## corner case test
## when a node matched all source, it will give a empty block, 
## so in this case, we should not insert anything.
statement ok
drop table if exists corner_target_table;

statement ok
create table corner_target_table(a int,b string,c string) cluster by(a,b);

statement ok
drop table if exists corner_source_table;

statement ok
create table corner_source_table(a int,b string,c string) cluster by(a,b);

## add block1
statement ok
insert into corner_target_table values(1,'a1','b1'),(2,'a2','b2');

## add block2
statement ok
insert into corner_target_table values(1,'a3','b3'),(2,'a4','b4'),(3,'a5','b5');

## add two blocks for corner_source_table
statement ok
insert into corner_source_table values(1,'a6','b6'),(2,'a7','b7');

statement ok
insert into corner_source_table values(3,'a8','b8');

query TTT
select * from corner_target_table order by a,b;
----
1 a1 b1
1 a3 b3
2 a2 b2
2 a4 b4
3 a5 b5

query TTT
select * from corner_source_table order by a,b;
----
1 a6 b6
2 a7 b7
3 a8 b8

query TTT
merge into corner_target_table as t1 using (select * from corner_source_table) as t2 on t1.a = t2.a when matched then update * when not matched then insert *;
----
0 5

query TTT
select * from corner_target_table order by a,b;
----
1 a6 b6
1 a6 b6
2 a7 b7
2 a7 b7
3 a8 b8

## test wide-table
statement ok
drop table if exists distributed_test_order;

statement ok
drop table if exists distributed_random_source;

statement ok
drop table if exists distributed_random_store;

statement ok
create table distributed_test_order(id bigint, id1 bigint, id2 bigint, id3 bigint, id4 bigint, id5 bigint, id6 bigint, id7 bigint, s1 varchar, s2 varchar, s3 varchar, s4 varchar, s5 varchar, s6 varchar, s7 varchar, s8 varchar, s9 varchar, s10 varchar, s11 varchar, s12 varchar, s13 varchar, d1 DECIMAL(20, 8), d2 DECIMAL(20, 8), d3 DECIMAL(20, 8), d4 DECIMAL(20, 8), d5 DECIMAL(20, 8), d6 DECIMAL(30, 8), d7 DECIMAL(30, 8), d8 DECIMAL(30, 8), d9 DECIMAL(30, 8), d10 DECIMAL(30, 8),insert_time datetime, insert_time1 datetime, insert_time2 datetime, insert_time3 datetime,i int) CLUSTER BY(to_yyyymmdd(insert_time), id) bloom_index_columns='insert_time,id';

statement ok
create table distributed_random_source(id bigint not null, id1 bigint, id2 bigint, id3 bigint, id4 bigint, id5 bigint, id6 bigint, id7 bigint,s1 varchar, s2 varchar, s3 varchar, s4 varchar, s5 varchar, s6 varchar, s7 varchar, s8 varchar, s9 varchar, s10 varchar, s11 varchar, s12 varchar, s13 varchar,d1 DECIMAL(20, 8), d2 DECIMAL(20, 8), d3 DECIMAL(20, 8), d4 DECIMAL(20, 8), d5 DECIMAL(20, 8), d6 DECIMAL(30, 8), d7 DECIMAL(30, 8), d8 DECIMAL(30, 8), d9 DECIMAL(30, 8), d10 DECIMAL(30, 8),insert_time datetime not null, insert_time1 datetime, insert_time2 datetime, insert_time3 datetime,i int) Engine = Random; 

statement ok
create table distributed_random_store(id bigint not null, id1 bigint, id2 bigint, id3 bigint, id4 bigint, id5 bigint, id6 bigint, id7 bigint,s1 varchar, s2 varchar, s3 varchar, s4 varchar, s5 varchar, s6 varchar, s7 varchar, s8 varchar, s9 varchar, s10 varchar, s11 varchar, s12 varchar, s13 varchar,d1 DECIMAL(20, 8), d2 DECIMAL(20, 8), d3 DECIMAL(20, 8), d4 DECIMAL(20, 8), d5 DECIMAL(20, 8), d6 DECIMAL(30, 8), d7 DECIMAL(30, 8), d8 DECIMAL(30, 8), d9 DECIMAL(30, 8), d10 DECIMAL(30, 8),insert_time datetime not null, insert_time1 datetime, insert_time2 datetime, insert_time3 datetime,i int);

statement ok
insert into distributed_random_store (select id,34 as id1,238 as id2, id3, id4, id5, id6, id7,s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13,d1, d2, d3, d4, d5, d6, d7, d8, d9, d10,insert_time,insert_time1,insert_time2,insert_time3,i from distributed_random_source limit 10);

statement ok
insert into distributed_random_store (select id,34 as id1,238 as id2, id3, id4, id5, id6, id7,s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13,d1, d2, d3, d4, d5, d6, d7, d8, d9, d10,insert_time,insert_time1,insert_time2,insert_time3,i from distributed_random_source limit 10);

statement ok
merge into distributed_test_order as t using (select id,34 as id1,238 as id2, id3, id4, id5, id6, id7,s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13,d1, d2, d3, d4, d5, d6, d7, d8, d9, d10,insert_time,insert_time1,insert_time2,insert_time3,i from distributed_random_store) as s on t.id = s.id and t.insert_time = s.insert_time when matched then update * when not matched then insert *;

statement ok
merge into distributed_test_order as t using (select id,34 as id1,238 as id2, id3, id4, id5, id6, id7,s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13,d1, d2, d3, d4, d5, d6, d7, d8, d9, d10,insert_time,insert_time1,insert_time2,insert_time3,i from distributed_random_store) as s on t.id = s.id and t.insert_time = s.insert_time when matched then update * when not matched then insert *;

statement ok
drop table if exists orders2;

statement ok
create table orders2(a int,b string,c string) cluster by(a,b);

statement ok
insert into orders2 values(1,'a1','b1'),(2,'a2','b2'),(3,'a3','b3');

statement ok
insert into orders2 values(1,'a1','b1'),(2,'a2','b2'),(3,'a3','b3');

statement error 4001
MERGE INTO orders2 USING (
    SELECT o.a,o.b
    FROM orders2 o
             INNER JOIN (
        SELECT a, b, AVG(a) AS avg_quantity
        FROM orders2
        GROUP BY a, b
    ) a ON o.a = a.a AND o.b = a.b
) AS joined_data ON orders2.a = joined_data.a
    WHEN MATCHED THEN
        UPDATE SET orders2.b = joined_data.b;

statement ok
truncate table orders2;

statement ok
insert into orders2 values(1,'a1','b1');

statement ok
insert into orders2 values(2,'a2','b2');

statement ok
insert into orders2 values(3,'a3','b3');

query T
MERGE INTO orders2 USING (
    SELECT o.a,o.b,a.avg_quantity
    FROM orders2 o
             INNER JOIN (
        SELECT a, b, AVG(a)+1 AS avg_quantity
        FROM orders2
        GROUP BY a, b
    ) a ON o.a = a.a AND o.b = a.b
) AS joined_data ON orders2.a = joined_data.a
    WHEN MATCHED THEN
        UPDATE SET orders2.b = joined_data.b,orders2.a = avg_quantity;
----
3

query TTT
select * from orders2 order by a,b,c;
----
2 a1 b1
3 a2 b2
4 a3 b3
