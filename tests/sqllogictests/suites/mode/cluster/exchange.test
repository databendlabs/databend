query T
explain select * from numbers(1) t, numbers(2) t1 where t.number = t1.number
----
Exchange
├── output columns: [t1.number (#1), t.number (#0)]
├── exchange type: Merge
└── HashJoin
    ├── output columns: [t1.number (#1), t.number (#0)]
    ├── join type: INNER
    ├── build keys: [t.number (#0)]
    ├── probe keys: [t1.number (#1)]
    ├── keys is null equal: [false]
    ├── filters: []
    ├── estimated rows: 2.00
    ├── Exchange(Build)
    │   ├── output columns: [t.number (#0)]
    │   ├── exchange type: Broadcast
    │   └── TableScan
    │       ├── table: default.system.numbers
    │       ├── output columns: [number (#0)]
    │       ├── read rows: 1
    │       ├── read size: < 1 KiB
    │       ├── partitions total: 1
    │       ├── partitions scanned: 1
    │       ├── push downs: [filters: [], limit: NONE]
    │       └── estimated rows: 1.00
    └── TableScan(Probe)
        ├── table: default.system.numbers
        ├── output columns: [number (#1)]
        ├── read rows: 2
        ├── read size: < 1 KiB
        ├── partitions total: 1
        ├── partitions scanned: 1
        ├── push downs: [filters: [], limit: NONE]
        └── estimated rows: 2.00

query T
explain select * from numbers(1) t, numbers(2) t1, numbers(3) t2 where t.number = t1.number and t.number = t2.number
----
Exchange
├── output columns: [t2.number (#2), t1.number (#1), t.number (#0)]
├── exchange type: Merge
└── HashJoin
    ├── output columns: [t2.number (#2), t1.number (#1), t.number (#0)]
    ├── join type: INNER
    ├── build keys: [t.number (#0)]
    ├── probe keys: [t2.number (#2)]
    ├── keys is null equal: [false]
    ├── filters: []
    ├── estimated rows: 6.00
    ├── Exchange(Build)
    │   ├── output columns: [t1.number (#1), t.number (#0)]
    │   ├── exchange type: Broadcast
    │   └── HashJoin
    │       ├── output columns: [t1.number (#1), t.number (#0)]
    │       ├── join type: INNER
    │       ├── build keys: [t.number (#0)]
    │       ├── probe keys: [t1.number (#1)]
    │       ├── keys is null equal: [false]
    │       ├── filters: []
    │       ├── estimated rows: 2.00
    │       ├── Exchange(Build)
    │       │   ├── output columns: [t.number (#0)]
    │       │   ├── exchange type: Broadcast
    │       │   └── TableScan
    │       │       ├── table: default.system.numbers
    │       │       ├── output columns: [number (#0)]
    │       │       ├── read rows: 1
    │       │       ├── read size: < 1 KiB
    │       │       ├── partitions total: 1
    │       │       ├── partitions scanned: 1
    │       │       ├── push downs: [filters: [], limit: NONE]
    │       │       └── estimated rows: 1.00
    │       └── TableScan(Probe)
    │           ├── table: default.system.numbers
    │           ├── output columns: [number (#1)]
    │           ├── read rows: 2
    │           ├── read size: < 1 KiB
    │           ├── partitions total: 1
    │           ├── partitions scanned: 1
    │           ├── push downs: [filters: [], limit: NONE]
    │           └── estimated rows: 2.00
    └── TableScan(Probe)
        ├── table: default.system.numbers
        ├── output columns: [number (#2)]
        ├── read rows: 3
        ├── read size: < 1 KiB
        ├── partitions total: 1
        ├── partitions scanned: 1
        ├── push downs: [filters: [], limit: NONE]
        └── estimated rows: 3.00

query T
explain select * from (select number as a, number+1 as b from numbers(1)) t, numbers(2) t1, numbers(3) t2 where a = t1.number and b = t2.number
----
Exchange
├── output columns: [t2.number (#3), t1.number (#2), numbers.number (#0), b (#1)]
├── exchange type: Merge
└── HashJoin
    ├── output columns: [t2.number (#3), t1.number (#2), numbers.number (#0), b (#1)]
    ├── join type: INNER
    ├── build keys: [t.b (#1)]
    ├── probe keys: [t2.number (#3)]
    ├── keys is null equal: [false]
    ├── filters: []
    ├── estimated rows: 6.00
    ├── Exchange(Build)
    │   ├── output columns: [t1.number (#2), b (#1), numbers.number (#0)]
    │   ├── exchange type: Broadcast
    │   └── HashJoin
    │       ├── output columns: [t1.number (#2), b (#1), numbers.number (#0)]
    │       ├── join type: INNER
    │       ├── build keys: [t.a (#0)]
    │       ├── probe keys: [t1.number (#2)]
    │       ├── keys is null equal: [false]
    │       ├── filters: []
    │       ├── estimated rows: 2.00
    │       ├── Exchange(Build)
    │       │   ├── output columns: [numbers.number (#0), b (#1)]
    │       │   ├── exchange type: Broadcast
    │       │   └── EvalScalar
    │       │       ├── output columns: [numbers.number (#0), b (#1)]
    │       │       ├── expressions: [numbers.number (#0) + 1]
    │       │       ├── estimated rows: 1.00
    │       │       └── TableScan
    │       │           ├── table: default.system.numbers
    │       │           ├── output columns: [number (#0)]
    │       │           ├── read rows: 1
    │       │           ├── read size: < 1 KiB
    │       │           ├── partitions total: 1
    │       │           ├── partitions scanned: 1
    │       │           ├── push downs: [filters: [], limit: NONE]
    │       │           └── estimated rows: 1.00
    │       └── TableScan(Probe)
    │           ├── table: default.system.numbers
    │           ├── output columns: [number (#2)]
    │           ├── read rows: 2
    │           ├── read size: < 1 KiB
    │           ├── partitions total: 1
    │           ├── partitions scanned: 1
    │           ├── push downs: [filters: [], limit: NONE]
    │           └── estimated rows: 2.00
    └── TableScan(Probe)
        ├── table: default.system.numbers
        ├── output columns: [number (#3)]
        ├── read rows: 3
        ├── read size: < 1 KiB
        ├── partitions total: 1
        ├── partitions scanned: 1
        ├── push downs: [filters: [], limit: NONE]
        └── estimated rows: 3.00

query T
explain select * from (select sum(number) as number from numbers(1) group by number) t, numbers(2) t1 where t.number = t1.number
----
Exchange
├── output columns: [t1.number (#2), sum(number) (#1)]
├── exchange type: Merge
└── HashJoin
    ├── output columns: [t1.number (#2), sum(number) (#1)]
    ├── join type: INNER
    ├── build keys: [t.number (#1)]
    ├── probe keys: [CAST(t1.number (#2) AS UInt64 NULL)]
    ├── keys is null equal: [false]
    ├── filters: []
    ├── estimated rows: 2.00
    ├── Exchange(Build)
    │   ├── output columns: [sum(number) (#1), numbers.number (#0)]
    │   ├── exchange type: Broadcast
    │   └── AggregateFinal
    │       ├── output columns: [sum(number) (#1), numbers.number (#0)]
    │       ├── group by: [number]
    │       ├── aggregate functions: [sum(number)]
    │       ├── estimated rows: 1.00
    │       └── Exchange
    │           ├── output columns: [sum(number) (#1), numbers.number (#0)]
    │           ├── exchange type: Hash(0)
    │           └── AggregatePartial
    │               ├── group by: [number]
    │               ├── aggregate functions: [sum(number)]
    │               ├── estimated rows: 1.00
    │               └── TableScan
    │                   ├── table: default.system.numbers
    │                   ├── output columns: [number (#0)]
    │                   ├── read rows: 1
    │                   ├── read size: < 1 KiB
    │                   ├── partitions total: 1
    │                   ├── partitions scanned: 1
    │                   ├── push downs: [filters: [], limit: NONE]
    │                   └── estimated rows: 1.00
    └── TableScan(Probe)
        ├── table: default.system.numbers
        ├── output columns: [number (#2)]
        ├── read rows: 2
        ├── read size: < 1 KiB
        ├── partitions total: 1
        ├── partitions scanned: 1
        ├── push downs: [filters: [], limit: NONE]
        └── estimated rows: 2.00

query T
explain fragments select * from (select sum(number) as number from numbers(1) group by number) t, numbers(2) t1 where t.number = t1.number
----
Fragment 0:
  DataExchange: Shuffle
    ExchangeSink
    ├── output columns: [sum(number) (#1), numbers.number (#0)]
    ├── destination fragment: [1]
    └── AggregatePartial
        ├── group by: [number]
        ├── aggregate functions: [sum(number)]
        ├── estimated rows: 1.00
        └── TableScan
            ├── table: default.system.numbers
            ├── output columns: [number (#0)]
            ├── read rows: 1
            ├── read size: < 1 KiB
            ├── partitions total: 1
            ├── partitions scanned: 1
            ├── push downs: [filters: [], limit: NONE]
            └── estimated rows: 1.00
(empty)
(empty)
Fragment 1:
  DataExchange: Broadcast
    ExchangeSink
    ├── output columns: [sum(number) (#1), numbers.number (#0)]
    ├── destination fragment: [2]
    └── AggregateFinal
        ├── output columns: [sum(number) (#1), numbers.number (#0)]
        ├── group by: [number]
        ├── aggregate functions: [sum(number)]
        ├── estimated rows: 1.00
        └── ExchangeSource
            ├── output columns: [sum(number) (#1), numbers.number (#0)]
            └── source fragment: [0]
(empty)
(empty)
Fragment 2:
  DataExchange: Merge
    ExchangeSink
    ├── output columns: [t1.number (#2), sum(number) (#1)]
    ├── destination fragment: [3]
    └── HashJoin
        ├── output columns: [t1.number (#2), sum(number) (#1)]
        ├── join type: INNER
        ├── build keys: [t.number (#1)]
        ├── probe keys: [CAST(t1.number (#2) AS UInt64 NULL)]
        ├── keys is null equal: [false]
        ├── filters: []
        ├── estimated rows: 2.00
        ├── ExchangeSource(Build)
        │   ├── output columns: [sum(number) (#1), numbers.number (#0)]
        │   └── source fragment: [1]
        └── TableScan(Probe)
            ├── table: default.system.numbers
            ├── output columns: [number (#2)]
            ├── read rows: 2
            ├── read size: < 1 KiB
            ├── partitions total: 1
            ├── partitions scanned: 1
            ├── push downs: [filters: [], limit: NONE]
            └── estimated rows: 2.00
(empty)
(empty)
Fragment 3:
    ExchangeSource
    ├── output columns: [t1.number (#2), sum(number) (#1)]
    └── source fragment: [2]
(empty)

query T
explain
with
t1 as (select number as a from numbers(10)),
t2 as (select number as a from numbers(1000)),
t3 as (select number as a from numbers(10))
select sum(a) from (
select t1.a from t1, t2 where t1.a = t2.a
union all
select t1.a from t1, t3 where t1.a = t3.a
) t
----
AggregateFinal
├── output columns: [sum(a) (#5)]
├── group by: []
├── aggregate functions: [sum(a)]
├── estimated rows: 1.00
└── Exchange
    ├── output columns: [sum(a) (#5)]
    ├── exchange type: Merge
    └── AggregatePartial
        ├── group by: []
        ├── aggregate functions: [sum(a)]
        ├── estimated rows: 1.00
        └── UnionAll
            ├── output columns: [a (#4)]
            ├── estimated rows: 10100.00
            ├── HashJoin
            │   ├── output columns: [numbers.number (#0)]
            │   ├── join type: INNER
            │   ├── build keys: [t1.a (#0)]
            │   ├── probe keys: [t2.a (#1)]
            │   ├── keys is null equal: [false]
            │   ├── filters: []
            │   ├── estimated rows: 10000.00
            │   ├── Exchange(Build)
            │   │   ├── output columns: [numbers.number (#0)]
            │   │   ├── exchange type: Broadcast
            │   │   └── TableScan
            │   │       ├── table: default.system.numbers
            │   │       ├── output columns: [number (#0)]
            │   │       ├── read rows: 10
            │   │       ├── read size: < 1 KiB
            │   │       ├── partitions total: 1
            │   │       ├── partitions scanned: 1
            │   │       ├── push downs: [filters: [], limit: NONE]
            │   │       └── estimated rows: 10.00
            │   └── TableScan(Probe)
            │       ├── table: default.system.numbers
            │       ├── output columns: [number (#1)]
            │       ├── read rows: 1000
            │       ├── read size: 7.81 KiB
            │       ├── partitions total: 1
            │       ├── partitions scanned: 1
            │       ├── push downs: [filters: [], limit: NONE]
            │       └── estimated rows: 1000.00
            └── HashJoin
                ├── output columns: [numbers.number (#2)]
                ├── join type: INNER
                ├── build keys: [t3.a (#3)]
                ├── probe keys: [t1.a (#2)]
                ├── keys is null equal: [false]
                ├── filters: []
                ├── estimated rows: 100.00
                ├── Exchange(Build)
                │   ├── output columns: [numbers.number (#3)]
                │   ├── exchange type: Broadcast
                │   └── TableScan
                │       ├── table: default.system.numbers
                │       ├── output columns: [number (#3)]
                │       ├── read rows: 10
                │       ├── read size: < 1 KiB
                │       ├── partitions total: 1
                │       ├── partitions scanned: 1
                │       ├── push downs: [filters: [], limit: NONE]
                │       └── estimated rows: 10.00
                └── TableScan(Probe)
                    ├── table: default.system.numbers
                    ├── output columns: [number (#2)]
                    ├── read rows: 10
                    ├── read size: < 1 KiB
                    ├── partitions total: 1
                    ├── partitions scanned: 1
                    ├── push downs: [filters: [], limit: NONE]
                    └── estimated rows: 10.00


query T
explain
with
t1 as (select number as a from numbers(10)),
t2 as (select number as a from numbers(1000)),
t3 as (select number as a from numbers(10))
select sum(a) from (
select t1.a from t1, t2 where t1.a = t2.a
union all
select sum(t1.a) from t1, t3 where t1.a = t3.a
) t
----
AggregateFinal
├── output columns: [sum(a) (#6)]
├── group by: []
├── aggregate functions: [sum(a)]
├── estimated rows: 1.00
└── AggregatePartial
    ├── group by: []
    ├── aggregate functions: [sum(a)]
    ├── estimated rows: 1.00
    └── UnionAll
        ├── output columns: [a (#5)]
        ├── estimated rows: 10001.00
        ├── Exchange
        │   ├── output columns: [numbers.number (#0)]
        │   ├── exchange type: Merge
        │   └── HashJoin
        │       ├── output columns: [numbers.number (#0)]
        │       ├── join type: INNER
        │       ├── build keys: [t1.a (#0)]
        │       ├── probe keys: [t2.a (#1)]
        │       ├── keys is null equal: [false]
        │       ├── filters: []
        │       ├── estimated rows: 10000.00
        │       ├── Exchange(Build)
        │       │   ├── output columns: [numbers.number (#0)]
        │       │   ├── exchange type: Broadcast
        │       │   └── TableScan
        │       │       ├── table: default.system.numbers
        │       │       ├── output columns: [number (#0)]
        │       │       ├── read rows: 10
        │       │       ├── read size: < 1 KiB
        │       │       ├── partitions total: 1
        │       │       ├── partitions scanned: 1
        │       │       ├── push downs: [filters: [], limit: NONE]
        │       │       └── estimated rows: 10.00
        │       └── TableScan(Probe)
        │           ├── table: default.system.numbers
        │           ├── output columns: [number (#1)]
        │           ├── read rows: 1000
        │           ├── read size: 7.81 KiB
        │           ├── partitions total: 1
        │           ├── partitions scanned: 1
        │           ├── push downs: [filters: [], limit: NONE]
        │           └── estimated rows: 1000.00
        └── AggregateFinal
            ├── output columns: [sum(t1.a) (#4)]
            ├── group by: []
            ├── aggregate functions: [sum(number)]
            ├── estimated rows: 1.00
            └── Exchange
                ├── output columns: [sum(t1.a) (#4)]
                ├── exchange type: Merge
                └── AggregatePartial
                    ├── group by: []
                    ├── aggregate functions: [sum(number)]
                    ├── estimated rows: 1.00
                    └── HashJoin
                        ├── output columns: [numbers.number (#2)]
                        ├── join type: INNER
                        ├── build keys: [t3.a (#3)]
                        ├── probe keys: [t1.a (#2)]
                        ├── keys is null equal: [false]
                        ├── filters: []
                        ├── estimated rows: 100.00
                        ├── Exchange(Build)
                        │   ├── output columns: [numbers.number (#3)]
                        │   ├── exchange type: Broadcast
                        │   └── TableScan
                        │       ├── table: default.system.numbers
                        │       ├── output columns: [number (#3)]
                        │       ├── read rows: 10
                        │       ├── read size: < 1 KiB
                        │       ├── partitions total: 1
                        │       ├── partitions scanned: 1
                        │       ├── push downs: [filters: [], limit: NONE]
                        │       └── estimated rows: 10.00
                        └── TableScan(Probe)
                            ├── table: default.system.numbers
                            ├── output columns: [number (#2)]
                            ├── read rows: 10
                            ├── read size: < 1 KiB
                            ├── partitions total: 1
                            ├── partitions scanned: 1
                            ├── push downs: [filters: [], limit: NONE]
                            └── estimated rows: 10.00

query T
explain
with
t1 as (select number as a from numbers(10)),
t2 as (select number as a from numbers(1000)),
t3 as (select number as a from numbers(10))
select sum(a) from (
select t1.a from t1, t2 where t1.a = t2.a
union all
select t1.a from t1
) t
----
AggregateFinal
├── output columns: [sum(a) (#4)]
├── group by: []
├── aggregate functions: [sum(a)]
├── estimated rows: 1.00
└── Exchange
    ├── output columns: [sum(a) (#4)]
    ├── exchange type: Merge
    └── AggregatePartial
        ├── group by: []
        ├── aggregate functions: [sum(a)]
        ├── estimated rows: 1.00
        └── UnionAll
            ├── output columns: [a (#3)]
            ├── estimated rows: 10010.00
            ├── HashJoin
            │   ├── output columns: [numbers.number (#0)]
            │   ├── join type: INNER
            │   ├── build keys: [t1.a (#0)]
            │   ├── probe keys: [t2.a (#1)]
            │   ├── keys is null equal: [false]
            │   ├── filters: []
            │   ├── estimated rows: 10000.00
            │   ├── Exchange(Build)
            │   │   ├── output columns: [numbers.number (#0)]
            │   │   ├── exchange type: Broadcast
            │   │   └── TableScan
            │   │       ├── table: default.system.numbers
            │   │       ├── output columns: [number (#0)]
            │   │       ├── read rows: 10
            │   │       ├── read size: < 1 KiB
            │   │       ├── partitions total: 1
            │   │       ├── partitions scanned: 1
            │   │       ├── push downs: [filters: [], limit: NONE]
            │   │       └── estimated rows: 10.00
            │   └── TableScan(Probe)
            │       ├── table: default.system.numbers
            │       ├── output columns: [number (#1)]
            │       ├── read rows: 1000
            │       ├── read size: 7.81 KiB
            │       ├── partitions total: 1
            │       ├── partitions scanned: 1
            │       ├── push downs: [filters: [], limit: NONE]
            │       └── estimated rows: 1000.00
            └── TableScan
                ├── table: default.system.numbers
                ├── output columns: [number (#2)]
                ├── read rows: 10
                ├── read size: < 1 KiB
                ├── partitions total: 1
                ├── partitions scanned: 1
                ├── push downs: [filters: [], limit: NONE]
                └── estimated rows: 10.00

query T
explain
with
t1 as (select number as a from numbers(10)),
t2 as (select number as a from numbers(1000)),
t3 as (select number as a from numbers(10))
select * from t1, t2, t3
----
Exchange
├── output columns: [numbers.number (#1), numbers.number (#0), numbers.number (#2)]
├── exchange type: Merge
└── HashJoin
    ├── output columns: [numbers.number (#1), numbers.number (#0), numbers.number (#2)]
    ├── join type: CROSS
    ├── build keys: []
    ├── probe keys: []
    ├── keys is null equal: []
    ├── filters: []
    ├── estimated rows: 100000.00
    ├── Exchange(Build)
    │   ├── output columns: [numbers.number (#2)]
    │   ├── exchange type: Broadcast
    │   └── TableScan
    │       ├── table: default.system.numbers
    │       ├── output columns: [number (#2)]
    │       ├── read rows: 10
    │       ├── read size: < 1 KiB
    │       ├── partitions total: 1
    │       ├── partitions scanned: 1
    │       ├── push downs: [filters: [], limit: NONE]
    │       └── estimated rows: 10.00
    └── HashJoin(Probe)
        ├── output columns: [numbers.number (#1), numbers.number (#0)]
        ├── join type: CROSS
        ├── build keys: []
        ├── probe keys: []
        ├── keys is null equal: []
        ├── filters: []
        ├── estimated rows: 10000.00
        ├── Exchange(Build)
        │   ├── output columns: [numbers.number (#0)]
        │   ├── exchange type: Broadcast
        │   └── TableScan
        │       ├── table: default.system.numbers
        │       ├── output columns: [number (#0)]
        │       ├── read rows: 10
        │       ├── read size: < 1 KiB
        │       ├── partitions total: 1
        │       ├── partitions scanned: 1
        │       ├── push downs: [filters: [], limit: NONE]
        │       └── estimated rows: 10.00
        └── TableScan(Probe)
            ├── table: default.system.numbers
            ├── output columns: [number (#1)]
            ├── read rows: 1000
            ├── read size: 7.81 KiB
            ├── partitions total: 1
            ├── partitions scanned: 1
            ├── push downs: [filters: [], limit: NONE]
            └── estimated rows: 1000.00

statement ok
set disable_join_reorder = 1;

query T
explain select * from numbers(10) as t1 join numbers(20) as t2 on t1.number = t2.number;
----
Exchange
├── output columns: [t1.number (#0), t2.number (#1)]
├── exchange type: Merge
└── HashJoin
    ├── output columns: [t1.number (#0), t2.number (#1)]
    ├── join type: INNER
    ├── build keys: [t2.number (#1)]
    ├── probe keys: [t1.number (#0)]
    ├── keys is null equal: [false]
    ├── filters: []
    ├── estimated rows: 200.00
    ├── Exchange(Build)
    │   ├── output columns: [t2.number (#1)]
    │   ├── exchange type: Hash(t2.number (#1))
    │   └── TableScan
    │       ├── table: default.system.numbers
    │       ├── output columns: [number (#1)]
    │       ├── read rows: 20
    │       ├── read size: < 1 KiB
    │       ├── partitions total: 1
    │       ├── partitions scanned: 1
    │       ├── push downs: [filters: [], limit: NONE]
    │       └── estimated rows: 20.00
    └── Exchange(Probe)
        ├── output columns: [t1.number (#0)]
        ├── exchange type: Hash(t1.number (#0))
        └── TableScan
            ├── table: default.system.numbers
            ├── output columns: [number (#0)]
            ├── read rows: 10
            ├── read size: < 1 KiB
            ├── partitions total: 1
            ├── partitions scanned: 1
            ├── push downs: [filters: [], limit: NONE]
            └── estimated rows: 10.00


statement ok
set disable_join_reorder = 0;
