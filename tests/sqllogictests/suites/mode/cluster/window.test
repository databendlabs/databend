statement ok
drop table if exists employees;

statement ok
drop table if exists departments;

statement ok
CREATE TABLE employees (
    employee_id INT,
    name VARCHAR(100),
    department_id INT,
    salary DECIMAL(10, 2)
);

statement ok
CREATE TABLE departments (
    department_id INT,
    department_name VARCHAR(100)
);

statement ok
INSERT INTO departments (department_id, department_name) VALUES
(1, 'Human Resources'),
(2, 'Marketing'),
(3, 'Finance'),
(4, 'IT');

statement ok
INSERT INTO employees (employee_id, name, department_id, salary) VALUES
(1, 'Alice', 1, 50000.00),
(2, 'Bob', 1, 52000.00),
(3, 'Charlie', 2, 55000.00),
(4, 'David', 2, 50000.00),
(5, 'Eve', 3, 75000.00),
(6, 'Frank', 3, 82000.00),
(7, 'Grace', 4, 72000.00),
(8, 'Hannah', 4, 69000.00),
(9, 'Ian', 4, 67000.00),
(10, 'Jack', 3, 70000.00);


query TT?I
SELECT
    e.name AS EmployeeName,
    d.department_name AS DepartmentName,
    e.salary AS Salary,
    ROW_NUMBER() OVER (PARTITION BY d.department_id ORDER BY e.salary DESC) AS SalaryRank
FROM
    employees e
JOIN
    departments d ON e.department_id = d.department_id
ORDER BY
    DepartmentName,
    SalaryRank;
----
Frank Finance 82000.00 1
Eve Finance 75000.00 2
Jack Finance 70000.00 3
Bob Human Resources 52000.00 1
Alice Human Resources 50000.00 2
Grace IT 72000.00 1
Hannah IT 69000.00 2
Ian IT 67000.00 3
Charlie Marketing 55000.00 1
David Marketing 50000.00 2


query
explain SELECT e.name AS EmployeeName,
    d.department_name AS DepartmentName,
    e.salary AS Salary,
    ROW_NUMBER() OVER (PARTITION BY d.department_id ORDER BY e.salary DESC) AS SalaryRank
FROM
    employees e
JOIN
    departments d ON e.department_id = d.department_id;
----
Exchange
├── output columns: [e.name (#1), e.salary (#3), d.department_name (#5), d.department_id (#4), ROW_NUMBER() OVER (PARTITION BY d.department_id ORDER BY e.salary DESC) (#6)]
├── exchange type: Merge
└── Window
    ├── output columns: [e.name (#1), e.salary (#3), d.department_name (#5), d.department_id (#4), ROW_NUMBER() OVER (PARTITION BY d.department_id ORDER BY e.salary DESC) (#6)]
    ├── aggregate function: [row_number]
    ├── partition by: [department_id]
    ├── order by: [salary]
    ├── frame: [Range: Preceding(None) ~ CurrentRow]
    └── WindowPartition
        ├── output columns: [e.name (#1), e.salary (#3), d.department_name (#5), d.department_id (#4)]
        ├── hash keys: [department_id]
        ├── estimated rows: 8.00
        └── Exchange
            ├── output columns: [e.name (#1), e.salary (#3), d.department_name (#5), d.department_id (#4)]
            ├── exchange type: Hash(d.department_id (#4))
            └── HashJoin
                ├── output columns: [e.name (#1), e.salary (#3), d.department_name (#5), d.department_id (#4)]
                ├── join type: INNER
                ├── build keys: [d.department_id (#4)]
                ├── probe keys: [e.department_id (#2)]
                ├── keys is null equal: [false]
                ├── filters: []
                ├── estimated rows: 8.00
                ├── Exchange(Build)
                │   ├── output columns: [d.department_id (#4), d.department_name (#5)]
                │   ├── exchange type: Broadcast
                │   └── TableScan
                │       ├── table: default.default.departments
                │       ├── output columns: [department_id (#4), department_name (#5)]
                │       ├── read rows: 4
                │       ├── read size: < 1 KiB
                │       ├── partitions total: 1
                │       ├── partitions scanned: 1
                │       ├── pruning stats: [segments: <range pruning: 1 to 1>, blocks: <range pruning: 1 to 1>]
                │       ├── push downs: [filters: [], limit: NONE]
                │       └── estimated rows: 4.00
                └── TableScan(Probe)
                    ├── table: default.default.employees
                    ├── output columns: [name (#1), department_id (#2), salary (#3)]
                    ├── read rows: 10
                    ├── read size: < 1 KiB
                    ├── partitions total: 1
                    ├── partitions scanned: 1
                    ├── pruning stats: [segments: <range pruning: 1 to 1>, blocks: <range pruning: 1 to 1>]
                    ├── push downs: [filters: [], limit: NONE]
                    └── estimated rows: 10.00

query
explain select number, lead(number,1, 0) over (partition by number % 3 order by number+ 1),
    lead(number,2, 0) over (partition by number % 3 order by number + 1)
    from numbers(50);
----
Exchange
├── output columns: [numbers.number (#0), lead_default_value (#1), lead_part_0 (#2), lead_order_0 (#3), lead(number, 1, 0) OVER (PARTITION BY number % 3 ORDER BY number + 1) (#4), lead(number, 2, 0) OVER (PARTITION BY number % 3 ORDER BY number + 1) (#5)]
├── exchange type: Merge
└── Window
    ├── output columns: [numbers.number (#0), lead_default_value (#1), lead_part_0 (#2), lead_order_0 (#3), lead(number, 1, 0) OVER (PARTITION BY number % 3 ORDER BY number + 1) (#4), lead(number, 2, 0) OVER (PARTITION BY number % 3 ORDER BY number + 1) (#5)]
    ├── aggregate function: [lead]
    ├── partition by: [lead_part_0]
    ├── order by: [lead_order_0]
    ├── frame: [Rows: Following(Some(Number(2_u64))) ~ Following(Some(Number(2_u64)))]
    └── Window
        ├── output columns: [numbers.number (#0), lead_default_value (#1), lead_part_0 (#2), lead_order_0 (#3), lead(number, 1, 0) OVER (PARTITION BY number % 3 ORDER BY number + 1) (#4)]
        ├── aggregate function: [lead]
        ├── partition by: [lead_part_0]
        ├── order by: [lead_order_0]
        ├── frame: [Rows: Following(Some(Number(1_u64))) ~ Following(Some(Number(1_u64)))]
        └── WindowPartition
            ├── output columns: [numbers.number (#0), lead_default_value (#1), lead_part_0 (#2), lead_order_0 (#3)]
            ├── hash keys: [lead_part_0]
            ├── estimated rows: 50.00
            └── Exchange
                ├── output columns: [numbers.number (#0), lead_default_value (#1), lead_part_0 (#2), lead_order_0 (#3)]
                ├── exchange type: Hash(numbers.number (#0) % 3)
                └── EvalScalar
                    ├── output columns: [numbers.number (#0), lead_default_value (#1), lead_part_0 (#2), lead_order_0 (#3)]
                    ├── expressions: [0, numbers.number (#0) % 3, numbers.number (#0) + 1]
                    ├── estimated rows: 50.00
                    └── TableScan
                        ├── table: default.system.numbers
                        ├── output columns: [number (#0)]
                        ├── read rows: 50
                        ├── read size: < 1 KiB
                        ├── partitions total: 1
                        ├── partitions scanned: 1
                        ├── push downs: [filters: [], limit: NONE]
                        └── estimated rows: 50.00

statement ok
CREATE OR REPLACE TABLE sales (
    sale_id INT UNSIGNED NOT NULL,
    product_id INT UNSIGNED NOT NULL,
    customer_id INT UNSIGNED NOT NULL,
    sale_date DATE NOT NULL,
    quantity INT NOT NULL,
    net_paid DECIMAL(10, 2) NOT NULL
);

query
explain SELECT customer_id,
    ROUND(AVG(net_paid) OVER (PARTITION BY customer_id), 3) AS customer_avg,
    ROUND(AVG(net_paid) OVER () - AVG(net_paid) OVER (PARTITION BY customer_id), 3) AS diff_from_overall_avg
FROM
    sales
ORDER BY
    diff_from_overall_avg DESC, customer_id ASC
LIMIT 10;
----
Limit
├── output columns: [sales.customer_id (#2), customer_avg (#8), diff_from_overall_avg (#9)]
├── limit: 10
├── offset: 0
├── estimated rows: 0.00
└── Sort
    ├── output columns: [sales.customer_id (#2), customer_avg (#8), diff_from_overall_avg (#9)]
    ├── sort keys: [diff_from_overall_avg DESC NULLS LAST, customer_id ASC NULLS LAST]
    ├── estimated rows: 0.00
    └── EvalScalar
        ├── output columns: [sales.customer_id (#2), customer_avg (#8), diff_from_overall_avg (#9)]
        ├── expressions: [round(3)(AVG(net_paid) OVER (PARTITION BY customer_id) (#6), 3), round(3)(AVG(net_paid) OVER () (#7) - AVG(net_paid) OVER (PARTITION BY customer_id) (#6), 3)]
        ├── estimated rows: 0.00
        └── Window
            ├── output columns: [sales.customer_id (#2), sales.net_paid (#5), AVG(net_paid) OVER (PARTITION BY customer_id) (#6), AVG(net_paid) OVER () (#7)]
            ├── aggregate function: [avg(net_paid)]
            ├── partition by: []
            ├── order by: []
            ├── frame: [Range: Preceding(None) ~ Following(None)]
            └── Exchange
                ├── output columns: [sales.customer_id (#2), sales.net_paid (#5), AVG(net_paid) OVER (PARTITION BY customer_id) (#6)]
                ├── exchange type: Merge
                └── Window
                    ├── output columns: [sales.customer_id (#2), sales.net_paid (#5), AVG(net_paid) OVER (PARTITION BY customer_id) (#6)]
                    ├── aggregate function: [avg(net_paid)]
                    ├── partition by: [customer_id]
                    ├── order by: []
                    ├── frame: [Range: Preceding(None) ~ Following(None)]
                    └── WindowPartition
                        ├── output columns: [sales.customer_id (#2), sales.net_paid (#5)]
                        ├── hash keys: [customer_id]
                        ├── estimated rows: 0.00
                        └── Exchange
                            ├── output columns: [sales.customer_id (#2), sales.net_paid (#5)]
                            ├── exchange type: Hash(sales.customer_id (#2))
                            └── TableScan
                                ├── table: default.default.sales
                                ├── output columns: [customer_id (#2), net_paid (#5)]
                                ├── read rows: 0
                                ├── read size: 0
                                ├── partitions total: 0
                                ├── partitions scanned: 0
                                ├── push downs: [filters: [], limit: NONE]
                                └── estimated rows: 0.00


statement ok
DROP TABLE employees;

statement ok
DROP TABLE departments;

statement ok
DROP TABLE sales;
