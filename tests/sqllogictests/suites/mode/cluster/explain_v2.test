statement ok
drop table if exists t1 all;

statement ok
drop table if exists t2 all;

statement ok
set max_threads = 1;

statement ok
create table t1(a int not null, b int not null) as select number as a, number+1 as b from numbers(100);

statement ok
create table t2(a int not null, b int not null) as select number as a, number+1 as b from numbers(100);

query T
explain select t1.a from t1 where a > 0;
----
Exchange
├── output columns: [t1.a (#0)]
├── exchange type: Merge
└── Filter
    ├── output columns: [t1.a (#0)]
    ├── filters: [t1.a (#0) > 0]
    ├── estimated rows: 99.00
    └── TableScan
        ├── table: default.default.t1
        ├── output columns: [a (#0)]
        ├── read rows: 100
        ├── read size: < 1 KiB
        ├── partitions total: 3
        ├── partitions scanned: 3
        ├── pruning stats: [segments: <range pruning: 1 to 1>, blocks: <range pruning: 3 to 3>]
        ├── push downs: [filters: [t1.a (#0) > 0], limit: NONE]
        └── estimated rows: 100.00

query T
explain select * from t1, t2 where (t1.a = t2.a and t1.a > 3) or (t1.a = t2.a and t2.a > 5 and t1.a > 1);
----
Exchange
├── output columns: [t1.a (#0), t1.b (#1), t2.b (#3), t2.a (#2)]
├── exchange type: Merge
└── Filter
    ├── output columns: [t1.a (#0), t1.b (#1), t2.b (#3), t2.a (#2)]
    ├── filters: [(t1.a (#0) > 3 OR (t2.a (#2) > 5 AND t1.a (#0) > 1))]
    ├── estimated rows: 99.68
    └── HashJoin
        ├── output columns: [t1.a (#0), t1.b (#1), t2.b (#3), t2.a (#2)]
        ├── join type: INNER
        ├── build keys: [t2.a (#2)]
        ├── probe keys: [t1.a (#0)]
        ├── keys is null equal: [false]
        ├── filters: []
        ├── estimated rows: 99.92
        ├── Exchange(Build)
        │   ├── output columns: [t2.a (#2), t2.b (#3)]
        │   ├── exchange type: Broadcast
        │   └── Filter
        │       ├── output columns: [t2.a (#2), t2.b (#3)]
        │       ├── filters: [(t2.a (#2) > 3 OR t2.a (#2) > 1)]
        │       ├── estimated rows: 99.92
        │       └── TableScan
        │           ├── table: default.default.t2
        │           ├── output columns: [a (#2), b (#3)]
        │           ├── read rows: 100
        │           ├── read size: < 1 KiB
        │           ├── partitions total: 3
        │           ├── partitions scanned: 3
        │           ├── pruning stats: [segments: <range pruning: 1 to 1>, blocks: <range pruning: 3 to 3>]
        │           ├── push downs: [filters: [(t2.a (#2) > 3 OR t2.a (#2) > 1)], limit: NONE]
        │           └── estimated rows: 100.00
        └── Filter(Probe)
            ├── output columns: [t1.a (#0), t1.b (#1)]
            ├── filters: [(t1.a (#0) > 3 OR t1.a (#0) > 1)]
            ├── estimated rows: 99.92
            └── TableScan
                ├── table: default.default.t1
                ├── output columns: [a (#0), b (#1)]
                ├── read rows: 100
                ├── read size: < 1 KiB
                ├── partitions total: 3
                ├── partitions scanned: 3
                ├── pruning stats: [segments: <range pruning: 1 to 1>, blocks: <range pruning: 3 to 3>]
                ├── push downs: [filters: [(t1.a (#0) > 3 OR t1.a (#0) > 1)], limit: NONE]
                └── estimated rows: 100.00

query T
explain select * from t1, t2 where (t1.a = t2.a and t1.a > 3) or (t1.a = t2.a);
----
Exchange
├── output columns: [t1.a (#0), t1.b (#1), t2.b (#3), t2.a (#2)]
├── exchange type: Merge
└── HashJoin
    ├── output columns: [t1.a (#0), t1.b (#1), t2.b (#3), t2.a (#2)]
    ├── join type: INNER
    ├── build keys: [t2.a (#2)]
    ├── probe keys: [t1.a (#0)]
    ├── keys is null equal: [false]
    ├── filters: []
    ├── estimated rows: 100.00
    ├── Exchange(Build)
    │   ├── output columns: [t2.a (#2), t2.b (#3)]
    │   ├── exchange type: Broadcast
    │   └── TableScan
    │       ├── table: default.default.t2
    │       ├── output columns: [a (#2), b (#3)]
    │       ├── read rows: 100
    │       ├── read size: < 1 KiB
    │       ├── partitions total: 3
    │       ├── partitions scanned: 3
    │       ├── pruning stats: [segments: <range pruning: 1 to 1>, blocks: <range pruning: 3 to 3>]
    │       ├── push downs: [filters: [], limit: NONE]
    │       └── estimated rows: 100.00
    └── TableScan(Probe)
        ├── table: default.default.t1
        ├── output columns: [a (#0), b (#1)]
        ├── read rows: 100
        ├── read size: < 1 KiB
        ├── partitions total: 3
        ├── partitions scanned: 3
        ├── pruning stats: [segments: <range pruning: 1 to 1>, blocks: <range pruning: 3 to 3>]
        ├── push downs: [filters: [], limit: NONE]
        └── estimated rows: 100.00

query T
explain raw select * from t1, t2 where (t1.a = t2.a and t1.a > 3) or (t1.a = t2.a);
----
EvalScalar
├── scalars: [t1.a (#0) AS (#0), t1.b (#1) AS (#1), t2.a (#2) AS (#2), t2.b (#3) AS (#3)]
└── Filter
    ├── filters: [or(and(eq(t1.a (#0), t2.a (#2)), gt(t1.a (#0), 3)), eq(t1.a (#0), t2.a (#2)))]
    └── Join(Cross)
        ├── build keys: []
        ├── probe keys: []
        ├── other filters: []
        ├── Scan
        │   ├── table: default.t1
        │   ├── filters: []
        │   ├── order by: []
        │   └── limit: NONE
        └── Scan
            ├── table: default.t2
            ├── filters: []
            ├── order by: []
            └── limit: NONE

query T
explain raw select * from t1 inner join t2 on t1.a = t2.a and t1.b = t2.b and t1.a > 2;
----
EvalScalar
├── scalars: [t1.a (#0) AS (#0), t1.b (#1) AS (#1), t2.a (#2) AS (#2), t2.b (#3) AS (#3)]
└── Join(Inner)
    ├── build keys: [t2.a (#2), t2.b (#3)]
    ├── probe keys: [t1.a (#0), t1.b (#1)]
    ├── other filters: []
    ├── Filter
    │   ├── filters: [gt(t1.a (#0), 2)]
    │   └── Scan
    │       ├── table: default.t1
    │       ├── filters: []
    │       ├── order by: []
    │       └── limit: NONE
    └── Scan
        ├── table: default.t2
        ├── filters: []
        ├── order by: []
        └── limit: NONE

query T
explain select count(1) as c, count(b) as d, max(a) as e from t1 order by c, e, d limit 10;
----
Limit
├── output columns: [count(1) (#2), count(b) (#3), max(a) (#4)]
├── limit: 10
├── offset: 0
├── estimated rows: 1.00
└── Sort
    ├── output columns: [count(1) (#2), count(b) (#3), max(a) (#4)]
    ├── sort keys: [count(1) ASC NULLS LAST, max(a) ASC NULLS LAST, count(b) ASC NULLS LAST]
    ├── estimated rows: 1.00
    └── EvalScalar
        ├── output columns: [count(1) (#2), count(b) (#3), max(a) (#4)]
        ├── expressions: [99]
        ├── estimated rows: 1.00
        └── EvalScalar
            ├── output columns: [count(1) (#2), count(b) (#3)]
            ├── expressions: [count(1) (#2)]
            ├── estimated rows: 1.00
            └── EvalScalar
                ├── output columns: [count(1) (#2)]
                ├── expressions: [100]
                ├── estimated rows: 1.00
                └── DummyTableScan

query T
explain select (t1.a + 1) as c,(t1.b+1) as d, (t2.a+1) as e from t1 join t2 on t1.a = t2.a order by c, d, e limit 10;
----
Limit
├── output columns: [c (#4), d (#5), e (#6)]
├── limit: 10
├── offset: 0
├── estimated rows: 10.00
└── Sort
    ├── output columns: [c (#4), d (#5), e (#6)]
    ├── sort keys: [c ASC NULLS LAST, d ASC NULLS LAST, e ASC NULLS LAST]
    ├── estimated rows: 100.00
    └── Exchange
        ├── output columns: [c (#4), d (#5), e (#6), #_order_col]
        ├── exchange type: Merge
        └── Sort
            ├── output columns: [c (#4), d (#5), e (#6), #_order_col]
            ├── sort keys: [c ASC NULLS LAST, d ASC NULLS LAST, e ASC NULLS LAST]
            ├── estimated rows: 100.00
            └── EvalScalar
                ├── output columns: [c (#4), d (#5), e (#6)]
                ├── expressions: [t1.a (#0) + 1, t1.b (#1) + 1, t2.a (#2) + 1]
                ├── estimated rows: 100.00
                └── HashJoin
                    ├── output columns: [t1.a (#0), t1.b (#1), t2.a (#2)]
                    ├── join type: INNER
                    ├── build keys: [t2.a (#2)]
                    ├── probe keys: [t1.a (#0)]
                    ├── keys is null equal: [false]
                    ├── filters: []
                    ├── estimated rows: 100.00
                    ├── Exchange(Build)
                    │   ├── output columns: [t2.a (#2)]
                    │   ├── exchange type: Broadcast
                    │   └── TableScan
                    │       ├── table: default.default.t2
                    │       ├── output columns: [a (#2)]
                    │       ├── read rows: 100
                    │       ├── read size: < 1 KiB
                    │       ├── partitions total: 3
                    │       ├── partitions scanned: 3
                    │       ├── pruning stats: [segments: <range pruning: 1 to 1>, blocks: <range pruning: 3 to 3>]
                    │       ├── push downs: [filters: [], limit: NONE]
                    │       └── estimated rows: 100.00
                    └── TableScan(Probe)
                        ├── table: default.default.t1
                        ├── output columns: [a (#0), b (#1)]
                        ├── read rows: 100
                        ├── read size: < 1 KiB
                        ├── partitions total: 3
                        ├── partitions scanned: 3
                        ├── pruning stats: [segments: <range pruning: 1 to 1>, blocks: <range pruning: 3 to 3>]
                        ├── push downs: [filters: [], limit: NONE]
                        └── estimated rows: 100.00

statement ok
set prefer_broadcast_join = 1;

query T
explain select * from t1 join t2 on t1.a = t2.a;
----
Exchange
├── output columns: [t1.a (#0), t1.b (#1), t2.b (#3), t2.a (#2)]
├── exchange type: Merge
└── HashJoin
    ├── output columns: [t1.a (#0), t1.b (#1), t2.b (#3), t2.a (#2)]
    ├── join type: INNER
    ├── build keys: [t2.a (#2)]
    ├── probe keys: [t1.a (#0)]
    ├── keys is null equal: [false]
    ├── filters: []
    ├── estimated rows: 100.00
    ├── Exchange(Build)
    │   ├── output columns: [t2.a (#2), t2.b (#3)]
    │   ├── exchange type: Broadcast
    │   └── TableScan
    │       ├── table: default.default.t2
    │       ├── output columns: [a (#2), b (#3)]
    │       ├── read rows: 100
    │       ├── read size: < 1 KiB
    │       ├── partitions total: 3
    │       ├── partitions scanned: 3
    │       ├── pruning stats: [segments: <range pruning: 1 to 1>, blocks: <range pruning: 3 to 3>]
    │       ├── push downs: [filters: [], limit: NONE]
    │       └── estimated rows: 100.00
    └── TableScan(Probe)
        ├── table: default.default.t1
        ├── output columns: [a (#0), b (#1)]
        ├── read rows: 100
        ├── read size: < 1 KiB
        ├── partitions total: 3
        ├── partitions scanned: 3
        ├── pruning stats: [segments: <range pruning: 1 to 1>, blocks: <range pruning: 3 to 3>]
        ├── push downs: [filters: [], limit: NONE]
        └── estimated rows: 100.00

statement ok
set prefer_broadcast_join = 0;

query T
explain select * from (SELECT number AS a FROM numbers(10)) x  order by x.a limit 3;
----
Limit
├── output columns: [numbers.number (#0)]
├── limit: 3
├── offset: 0
├── estimated rows: 3.00
└── Sort
    ├── output columns: [numbers.number (#0)]
    ├── sort keys: [number ASC NULLS LAST]
    ├── estimated rows: 10.00
    └── Exchange
        ├── output columns: [numbers.number (#0), #_order_col]
        ├── exchange type: Merge
        └── Sort
            ├── output columns: [numbers.number (#0), #_order_col]
            ├── sort keys: [number ASC NULLS LAST]
            ├── estimated rows: 10.00
            └── TableScan
                ├── table: default.system.numbers
                ├── output columns: [number (#0)]
                ├── read rows: 10
                ├── read size: < 1 KiB
                ├── partitions total: 1
                ├── partitions scanned: 1
                ├── push downs: [filters: [], limit: 3]
                └── estimated rows: 10.00

query T
explain select sum(a) from (SELECT number AS a FROM numbers(10)) x right join (SELECT number AS a FROM numbers(5)) y using(a);
----
AggregateFinal
├── output columns: [sum(a) (#3)]
├── group by: []
├── aggregate functions: [sum(number)]
├── estimated rows: 1.00
└── Exchange
    ├── output columns: [sum(a) (#3)]
    ├── exchange type: Merge
    └── AggregatePartial
        ├── group by: []
        ├── aggregate functions: [sum(number)]
        ├── estimated rows: 1.00
        └── HashJoin
            ├── output columns: [numbers.number (#1)]
            ├── join type: RIGHT OUTER
            ├── build keys: [CAST(y.a (#1) AS UInt64 NULL)]
            ├── probe keys: [x.a (#2)]
            ├── keys is null equal: [false]
            ├── filters: []
            ├── estimated rows: 50.00
            ├── Exchange(Build)
            │   ├── output columns: [numbers.number (#1)]
            │   ├── exchange type: Hash(CAST(y.a (#1) AS UInt64 NULL))
            │   └── TableScan
            │       ├── table: default.system.numbers
            │       ├── output columns: [number (#1)]
            │       ├── read rows: 5
            │       ├── read size: < 1 KiB
            │       ├── partitions total: 1
            │       ├── partitions scanned: 1
            │       ├── push downs: [filters: [], limit: NONE]
            │       └── estimated rows: 5.00
            └── Exchange(Probe)
                ├── output columns: [a (#2)]
                ├── exchange type: Hash(x.a (#2))
                └── EvalScalar
                    ├── output columns: [a (#2)]
                    ├── expressions: [CAST(x.a (#0) AS UInt64 NULL)]
                    ├── estimated rows: 10.00
                    └── TableScan
                        ├── table: default.system.numbers
                        ├── output columns: [number (#0)]
                        ├── read rows: 10
                        ├── read size: < 1 KiB
                        ├── partitions total: 1
                        ├── partitions scanned: 1
                        ├── push downs: [filters: [], limit: NONE]
                        └── estimated rows: 10.00

statement ok
drop table t1;

statement ok
drop table t2;

statement ok
create table t1(a int, b int);

statement ok
insert into t1 values(1, 2), (2, 3), (3, 4);

statement ok
set inlist_to_join_threshold = 1;

query T
explain select * from t1 where a in (1, 2);
----
Exchange
├── output columns: [t1.a (#0), t1.b (#1)]
├── exchange type: Merge
└── HashJoin
    ├── output columns: [t1.a (#0), t1.b (#1)]
    ├── join type: INNER
    ├── build keys: [CAST(CAST(subquery_2 (#2) AS UInt8 NULL) AS Int32 NULL)]
    ├── probe keys: [t1.a (#0)]
    ├── keys is null equal: [false]
    ├── filters: []
    ├── estimated rows: 2.00
    ├── Exchange(Build)
    │   ├── output columns: [col0 (#2)]
    │   ├── exchange type: Broadcast
    │   └── AggregateFinal
    │       ├── output columns: [col0 (#2)]
    │       ├── group by: [col0]
    │       ├── aggregate functions: []
    │       ├── estimated rows: 2.00
    │       └── Exchange
    │           ├── output columns: [col0 (#2)]
    │           ├── exchange type: Hash(0)
    │           └── AggregatePartial
    │               ├── group by: [col0]
    │               ├── aggregate functions: []
    │               ├── estimated rows: 2.00
    │               └── ConstantTableScan
    │                   ├── output columns: [col0 (#2)]
    │                   └── column 0: [1, 2]
    └── TableScan(Probe)
        ├── table: default.default.t1
        ├── output columns: [a (#0), b (#1)]
        ├── read rows: 3
        ├── read size: < 1 KiB
        ├── partitions total: 1
        ├── partitions scanned: 1
        ├── pruning stats: [segments: <range pruning: 1 to 1>, blocks: <range pruning: 1 to 1>]
        ├── push downs: [filters: [], limit: NONE]
        └── estimated rows: 3.00

query T
EXPLAIN SELECT a.cluster_node, b.query_node FROM (SELECT name as cluster_node FROM system.clusters) AS a LEFT JOIN (SELECT DISTINCT node_id as query_node FROM system.query_log) AS b ON a.cluster_node = b.query_node
----
Exchange
├── output columns: [clusters.name (#0), query_node (#64)]
├── exchange type: Merge
└── HashJoin
    ├── output columns: [clusters.name (#0), query_node (#64)]
    ├── join type: LEFT OUTER
    ├── build keys: [b.query_node (#64)]
    ├── probe keys: [CAST(a.cluster_node (#0) AS String NULL)]
    ├── keys is null equal: [false]
    ├── filters: []
    ├── estimated rows: 0.00
    ├── Exchange(Build)
    │   ├── output columns: [query_node (#64)]
    │   ├── exchange type: Broadcast
    │   └── EvalScalar
    │       ├── output columns: [query_node (#64)]
    │       ├── expressions: [CAST(b.query_node (#10) AS String NULL)]
    │       ├── estimated rows: 0.00
    │       └── AggregateFinal
    │           ├── output columns: [query_log.node_id (#10)]
    │           ├── group by: [node_id]
    │           ├── aggregate functions: []
    │           ├── estimated rows: 0.00
    │           └── Exchange
    │               ├── output columns: [query_log.node_id (#10)]
    │               ├── exchange type: Hash(0)
    │               └── AggregatePartial
    │                   ├── group by: [node_id]
    │                   ├── aggregate functions: []
    │                   ├── estimated rows: 0.00
    │                   └── TableScan
    │                       ├── table: default.system.query_log
    │                       ├── output columns: [node_id (#10)]
    │                       ├── read rows: 0
    │                       ├── read size: 0
    │                       ├── partitions total: 0
    │                       ├── partitions scanned: 0
    │                       ├── push downs: [filters: [], limit: NONE]
    │                       └── estimated rows: 0.00
    └── TableScan(Probe)
        ├── table: default.system.clusters
        ├── output columns: [name (#0)]
        ├── read rows: 0
        ├── read size: 0
        ├── partitions total: 0
        ├── partitions scanned: 0
        ├── push downs: [filters: [], limit: NONE]
        └── estimated rows: 0.00

statement ok
drop table t1;

statement ok
unset inlist_to_join_threshold;
