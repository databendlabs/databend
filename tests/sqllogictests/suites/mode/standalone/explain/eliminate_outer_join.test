statement ok
drop database if exists eliminate_outer_join

statement ok
create database eliminate_outer_join

statement ok
use eliminate_outer_join

statement ok
create table t(a int null) as select number from numbers(10)

query T
explain select * from t left join t t1 on t.a = t1.a
----
HashJoin
├── output columns: [t.a (#0), t1.a (#1)]
├── join type: LEFT OUTER
├── build keys: [t1.a (#1)]
├── probe keys: [t.a (#0)]
├── keys is null equal: [false]
├── filters: []
├── estimated rows: 10.00
├── TableScan(Build)
│   ├── table: default.eliminate_outer_join.t
│   ├── output columns: [a (#1)]
│   ├── read rows: 10
│   ├── read size: < 1 KiB
│   ├── partitions total: 1
│   ├── partitions scanned: 1
│   ├── pruning stats: [segments: <range pruning: 1 to 1>, blocks: <range pruning: 1 to 1>]
│   ├── push downs: [filters: [], limit: NONE]
│   └── estimated rows: 10.00
└── TableScan(Probe)
    ├── table: default.eliminate_outer_join.t
    ├── output columns: [a (#0)]
    ├── read rows: 10
    ├── read size: < 1 KiB
    ├── partitions total: 1
    ├── partitions scanned: 1
    ├── pruning stats: [segments: <range pruning: 1 to 1>, blocks: <range pruning: 1 to 1>]
    ├── push downs: [filters: [], limit: NONE]
    └── estimated rows: 10.00

query T
explain select * from t right join t t1 on t.a = t1.a
----
HashJoin
├── output columns: [t1.a (#1), t.a (#0)]
├── join type: LEFT OUTER
├── build keys: [t.a (#0)]
├── probe keys: [t1.a (#1)]
├── keys is null equal: [false]
├── filters: []
├── estimated rows: 10.00
├── TableScan(Build)
│   ├── table: default.eliminate_outer_join.t
│   ├── output columns: [a (#0)]
│   ├── read rows: 10
│   ├── read size: < 1 KiB
│   ├── partitions total: 1
│   ├── partitions scanned: 1
│   ├── pruning stats: [segments: <range pruning: 1 to 1>, blocks: <range pruning: 1 to 1>]
│   ├── push downs: [filters: [], limit: NONE]
│   └── estimated rows: 10.00
└── TableScan(Probe)
    ├── table: default.eliminate_outer_join.t
    ├── output columns: [a (#1)]
    ├── read rows: 10
    ├── read size: < 1 KiB
    ├── partitions total: 1
    ├── partitions scanned: 1
    ├── pruning stats: [segments: <range pruning: 1 to 1>, blocks: <range pruning: 1 to 1>]
    ├── push downs: [filters: [], limit: NONE]
    └── estimated rows: 10.00

query T
explain select * from t full join t t1 on t.a = t1.a
----
HashJoin
├── output columns: [t.a (#0), t1.a (#1)]
├── join type: FULL OUTER
├── build keys: [t1.a (#1)]
├── probe keys: [t.a (#0)]
├── keys is null equal: [false]
├── filters: []
├── estimated rows: 10.00
├── TableScan(Build)
│   ├── table: default.eliminate_outer_join.t
│   ├── output columns: [a (#1)]
│   ├── read rows: 10
│   ├── read size: < 1 KiB
│   ├── partitions total: 1
│   ├── partitions scanned: 1
│   ├── pruning stats: [segments: <range pruning: 1 to 1>, blocks: <range pruning: 1 to 1>]
│   ├── push downs: [filters: [], limit: NONE]
│   └── estimated rows: 10.00
└── TableScan(Probe)
    ├── table: default.eliminate_outer_join.t
    ├── output columns: [a (#0)]
    ├── read rows: 10
    ├── read size: < 1 KiB
    ├── partitions total: 1
    ├── partitions scanned: 1
    ├── pruning stats: [segments: <range pruning: 1 to 1>, blocks: <range pruning: 1 to 1>]
    ├── push downs: [filters: [], limit: NONE]
    └── estimated rows: 10.00

query 
explain select * from t left join t t1 on t.a = t1.a where t1.a is not null
----
HashJoin
├── output columns: [t.a (#0), t1.a (#1)]
├── join type: INNER
├── build keys: [t1.a (#1)]
├── probe keys: [t.a (#0)]
├── keys is null equal: [false]
├── filters: []
├── estimated rows: 10.00
├── Filter(Build)
│   ├── output columns: [t1.a (#1)]
│   ├── filters: [is_not_null(t1.a (#1))]
│   ├── estimated rows: 10.00
│   └── TableScan
│       ├── table: default.eliminate_outer_join.t
│       ├── output columns: [a (#1)]
│       ├── read rows: 10
│       ├── read size: < 1 KiB
│       ├── partitions total: 1
│       ├── partitions scanned: 1
│       ├── pruning stats: [segments: <range pruning: 1 to 1>, blocks: <range pruning: 1 to 1>]
│       ├── push downs: [filters: [is_not_null(t.a (#1))], limit: NONE]
│       └── estimated rows: 10.00
└── Filter(Probe)
    ├── output columns: [t.a (#0)]
    ├── filters: [is_not_null(t.a (#0))]
    ├── estimated rows: 10.00
    └── TableScan
        ├── table: default.eliminate_outer_join.t
        ├── output columns: [a (#0)]
        ├── read rows: 10
        ├── read size: < 1 KiB
        ├── partitions total: 1
        ├── partitions scanned: 1
        ├── pruning stats: [segments: <range pruning: 1 to 1>, blocks: <range pruning: 1 to 1>]
        ├── push downs: [filters: [is_not_null(t.a (#0))], limit: NONE]
        └── estimated rows: 10.00

query T
explain select * from t right join t t1 on t.a = t1.a where t.a is not null
----
HashJoin
├── output columns: [t.a (#0), t1.a (#1)]
├── join type: INNER
├── build keys: [t1.a (#1)]
├── probe keys: [t.a (#0)]
├── keys is null equal: [false]
├── filters: []
├── estimated rows: 10.00
├── Filter(Build)
│   ├── output columns: [t1.a (#1)]
│   ├── filters: [is_not_null(t1.a (#1))]
│   ├── estimated rows: 10.00
│   └── TableScan
│       ├── table: default.eliminate_outer_join.t
│       ├── output columns: [a (#1)]
│       ├── read rows: 10
│       ├── read size: < 1 KiB
│       ├── partitions total: 1
│       ├── partitions scanned: 1
│       ├── pruning stats: [segments: <range pruning: 1 to 1>, blocks: <range pruning: 1 to 1>]
│       ├── push downs: [filters: [is_not_null(t.a (#1))], limit: NONE]
│       └── estimated rows: 10.00
└── Filter(Probe)
    ├── output columns: [t.a (#0)]
    ├── filters: [is_not_null(t.a (#0))]
    ├── estimated rows: 10.00
    └── TableScan
        ├── table: default.eliminate_outer_join.t
        ├── output columns: [a (#0)]
        ├── read rows: 10
        ├── read size: < 1 KiB
        ├── partitions total: 1
        ├── partitions scanned: 1
        ├── pruning stats: [segments: <range pruning: 1 to 1>, blocks: <range pruning: 1 to 1>]
        ├── push downs: [filters: [is_not_null(t.a (#0))], limit: NONE]
        └── estimated rows: 10.00

query T
explain select * from t full join t t1 on t.a = t1.a where t.a is not null
----
HashJoin
├── output columns: [t.a (#0), t1.a (#1)]
├── join type: LEFT OUTER
├── build keys: [t1.a (#1)]
├── probe keys: [t.a (#0)]
├── keys is null equal: [false]
├── filters: []
├── estimated rows: 10.00
├── Filter(Build)
│   ├── output columns: [t1.a (#1)]
│   ├── filters: [is_not_null(t1.a (#1))]
│   ├── estimated rows: 10.00
│   └── TableScan
│       ├── table: default.eliminate_outer_join.t
│       ├── output columns: [a (#1)]
│       ├── read rows: 10
│       ├── read size: < 1 KiB
│       ├── partitions total: 1
│       ├── partitions scanned: 1
│       ├── pruning stats: [segments: <range pruning: 1 to 1>, blocks: <range pruning: 1 to 1>]
│       ├── push downs: [filters: [is_not_null(t.a (#1))], limit: NONE]
│       └── estimated rows: 10.00
└── Filter(Probe)
    ├── output columns: [t.a (#0)]
    ├── filters: [is_not_null(t.a (#0))]
    ├── estimated rows: 10.00
    └── TableScan
        ├── table: default.eliminate_outer_join.t
        ├── output columns: [a (#0)]
        ├── read rows: 10
        ├── read size: < 1 KiB
        ├── partitions total: 1
        ├── partitions scanned: 1
        ├── pruning stats: [segments: <range pruning: 1 to 1>, blocks: <range pruning: 1 to 1>]
        ├── push downs: [filters: [is_not_null(t.a (#0))], limit: NONE]
        └── estimated rows: 10.00

query T
explain select * from t full join t t1 on t.a = t1.a where t1.a is not null
----
HashJoin
├── output columns: [t1.a (#1), t.a (#0)]
├── join type: LEFT OUTER
├── build keys: [t.a (#0)]
├── probe keys: [t1.a (#1)]
├── keys is null equal: [false]
├── filters: []
├── estimated rows: 10.00
├── Filter(Build)
│   ├── output columns: [t.a (#0)]
│   ├── filters: [is_not_null(t.a (#0))]
│   ├── estimated rows: 10.00
│   └── TableScan
│       ├── table: default.eliminate_outer_join.t
│       ├── output columns: [a (#0)]
│       ├── read rows: 10
│       ├── read size: < 1 KiB
│       ├── partitions total: 1
│       ├── partitions scanned: 1
│       ├── pruning stats: [segments: <range pruning: 1 to 1>, blocks: <range pruning: 1 to 1>]
│       ├── push downs: [filters: [is_not_null(t.a (#0))], limit: NONE]
│       └── estimated rows: 10.00
└── Filter(Probe)
    ├── output columns: [t1.a (#1)]
    ├── filters: [is_not_null(t1.a (#1))]
    ├── estimated rows: 10.00
    └── TableScan
        ├── table: default.eliminate_outer_join.t
        ├── output columns: [a (#1)]
        ├── read rows: 10
        ├── read size: < 1 KiB
        ├── partitions total: 1
        ├── partitions scanned: 1
        ├── pruning stats: [segments: <range pruning: 1 to 1>, blocks: <range pruning: 1 to 1>]
        ├── push downs: [filters: [is_not_null(t.a (#1))], limit: NONE]
        └── estimated rows: 10.00

query T
explain select * from t left join t t1 on t.a = t1.a where t1.a is not null and t.a is not null
----
HashJoin
├── output columns: [t.a (#0), t1.a (#1)]
├── join type: INNER
├── build keys: [t1.a (#1)]
├── probe keys: [t.a (#0)]
├── keys is null equal: [false]
├── filters: []
├── estimated rows: 10.00
├── Filter(Build)
│   ├── output columns: [t1.a (#1)]
│   ├── filters: [is_not_null(t1.a (#1))]
│   ├── estimated rows: 10.00
│   └── TableScan
│       ├── table: default.eliminate_outer_join.t
│       ├── output columns: [a (#1)]
│       ├── read rows: 10
│       ├── read size: < 1 KiB
│       ├── partitions total: 1
│       ├── partitions scanned: 1
│       ├── pruning stats: [segments: <range pruning: 1 to 1>, blocks: <range pruning: 1 to 1>]
│       ├── push downs: [filters: [is_not_null(t.a (#1))], limit: NONE]
│       └── estimated rows: 10.00
└── Filter(Probe)
    ├── output columns: [t.a (#0)]
    ├── filters: [is_not_null(t.a (#0))]
    ├── estimated rows: 10.00
    └── TableScan
        ├── table: default.eliminate_outer_join.t
        ├── output columns: [a (#0)]
        ├── read rows: 10
        ├── read size: < 1 KiB
        ├── partitions total: 1
        ├── partitions scanned: 1
        ├── pruning stats: [segments: <range pruning: 1 to 1>, blocks: <range pruning: 1 to 1>]
        ├── push downs: [filters: [is_not_null(t.a (#0))], limit: NONE]
        └── estimated rows: 10.00

query T
explain select * from t left join t t1 on t.a = t1.a where t1.a = 1
----
HashJoin
├── output columns: [t.a (#0), t1.a (#1)]
├── join type: INNER
├── build keys: [t1.a (#1)]
├── probe keys: [t.a (#0)]
├── keys is null equal: [false]
├── filters: []
├── estimated rows: 1.00
├── Filter(Build)
│   ├── output columns: [t1.a (#1)]
│   ├── filters: [is_true(t1.a (#1) = 1)]
│   ├── estimated rows: 1.00
│   └── TableScan
│       ├── table: default.eliminate_outer_join.t
│       ├── output columns: [a (#1)]
│       ├── read rows: 10
│       ├── read size: < 1 KiB
│       ├── partitions total: 1
│       ├── partitions scanned: 1
│       ├── pruning stats: [segments: <range pruning: 1 to 1>, blocks: <range pruning: 1 to 1, bloom pruning: 1 to 1>]
│       ├── push downs: [filters: [is_true(t.a (#1) = 1)], limit: NONE]
│       └── estimated rows: 10.00
└── Filter(Probe)
    ├── output columns: [t.a (#0)]
    ├── filters: [is_true(t.a (#0) = 1)]
    ├── estimated rows: 1.00
    └── TableScan
        ├── table: default.eliminate_outer_join.t
        ├── output columns: [a (#0)]
        ├── read rows: 10
        ├── read size: < 1 KiB
        ├── partitions total: 1
        ├── partitions scanned: 1
        ├── pruning stats: [segments: <range pruning: 1 to 1>, blocks: <range pruning: 1 to 1, bloom pruning: 1 to 1>]
        ├── push downs: [filters: [is_true(t.a (#0) = 1)], limit: NONE]
        └── estimated rows: 10.00

query T
explain select * from t left join t t1 on t.a = t1.a where t1.a > 1
----
HashJoin
├── output columns: [t.a (#0), t1.a (#1)]
├── join type: INNER
├── build keys: [t1.a (#1)]
├── probe keys: [t.a (#0)]
├── keys is null equal: [false]
├── filters: []
├── estimated rows: 8.00
├── Filter(Build)
│   ├── output columns: [t1.a (#1)]
│   ├── filters: [is_true(t1.a (#1) > 1)]
│   ├── estimated rows: 8.00
│   └── TableScan
│       ├── table: default.eliminate_outer_join.t
│       ├── output columns: [a (#1)]
│       ├── read rows: 10
│       ├── read size: < 1 KiB
│       ├── partitions total: 1
│       ├── partitions scanned: 1
│       ├── pruning stats: [segments: <range pruning: 1 to 1>, blocks: <range pruning: 1 to 1>]
│       ├── push downs: [filters: [is_true(t.a (#1) > 1)], limit: NONE]
│       └── estimated rows: 10.00
└── Filter(Probe)
    ├── output columns: [t.a (#0)]
    ├── filters: [is_true(t.a (#0) > 1)]
    ├── estimated rows: 8.00
    └── TableScan
        ├── table: default.eliminate_outer_join.t
        ├── output columns: [a (#0)]
        ├── read rows: 10
        ├── read size: < 1 KiB
        ├── partitions total: 1
        ├── partitions scanned: 1
        ├── pruning stats: [segments: <range pruning: 1 to 1>, blocks: <range pruning: 1 to 1>]
        ├── push downs: [filters: [is_true(t.a (#0) > 1)], limit: NONE]
        └── estimated rows: 10.00

query T
explain select * from t left join t t1 on t.a = t1.a where t1.a < 1
----
HashJoin
├── output columns: [t.a (#0), t1.a (#1)]
├── join type: INNER
├── build keys: [t1.a (#1)]
├── probe keys: [t.a (#0)]
├── keys is null equal: [false]
├── filters: []
├── estimated rows: 1.00
├── Filter(Build)
│   ├── output columns: [t1.a (#1)]
│   ├── filters: [is_true(t1.a (#1) < 1)]
│   ├── estimated rows: 1.00
│   └── TableScan
│       ├── table: default.eliminate_outer_join.t
│       ├── output columns: [a (#1)]
│       ├── read rows: 10
│       ├── read size: < 1 KiB
│       ├── partitions total: 1
│       ├── partitions scanned: 1
│       ├── pruning stats: [segments: <range pruning: 1 to 1>, blocks: <range pruning: 1 to 1>]
│       ├── push downs: [filters: [is_true(t.a (#1) < 1)], limit: NONE]
│       └── estimated rows: 10.00
└── Filter(Probe)
    ├── output columns: [t.a (#0)]
    ├── filters: [is_true(t.a (#0) < 1)]
    ├── estimated rows: 1.00
    └── TableScan
        ├── table: default.eliminate_outer_join.t
        ├── output columns: [a (#0)]
        ├── read rows: 10
        ├── read size: < 1 KiB
        ├── partitions total: 1
        ├── partitions scanned: 1
        ├── pruning stats: [segments: <range pruning: 1 to 1>, blocks: <range pruning: 1 to 1>]
        ├── push downs: [filters: [is_true(t.a (#0) < 1)], limit: NONE]
        └── estimated rows: 10.00

query T
explain select * from t left join t t1 on t.a = t1.a where t1.a <> 1
----
HashJoin
├── output columns: [t.a (#0), t1.a (#1)]
├── join type: INNER
├── build keys: [t1.a (#1)]
├── probe keys: [t.a (#0)]
├── keys is null equal: [false]
├── filters: []
├── estimated rows: 9.00
├── Filter(Build)
│   ├── output columns: [t1.a (#1)]
│   ├── filters: [is_true(t1.a (#1) <> 1)]
│   ├── estimated rows: 9.00
│   └── TableScan
│       ├── table: default.eliminate_outer_join.t
│       ├── output columns: [a (#1)]
│       ├── read rows: 10
│       ├── read size: < 1 KiB
│       ├── partitions total: 1
│       ├── partitions scanned: 1
│       ├── pruning stats: [segments: <range pruning: 1 to 1>, blocks: <range pruning: 1 to 1>]
│       ├── push downs: [filters: [is_true(t.a (#1) <> 1)], limit: NONE]
│       └── estimated rows: 10.00
└── Filter(Probe)
    ├── output columns: [t.a (#0)]
    ├── filters: [is_true(t.a (#0) <> 1)]
    ├── estimated rows: 9.00
    └── TableScan
        ├── table: default.eliminate_outer_join.t
        ├── output columns: [a (#0)]
        ├── read rows: 10
        ├── read size: < 1 KiB
        ├── partitions total: 1
        ├── partitions scanned: 1
        ├── pruning stats: [segments: <range pruning: 1 to 1>, blocks: <range pruning: 1 to 1>]
        ├── push downs: [filters: [is_true(t.a (#0) <> 1)], limit: NONE]
        └── estimated rows: 10.00

query T
explain select * from t left join t t1 on t.a = t1.a where t1.a >= 1
----
HashJoin
├── output columns: [t.a (#0), t1.a (#1)]
├── join type: INNER
├── build keys: [t1.a (#1)]
├── probe keys: [t.a (#0)]
├── keys is null equal: [false]
├── filters: []
├── estimated rows: 9.00
├── Filter(Build)
│   ├── output columns: [t1.a (#1)]
│   ├── filters: [is_true(t1.a (#1) >= 1)]
│   ├── estimated rows: 9.00
│   └── TableScan
│       ├── table: default.eliminate_outer_join.t
│       ├── output columns: [a (#1)]
│       ├── read rows: 10
│       ├── read size: < 1 KiB
│       ├── partitions total: 1
│       ├── partitions scanned: 1
│       ├── pruning stats: [segments: <range pruning: 1 to 1>, blocks: <range pruning: 1 to 1>]
│       ├── push downs: [filters: [is_true(t.a (#1) >= 1)], limit: NONE]
│       └── estimated rows: 10.00
└── Filter(Probe)
    ├── output columns: [t.a (#0)]
    ├── filters: [is_true(t.a (#0) >= 1)]
    ├── estimated rows: 9.00
    └── TableScan
        ├── table: default.eliminate_outer_join.t
        ├── output columns: [a (#0)]
        ├── read rows: 10
        ├── read size: < 1 KiB
        ├── partitions total: 1
        ├── partitions scanned: 1
        ├── pruning stats: [segments: <range pruning: 1 to 1>, blocks: <range pruning: 1 to 1>]
        ├── push downs: [filters: [is_true(t.a (#0) >= 1)], limit: NONE]
        └── estimated rows: 10.00

query T
explain select * from t left join t t1 on t.a = t1.a where t1.a <= 1
----
HashJoin
├── output columns: [t.a (#0), t1.a (#1)]
├── join type: INNER
├── build keys: [t1.a (#1)]
├── probe keys: [t.a (#0)]
├── keys is null equal: [false]
├── filters: []
├── estimated rows: 2.00
├── Filter(Build)
│   ├── output columns: [t1.a (#1)]
│   ├── filters: [is_true(t1.a (#1) <= 1)]
│   ├── estimated rows: 2.00
│   └── TableScan
│       ├── table: default.eliminate_outer_join.t
│       ├── output columns: [a (#1)]
│       ├── read rows: 10
│       ├── read size: < 1 KiB
│       ├── partitions total: 1
│       ├── partitions scanned: 1
│       ├── pruning stats: [segments: <range pruning: 1 to 1>, blocks: <range pruning: 1 to 1>]
│       ├── push downs: [filters: [is_true(t.a (#1) <= 1)], limit: NONE]
│       └── estimated rows: 10.00
└── Filter(Probe)
    ├── output columns: [t.a (#0)]
    ├── filters: [is_true(t.a (#0) <= 1)]
    ├── estimated rows: 2.00
    └── TableScan
        ├── table: default.eliminate_outer_join.t
        ├── output columns: [a (#0)]
        ├── read rows: 10
        ├── read size: < 1 KiB
        ├── partitions total: 1
        ├── partitions scanned: 1
        ├── pruning stats: [segments: <range pruning: 1 to 1>, blocks: <range pruning: 1 to 1>]
        ├── push downs: [filters: [is_true(t.a (#0) <= 1)], limit: NONE]
        └── estimated rows: 10.00


query T
explain select * from t left join t t1 on t.a = t1.a where t1.a <= 1 or t.a < 1
----
Filter
├── output columns: [t.a (#0), t1.a (#1)]
├── filters: [is_true((t1.a (#1) <= 1 OR t.a (#0) < 1))]
├── estimated rows: 2.80
└── HashJoin
    ├── output columns: [t.a (#0), t1.a (#1)]
    ├── join type: LEFT OUTER
    ├── build keys: [t1.a (#1)]
    ├── probe keys: [t.a (#0)]
    ├── keys is null equal: [false]
    ├── filters: []
    ├── estimated rows: 10.00
    ├── TableScan(Build)
    │   ├── table: default.eliminate_outer_join.t
    │   ├── output columns: [a (#1)]
    │   ├── read rows: 10
    │   ├── read size: < 1 KiB
    │   ├── partitions total: 1
    │   ├── partitions scanned: 1
    │   ├── pruning stats: [segments: <range pruning: 1 to 1>, blocks: <range pruning: 1 to 1>]
    │   ├── push downs: [filters: [], limit: NONE]
    │   └── estimated rows: 10.00
    └── TableScan(Probe)
        ├── table: default.eliminate_outer_join.t
        ├── output columns: [a (#0)]
        ├── read rows: 10
        ├── read size: < 1 KiB
        ├── partitions total: 1
        ├── partitions scanned: 1
        ├── pruning stats: [segments: <range pruning: 1 to 1>, blocks: <range pruning: 1 to 1>]
        ├── push downs: [filters: [], limit: NONE]
        └── estimated rows: 10.00

query T
explain select * from t left join t t1 on t.a = t1.a where t1.a <= 1 or (t.a > 1 and t1.a > 1)
----
Filter
├── output columns: [t.a (#0), t1.a (#1)]
├── filters: [is_true((t1.a (#1) <= 1 OR (t.a (#0) > 1 AND t1.a (#1) > 1)))]
├── estimated rows: 7.65
└── HashJoin
    ├── output columns: [t.a (#0), t1.a (#1)]
    ├── join type: INNER
    ├── build keys: [t1.a (#1)]
    ├── probe keys: [t.a (#0)]
    ├── keys is null equal: [false]
    ├── filters: []
    ├── estimated rows: 8.40
    ├── Filter(Build)
    │   ├── output columns: [t1.a (#1)]
    │   ├── filters: [is_true((t1.a (#1) <= 1 OR t1.a (#1) > 1))]
    │   ├── estimated rows: 8.40
    │   └── TableScan
    │       ├── table: default.eliminate_outer_join.t
    │       ├── output columns: [a (#1)]
    │       ├── read rows: 10
    │       ├── read size: < 1 KiB
    │       ├── partitions total: 1
    │       ├── partitions scanned: 1
    │       ├── pruning stats: [segments: <range pruning: 1 to 1>, blocks: <range pruning: 1 to 1>]
    │       ├── push downs: [filters: [is_true((t.a (#1) <= 1 OR t.a (#1) > 1))], limit: NONE]
    │       └── estimated rows: 10.00
    └── Filter(Probe)
        ├── output columns: [t.a (#0)]
        ├── filters: [is_true((t.a (#0) <= 1 OR t.a (#0) > 1))]
        ├── estimated rows: 8.40
        └── TableScan
            ├── table: default.eliminate_outer_join.t
            ├── output columns: [a (#0)]
            ├── read rows: 10
            ├── read size: < 1 KiB
            ├── partitions total: 1
            ├── partitions scanned: 1
            ├── pruning stats: [segments: <range pruning: 1 to 1>, blocks: <range pruning: 1 to 1>]
            ├── push downs: [filters: [is_true((t.a (#0) <= 1 OR t.a (#0) > 1))], limit: NONE]
            └── estimated rows: 10.00

query T
explain select * from t left join t t1 on t.a = t1.a where t1.a <= 1 or (t.a > 1 and t.a < 2)
----
Filter
├── output columns: [t.a (#0), t1.a (#1)]
├── filters: [is_true((t1.a (#1) <= 1 OR (t.a (#0) > 1 AND t.a (#0) < 2)))]
├── estimated rows: 3.60
└── HashJoin
    ├── output columns: [t.a (#0), t1.a (#1)]
    ├── join type: LEFT OUTER
    ├── build keys: [t1.a (#1)]
    ├── probe keys: [t.a (#0)]
    ├── keys is null equal: [false]
    ├── filters: []
    ├── estimated rows: 10.00
    ├── TableScan(Build)
    │   ├── table: default.eliminate_outer_join.t
    │   ├── output columns: [a (#1)]
    │   ├── read rows: 10
    │   ├── read size: < 1 KiB
    │   ├── partitions total: 1
    │   ├── partitions scanned: 1
    │   ├── pruning stats: [segments: <range pruning: 1 to 1>, blocks: <range pruning: 1 to 1>]
    │   ├── push downs: [filters: [], limit: NONE]
    │   └── estimated rows: 10.00
    └── TableScan(Probe)
        ├── table: default.eliminate_outer_join.t
        ├── output columns: [a (#0)]
        ├── read rows: 10
        ├── read size: < 1 KiB
        ├── partitions total: 1
        ├── partitions scanned: 1
        ├── pruning stats: [segments: <range pruning: 1 to 1>, blocks: <range pruning: 1 to 1>]
        ├── push downs: [filters: [], limit: NONE]
        └── estimated rows: 10.00

statement ok
create table time_table(a timestamp)

query T
explain select * from time_table t left join time_table t1 on t.a = t1.a where t1.a > '2001-01-01'
----
HashJoin
├── output columns: [t.a (#0), t1.a (#1)]
├── join type: INNER
├── build keys: [t1.a (#1)]
├── probe keys: [t.a (#0)]
├── keys is null equal: [false]
├── filters: []
├── estimated rows: 0.00
├── Filter(Build)
│   ├── output columns: [t1.a (#1)]
│   ├── filters: [is_true(t1.a (#1) > '2001-01-01 00:00:00.000000')]
│   ├── estimated rows: 0.00
│   └── TableScan
│       ├── table: default.eliminate_outer_join.time_table
│       ├── output columns: [a (#1)]
│       ├── read rows: 0
│       ├── read size: 0
│       ├── partitions total: 0
│       ├── partitions scanned: 0
│       ├── push downs: [filters: [is_true(time_table.a (#1) > '2001-01-01 00:00:00.000000')], limit: NONE]
│       └── estimated rows: 0.00
└── Filter(Probe)
    ├── output columns: [t.a (#0)]
    ├── filters: [is_true(t.a (#0) > '2001-01-01 00:00:00.000000')]
    ├── estimated rows: 0.00
    └── TableScan
        ├── table: default.eliminate_outer_join.time_table
        ├── output columns: [a (#0)]
        ├── read rows: 0
        ├── read size: 0
        ├── partitions total: 0
        ├── partitions scanned: 0
        ├── push downs: [filters: [is_true(time_table.a (#0) > '2001-01-01 00:00:00.000000')], limit: NONE]
        └── estimated rows: 0.00



statement ok
drop database eliminate_outer_join
