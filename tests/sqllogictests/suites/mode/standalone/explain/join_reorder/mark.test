query T
explain select * from numbers(10000) where number in (select number from numbers(1000))
----
HashJoin
├── output columns: [numbers.number (#0)]
├── join type: LEFT SEMI
├── build keys: [subquery_1 (#1)]
├── probe keys: [numbers.number (#0)]
├── keys is null equal: [false]
├── filters: []
├── build join filters:
├── estimated rows: 10000.00
├── TableScan(Build)
│   ├── table: default.system.numbers
│   ├── output columns: [number (#1)]
│   ├── read rows: 1000
│   ├── read size: 7.81 KiB
│   ├── partitions total: 1
│   ├── partitions scanned: 1
│   ├── push downs: [filters: [], limit: NONE]
│   └── estimated rows: 1000.00
└── TableScan(Probe)
    ├── table: default.system.numbers
    ├── output columns: [number (#0)]
    ├── read rows: 10000
    ├── read size: 78.12 KiB
    ├── partitions total: 1
    ├── partitions scanned: 1
    ├── push downs: [filters: [], limit: NONE]
    └── estimated rows: 10000.00

query T
explain select * from numbers(1000) where number in (select number from numbers(10000))
----
HashJoin
├── output columns: [numbers.number (#0)]
├── join type: RIGHT SEMI
├── build keys: [numbers.number (#0)]
├── probe keys: [subquery_1 (#1)]
├── keys is null equal: [false]
├── filters: []
├── build join filters:
│   └── filter id:0, build key:numbers.number (#0), probe key:subquery_1 (#1), filter type:inlist,min_max
├── estimated rows: 1000.00
├── TableScan(Build)
│   ├── table: default.system.numbers
│   ├── output columns: [number (#0)]
│   ├── read rows: 1000
│   ├── read size: 7.81 KiB
│   ├── partitions total: 1
│   ├── partitions scanned: 1
│   ├── push downs: [filters: [], limit: NONE]
│   └── estimated rows: 1000.00
└── TableScan(Probe)
    ├── table: default.system.numbers
    ├── output columns: [number (#1)]
    ├── read rows: 10000
    ├── read size: 78.12 KiB
    ├── partitions total: 1
    ├── partitions scanned: 1
    ├── push downs: [filters: [], limit: NONE]
    ├── apply join filters: [#0]
    └── estimated rows: 10000.00

statement ok
drop table if exists t1;

statement ok
drop table if exists t2;

statement ok
create table t1(a int, b int);

statement ok
create table t2(c int, d int);

statement ok
insert into t1 values(1, 2), (2, 3), (3, 4);

statement ok
insert into t2 values(1, 2), (2, 3), (3, 4), (4, 5);

query T
explain SELECT
    (SELECT IF(EXISTS(SELECT 1 FROM t1 WHERE t1.a = t2.c), '1', '0'))
FROM
    t2;
----
EvalScalar
├── output columns: [(SELECT if(EXISTS (SELECT 1 FROM t1 WHERE t1.a = t2.c), '1', '0')) (#6)]
├── expressions: [scalar_subquery_5 (#5)]
├── estimated rows: 4.00
└── HashJoin
    ├── output columns: [if(EXISTS (SELECT 1 FROM t1 WHERE t1.a = t2.c), '1', '0') (#5)]
    ├── join type: LEFT SINGLE
    ├── build keys: [c (#8)]
    ├── probe keys: [c (#0)]
    ├── keys is null equal: [false]
    ├── filters: []
    ├── build join filters:
    ├── estimated rows: 4.00
    ├── EvalScalar(Build)
    │   ├── output columns: [c (#8), if(EXISTS (SELECT 1 FROM t1 WHERE t1.a = t2.c), '1', '0') (#5)]
    │   ├── expressions: [if(CAST(is_true(7 (#7)) AS Boolean NULL), '1', '0')]
    │   ├── estimated rows: 4.00
    │   └── HashJoin
    │       ├── output columns: [c (#8), marker (#7)]
    │       ├── join type: RIGHT MARK
    │       ├── build keys: [a (#2)]
    │       ├── probe keys: [c (#8)]
    │       ├── keys is null equal: [false]
    │       ├── filters: []
    │       ├── build join filters:
    │       ├── estimated rows: 4.00
    │       ├── Filter(Build)
    │       │   ├── output columns: [t1.a (#2)]
    │       │   ├── filters: [is_true(outer.a (#2) = outer.a (#2))]
    │       │   ├── estimated rows: 0.60
    │       │   └── TableScan
    │       │       ├── table: default.default.t1
    │       │       ├── output columns: [a (#2)]
    │       │       ├── read rows: 3
    │       │       ├── read size: < 1 KiB
    │       │       ├── partitions total: 1
    │       │       ├── partitions scanned: 1
    │       │       ├── pruning stats: [segments: <range pruning: 1 to 1>, blocks: <range pruning: 1 to 1>]
    │       │       ├── push downs: [filters: [is_true(t1.a (#2) = t1.a (#2))], limit: NONE]
    │       │       └── estimated rows: 3.00
    │       └── HashJoin(Probe)
    │           ├── output columns: [c (#8)]
    │           ├── join type: CROSS
    │           ├── build keys: []
    │           ├── probe keys: []
    │           ├── keys is null equal: []
    │           ├── filters: []
    │           ├── build join filters:
    │           ├── estimated rows: 4.00
    │           ├── DummyTableScan(Build)
    │           └── AggregateFinal(Probe)
    │               ├── output columns: [c (#8)]
    │               ├── group by: [c]
    │               ├── aggregate functions: []
    │               ├── estimated rows: 4.00
    │               └── AggregatePartial
    │                   ├── group by: [c]
    │                   ├── aggregate functions: []
    │                   ├── estimated rows: 4.00
    │                   └── TableScan
    │                       ├── table: default.default.t2
    │                       ├── output columns: [c (#8)]
    │                       ├── read rows: 4
    │                       ├── read size: < 1 KiB
    │                       ├── partitions total: 1
    │                       ├── partitions scanned: 1
    │                       ├── pruning stats: [segments: <range pruning: 1 to 1>, blocks: <range pruning: 1 to 1>]
    │                       ├── push downs: [filters: [], limit: NONE]
    │                       └── estimated rows: 4.00
    └── TableScan(Probe)
        ├── table: default.default.t2
        ├── output columns: [c (#0)]
        ├── read rows: 4
        ├── read size: < 1 KiB
        ├── partitions total: 1
        ├── partitions scanned: 1
        ├── pruning stats: [segments: <range pruning: 1 to 1>, blocks: <range pruning: 1 to 1>]
        ├── push downs: [filters: [], limit: NONE]
        └── estimated rows: 4.00



statement ok
drop table t1;

statement ok
drop table t2
