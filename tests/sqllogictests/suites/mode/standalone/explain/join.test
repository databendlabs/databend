statement ok
drop table if exists t

statement ok
drop table if exists t1

statement ok
drop table if exists t2

statement ok
settings (ddl_column_type_nullable=0) create table t as select number from numbers(1)

statement ok
settings (ddl_column_type_nullable=0) create table t1 as select number from numbers(10)

statement ok
settings (ddl_column_type_nullable=0) create table t2 as select number from numbers(100)

query T
explain select t.number from t, t1 where t.number = t1.number
----
HashJoin
├── output columns: [t.number (#0)]
├── join type: INNER
├── build keys: [t.number (#0)]
├── probe keys: [t1.number (#1)]
├── keys is null equal: [false]
├── filters: []
├── estimated rows: 1.00
├── TableScan(Build)
│   ├── table: default.default.t
│   ├── output columns: [number (#0)]
│   ├── read rows: 1
│   ├── read size: < 1 KiB
│   ├── partitions total: 1
│   ├── partitions scanned: 1
│   ├── pruning stats: [segments: <range pruning: 1 to 1>, blocks: <range pruning: 1 to 1>]
│   ├── push downs: [filters: [], limit: NONE]
│   └── estimated rows: 1.00
└── TableScan(Probe)
    ├── table: default.default.t1
    ├── output columns: [number (#1)]
    ├── read rows: 10
    ├── read size: < 1 KiB
    ├── partitions total: 1
    ├── partitions scanned: 1
    ├── pruning stats: [segments: <range pruning: 1 to 1>, blocks: <range pruning: 1 to 1>]
    ├── push downs: [filters: [], limit: NONE]
    └── estimated rows: 10.00

query T
explain select t.number from t, t1 where t.number = t1.number and t.number = t1.number + 1
----
HashJoin
├── output columns: [t.number (#0)]
├── join type: INNER
├── build keys: [t.number (#0), t.number (#0)]
├── probe keys: [t1.number (#1), t1.number (#1) + 1]
├── keys is null equal: [false, false]
├── filters: []
├── estimated rows: 1.00
├── TableScan(Build)
│   ├── table: default.default.t
│   ├── output columns: [number (#0)]
│   ├── read rows: 1
│   ├── read size: < 1 KiB
│   ├── partitions total: 1
│   ├── partitions scanned: 1
│   ├── pruning stats: [segments: <range pruning: 1 to 1>, blocks: <range pruning: 1 to 1>]
│   ├── push downs: [filters: [], limit: NONE]
│   └── estimated rows: 1.00
└── Filter(Probe)
    ├── output columns: [t1.number (#1)]
    ├── filters: [t1.number (#1) = t1.number (#1) + 1]
    ├── estimated rows: 2.00
    └── TableScan
        ├── table: default.default.t1
        ├── output columns: [number (#1)]
        ├── read rows: 10
        ├── read size: < 1 KiB
        ├── partitions total: 1
        ├── partitions scanned: 1
        ├── pruning stats: [segments: <range pruning: 1 to 1>, blocks: <range pruning: 1 to 1>]
        ├── push downs: [filters: [t1.number (#1) = t1.number (#1) + 1], limit: NONE]
        └── estimated rows: 10.00

query T
explain select t.number from t, t1 where t.number > 1 and 1 < t1.number
----
HashJoin
├── output columns: [t.number (#0)]
├── join type: CROSS
├── build keys: []
├── probe keys: []
├── keys is null equal: []
├── filters: []
├── estimated rows: 0.00
├── Filter(Build)
│   ├── output columns: [t.number (#0)]
│   ├── filters: [t.number (#0) > 1]
│   ├── estimated rows: 0.00
│   └── TableScan
│       ├── table: default.default.t
│       ├── output columns: [number (#0)]
│       ├── read rows: 0
│       ├── read size: 0
│       ├── partitions total: 1
│       ├── partitions scanned: 0
│       ├── pruning stats: [segments: <range pruning: 1 to 0>]
│       ├── push downs: [filters: [t.number (#0) > 1], limit: NONE]
│       └── estimated rows: 1.00
└── Filter(Probe)
    ├── output columns: []
    ├── filters: [t1.number (#1) > 1]
    ├── estimated rows: 8.00
    └── TableScan
        ├── table: default.default.t1
        ├── output columns: [number (#1)]
        ├── read rows: 10
        ├── read size: < 1 KiB
        ├── partitions total: 1
        ├── partitions scanned: 1
        ├── pruning stats: [segments: <range pruning: 1 to 1>, blocks: <range pruning: 1 to 1>]
        ├── push downs: [filters: [t1.number (#1) > 1], limit: NONE]
        └── estimated rows: 10.00

query T
explain select t.number from t, t1 where t.number + t1.number = 1
----
Filter
├── output columns: [t.number (#0)]
├── filters: [t.number (#0) + t1.number (#1) = 1]
├── estimated rows: 2.00
└── HashJoin
    ├── output columns: [t1.number (#1), t.number (#0)]
    ├── join type: CROSS
    ├── build keys: []
    ├── probe keys: []
    ├── keys is null equal: []
    ├── filters: []
    ├── estimated rows: 10.00
    ├── TableScan(Build)
    │   ├── table: default.default.t
    │   ├── output columns: [number (#0)]
    │   ├── read rows: 1
    │   ├── read size: < 1 KiB
    │   ├── partitions total: 1
    │   ├── partitions scanned: 1
    │   ├── pruning stats: [segments: <range pruning: 1 to 1>, blocks: <range pruning: 1 to 1>]
    │   ├── push downs: [filters: [], limit: NONE]
    │   └── estimated rows: 1.00
    └── TableScan(Probe)
        ├── table: default.default.t1
        ├── output columns: [number (#1)]
        ├── read rows: 10
        ├── read size: < 1 KiB
        ├── partitions total: 1
        ├── partitions scanned: 1
        ├── pruning stats: [segments: <range pruning: 1 to 1>, blocks: <range pruning: 1 to 1>]
        ├── push downs: [filters: [], limit: NONE]
        └── estimated rows: 10.00


query T
explain select t.number from t, t1, t2 where t1.number = t2.number and t.number = 1
----
HashJoin
├── output columns: [t.number (#0)]
├── join type: INNER
├── build keys: [t1.number (#1)]
├── probe keys: [t2.number (#2)]
├── keys is null equal: [false]
├── filters: []
├── estimated rows: 0.00
├── HashJoin(Build)
│   ├── output columns: [t1.number (#1), t.number (#0)]
│   ├── join type: CROSS
│   ├── build keys: []
│   ├── probe keys: []
│   ├── keys is null equal: []
│   ├── filters: []
│   ├── estimated rows: 0.00
│   ├── Filter(Build)
│   │   ├── output columns: [t.number (#0)]
│   │   ├── filters: [t.number (#0) = 1]
│   │   ├── estimated rows: 0.00
│   │   └── TableScan
│   │       ├── table: default.default.t
│   │       ├── output columns: [number (#0)]
│   │       ├── read rows: 0
│   │       ├── read size: 0
│   │       ├── partitions total: 1
│   │       ├── partitions scanned: 0
│   │       ├── pruning stats: [segments: <range pruning: 1 to 0>]
│   │       ├── push downs: [filters: [t.number (#0) = 1], limit: NONE]
│   │       └── estimated rows: 1.00
│   └── TableScan(Probe)
│       ├── table: default.default.t1
│       ├── output columns: [number (#1)]
│       ├── read rows: 10
│       ├── read size: < 1 KiB
│       ├── partitions total: 1
│       ├── partitions scanned: 1
│       ├── pruning stats: [segments: <range pruning: 1 to 1>, blocks: <range pruning: 1 to 1>]
│       ├── push downs: [filters: [], limit: NONE]
│       └── estimated rows: 10.00
└── TableScan(Probe)
    ├── table: default.default.t2
    ├── output columns: [number (#2)]
    ├── read rows: 100
    ├── read size: < 1 KiB
    ├── partitions total: 1
    ├── partitions scanned: 1
    ├── pruning stats: [segments: <range pruning: 1 to 1>, blocks: <range pruning: 1 to 1>]
    ├── push downs: [filters: [], limit: NONE]
    └── estimated rows: 100.00

# check outer join is converted to inner join

statement ok
drop table if exists onecolumn

statement ok
CREATE TABLE onecolumn (x INT NULL)

statement ok
INSERT INTO onecolumn(x) VALUES (44), (NULL), (42), (42)

statement ok
drop table if exists twocolumn

statement ok
CREATE TABLE twocolumn (x INT NULL, y INT NULL)

statement ok
INSERT INTO twocolumn(x, y) VALUES (44,51), (NULL,52), (42,53), (45,45)

query T
explain select * from onecolumn as a left join twocolumn as b on a.x = b.x where b.x > 42
----
HashJoin
├── output columns: [a.x (#0), b.y (#2), b.x (#1)]
├── join type: INNER
├── build keys: [b.x (#1)]
├── probe keys: [a.x (#0)]
├── keys is null equal: [false]
├── filters: []
├── estimated rows: 2.37
├── Filter(Build)
│   ├── output columns: [b.x (#1), b.y (#2)]
│   ├── filters: [is_true(b.x (#1) > 42)]
│   ├── estimated rows: 2.67
│   └── TableScan
│       ├── table: default.default.twocolumn
│       ├── output columns: [x (#1), y (#2)]
│       ├── read rows: 4
│       ├── read size: < 1 KiB
│       ├── partitions total: 1
│       ├── partitions scanned: 1
│       ├── pruning stats: [segments: <range pruning: 1 to 1>, blocks: <range pruning: 1 to 1>]
│       ├── push downs: [filters: [is_true(twocolumn.x (#1) > 42)], limit: NONE]
│       └── estimated rows: 4.00
└── Filter(Probe)
    ├── output columns: [a.x (#0)]
    ├── filters: [is_true(a.x (#0) > 42)]
    ├── estimated rows: 2.67
    └── TableScan
        ├── table: default.default.onecolumn
        ├── output columns: [x (#0)]
        ├── read rows: 4
        ├── read size: < 1 KiB
        ├── partitions total: 1
        ├── partitions scanned: 1
        ├── pruning stats: [segments: <range pruning: 1 to 1>, blocks: <range pruning: 1 to 1>]
        ├── push downs: [filters: [is_true(onecolumn.x (#0) > 42)], limit: NONE]
        └── estimated rows: 4.00

query T
explain select * from onecolumn as a left join twocolumn as b on a.x = b.x where b.x > 44 or b.x < 43
----
HashJoin
├── output columns: [b.x (#1), b.y (#2), a.x (#0)]
├── join type: INNER
├── build keys: [a.x (#0)]
├── probe keys: [b.x (#1)]
├── keys is null equal: [false]
├── filters: []
├── estimated rows: 1.33
├── Filter(Build)
│   ├── output columns: [a.x (#0)]
│   ├── filters: [is_true((a.x (#0) > 44 OR a.x (#0) < 43))]
│   ├── estimated rows: 1.33
│   └── TableScan
│       ├── table: default.default.onecolumn
│       ├── output columns: [x (#0)]
│       ├── read rows: 4
│       ├── read size: < 1 KiB
│       ├── partitions total: 1
│       ├── partitions scanned: 1
│       ├── pruning stats: [segments: <range pruning: 1 to 1>, blocks: <range pruning: 1 to 1>]
│       ├── push downs: [filters: [is_true((onecolumn.x (#0) > 44 OR onecolumn.x (#0) < 43))], limit: NONE]
│       └── estimated rows: 4.00
└── Filter(Probe)
    ├── output columns: [b.x (#1), b.y (#2)]
    ├── filters: [is_true((b.x (#1) > 44 OR b.x (#1) < 43))]
    ├── estimated rows: 2.00
    └── TableScan
        ├── table: default.default.twocolumn
        ├── output columns: [x (#1), y (#2)]
        ├── read rows: 4
        ├── read size: < 1 KiB
        ├── partitions total: 1
        ├── partitions scanned: 1
        ├── pruning stats: [segments: <range pruning: 1 to 1>, blocks: <range pruning: 1 to 1>]
        ├── push downs: [filters: [is_true((twocolumn.x (#1) > 44 OR twocolumn.x (#1) < 43))], limit: NONE]
        └── estimated rows: 4.00

query T
explain select * from onecolumn as a left join twocolumn as b on a.x = b.x where b.x > 42 and b.x < 45
----
HashJoin
├── output columns: [a.x (#0), b.y (#2), b.x (#1)]
├── join type: INNER
├── build keys: [b.x (#1)]
├── probe keys: [a.x (#0)]
├── keys is null equal: [false]
├── filters: []
├── estimated rows: 2.37
├── Filter(Build)
│   ├── output columns: [b.x (#1), b.y (#2)]
│   ├── filters: [is_true(b.x (#1) > 42), is_true(b.x (#1) < 45)]
│   ├── estimated rows: 2.67
│   └── TableScan
│       ├── table: default.default.twocolumn
│       ├── output columns: [x (#1), y (#2)]
│       ├── read rows: 4
│       ├── read size: < 1 KiB
│       ├── partitions total: 1
│       ├── partitions scanned: 1
│       ├── pruning stats: [segments: <range pruning: 1 to 1>, blocks: <range pruning: 1 to 1>]
│       ├── push downs: [filters: [and_filters(twocolumn.x (#1) > 42, twocolumn.x (#1) < 45)], limit: NONE]
│       └── estimated rows: 4.00
└── Filter(Probe)
    ├── output columns: [a.x (#0)]
    ├── filters: [is_true(a.x (#0) > 42), is_true(a.x (#0) < 45)]
    ├── estimated rows: 2.67
    └── TableScan
        ├── table: default.default.onecolumn
        ├── output columns: [x (#0)]
        ├── read rows: 4
        ├── read size: < 1 KiB
        ├── partitions total: 1
        ├── partitions scanned: 1
        ├── pruning stats: [segments: <range pruning: 1 to 1>, blocks: <range pruning: 1 to 1>]
        ├── push downs: [filters: [and_filters(onecolumn.x (#0) > 42, onecolumn.x (#0) < 45)], limit: NONE]
        └── estimated rows: 4.00

# the following cases won't be converted to inner join

query T
explain select * from onecolumn as a left join twocolumn as b on a.x = b.x where b.x > 44 or a.x < 43
----
Filter
├── output columns: [a.x (#0), b.x (#1), b.y (#2)]
├── filters: [is_true((b.x (#1) > 44 OR a.x (#0) < 43))]
├── estimated rows: 1.33
└── HashJoin
    ├── output columns: [a.x (#0), b.x (#1), b.y (#2)]
    ├── join type: LEFT OUTER
    ├── build keys: [b.x (#1)]
    ├── probe keys: [a.x (#0)]
    ├── keys is null equal: [false]
    ├── filters: []
    ├── estimated rows: 4.00
    ├── TableScan(Build)
    │   ├── table: default.default.twocolumn
    │   ├── output columns: [x (#1), y (#2)]
    │   ├── read rows: 4
    │   ├── read size: < 1 KiB
    │   ├── partitions total: 1
    │   ├── partitions scanned: 1
    │   ├── pruning stats: [segments: <range pruning: 1 to 1>, blocks: <range pruning: 1 to 1>]
    │   ├── push downs: [filters: [], limit: NONE]
    │   └── estimated rows: 4.00
    └── TableScan(Probe)
        ├── table: default.default.onecolumn
        ├── output columns: [x (#0)]
        ├── read rows: 4
        ├── read size: < 1 KiB
        ├── partitions total: 1
        ├── partitions scanned: 1
        ├── pruning stats: [segments: <range pruning: 1 to 1>, blocks: <range pruning: 1 to 1>]
        ├── push downs: [filters: [], limit: NONE]
        └── estimated rows: 4.00

query T
explain select * from onecolumn as a right join twocolumn as b on a.x = b.x where b.x > 42 and b.x < 45
----
HashJoin
├── output columns: [b.x (#1), b.y (#2), a.x (#0)]
├── join type: LEFT OUTER
├── build keys: [a.x (#0)]
├── probe keys: [b.x (#1)]
├── keys is null equal: [false]
├── filters: []
├── estimated rows: 2.67
├── Filter(Build)
│   ├── output columns: [a.x (#0)]
│   ├── filters: [is_true(a.x (#0) > 42), is_true(a.x (#0) < 45)]
│   ├── estimated rows: 2.67
│   └── TableScan
│       ├── table: default.default.onecolumn
│       ├── output columns: [x (#0)]
│       ├── read rows: 4
│       ├── read size: < 1 KiB
│       ├── partitions total: 1
│       ├── partitions scanned: 1
│       ├── pruning stats: [segments: <range pruning: 1 to 1>, blocks: <range pruning: 1 to 1>]
│       ├── push downs: [filters: [and_filters(onecolumn.x (#0) > 42, onecolumn.x (#0) < 45)], limit: NONE]
│       └── estimated rows: 4.00
└── Filter(Probe)
    ├── output columns: [b.x (#1), b.y (#2)]
    ├── filters: [is_true(b.x (#1) > 42), is_true(b.x (#1) < 45)]
    ├── estimated rows: 2.67
    └── TableScan
        ├── table: default.default.twocolumn
        ├── output columns: [x (#1), y (#2)]
        ├── read rows: 4
        ├── read size: < 1 KiB
        ├── partitions total: 1
        ├── partitions scanned: 1
        ├── pruning stats: [segments: <range pruning: 1 to 1>, blocks: <range pruning: 1 to 1>]
        ├── push downs: [filters: [and_filters(twocolumn.x (#1) > 42, twocolumn.x (#1) < 45)], limit: NONE]
        └── estimated rows: 4.00

statement ok
drop table t

statement ok
drop table t1

statement ok
drop table t2

statement ok
create table t1 (a int, b int)

statement ok
create table t2 (a int, b int)

query T
explain select * from t1 inner join t2 on t1.a = t2.a where t1.a > 10
----
HashJoin
├── output columns: [t1.a (#0), t1.b (#1), t2.b (#3), t2.a (#2)]
├── join type: INNER
├── build keys: [t2.a (#2)]
├── probe keys: [t1.a (#0)]
├── keys is null equal: [false]
├── filters: []
├── estimated rows: 0.00
├── Filter(Build)
│   ├── output columns: [t2.a (#2), t2.b (#3)]
│   ├── filters: [is_true(t2.a (#2) > 10)]
│   ├── estimated rows: 0.00
│   └── TableScan
│       ├── table: default.default.t2
│       ├── output columns: [a (#2), b (#3)]
│       ├── read rows: 0
│       ├── read size: 0
│       ├── partitions total: 0
│       ├── partitions scanned: 0
│       ├── push downs: [filters: [is_true(t2.a (#2) > 10)], limit: NONE]
│       └── estimated rows: 0.00
└── Filter(Probe)
    ├── output columns: [t1.a (#0), t1.b (#1)]
    ├── filters: [is_true(t1.a (#0) > 10)]
    ├── estimated rows: 0.00
    └── TableScan
        ├── table: default.default.t1
        ├── output columns: [a (#0), b (#1)]
        ├── read rows: 0
        ├── read size: 0
        ├── partitions total: 0
        ├── partitions scanned: 0
        ├── push downs: [filters: [is_true(t1.a (#0) > 10)], limit: NONE]
        └── estimated rows: 0.00

query T
explain select * from t1 inner join t2 on t1.a = t2.a where t1.a + t1.b> 10
----
HashJoin
├── output columns: [t1.a (#0), t1.b (#1), t2.b (#3), t2.a (#2)]
├── join type: INNER
├── build keys: [t2.a (#2)]
├── probe keys: [t1.a (#0)]
├── keys is null equal: [false]
├── filters: []
├── estimated rows: 0.00
├── TableScan(Build)
│   ├── table: default.default.t2
│   ├── output columns: [a (#2), b (#3)]
│   ├── read rows: 0
│   ├── read size: 0
│   ├── partitions total: 0
│   ├── partitions scanned: 0
│   ├── push downs: [filters: [], limit: NONE]
│   └── estimated rows: 0.00
└── Filter(Probe)
    ├── output columns: [t1.a (#0), t1.b (#1)]
    ├── filters: [is_true(t1.a (#0) + t1.b (#1) > 10)]
    ├── estimated rows: 0.00
    └── TableScan
        ├── table: default.default.t1
        ├── output columns: [a (#0), b (#1)]
        ├── read rows: 0
        ├── read size: 0
        ├── partitions total: 0
        ├── partitions scanned: 0
        ├── push downs: [filters: [is_true(t1.a (#0) + t1.b (#1) > 10)], limit: NONE]
        └── estimated rows: 0.00

query T
explain select * from t1 inner join t2 on t1.a = t2.a and t1.b = t2.b  where t2.a > 10
----
HashJoin
├── output columns: [t1.a (#0), t1.b (#1), t2.a (#2), t2.b (#3)]
├── join type: INNER
├── build keys: [t2.a (#2), t2.b (#3)]
├── probe keys: [t1.a (#0), t1.b (#1)]
├── keys is null equal: [false, false]
├── filters: []
├── estimated rows: 0.00
├── Filter(Build)
│   ├── output columns: [t2.a (#2), t2.b (#3)]
│   ├── filters: [is_true(t2.a (#2) > 10)]
│   ├── estimated rows: 0.00
│   └── TableScan
│       ├── table: default.default.t2
│       ├── output columns: [a (#2), b (#3)]
│       ├── read rows: 0
│       ├── read size: 0
│       ├── partitions total: 0
│       ├── partitions scanned: 0
│       ├── push downs: [filters: [is_true(t2.a (#2) > 10)], limit: NONE]
│       └── estimated rows: 0.00
└── Filter(Probe)
    ├── output columns: [t1.a (#0), t1.b (#1)]
    ├── filters: [is_true(t1.a (#0) > 10)]
    ├── estimated rows: 0.00
    └── TableScan
        ├── table: default.default.t1
        ├── output columns: [a (#0), b (#1)]
        ├── read rows: 0
        ├── read size: 0
        ├── partitions total: 0
        ├── partitions scanned: 0
        ├── push downs: [filters: [is_true(t1.a (#0) > 10)], limit: NONE]
        └── estimated rows: 0.00

query T
explain select * from t1 inner join t2 on t1.a = t2.a and t1.b = t2.b  where t2.a + t2.b> 10
----
HashJoin
├── output columns: [t1.a (#0), t1.b (#1), t2.a (#2), t2.b (#3)]
├── join type: INNER
├── build keys: [t2.a (#2), t2.b (#3)]
├── probe keys: [t1.a (#0), t1.b (#1)]
├── keys is null equal: [false, false]
├── filters: []
├── estimated rows: 0.00
├── Filter(Build)
│   ├── output columns: [t2.a (#2), t2.b (#3)]
│   ├── filters: [is_true(t2.a (#2) + t2.b (#3) > 10)]
│   ├── estimated rows: 0.00
│   └── TableScan
│       ├── table: default.default.t2
│       ├── output columns: [a (#2), b (#3)]
│       ├── read rows: 0
│       ├── read size: 0
│       ├── partitions total: 0
│       ├── partitions scanned: 0
│       ├── push downs: [filters: [is_true(t2.a (#2) + t2.b (#3) > 10)], limit: NONE]
│       └── estimated rows: 0.00
└── Filter(Probe)
    ├── output columns: [t1.a (#0), t1.b (#1)]
    ├── filters: [is_true(t1.a (#0) + t1.b (#1) > 10)]
    ├── estimated rows: 0.00
    └── TableScan
        ├── table: default.default.t1
        ├── output columns: [a (#0), b (#1)]
        ├── read rows: 0
        ├── read size: 0
        ├── partitions total: 0
        ├── partitions scanned: 0
        ├── push downs: [filters: [is_true(t1.a (#0) + t1.b (#1) > 10)], limit: NONE]
        └── estimated rows: 0.00

query T
explain select * from t1 inner join t2 on t1.a = t2.a and t1.b = t2.b  where t1.b + t1.a> 10
----
HashJoin
├── output columns: [t1.a (#0), t1.b (#1), t2.a (#2), t2.b (#3)]
├── join type: INNER
├── build keys: [t2.a (#2), t2.b (#3)]
├── probe keys: [t1.a (#0), t1.b (#1)]
├── keys is null equal: [false, false]
├── filters: []
├── estimated rows: 0.00
├── Filter(Build)
│   ├── output columns: [t2.a (#2), t2.b (#3)]
│   ├── filters: [is_true(t2.b (#3) + t2.a (#2) > 10)]
│   ├── estimated rows: 0.00
│   └── TableScan
│       ├── table: default.default.t2
│       ├── output columns: [a (#2), b (#3)]
│       ├── read rows: 0
│       ├── read size: 0
│       ├── partitions total: 0
│       ├── partitions scanned: 0
│       ├── push downs: [filters: [is_true(t2.b (#3) + t2.a (#2) > 10)], limit: NONE]
│       └── estimated rows: 0.00
└── Filter(Probe)
    ├── output columns: [t1.a (#0), t1.b (#1)]
    ├── filters: [is_true(t1.b (#1) + t1.a (#0) > 10)]
    ├── estimated rows: 0.00
    └── TableScan
        ├── table: default.default.t1
        ├── output columns: [a (#0), b (#1)]
        ├── read rows: 0
        ├── read size: 0
        ├── partitions total: 0
        ├── partitions scanned: 0
        ├── push downs: [filters: [is_true(t1.b (#1) + t1.a (#0) > 10)], limit: NONE]
        └── estimated rows: 0.00


query T
explain select * from t1, t2 where t1.a = t2.a and t1.b > t2.b
----
HashJoin
├── output columns: [t1.a (#0), t1.b (#1), t2.b (#3), t2.a (#2)]
├── join type: INNER
├── build keys: [t2.a (#2)]
├── probe keys: [t1.a (#0)]
├── keys is null equal: [false]
├── filters: [t1.b (#1) > t2.b (#3)]
├── estimated rows: 0.00
├── TableScan(Build)
│   ├── table: default.default.t2
│   ├── output columns: [a (#2), b (#3)]
│   ├── read rows: 0
│   ├── read size: 0
│   ├── partitions total: 0
│   ├── partitions scanned: 0
│   ├── push downs: [filters: [], limit: NONE]
│   └── estimated rows: 0.00
└── TableScan(Probe)
    ├── table: default.default.t1
    ├── output columns: [a (#0), b (#1)]
    ├── read rows: 0
    ├── read size: 0
    ├── partitions total: 0
    ├── partitions scanned: 0
    ├── push downs: [filters: [], limit: NONE]
    └── estimated rows: 0.00

statement ok
drop table t1

statement ok
drop table t2

# https://github.com/datafuselabs/databend/issues/10523
statement ok
settings (ddl_column_type_nullable=0) create table t1 as select * from numbers(1)

statement ok
set enable_cbo = 0

query I
select t1.number FROM
t1
CROSS JOIN
t1 AS t2,
t1 AS t3,
t1 AS t4,
t1 AS t5,
t1 AS t6,
t1 AS t7,
t1 AS t8,
t1 AS t9,
t1 AS t10,
t1 AS t11,
t1 AS t12,
t1 AS t13,
t1 AS t14,
t1 AS t15,
t1 AS t16,
t1 AS t17,
t1 AS t18,
t1 AS t19,
t1 AS t20
----
0

query I
SELECT t20.number
FROM
((((((((((((((((((
t1 AS t20
CROSS JOIN t1 AS t19)
CROSS JOIN t1 AS t18)
CROSS JOIN t1 AS t17)
CROSS JOIN t1 AS t16)
CROSS JOIN t1 AS t15)
CROSS JOIN t1 AS t14)
CROSS JOIN t1 AS t13)
CROSS JOIN t1 AS t12)
CROSS JOIN t1 AS t11)
CROSS JOIN t1 AS t10)
CROSS JOIN t1 AS t9)
CROSS JOIN t1 AS t8)
CROSS JOIN t1 AS t7)
CROSS JOIN t1 AS t6)
CROSS JOIN t1 AS t5)
CROSS JOIN t1 AS t4)
CROSS JOIN t1 AS t3)
CROSS JOIN t1 AS t2)
CROSS JOIN t1
----
0

statement ok
set enable_cbo = 1

statement ok
drop table t1

statement ok
CREATE TABLE IF NOT EXISTS onecolumn (x INT NULL);

statement ok
INSERT INTO onecolumn(x) VALUES (44), (NULL), (42);

statement ok
CREATE TABLE IF NOT EXISTS twocolumn (x INT NULL, y INT NULL);

statement ok
INSERT INTO twocolumn(x, y) VALUES (44,51), (NULL,52), (42,53), (45,45);

query T
explain SELECT o.x, t.y FROM onecolumn o INNER JOIN twocolumn t ON (o.x=t.x AND t.y=53);
----
HashJoin
├── output columns: [o.x (#0), t.y (#2)]
├── join type: INNER
├── build keys: [t.x (#1)]
├── probe keys: [o.x (#0)]
├── keys is null equal: [false]
├── filters: []
├── estimated rows: 2.33
├── Filter(Build)
│   ├── output columns: [t.x (#1), t.y (#2)]
│   ├── filters: [is_true(t.y (#2) = 53)]
│   ├── estimated rows: 1.00
│   └── TableScan
│       ├── table: default.default.twocolumn
│       ├── output columns: [x (#1), y (#2)]
│       ├── read rows: 8
│       ├── read size: < 1 KiB
│       ├── partitions total: 2
│       ├── partitions scanned: 2
│       ├── pruning stats: [segments: <range pruning: 2 to 2>, blocks: <range pruning: 2 to 2, bloom pruning: 2 to 2>]
│       ├── push downs: [filters: [is_true(twocolumn.y (#2) = 53)], limit: NONE]
│       └── estimated rows: 8.00
└── TableScan(Probe)
    ├── table: default.default.onecolumn
    ├── output columns: [x (#0)]
    ├── read rows: 7
    ├── read size: < 1 KiB
    ├── partitions total: 2
    ├── partitions scanned: 2
    ├── pruning stats: [segments: <range pruning: 2 to 2>, blocks: <range pruning: 2 to 2>]
    ├── push downs: [filters: [], limit: NONE]
    └── estimated rows: 7.00


statement ok
drop table onecolumn;

statement ok
drop table twocolumn;

# Check if `disable_join_reorder` takes effect
statement ok
set disable_join_reorder = 1;

query T
explain select * from numbers(10) as t1 join numbers(20) as t2 on t1.number = t2.number;
----
HashJoin
├── output columns: [t1.number (#0), t2.number (#1)]
├── join type: INNER
├── build keys: [t2.number (#1)]
├── probe keys: [t1.number (#0)]
├── keys is null equal: [false]
├── filters: []
├── estimated rows: 200.00
├── TableScan(Build)
│   ├── table: default.system.numbers
│   ├── output columns: [number (#1)]
│   ├── read rows: 20
│   ├── read size: < 1 KiB
│   ├── partitions total: 1
│   ├── partitions scanned: 1
│   ├── push downs: [filters: [], limit: NONE]
│   └── estimated rows: 20.00
└── TableScan(Probe)
    ├── table: default.system.numbers
    ├── output columns: [number (#0)]
    ├── read rows: 10
    ├── read size: < 1 KiB
    ├── partitions total: 1
    ├── partitions scanned: 1
    ├── push downs: [filters: [], limit: NONE]
    └── estimated rows: 10.00



statement ok
set disable_join_reorder = 0;


statement ok
create table t1(create_time Date, ext String);

statement ok
create table t2(status int, city_id String, wms_id String);

query T
explain select 1 from (select t1.* from t1) t1 inner join (select * from t2 ) t6 on replace(t1.ext, '33', '44') = t6.wms_id where substr(replace(t1.ext, '33', '44'), 1) = 'R006';
----
EvalScalar
├── output columns: [1 (#5)]
├── expressions: [1]
├── estimated rows: 0.00
└── HashJoin
    ├── output columns: []
    ├── join type: INNER
    ├── build keys: [t6.wms_id (#4)]
    ├── probe keys: [replace(t1.ext (#1), '33', '44')]
    ├── keys is null equal: [false]
    ├── filters: []
    ├── estimated rows: 0.00
    ├── Filter(Build)
    │   ├── output columns: [t2.wms_id (#4)]
    │   ├── filters: [is_true(substr(t2.wms_id (#4), 1) = 'R006')]
    │   ├── estimated rows: 0.00
    │   └── TableScan
    │       ├── table: default.default.t2
    │       ├── output columns: [wms_id (#4)]
    │       ├── read rows: 0
    │       ├── read size: 0
    │       ├── partitions total: 0
    │       ├── partitions scanned: 0
    │       ├── push downs: [filters: [is_true(substr(t2.wms_id (#4), 1) = 'R006')], limit: NONE]
    │       └── estimated rows: 0.00
    └── Filter(Probe)
        ├── output columns: [t1.ext (#1)]
        ├── filters: [is_true(substr(replace(t1.ext (#1), '33', '44'), 1) = 'R006')]
        ├── estimated rows: 0.00
        └── TableScan
            ├── table: default.default.t1
            ├── output columns: [ext (#1)]
            ├── read rows: 0
            ├── read size: 0
            ├── partitions total: 0
            ├── partitions scanned: 0
            ├── push downs: [filters: [is_true(substr(replace(t1.ext (#1), '33', '44'), 1) = 'R006')], limit: NONE]
            └── estimated rows: 0.00

query T
explain select 1 from (select t1.* from t1) t1 inner join (select * from t2 ) t6 on replace(t1.ext, '33', '44') = t6.wms_id where replace(t1.ext, '33', '44') = 'R006';
----
EvalScalar
├── output columns: [1 (#5)]
├── expressions: [1]
├── estimated rows: 0.00
└── HashJoin
    ├── output columns: []
    ├── join type: INNER
    ├── build keys: [t6.wms_id (#4)]
    ├── probe keys: [replace(t1.ext (#1), '33', '44')]
    ├── keys is null equal: [false]
    ├── filters: []
    ├── estimated rows: 0.00
    ├── Filter(Build)
    │   ├── output columns: [t2.wms_id (#4)]
    │   ├── filters: [is_true(t2.wms_id (#4) = 'R006')]
    │   ├── estimated rows: 0.00
    │   └── TableScan
    │       ├── table: default.default.t2
    │       ├── output columns: [wms_id (#4)]
    │       ├── read rows: 0
    │       ├── read size: 0
    │       ├── partitions total: 0
    │       ├── partitions scanned: 0
    │       ├── push downs: [filters: [is_true(t2.wms_id (#4) = 'R006')], limit: NONE]
    │       └── estimated rows: 0.00
    └── Filter(Probe)
        ├── output columns: [t1.ext (#1)]
        ├── filters: [is_true(replace(t1.ext (#1), '33', '44') = 'R006')]
        ├── estimated rows: 0.00
        └── TableScan
            ├── table: default.default.t1
            ├── output columns: [ext (#1)]
            ├── read rows: 0
            ├── read size: 0
            ├── partitions total: 0
            ├── partitions scanned: 0
            ├── push downs: [filters: [is_true(replace(t1.ext (#1), '33', '44') = 'R006')], limit: NONE]
            └── estimated rows: 0.00

query T
explain select 1 from (select t1.* from t1) t1 inner join (select * from t2 ) t6 on replace(t1.ext, '33', '44') = t6.wms_id where replace(substr(t1.ext, 1), '33', '44') = 'R006';
----
EvalScalar
├── output columns: [1 (#5)]
├── expressions: [1]
├── estimated rows: 0.00
└── HashJoin
    ├── output columns: []
    ├── join type: INNER
    ├── build keys: [t6.wms_id (#4)]
    ├── probe keys: [replace(t1.ext (#1), '33', '44')]
    ├── keys is null equal: [false]
    ├── filters: []
    ├── estimated rows: 0.00
    ├── TableScan(Build)
    │   ├── table: default.default.t2
    │   ├── output columns: [wms_id (#4)]
    │   ├── read rows: 0
    │   ├── read size: 0
    │   ├── partitions total: 0
    │   ├── partitions scanned: 0
    │   ├── push downs: [filters: [], limit: NONE]
    │   └── estimated rows: 0.00
    └── Filter(Probe)
        ├── output columns: [t1.ext (#1)]
        ├── filters: [is_true(replace(substr(t1.ext (#1), 1), '33', '44') = 'R006')]
        ├── estimated rows: 0.00
        └── TableScan
            ├── table: default.default.t1
            ├── output columns: [ext (#1)]
            ├── read rows: 0
            ├── read size: 0
            ├── partitions total: 0
            ├── partitions scanned: 0
            ├── push downs: [filters: [is_true(replace(substr(t1.ext (#1), 1), '33', '44') = 'R006')], limit: NONE]
            └── estimated rows: 0.00

statement ok
drop table t1;

statement ok
CREATE OR REPLACE TABLE t1(a INT);

statement ok
CREATE OR REPLACE TABLE t2(a INT);

statement ok
INSERT INTO t1 VALUES(1), (2), (3), (4);

statement ok
INSERT INTO t2 VALUES(1);

query T
EXPLAIN SELECT * FROM t1 WHERE a >= (SELECT MAX(a) FROM t2);
----
HashJoin
├── output columns: [t1.a (#0)]
├── join type: INNER
├── build keys: []
├── probe keys: []
├── keys is null equal: []
├── filters: [t1.a (#0) >= CAST(scalar_subquery_2 (#2) AS Int32 NULL)]
├── estimated rows: 4.00
├── EvalScalar(Build)
│   ├── output columns: [MAX(a) (#2)]
│   ├── expressions: [1]
│   ├── estimated rows: 1.00
│   └── DummyTableScan
└── TableScan(Probe)
    ├── table: default.default.t1
    ├── output columns: [a (#0)]
    ├── read rows: 4
    ├── read size: < 1 KiB
    ├── partitions total: 1
    ├── partitions scanned: 1
    ├── pruning stats: [segments: <range pruning: 1 to 1>, blocks: <range pruning: 1 to 1>]
    ├── push downs: [filters: [], limit: NONE]
    └── estimated rows: 4.00

query T
EXPLAIN SELECT * FROM t1 WHERE a >= (SELECT a FROM t2 where a > 0);
----
HashJoin
├── output columns: [t1.a (#0)]
├── join type: INNER
├── build keys: []
├── probe keys: []
├── keys is null equal: []
├── filters: [t1.a (#0) >= scalar_subquery_1 (#1)]
├── estimated rows: 4.00
├── Filter(Build)
│   ├── output columns: [t2.a (#1)]
│   ├── filters: [is_true(t2.a (#1) > 0)]
│   ├── estimated rows: 1.00
│   └── TableScan
│       ├── table: default.default.t2
│       ├── output columns: [a (#1)]
│       ├── read rows: 1
│       ├── read size: < 1 KiB
│       ├── partitions total: 1
│       ├── partitions scanned: 1
│       ├── pruning stats: [segments: <range pruning: 1 to 1>, blocks: <range pruning: 1 to 1>]
│       ├── push downs: [filters: [is_true(t2.a (#1) > 0)], limit: NONE]
│       └── estimated rows: 1.00
└── TableScan(Probe)
    ├── table: default.default.t1
    ├── output columns: [a (#0)]
    ├── read rows: 4
    ├── read size: < 1 KiB
    ├── partitions total: 1
    ├── partitions scanned: 1
    ├── pruning stats: [segments: <range pruning: 1 to 1>, blocks: <range pruning: 1 to 1>]
    ├── push downs: [filters: [], limit: NONE]
    └── estimated rows: 4.00

statement ok
DROP TABLE t1;

statement ok
DROP TABLE t2;
