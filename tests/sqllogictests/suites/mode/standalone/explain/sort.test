statement ok
create or replace table t1(a int, b int);

query T
explain select a from (select * from t1 order by a) as t2 where a > 1;
----
Sort
├── output columns: [t1.a (#0)]
├── sort keys: [a ASC NULLS LAST]
├── estimated rows: 0.00
└── Filter
    ├── output columns: [t1.a (#0)]
    ├── filters: [is_true(t1.a (#0) > 1)]
    ├── estimated rows: 0.00
    └── TableScan
        ├── table: default.default.t1
        ├── output columns: [a (#0)]
        ├── read rows: 0
        ├── read size: 0
        ├── partitions total: 0
        ├── partitions scanned: 0
        ├── push downs: [filters: [is_true(t1.a (#0) > 1)], limit: NONE]
        └── estimated rows: 0.00

query T
explain select a from (select * from t1) where a > 1 order by a;
----
Sort
├── output columns: [t1.a (#0)]
├── sort keys: [a ASC NULLS LAST]
├── estimated rows: 0.00
└── Filter
    ├── output columns: [t1.a (#0)]
    ├── filters: [is_true(t1.a (#0) > 1)]
    ├── estimated rows: 0.00
    └── TableScan
        ├── table: default.default.t1
        ├── output columns: [a (#0)]
        ├── read rows: 0
        ├── read size: 0
        ├── partitions total: 0
        ├── partitions scanned: 0
        ├── push downs: [filters: [is_true(t1.a (#0) > 1)], limit: NONE]
        └── estimated rows: 0.00

query T
explain select a from (select * from t1) as t2 where t2.a > 1 order by a;
----
Sort
├── output columns: [t1.a (#0)]
├── sort keys: [a ASC NULLS LAST]
├── estimated rows: 0.00
└── Filter
    ├── output columns: [t1.a (#0)]
    ├── filters: [is_true(t2.a (#0) > 1)]
    ├── estimated rows: 0.00
    └── TableScan
        ├── table: default.default.t1
        ├── output columns: [a (#0)]
        ├── read rows: 0
        ├── read size: 0
        ├── partitions total: 0
        ├── partitions scanned: 0
        ├── push downs: [filters: [is_true(t1.a (#0) > 1)], limit: NONE]
        └── estimated rows: 0.00

query T
explain select a from t1 order by a::string limit 1;
----
Limit
├── output columns: [t1.a (#0), a::STRING (#2)]
├── limit: 1
├── offset: 0
├── estimated rows: 0.00
└── Sort
    ├── output columns: [t1.a (#0), a::STRING (#2)]
    ├── sort keys: [a::STRING ASC NULLS LAST]
    ├── estimated rows: 0.00
    └── EvalScalar
        ├── output columns: [t1.a (#0), a::STRING (#2)]
        ├── expressions: [CAST(t1.a (#0) AS String NULL)]
        ├── estimated rows: 0.00
        └── TableScan
            ├── table: default.default.t1
            ├── output columns: [a (#0)]
            ├── read rows: 0
            ├── read size: 0
            ├── partitions total: 0
            ├── partitions scanned: 0
            ├── push downs: [filters: [], limit: NONE]
            └── estimated rows: 0.00

statement ok
set max_threads = 4;

statement ok
set sort_spilling_memory_ratio = 0;

# Sort without pre-projection
query T
explain pipeline select a, b from t1 order by a;
----
CompoundBlockOperator(Project) × 1
  Merge to KWayMergeCombiner × 1
    KWayMergeWorker × 4
      KWayMergePartitioner × 1
        TransformSortMerge × 4
          SortPartialTransform × 4
            Merge to Resize × 4
              DeserializeDataTransform × 1
                SyncReadParquetDataTransform × 1
                  BlockPartitionSource × 1


# Sort spilling
statement ok
set sort_spilling_memory_ratio = 60;

query T
explain pipeline select a, b from t1 order by a;
----
CompoundBlockOperator(Project) × 1
  Merge to KWayMergeCombiner × 1
    KWayMergeWorker × 4
      KWayMergePartitioner × 1
        TransformSortMerge × 4
          SortPartialTransform × 4
            Merge to Resize × 4
              DeserializeDataTransform × 1
                SyncReadParquetDataTransform × 1
                  BlockPartitionSource × 1

statement ok
set sort_spilling_memory_ratio = 0;

# Sort with pre-projection
query T
explain pipeline select a + 1, b from t1 order by a + 1;
----
CompoundBlockOperator(Project) × 1
  Merge to KWayMergeCombiner × 1
    KWayMergeWorker × 4
      KWayMergePartitioner × 1
        TransformSortMerge × 4
          SortPartialTransform × 4
            Merge to Resize × 4
              CompoundBlockOperator(Map) × 1
                DeserializeDataTransform × 1
                  SyncReadParquetDataTransform × 1
                    BlockPartitionSource × 1


# Sort spilling
statement ok
set sort_spilling_memory_ratio = 60;

query T
explain pipeline select a + 1, b from t1 order by a + 1;
----
CompoundBlockOperator(Project) × 1
  Merge to KWayMergeCombiner × 1
    KWayMergeWorker × 4
      KWayMergePartitioner × 1
        TransformSortMerge × 4
          SortPartialTransform × 4
            Merge to Resize × 4
              CompoundBlockOperator(Map) × 1
                DeserializeDataTransform × 1
                  SyncReadParquetDataTransform × 1
                    BlockPartitionSource × 1

statement ok
drop table if exists t1;
