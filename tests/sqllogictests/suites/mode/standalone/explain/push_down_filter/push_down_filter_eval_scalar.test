# push down filter EvalScalar
statement ok
drop table if exists t1;

statement ok
drop table if exists t2;

statement ok
drop view if exists v1;

statement ok
drop view if exists v2;

statement ok
create table t1(id int);

statement ok
create table t2(sid int, val int);

statement ok
create view v1 as select t2.sid, t2.val from t2;

statement ok
create view v2 AS
select
  t.id as sc,
  coalesce(sum(tb.de), 0) as de
from
  t1 as t
  left outer join (
    select
      t3.sid,
      sum(coalesce(t3.val, 0)) as de
    from
      v1 as t3
    group by
      t3.sid
  ) as tb on(tb.sid = t.id)
group by
  t.id
union
all
select
  t.id as sc,
  0 as de
from
  t1 as t
group by
  t.id

query T
explain select distinct t.sc from v2 t where t.sc = 1;
----
AggregateFinal
├── output columns: [sc (#9)]
├── group by: [sc]
├── aggregate functions: []
├── estimated rows: 0.00
└── AggregatePartial
    ├── group by: [sc]
    ├── aggregate functions: []
    ├── estimated rows: 0.00
    └── UnionAll
        ├── output columns: [sc (#9)]
        ├── estimated rows: 0.00
        ├── AggregateFinal
        │   ├── output columns: [t.id (#0)]
        │   ├── group by: [id]
        │   ├── aggregate functions: []
        │   ├── estimated rows: 0.00
        │   └── AggregatePartial
        │       ├── group by: [id]
        │       ├── aggregate functions: []
        │       ├── estimated rows: 0.00
        │       └── HashJoin
        │           ├── output columns: [t.id (#0)]
        │           ├── join type: LEFT OUTER
        │           ├── build keys: [tb.sid (#1)]
        │           ├── probe keys: [t.id (#0)]
        │           ├── keys is null equal: [false]
        │           ├── filters: []
        │           ├── estimated rows: 0.00
        │           ├── AggregateFinal(Build)
        │           │   ├── output columns: [t2.sid (#1)]
        │           │   ├── group by: [sid]
        │           │   ├── aggregate functions: []
        │           │   ├── estimated rows: 0.00
        │           │   └── AggregatePartial
        │           │       ├── group by: [sid]
        │           │       ├── aggregate functions: []
        │           │       ├── estimated rows: 0.00
        │           │       └── Filter
        │           │           ├── output columns: [t2.sid (#1)]
        │           │           ├── filters: [is_true(t3.sid (#1) = 1)]
        │           │           ├── estimated rows: 0.00
        │           │           └── TableScan
        │           │               ├── table: default.default.t2
        │           │               ├── output columns: [sid (#1)]
        │           │               ├── read rows: 0
        │           │               ├── read size: 0
        │           │               ├── partitions total: 0
        │           │               ├── partitions scanned: 0
        │           │               ├── push downs: [filters: [is_true(t2.sid (#1) = 1)], limit: NONE]
        │           │               └── estimated rows: 0.00
        │           └── Filter(Probe)
        │               ├── output columns: [t.id (#0)]
        │               ├── filters: [is_true(t.id (#0) = 1)]
        │               ├── estimated rows: 0.00
        │               └── TableScan
        │                   ├── table: default.default.t1
        │                   ├── output columns: [id (#0)]
        │                   ├── read rows: 0
        │                   ├── read size: 0
        │                   ├── partitions total: 0
        │                   ├── partitions scanned: 0
        │                   ├── push downs: [filters: [is_true(t1.id (#0) = 1)], limit: NONE]
        │                   └── estimated rows: 0.00
        └── AggregateFinal
            ├── output columns: [t.id (#7)]
            ├── group by: [id]
            ├── aggregate functions: []
            ├── estimated rows: 0.00
            └── AggregatePartial
                ├── group by: [id]
                ├── aggregate functions: []
                ├── estimated rows: 0.00
                └── Filter
                    ├── output columns: [t.id (#7)]
                    ├── filters: [is_true(t.id (#7) = 1)]
                    ├── estimated rows: 0.00
                    └── TableScan
                        ├── table: default.default.t1
                        ├── output columns: [id (#7)]
                        ├── read rows: 0
                        ├── read size: 0
                        ├── partitions total: 0
                        ├── partitions scanned: 0
                        ├── push downs: [filters: [is_true(t1.id (#7) = 1)], limit: NONE]
                        └── estimated rows: 0.00

statement ok
drop table if exists t1;

statement ok
drop table if exists t2;

statement ok
drop view if exists v1;

statement ok
drop view if exists v2;
