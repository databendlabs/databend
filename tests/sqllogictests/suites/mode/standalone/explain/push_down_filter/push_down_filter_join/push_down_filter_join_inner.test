# push down filter inner join
statement ok
drop table if exists t1;

statement ok
drop table if exists t2;

statement ok
create table t1(a int, b int);

statement ok
create table t2(a int, b int);

statement ok
insert into t1 values(null, null), (1, 1), (2, 2), (3, 3);

statement ok
insert into t2 values(null, null), (1, 1), (2, 2);

# can propagate t1.a > 3
query T
explain select * from t1 inner join t2 on t1.a = t2.a where t1.a > 3;
----
HashJoin
├── output columns: [t1.a (#0), t1.b (#1), t2.b (#3), t2.a (#2)]
├── join type: INNER
├── build keys: [t2.a (#2)]
├── probe keys: [t1.a (#0)]
├── keys is null equal: [false]
├── filters: []
├── estimated rows: 0.00
├── Filter(Build)
│   ├── output columns: [t2.a (#2), t2.b (#3)]
│   ├── filters: [is_true(t2.a (#2) > 3)]
│   ├── estimated rows: 0.00
│   └── TableScan
│       ├── table: default.default.t2
│       ├── output columns: [a (#2), b (#3)]
│       ├── read rows: 0
│       ├── read size: 0
│       ├── partitions total: 1
│       ├── partitions scanned: 0
│       ├── pruning stats: [segments: <range pruning: 1 to 0>]
│       ├── push downs: [filters: [is_true(t2.a (#2) > 3)], limit: NONE]
│       └── estimated rows: 3.00
└── Filter(Probe)
    ├── output columns: [t1.a (#0), t1.b (#1)]
    ├── filters: [is_true(t1.a (#0) > 3)]
    ├── estimated rows: 0.00
    └── TableScan
        ├── table: default.default.t1
        ├── output columns: [a (#0), b (#1)]
        ├── read rows: 0
        ├── read size: 0
        ├── partitions total: 1
        ├── partitions scanned: 0
        ├── pruning stats: [segments: <range pruning: 1 to 0>]
        ├── push downs: [filters: [is_true(t1.a (#0) > 3)], limit: NONE]
        └── estimated rows: 4.00

# can propagate (t2.a > 1 or t2.a <= 2)
query T
explain select * from t1 inner join t2 on t1.a = t2.a where t2.a <= 2 or (t1.a > 1 and t2.a > 1);
----
Filter
├── output columns: [t1.a (#0), t1.b (#1), t2.b (#3), t2.a (#2)]
├── filters: [is_true((t2.a (#2) <= 2 OR (t1.a (#0) > 1 AND t2.a (#2) > 1)))]
├── estimated rows: 3.56
└── HashJoin
    ├── output columns: [t1.a (#0), t1.b (#1), t2.b (#3), t2.a (#2)]
    ├── join type: INNER
    ├── build keys: [t2.a (#2)]
    ├── probe keys: [t1.a (#0)]
    ├── keys is null equal: [false]
    ├── filters: []
    ├── estimated rows: 3.56
    ├── Filter(Build)
    │   ├── output columns: [t2.a (#2), t2.b (#3)]
    │   ├── filters: [is_true((t2.a (#2) <= 2 OR t2.a (#2) > 1))]
    │   ├── estimated rows: 3.00
    │   └── TableScan
    │       ├── table: default.default.t2
    │       ├── output columns: [a (#2), b (#3)]
    │       ├── read rows: 3
    │       ├── read size: < 1 KiB
    │       ├── partitions total: 1
    │       ├── partitions scanned: 1
    │       ├── pruning stats: [segments: <range pruning: 1 to 1>, blocks: <range pruning: 1 to 1>]
    │       ├── push downs: [filters: [is_true((t2.a (#2) <= 2 OR t2.a (#2) > 1))], limit: NONE]
    │       └── estimated rows: 3.00
    └── Filter(Probe)
        ├── output columns: [t1.a (#0), t1.b (#1)]
        ├── filters: [is_true((t1.a (#0) <= 2 OR t1.a (#0) > 1))]
        ├── estimated rows: 3.56
        └── TableScan
            ├── table: default.default.t1
            ├── output columns: [a (#0), b (#1)]
            ├── read rows: 4
            ├── read size: < 1 KiB
            ├── partitions total: 1
            ├── partitions scanned: 1
            ├── pruning stats: [segments: <range pruning: 1 to 1>, blocks: <range pruning: 1 to 1>]
            ├── push downs: [filters: [is_true((t1.a (#0) <= 2 OR t1.a (#0) > 1))], limit: NONE]
            └── estimated rows: 4.00

statement ok
drop table if exists t1;

statement ok
drop table if exists t2;
