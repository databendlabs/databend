query T
explain select * from (select t.number from numbers(10) as t limit 8) limit 9
----
Limit
├── output columns: [t.number (#0)]
├── limit: 9
├── offset: 0
├── estimated rows: 8.00
└── Limit
    ├── output columns: [t.number (#0)]
    ├── limit: 8
    ├── offset: 0
    ├── estimated rows: 8.00
    └── TableScan
        ├── table: default.system.numbers
        ├── output columns: [number (#0)]
        ├── read rows: 8
        ├── read size: < 1 KiB
        ├── partitions total: 1
        ├── partitions scanned: 1
        ├── push downs: [filters: [], limit: 8]
        └── estimated rows: 10.00

query T
explain select * from (select t.number from numbers(10) as t order by number desc) order by number asc
----
Sort
├── output columns: [t.number (#0)]
├── sort keys: [number ASC NULLS LAST]
├── estimated rows: 10.00
└── Sort
    ├── output columns: [t.number (#0)]
    ├── sort keys: [number DESC NULLS LAST]
    ├── estimated rows: 10.00
    └── TableScan
        ├── table: default.system.numbers
        ├── output columns: [number (#0)]
        ├── read rows: 10
        ├── read size: < 1 KiB
        ├── partitions total: 1
        ├── partitions scanned: 1
        ├── push downs: [filters: [], limit: NONE]
        └── estimated rows: 10.00

query T
explain select number from (select t.number from numbers(10) as t order by number desc limit 8) order by number asc limit 9
----
Limit
├── output columns: [t.number (#0)]
├── limit: 9
├── offset: 0
├── estimated rows: 8.00
└── Sort
    ├── output columns: [t.number (#0)]
    ├── sort keys: [number ASC NULLS LAST]
    ├── estimated rows: 8.00
    └── Limit
        ├── output columns: [t.number (#0)]
        ├── limit: 8
        ├── offset: 0
        ├── estimated rows: 8.00
        └── Sort
            ├── output columns: [t.number (#0)]
            ├── sort keys: [number DESC NULLS LAST]
            ├── estimated rows: 10.00
            └── TableScan
                ├── table: default.system.numbers
                ├── output columns: [number (#0)]
                ├── read rows: 10
                ├── read size: < 1 KiB
                ├── partitions total: 1
                ├── partitions scanned: 1
                ├── push downs: [filters: [], limit: 8]
                └── estimated rows: 10.00

query T
explain select t.number from numbers(1) as t, numbers(1) as t1 where t.number = (select count(*) from numbers(1) as t2, numbers(1) as t3 where t.number = t2.number) group by t.number order by t.number desc limit 3
----
Limit
├── output columns: [t.number (#0)]
├── limit: 3
├── offset: 0
├── estimated rows: 0.20
└── Sort
    ├── output columns: [t.number (#0)]
    ├── sort keys: [number DESC NULLS LAST]
    ├── estimated rows: 0.20
    └── AggregateFinal
        ├── output columns: [t.number (#0)]
        ├── group by: [number]
        ├── aggregate functions: []
        ├── estimated rows: 0.20
        └── AggregatePartial
            ├── group by: [number]
            ├── aggregate functions: []
            ├── estimated rows: 0.20
            ├── rank limit: 3
            └── Filter
                ├── output columns: [t.number (#0)]
                ├── filters: [is_true(CAST(t.number (#0) AS UInt64 NULL) = if(CAST(is_not_null(scalar_subquery_4 (#4)) AS Boolean NULL), scalar_subquery_4 (#4), 0))]
                ├── estimated rows: 0.20
                └── HashJoin
                    ├── output columns: [t.number (#0), COUNT(*) (#4)]
                    ├── join type: LEFT OUTER
                    ├── build keys: [number (#2)]
                    ├── probe keys: [CAST(number (#0) AS UInt64 NULL)]
                    ├── keys is null equal: [false]
                    ├── filters: []
                    ├── estimated rows: 1.00
                    ├── AggregateFinal(Build)
                    │   ├── output columns: [COUNT(*) (#4), t2.number (#2)]
                    │   ├── group by: [number]
                    │   ├── aggregate functions: [count()]
                    │   ├── estimated rows: 1.00
                    │   └── AggregatePartial
                    │       ├── group by: [number]
                    │       ├── aggregate functions: [count()]
                    │       ├── estimated rows: 1.00
                    │       └── HashJoin
                    │           ├── output columns: [t2.number (#2)]
                    │           ├── join type: CROSS
                    │           ├── build keys: []
                    │           ├── probe keys: []
                    │           ├── keys is null equal: []
                    │           ├── filters: []
                    │           ├── estimated rows: 1.00
                    │           ├── TableScan(Build)
                    │           │   ├── table: default.system.numbers
                    │           │   ├── output columns: []
                    │           │   ├── read rows: 1
                    │           │   ├── read size: < 1 KiB
                    │           │   ├── partitions total: 1
                    │           │   ├── partitions scanned: 1
                    │           │   ├── push downs: [filters: [], limit: NONE]
                    │           │   └── estimated rows: 1.00
                    │           └── TableScan(Probe)
                    │               ├── table: default.system.numbers
                    │               ├── output columns: [number (#2)]
                    │               ├── read rows: 1
                    │               ├── read size: < 1 KiB
                    │               ├── partitions total: 1
                    │               ├── partitions scanned: 1
                    │               ├── push downs: [filters: [], limit: NONE]
                    │               └── estimated rows: 1.00
                    └── HashJoin(Probe)
                        ├── output columns: [t.number (#0)]
                        ├── join type: CROSS
                        ├── build keys: []
                        ├── probe keys: []
                        ├── keys is null equal: []
                        ├── filters: []
                        ├── estimated rows: 1.00
                        ├── TableScan(Build)
                        │   ├── table: default.system.numbers
                        │   ├── output columns: []
                        │   ├── read rows: 1
                        │   ├── read size: < 1 KiB
                        │   ├── partitions total: 1
                        │   ├── partitions scanned: 1
                        │   ├── push downs: [filters: [], limit: NONE]
                        │   └── estimated rows: 1.00
                        └── TableScan(Probe)
                            ├── table: default.system.numbers
                            ├── output columns: [number (#0)]
                            ├── read rows: 1
                            ├── read size: < 1 KiB
                            ├── partitions total: 1
                            ├── partitions scanned: 1
                            ├── push downs: [filters: [], limit: NONE]
                            └── estimated rows: 1.00

query T
explain select * from (select count(t1.number) as c1 from numbers(1) as t1 group by number) as t3 left join (select count(t.number) as c from numbers(2) as t group by number) as t4 on t3.c1=t4.c order by t3.c1 limit 1
----
Limit
├── output columns: [c (#4), count(t1.number) (#1)]
├── limit: 1
├── offset: 0
├── estimated rows: 1.00
└── Sort
    ├── output columns: [c (#4), count(t1.number) (#1)]
    ├── sort keys: [count(t1.number) ASC NULLS LAST]
    ├── estimated rows: 2.00
    └── HashJoin
        ├── output columns: [c (#4), count(t1.number) (#1)]
        ├── join type: RIGHT OUTER
        ├── build keys: [CAST(t3.c1 (#1) AS UInt64 NULL)]
        ├── probe keys: [t4.c (#4)]
        ├── keys is null equal: [false]
        ├── filters: []
        ├── estimated rows: 2.00
        ├── AggregateFinal(Build)
        │   ├── output columns: [count(t1.number) (#1), t1.number (#0)]
        │   ├── group by: [number]
        │   ├── aggregate functions: [count()]
        │   ├── estimated rows: 1.00
        │   └── AggregatePartial
        │       ├── group by: [number]
        │       ├── aggregate functions: [count()]
        │       ├── estimated rows: 1.00
        │       └── TableScan
        │           ├── table: default.system.numbers
        │           ├── output columns: [number (#0)]
        │           ├── read rows: 1
        │           ├── read size: < 1 KiB
        │           ├── partitions total: 1
        │           ├── partitions scanned: 1
        │           ├── push downs: [filters: [], limit: NONE]
        │           └── estimated rows: 1.00
        └── EvalScalar(Probe)
            ├── output columns: [c (#4)]
            ├── expressions: [CAST(t4.c (#3) AS UInt64 NULL)]
            ├── estimated rows: 2.00
            └── AggregateFinal
                ├── output columns: [count(t.number) (#3), t.number (#2)]
                ├── group by: [number]
                ├── aggregate functions: [count()]
                ├── estimated rows: 2.00
                └── AggregatePartial
                    ├── group by: [number]
                    ├── aggregate functions: [count()]
                    ├── estimated rows: 2.00
                    └── TableScan
                        ├── table: default.system.numbers
                        ├── output columns: [number (#2)]
                        ├── read rows: 2
                        ├── read size: < 1 KiB
                        ├── partitions total: 1
                        ├── partitions scanned: 1
                        ├── push downs: [filters: [], limit: NONE]
                        └── estimated rows: 2.00

query T
explain select c1 from (select count(t1.number) as c1 from numbers(1) as t1 group by number) as t3 left join (select count(t.number) as c from numbers(2) as t group by number) as t4 on t3.c1=t4.c order by t3.c1 limit 0
----
EmptyResultScan
