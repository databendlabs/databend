statement ok
set enable_auto_materialize_cte = 0;

statement ok
drop table if exists t_lazy

statement ok
create table t_lazy (a int, b float, c string, d tuple(a int, b int), e date)

query T
explain select * from t_lazy order by a desc limit 2
----
RowFetch
├── output columns: [t_lazy.a (#0), t_lazy._row_id (#7), t_lazy.b (#1), t_lazy.c (#2), t_lazy.d (#3), t_lazy.e (#6)]
├── columns to fetch: [b, c, d, e]
├── estimated rows: 0.00
└── Limit
    ├── output columns: [t_lazy.a (#0), t_lazy._row_id (#7)]
    ├── limit: 2
    ├── offset: 0
    ├── estimated rows: 0.00
    └── Sort
        ├── output columns: [t_lazy.a (#0), t_lazy._row_id (#7)]
        ├── sort keys: [a DESC NULLS LAST]
        ├── estimated rows: 0.00
        └── TableScan
            ├── table: default.default.t_lazy
            ├── output columns: [a (#0), _row_id (#7)]
            ├── read rows: 0
            ├── read size: 0
            ├── partitions total: 0
            ├── partitions scanned: 0
            ├── push downs: [filters: [], limit: 2]
            └── estimated rows: 0.00

query T
explain select * from t_lazy where a > 1 limit 2
----
RowFetch
├── output columns: [t_lazy.a (#0), t_lazy._row_id (#7), t_lazy.b (#1), t_lazy.c (#2), t_lazy.d (#3), t_lazy.e (#6)]
├── columns to fetch: [b, c, d, e]
├── estimated rows: 0.00
└── Limit
    ├── output columns: [t_lazy.a (#0), t_lazy._row_id (#7)]
    ├── limit: 2
    ├── offset: 0
    ├── estimated rows: 0.00
    └── Filter
        ├── output columns: [t_lazy.a (#0), t_lazy._row_id (#7)]
        ├── filters: [is_true(t_lazy.a (#0) > 1)]
        ├── estimated rows: 0.00
        └── TableScan
            ├── table: default.default.t_lazy
            ├── output columns: [a (#0), _row_id (#7)]
            ├── read rows: 0
            ├── read size: 0
            ├── partitions total: 0
            ├── partitions scanned: 0
            ├── push downs: [filters: [is_true(t_lazy.a (#0) > 1)], limit: NONE]
            └── estimated rows: 0.00

query T
explain select * from t_lazy where true limit 2
----
Limit
├── output columns: [t_lazy.a (#0), t_lazy.b (#1), t_lazy.c (#2), t_lazy.d (#3), t_lazy.e (#6)]
├── limit: 2
├── offset: 0
├── estimated rows: 0.00
└── TableScan
    ├── table: default.default.t_lazy
    ├── output columns: [a (#0), b (#1), c (#2), d (#3), e (#6)]
    ├── read rows: 0
    ├── read size: 0
    ├── partitions total: 0
    ├── partitions scanned: 0
    ├── push downs: [filters: [], limit: 2]
    └── estimated rows: 0.00

# ISSUE #11831

statement ok
create table if not exists t_11831 (uid uint64, c1 string, c2 string, time uint64);

query T
explain SELECT * FROM (SELECT * FROM t_11831 WHERE time >= 1686672000000 AND time <= 1686758399000) AS t1 WHERE uid = 11 ORDER BY time DESC LIMIT 10;
----
RowFetch
├── output columns: [t_11831.uid (#0), t_11831.time (#3), t_11831._row_id (#4), t_11831.c1 (#1), t_11831.c2 (#2)]
├── columns to fetch: [c1, c2]
├── estimated rows: 0.00
└── Limit
    ├── output columns: [t_11831.uid (#0), t_11831.time (#3), t_11831._row_id (#4)]
    ├── limit: 10
    ├── offset: 0
    ├── estimated rows: 0.00
    └── Sort
        ├── output columns: [t_11831.uid (#0), t_11831.time (#3), t_11831._row_id (#4)]
        ├── sort keys: [time DESC NULLS LAST]
        ├── estimated rows: 0.00
        └── Filter
            ├── output columns: [t_11831.uid (#0), t_11831.time (#3), t_11831._row_id (#4)]
            ├── filters: [is_true(t1.time (#3) >= 1686672000000), is_true(t1.time (#3) <= 1686758399000), is_true(t1.uid (#0) = 11)]
            ├── estimated rows: 0.00
            └── TableScan
                ├── table: default.default.t_11831
                ├── output columns: [uid (#0), time (#3), _row_id (#4)]
                ├── read rows: 0
                ├── read size: 0
                ├── partitions total: 0
                ├── partitions scanned: 0
                ├── push downs: [filters: [and_filters(and_filters(t_11831.time (#3) >= 1686672000000, t_11831.time (#3) <= 1686758399000), t_11831.uid (#0) = 11)], limit: NONE]
                └── estimated rows: 0.00

statement ok
drop table t_11831

statement ok
set lazy_read_threshold=0

query T
explain select * from t_lazy order by a desc limit 2
----
Limit
├── output columns: [t_lazy.a (#0), t_lazy.b (#1), t_lazy.c (#2), t_lazy.d (#3), t_lazy.e (#6)]
├── limit: 2
├── offset: 0
├── estimated rows: 0.00
└── Sort
    ├── output columns: [t_lazy.a (#0), t_lazy.b (#1), t_lazy.c (#2), t_lazy.d (#3), t_lazy.e (#6)]
    ├── sort keys: [a DESC NULLS LAST]
    ├── estimated rows: 0.00
    └── TableScan
        ├── table: default.default.t_lazy
        ├── output columns: [a (#0), b (#1), c (#2), d (#3), e (#6)]
        ├── read rows: 0
        ├── read size: 0
        ├── partitions total: 0
        ├── partitions scanned: 0
        ├── push downs: [filters: [], limit: 2]
        └── estimated rows: 0.00

query T
explain select * from t_lazy where a > 1 limit 2
----
Limit
├── output columns: [t_lazy.a (#0), t_lazy.b (#1), t_lazy.c (#2), t_lazy.d (#3), t_lazy.e (#6)]
├── limit: 2
├── offset: 0
├── estimated rows: 0.00
└── Filter
    ├── output columns: [t_lazy.a (#0), t_lazy.b (#1), t_lazy.c (#2), t_lazy.d (#3), t_lazy.e (#6)]
    ├── filters: [is_true(t_lazy.a (#0) > 1)]
    ├── estimated rows: 0.00
    └── TableScan
        ├── table: default.default.t_lazy
        ├── output columns: [a (#0), b (#1), c (#2), d (#3), e (#6)]
        ├── read rows: 0
        ├── read size: 0
        ├── partitions total: 0
        ├── partitions scanned: 0
        ├── push downs: [filters: [is_true(t_lazy.a (#0) > 1)], limit: NONE]
        └── estimated rows: 0.00

query T
explain select * from t_lazy where true limit 2
----
Limit
├── output columns: [t_lazy.a (#0), t_lazy.b (#1), t_lazy.c (#2), t_lazy.d (#3), t_lazy.e (#6)]
├── limit: 2
├── offset: 0
├── estimated rows: 0.00
└── TableScan
    ├── table: default.default.t_lazy
    ├── output columns: [a (#0), b (#1), c (#2), d (#3), e (#6)]
    ├── read rows: 0
    ├── read size: 0
    ├── partitions total: 0
    ├── partitions scanned: 0
    ├── push downs: [filters: [], limit: 2]
    └── estimated rows: 0.00

statement ok
set lazy_read_threshold=100

# lazy materialization with CTE

# Will not use lazy materialization
query T
explain with cte as (select a, a + 1 as X, b + 1 as Y from t_lazy) select X,Y,a from (select * from cte) order by X limit 1;
----
Limit
├── output columns: [t_lazy.a (#0), x (#7), y (#8)]
├── limit: 1
├── offset: 0
├── estimated rows: 0.00
└── Sort
    ├── output columns: [t_lazy.a (#0), x (#7), y (#8)]
    ├── sort keys: [x ASC NULLS LAST]
    ├── estimated rows: 0.00
    └── EvalScalar
        ├── output columns: [t_lazy.a (#0), x (#7), y (#8)]
        ├── expressions: [t_lazy.a (#0) + 1, t_lazy.b (#1) + 1]
        ├── estimated rows: 0.00
        └── TableScan
            ├── table: default.default.t_lazy
            ├── output columns: [a (#0), b (#1)]
            ├── read rows: 0
            ├── read size: 0
            ├── partitions total: 0
            ├── partitions scanned: 0
            ├── push downs: [filters: [], limit: NONE]
            └── estimated rows: 0.00

# Will use lazy materialization
query ?
explain with cte as (select a, a + 1 as X, b + 1 as Y from t_lazy order by a limit 3) select X,Y,a from (select * from cte order by Y limit 2) order by X limit 1;
----
Limit
├── output columns: [t_lazy.a (#0), t_lazy._row_id (#9), x (#7), y (#8), t_lazy.b (#1)]
├── limit: 1
├── offset: 0
├── estimated rows: 0.00
└── Sort
    ├── output columns: [t_lazy.a (#0), t_lazy._row_id (#9), x (#7), y (#8), t_lazy.b (#1)]
    ├── sort keys: [x ASC NULLS LAST]
    ├── estimated rows: 0.00
    └── RowFetch
        ├── output columns: [t_lazy.a (#0), t_lazy._row_id (#9), x (#7), y (#8), t_lazy.b (#1)]
        ├── columns to fetch: [b]
        ├── estimated rows: 0.00
        └── Limit
            ├── output columns: [t_lazy.a (#0), t_lazy._row_id (#9), x (#7), y (#8)]
            ├── limit: 2
            ├── offset: 0
            ├── estimated rows: 0.00
            └── Sort
                ├── output columns: [t_lazy.a (#0), t_lazy._row_id (#9), x (#7), y (#8)]
                ├── sort keys: [y ASC NULLS LAST]
                ├── estimated rows: 0.00
                └── EvalScalar
                    ├── output columns: [t_lazy.a (#0), t_lazy._row_id (#9), x (#7), y (#8)]
                    ├── expressions: [t_lazy.a (#0) + 1, t_lazy.b (#1) + 1]
                    ├── estimated rows: 0.00
                    └── RowFetch
                        ├── output columns: [t_lazy.a (#0), t_lazy._row_id (#9), t_lazy.b (#1)]
                        ├── columns to fetch: [b]
                        ├── estimated rows: 0.00
                        └── Limit
                            ├── output columns: [t_lazy.a (#0), t_lazy._row_id (#9)]
                            ├── limit: 3
                            ├── offset: 0
                            ├── estimated rows: 0.00
                            └── Sort
                                ├── output columns: [t_lazy.a (#0), t_lazy._row_id (#9)]
                                ├── sort keys: [a ASC NULLS LAST]
                                ├── estimated rows: 0.00
                                └── TableScan
                                    ├── table: default.default.t_lazy
                                    ├── output columns: [a (#0), _row_id (#9)]
                                    ├── read rows: 0
                                    ├── read size: 0
                                    ├── partitions total: 0
                                    ├── partitions scanned: 0
                                    ├── push downs: [filters: [], limit: 3]
                                    └── estimated rows: 0.00

statement ok
drop table t_lazy
