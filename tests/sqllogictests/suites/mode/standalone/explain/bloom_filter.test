# This case depends on explain(standalone mode), thus we put it here
statement ok
drop table if exists bloom_test_t;

statement ok
create table bloom_test_t(c1 int, c2 int)

# create 2 data blocks, min/max values of columns are of the same

statement ok
insert into  bloom_test_t values(1,1), (5,6), (10,10)

statement ok
insert into  bloom_test_t values(1,1), (7,8), (10,10)

# range index is not effective in this query, bloom filter will be used, one block should be pruned
query T
explain select 1 from bloom_test_t where c1 = 5
----
EvalScalar
├── output columns: [1 (#2)]
├── expressions: [1]
├── estimated rows: 1.00
└── Filter
    ├── output columns: []
    ├── filters: [is_true(bloom_test_t.c1 (#0) = 5)]
    ├── estimated rows: 1.00
    └── TableScan
        ├── table: default.default.bloom_test_t
        ├── output columns: [c1 (#0)]
        ├── read rows: 3
        ├── read size: < 1 KiB
        ├── partitions total: 2
        ├── partitions scanned: 1
        ├── pruning stats: [segments: <range pruning: 2 to 2>, blocks: <range pruning: 2 to 2, bloom pruning: 2 to 1>]
        ├── push downs: [filters: [is_true(bloom_test_t.c1 (#0) = 5)], limit: NONE]
        └── estimated rows: 6.00

query T
select 1 from bloom_test_t where c1 = 5
----
1

# for issue which addressed in PR #9706 (https://github.com/datafuselabs/databend/pull/9706)
#
# if cached filters are populated incorrectly by using the wrong cache key:
# - instead of the correct one ${block_id}-${column_id}
# - but ${block_id} incorrectly
# the cached filter that populated by the previous query
# `select 1 from bloom_test_t where c1 = 5`
# i.e. the bloom filter of block 1, column c1, will be used in bloom pruning of
# ALL the columns of block number 1

# recall that
# a) the data of first block is
#  `create table bloom_test_t(c1 int, c2 int)`
#  `insert into  bloom_test_t values(1,1), (5,6), (10,10)`
# b) range index is not effective in the later test cases
# c) if filter cache is populated incorrectly (as described in PR #9706)
#    bloom filter of block 1, column c1 will be used for all the columns (of block 1)
# let's check it out

# 1. filter using another column (c2), of the same block, where there is one row matched

# 1.1 check that filtering on column c2 does work as expected
query T
select 1 from bloom_test_t where c2 = 6
----
1

# 1.2 check that if incorrect filtering is applied, an empty result set will be returned
query T
select count(*) from bloom_test_t where c1 = 6
----
0

# 2. filtering on column c2, of the same block, where there is no row matched
# 2.1 check that an empty result set returned
query T
select count(*) from bloom_test_t where c2 = 5
----
0

# 2.2 check that if incorrect filtering is applied, a non-empty result set will be returned
query T
select count(*) from bloom_test_t where c1 = 5
----
1

# for issue which addressed in PR #10022 (https://github.com/datafuselabs/databend/pull/10022)
statement ok
alter table bloom_test_t drop column c2

statement ok
alter table bloom_test_t add column c2 int

statement ok
alter table bloom_test_t add column c3 int16

statement ok
insert into  bloom_test_t values(2,2, 4444), (4,4, 15555)

query T
explain select 1 from bloom_test_t where c2=0;
----
EvalScalar
├── output columns: [1 (#3)]
├── expressions: [1]
├── estimated rows: 0.00
└── Filter
    ├── output columns: []
    ├── filters: [is_true(bloom_test_t.c2 (#1) = 0)]
    ├── estimated rows: 0.00
    └── TableScan
        ├── table: default.default.bloom_test_t
        ├── output columns: [c2 (#1)]
        ├── read rows: 0
        ├── read size: 0
        ├── partitions total: 3
        ├── partitions scanned: 0
        ├── pruning stats: [segments: <range pruning: 3 to 2>, blocks: <range pruning: 2 to 0>]
        ├── push downs: [filters: [is_true(bloom_test_t.c2 (#1) = 0)], limit: NONE]
        └── estimated rows: 8.00

query T
explain select 1 from bloom_test_t where c2=3;
----
EvalScalar
├── output columns: [1 (#3)]
├── expressions: [1]
├── estimated rows: 4.00
└── Filter
    ├── output columns: []
    ├── filters: [is_true(bloom_test_t.c2 (#1) = 3)]
    ├── estimated rows: 4.00
    └── TableScan
        ├── table: default.default.bloom_test_t
        ├── output columns: [c2 (#1)]
        ├── read rows: 0
        ├── read size: 0
        ├── partitions total: 3
        ├── partitions scanned: 0
        ├── pruning stats: [segments: <range pruning: 3 to 3>, blocks: <range pruning: 3 to 1, bloom pruning: 1 to 0>]
        ├── push downs: [filters: [is_true(bloom_test_t.c2 (#1) = 3)], limit: NONE]
        └── estimated rows: 8.00

query T
explain select 1 from bloom_test_t where c3=12345;
----
EvalScalar
├── output columns: [1 (#3)]
├── expressions: [1]
├── estimated rows: 4.00
└── Filter
    ├── output columns: []
    ├── filters: [is_true(bloom_test_t.c3 (#2) = 12345)]
    ├── estimated rows: 4.00
    └── TableScan
        ├── table: default.default.bloom_test_t
        ├── output columns: [c3 (#2)]
        ├── read rows: 0
        ├── read size: 0
        ├── partitions total: 3
        ├── partitions scanned: 0
        ├── pruning stats: [segments: <range pruning: 3 to 3>, blocks: <range pruning: 3 to 1, bloom pruning: 1 to 0>]
        ├── push downs: [filters: [is_true(bloom_test_t.c3 (#2) = 12345)], limit: NONE]
        └── estimated rows: 8.00

statement ok
drop table bloom_test_t

statement ok
create table bloom_test_alter_t1(c1 int, c2 int) bloom_index_columns='c1, c2'

statement ok
insert into  bloom_test_alter_t1 values(1,1), (5,6), (10,10)

statement ok
insert into  bloom_test_alter_t1 values(1,1), (7,8), (10,10)

# alter bloom_index_columns
statement ok
alter table bloom_test_alter_t1 set options(bloom_index_columns='c2')

# the bloom index column 'c1' is invalid
#
# note that although the bloom index of column c1 has been created for the previous 2 blocks,
# the index (of column c1) will NOT be used in the following case
query T
explain select 1 from bloom_test_alter_t1 where c1 = 5
----
EvalScalar
├── output columns: [1 (#2)]
├── expressions: [1]
├── estimated rows: 1.00
└── Filter
    ├── output columns: []
    ├── filters: [is_true(bloom_test_alter_t1.c1 (#0) = 5)]
    ├── estimated rows: 1.00
    └── TableScan
        ├── table: default.default.bloom_test_alter_t1
        ├── output columns: [c1 (#0)]
        ├── read rows: 6
        ├── read size: < 1 KiB
        ├── partitions total: 2
        ├── partitions scanned: 2
        ├── pruning stats: [segments: <range pruning: 2 to 2>, blocks: <range pruning: 2 to 2>]
        ├── push downs: [filters: [is_true(bloom_test_alter_t1.c1 (#0) = 5)], limit: NONE]
        └── estimated rows: 6.00

statement ok
drop table bloom_test_alter_t1

statement ok
create table bloom_test_alter_t2(c1 int, c2 int) bloom_index_columns='c2'

statement ok
insert into  bloom_test_alter_t2 values(1,1), (5,6), (10,10)

statement ok
insert into  bloom_test_alter_t2 values(1,1), (7,8), (10,10)

query T
explain select 1 from bloom_test_alter_t2 where c1 = 5
----
EvalScalar
├── output columns: [1 (#2)]
├── expressions: [1]
├── estimated rows: 1.00
└── Filter
    ├── output columns: []
    ├── filters: [is_true(bloom_test_alter_t2.c1 (#0) = 5)]
    ├── estimated rows: 1.00
    └── TableScan
        ├── table: default.default.bloom_test_alter_t2
        ├── output columns: [c1 (#0)]
        ├── read rows: 6
        ├── read size: < 1 KiB
        ├── partitions total: 2
        ├── partitions scanned: 2
        ├── pruning stats: [segments: <range pruning: 2 to 2>, blocks: <range pruning: 2 to 2>]
        ├── push downs: [filters: [is_true(bloom_test_alter_t2.c1 (#0) = 5)], limit: NONE]
        └── estimated rows: 6.00

# alter bloom_index_columns
statement ok
alter table bloom_test_alter_t2 set options(bloom_index_columns='c1, c2')

statement ok
insert into  bloom_test_alter_t2 values(1,1), (3,4), (10,10)

# note that the bloom index of column c1 is NOT created for the first 2 blocks (but created for the last block),
# thus, while point querying on column c1, only 1 block might be filtered out.
query T
explain select 1 from bloom_test_alter_t2 where c1 = 5
----
EvalScalar
├── output columns: [1 (#2)]
├── expressions: [1]
├── estimated rows: 1.00
└── Filter
    ├── output columns: []
    ├── filters: [is_true(bloom_test_alter_t2.c1 (#0) = 5)]
    ├── estimated rows: 1.00
    └── TableScan
        ├── table: default.default.bloom_test_alter_t2
        ├── output columns: [c1 (#0)]
        ├── read rows: 6
        ├── read size: < 1 KiB
        ├── partitions total: 3
        ├── partitions scanned: 2
        ├── pruning stats: [segments: <range pruning: 3 to 3>, blocks: <range pruning: 3 to 3, bloom pruning: 3 to 2>]
        ├── push downs: [filters: [is_true(bloom_test_alter_t2.c1 (#0) = 5)], limit: NONE]
        └── estimated rows: 9.00

# drop bloom_index_columns
statement ok
alter table bloom_test_alter_t2 set options(bloom_index_columns='')

query T
explain select 1 from bloom_test_alter_t2 where c1 = 7
----
EvalScalar
├── output columns: [1 (#2)]
├── expressions: [1]
├── estimated rows: 1.00
└── Filter
    ├── output columns: []
    ├── filters: [is_true(bloom_test_alter_t2.c1 (#0) = 7)]
    ├── estimated rows: 1.00
    └── TableScan
        ├── table: default.default.bloom_test_alter_t2
        ├── output columns: [c1 (#0)]
        ├── read rows: 9
        ├── read size: < 1 KiB
        ├── partitions total: 3
        ├── partitions scanned: 3
        ├── pruning stats: [segments: <range pruning: 3 to 3>, blocks: <range pruning: 3 to 3>]
        ├── push downs: [filters: [is_true(bloom_test_alter_t2.c1 (#0) = 7)], limit: NONE]
        └── estimated rows: 9.00

statement ok
drop table bloom_test_alter_t2

statement ok
drop table if exists bloom_test_nullable_t

statement ok
create table bloom_test_nullable_t(c1 int null, c2 int16 null);

statement ok
insert into  bloom_test_nullable_t values(1,1), (5,12340), (10,12341)

statement ok
insert into  bloom_test_nullable_t values(1,1), (7,12342), (10,22340)

query T
explain select 1 from bloom_test_nullable_t where c1 = 5 and c2 > 1;
----
EvalScalar
├── output columns: [1 (#2)]
├── expressions: [1]
├── estimated rows: 1.00
└── Filter
    ├── output columns: []
    ├── filters: [is_true(bloom_test_nullable_t.c1 (#0) = 5), is_true(bloom_test_nullable_t.c2 (#1) > 1)]
    ├── estimated rows: 1.00
    └── TableScan
        ├── table: default.default.bloom_test_nullable_t
        ├── output columns: [c1 (#0), c2 (#1)]
        ├── read rows: 3
        ├── read size: < 1 KiB
        ├── partitions total: 2
        ├── partitions scanned: 1
        ├── pruning stats: [segments: <range pruning: 2 to 2>, blocks: <range pruning: 2 to 2, bloom pruning: 2 to 1>]
        ├── push downs: [filters: [and_filters(bloom_test_nullable_t.c1 (#0) = 5, bloom_test_nullable_t.c2 (#1) > 1)], limit: NONE]
        └── estimated rows: 6.00

query T
explain select 1 from bloom_test_nullable_t where c2 = 12345;
----
EvalScalar
├── output columns: [1 (#2)]
├── expressions: [1]
├── estimated rows: 1.00
└── Filter
    ├── output columns: []
    ├── filters: [is_true(bloom_test_nullable_t.c2 (#1) = 12345)]
    ├── estimated rows: 1.00
    └── TableScan
        ├── table: default.default.bloom_test_nullable_t
        ├── output columns: [c2 (#1)]
        ├── read rows: 0
        ├── read size: 0
        ├── partitions total: 2
        ├── partitions scanned: 0
        ├── pruning stats: [segments: <range pruning: 2 to 1>, blocks: <range pruning: 1 to 1, bloom pruning: 1 to 0>]
        ├── push downs: [filters: [is_true(bloom_test_nullable_t.c2 (#1) = 12345)], limit: NONE]
        └── estimated rows: 6.00

# fix https://github.com/datafuselabs/databend/issues/15570
# fix https://github.com/datafuselabs/databend/issues/15572

statement ok
drop table if exists bloom_test_nullable_t2

statement ok
create table bloom_test_nullable_t2(c0 bool null, c1 int null, c2 varchar null)

statement ok
insert into bloom_test_nullable_t2 values(false, 1, 'a'), (true, 5, null)

query T
explain select * from bloom_test_nullable_t2 where ((c2) in ('1') is null);
----
Filter
├── output columns: [bloom_test_nullable_t2.c0 (#0), bloom_test_nullable_t2.c1 (#1), bloom_test_nullable_t2.c2 (#2)]
├── filters: [NOT is_not_null(bloom_test_nullable_t2.c2 (#2) = '1')]
├── estimated rows: 1.60
└── TableScan
    ├── table: default.default.bloom_test_nullable_t2
    ├── output columns: [c0 (#0), c1 (#1), c2 (#2)]
    ├── read rows: 2
    ├── read size: < 1 KiB
    ├── partitions total: 1
    ├── partitions scanned: 1
    ├── pruning stats: [segments: <range pruning: 1 to 1>, blocks: <range pruning: 1 to 1, bloom pruning: 1 to 1>]
    ├── push downs: [filters: [NOT is_not_null(bloom_test_nullable_t2.c2 (#2) = '1')], limit: NONE]
    └── estimated rows: 2.00

query T
explain select * from bloom_test_nullable_t2 where (not (not c0))
----
Filter
├── output columns: [bloom_test_nullable_t2.c0 (#0), bloom_test_nullable_t2.c1 (#1), bloom_test_nullable_t2.c2 (#2)]
├── filters: [is_true(NOT NOT bloom_test_nullable_t2.c0 (#0))]
├── estimated rows: 2.00
└── TableScan
    ├── table: default.default.bloom_test_nullable_t2
    ├── output columns: [c0 (#0), c1 (#1), c2 (#2)]
    ├── read rows: 2
    ├── read size: < 1 KiB
    ├── partitions total: 1
    ├── partitions scanned: 1
    ├── pruning stats: [segments: <range pruning: 1 to 1>, blocks: <range pruning: 1 to 1>]
    ├── push downs: [filters: [is_true(NOT NOT bloom_test_nullable_t2.c0 (#0))], limit: NONE]
    └── estimated rows: 2.00
