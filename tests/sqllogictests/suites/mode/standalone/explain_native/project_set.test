statement ok
use default;

statement ok
drop table if exists fold_count;

statement ok
create table fold_count(id array(int), c1 string);

statement ok
insert into fold_count values([1,2,3,4], 'x');

query T
explain select count() from (select unnest(id), c1 from fold_count)
----
AggregateFinal
├── output columns: [count() (#4)]
├── group by: []
├── aggregate functions: [count()]
├── estimated rows: 1.00
└── AggregatePartial
    ├── group by: []
    ├── aggregate functions: [count()]
    ├── estimated rows: 1.00
    └── ProjectSet
        ├── output columns: [unnest(fold_count.id (#0)) (#2)]
        ├── estimated rows: 3.00
        ├── set returning functions: unnest(fold_count.id (#0))
        └── TableScan
            ├── table: default.default.fold_count
            ├── output columns: [id (#0)]
            ├── read rows: 1
            ├── read size: < 1 KiB
            ├── partitions total: 1
            ├── partitions scanned: 1
            ├── pruning stats: [segments: <range pruning: 1 to 1>, blocks: <range pruning: 1 to 1>]
            ├── push downs: [filters: [], limit: NONE]
            └── estimated rows: 1.00

statement ok
drop table fold_count;

statement ok
drop database if exists project_set

statement ok
create database project_set

statement ok
use project_set

query T
explain select number from (select unnest([1,2,3]), number from numbers(10)) t
----
ProjectSet
├── output columns: [numbers.number (#0), unnest([1, 2, 3]) (#1)]
├── estimated rows: 30.00
├── set returning functions: unnest([1, 2, 3])
└── TableScan
    ├── table: default.system.numbers
    ├── output columns: [number (#0)]
    ├── read rows: 10
    ├── read size: < 1 KiB
    ├── partitions total: 1
    ├── partitions scanned: 1
    ├── push downs: [filters: [], limit: NONE]
    └── estimated rows: 10.00

query T
explain select number from (select unnest([1,2,3,number]), number from numbers(10)) t
----
ProjectSet
├── output columns: [numbers.number (#0), unnest(array(1, 2, 3, numbers.number (#0))) (#1)]
├── estimated rows: 30.00
├── set returning functions: unnest(CAST(array(1, 2, 3, numbers.number (#0)) AS Array(UInt64 NULL)))
└── TableScan
    ├── table: default.system.numbers
    ├── output columns: [number (#0)]
    ├── read rows: 10
    ├── read size: < 1 KiB
    ├── partitions total: 1
    ├── partitions scanned: 1
    ├── push downs: [filters: [], limit: NONE]
    └── estimated rows: 10.00

query T
explain select * from (select unnest([1,2,3]), number from numbers(10)) t1(a) inner join (select * from numbers(15)) t2(a) on t1.a = t2.a;
----
HashJoin
├── output columns: [numbers.number (#0), a (#2), numbers.number (#3)]
├── join type: INNER
├── build keys: [CAST(t2.a (#3) AS UInt64 NULL)]
├── probe keys: [CAST(t1.a (#2) AS UInt64 NULL)]
├── keys is null equal: [false]
├── filters: []
├── estimated rows: 450.00
├── TableScan(Build)
│   ├── table: default.system.numbers
│   ├── output columns: [number (#3)]
│   ├── read rows: 15
│   ├── read size: < 1 KiB
│   ├── partitions total: 1
│   ├── partitions scanned: 1
│   ├── push downs: [filters: [], limit: NONE]
│   └── estimated rows: 15.00
└── EvalScalar(Probe)
    ├── output columns: [numbers.number (#0), a (#2)]
    ├── expressions: [get(1)(unnest([1, 2, 3]) (#1))]
    ├── estimated rows: 30.00
    └── ProjectSet
        ├── output columns: [numbers.number (#0), unnest([1, 2, 3]) (#1)]
        ├── estimated rows: 30.00
        ├── set returning functions: unnest([1, 2, 3])
        └── TableScan
            ├── table: default.system.numbers
            ├── output columns: [number (#0)]
            ├── read rows: 10
            ├── read size: < 1 KiB
            ├── partitions total: 1
            ├── partitions scanned: 1
            ├── push downs: [filters: [], limit: NONE]
            └── estimated rows: 10.00

statement ok
drop database project_set
