query I
select number from numbers(100) order by number asc limit 10
----
0
1
2
3
4
5
6
7
8
9

query I
select number from numbers(100) order by number*2 asc limit 10
----
0
1
2
3
4
5
6
7
8
9

query I
select number from numbers(100) order by number asc limit 10, 10
----
10
11
12
13
14
15
16
17
18
19

query I
select number from numbers(100) order by number-2 asc limit 10, 10
----
10
11
12
13
14
15
16
17
18
19

query I
select number from numbers(100) order by number asc limit 10 offset 10
----
10
11
12
13
14
15
16
17
18
19

query I
select number from numbers(100) order by number/2 asc limit 10 offset 10
----
10
11
12
13
14
15
16
17
18
19

query I
select number from numbers(10) order by number asc offset 5
----
5
6
7
8
9

query I
select number from numbers(10) order by number+number asc offset 5
----
5
6
7
8
9

query I
select number from numbers(10000) order by number limit 1
----
0

statement ok
drop table if exists t

statement ok
drop table if exists t1

statement ok
create table t(a int)

statement ok
create table t1(a int)

statement ok
insert into t values(1)

statement ok
insert into t1 values(1),(1)

query T
explain select * from t left join t1 on t.a = t1.a limit 1,2
----
Limit
├── output columns: [t1.a (#1), t.a (#0)]
├── limit: 2
├── offset: 0
├── estimated rows: 2.00
└── HashJoin
    ├── output columns: [t1.a (#1), t.a (#0)]
    ├── join type: RIGHT OUTER
    ├── build keys: [t.a (#0)]
    ├── probe keys: [t1.a (#1)]
    ├── keys is null equal: [false]
    ├── filters: []
    ├── estimated rows: 2.00
    ├── Limit(Build)
    │   ├── output columns: [t.a (#0)]
    │   ├── limit: 2
    │   ├── offset: 1
    │   ├── estimated rows: 1.00
    │   └── TableScan
    │       ├── table: default.default.t
    │       ├── output columns: [a (#0)]
    │       ├── read rows: 1
    │       ├── read size: < 1 KiB
    │       ├── partitions total: 1
    │       ├── partitions scanned: 1
    │       ├── pruning stats: [segments: <range pruning: 1 to 1>, blocks: <range pruning: 1 to 1>]
    │       ├── push downs: [filters: [], limit: 3]
    │       └── estimated rows: 1.00
    └── TableScan(Probe)
        ├── table: default.default.t1
        ├── output columns: [a (#1)]
        ├── read rows: 2
        ├── read size: < 1 KiB
        ├── partitions total: 1
        ├── partitions scanned: 1
        ├── pruning stats: [segments: <range pruning: 1 to 1>, blocks: <range pruning: 1 to 1>]
        ├── push downs: [filters: [], limit: NONE]
        └── estimated rows: 2.00

query T
explain select * from t1 right join t on t.a = t1.a limit 1,2
----
Limit
├── output columns: [t1.a (#0), t.a (#1)]
├── limit: 2
├── offset: 0
├── estimated rows: 2.00
└── HashJoin
    ├── output columns: [t1.a (#0), t.a (#1)]
    ├── join type: RIGHT OUTER
    ├── build keys: [t.a (#1)]
    ├── probe keys: [t1.a (#0)]
    ├── keys is null equal: [false]
    ├── filters: []
    ├── estimated rows: 2.00
    ├── Limit(Build)
    │   ├── output columns: [t.a (#1)]
    │   ├── limit: 2
    │   ├── offset: 1
    │   ├── estimated rows: 1.00
    │   └── TableScan
    │       ├── table: default.default.t
    │       ├── output columns: [a (#1)]
    │       ├── read rows: 1
    │       ├── read size: < 1 KiB
    │       ├── partitions total: 1
    │       ├── partitions scanned: 1
    │       ├── pruning stats: [segments: <range pruning: 1 to 1>, blocks: <range pruning: 1 to 1>]
    │       ├── push downs: [filters: [], limit: 3]
    │       └── estimated rows: 1.00
    └── TableScan(Probe)
        ├── table: default.default.t1
        ├── output columns: [a (#0)]
        ├── read rows: 2
        ├── read size: < 1 KiB
        ├── partitions total: 1
        ├── partitions scanned: 1
        ├── pruning stats: [segments: <range pruning: 1 to 1>, blocks: <range pruning: 1 to 1>]
        ├── push downs: [filters: [], limit: NONE]
        └── estimated rows: 2.00

query II
select * from t left join t1 on t.a = t1.a limit 1
----
1 1

query II
select * from t1 right join t on t.a = t1.a limit 1
----
1 1

statement ok
drop table if exists t

statement ok
drop table if exists t1
