# push down filter full outer join
statement ok
drop table if exists t1;

statement ok
drop table if exists t2;

statement ok
create table t1(a int, b int);

statement ok
create table t2(a int, b int);

statement ok
insert into t1 values(null, null), (1, 1), (2, 2), (3, 3);

statement ok
insert into t2 values(null, null), (1, 1), (2, 2);

# convert full outer join to inner join, can propagate t1.a > 0
query T
explain select * from t1 full outer join t2 on t1.a = t2.a where t1.a > 0;
----
HashJoin
├── output columns: [t1.a (#0), t1.b (#1), t2.a (#2), t2.b (#3)]
├── join type: LEFT OUTER
├── build keys: [t2.a (#2)]
├── probe keys: [t1.a (#0)]
├── keys is null equal: [false]
├── filters: []
├── estimated rows: 4.00
├── TableScan(Build)
│   ├── table: default.default.t2
│   ├── output columns: [a (#2), b (#3)]
│   ├── read rows: 3
│   ├── read size: < 1 KiB
│   ├── partitions total: 1
│   ├── partitions scanned: 1
│   ├── pruning stats: [segments: <range pruning: 1 to 1>, blocks: <range pruning: 1 to 1>]
│   ├── push downs: [filters: [is_true(t2.a (#2) > 0)], limit: NONE]
│   └── estimated rows: 3.00
└── TableScan(Probe)
    ├── table: default.default.t1
    ├── output columns: [a (#0), b (#1)]
    ├── read rows: 4
    ├── read size: < 1 KiB
    ├── partitions total: 1
    ├── partitions scanned: 1
    ├── pruning stats: [segments: <range pruning: 1 to 1>, blocks: <range pruning: 1 to 1>]
    ├── push downs: [filters: [is_true(t1.a (#0) > 0)], limit: NONE]
    └── estimated rows: 4.00

# convert full outer join to inner join, can propagate t2.a > 0
query T
explain select * from t1 full outer join t2 on t1.a = t2.a where t2.a > 0;
----
HashJoin
├── output columns: [t1.a (#0), t1.b (#1), t2.a (#2), t2.b (#3)]
├── join type: RIGHT OUTER
├── build keys: [t2.a (#2)]
├── probe keys: [t1.a (#0)]
├── keys is null equal: [false]
├── filters: []
├── estimated rows: 4.00
├── TableScan(Build)
│   ├── table: default.default.t2
│   ├── output columns: [a (#2), b (#3)]
│   ├── read rows: 3
│   ├── read size: < 1 KiB
│   ├── partitions total: 1
│   ├── partitions scanned: 1
│   ├── pruning stats: [segments: <range pruning: 1 to 1>, blocks: <range pruning: 1 to 1>]
│   ├── push downs: [filters: [is_true(t2.a (#2) > 0)], limit: NONE]
│   └── estimated rows: 3.00
└── TableScan(Probe)
    ├── table: default.default.t1
    ├── output columns: [a (#0), b (#1)]
    ├── read rows: 4
    ├── read size: < 1 KiB
    ├── partitions total: 1
    ├── partitions scanned: 1
    ├── pruning stats: [segments: <range pruning: 1 to 1>, blocks: <range pruning: 1 to 1>]
    ├── push downs: [filters: [is_true(t1.a (#0) > 0)], limit: NONE]
    └── estimated rows: 4.00

# convert full outer join to left outer join, can not propagate t1.b > 0
query T
explain select * from t1 full outer join t2 on t1.a = t2.a where t1.b > 0;
----
HashJoin
├── output columns: [t1.a (#0), t1.b (#1), t2.a (#2), t2.b (#3)]
├── join type: LEFT OUTER
├── build keys: [t2.a (#2)]
├── probe keys: [t1.a (#0)]
├── keys is null equal: [false]
├── filters: []
├── estimated rows: 4.00
├── TableScan(Build)
│   ├── table: default.default.t2
│   ├── output columns: [a (#2), b (#3)]
│   ├── read rows: 3
│   ├── read size: < 1 KiB
│   ├── partitions total: 1
│   ├── partitions scanned: 1
│   ├── pruning stats: [segments: <range pruning: 1 to 1>, blocks: <range pruning: 1 to 1>]
│   ├── push downs: [filters: [], limit: NONE]
│   └── estimated rows: 3.00
└── TableScan(Probe)
    ├── table: default.default.t1
    ├── output columns: [a (#0), b (#1)]
    ├── read rows: 4
    ├── read size: < 1 KiB
    ├── partitions total: 1
    ├── partitions scanned: 1
    ├── pruning stats: [segments: <range pruning: 1 to 1>, blocks: <range pruning: 1 to 1>]
    ├── push downs: [filters: [is_true(t1.b (#1) > 0)], limit: NONE]
    └── estimated rows: 4.00

# convert full outer join to right outer join, can not propagate t2.b > 0
query T
explain select * from t1 full outer join t2 on t1.a = t2.a where t2.b > 0;
----
HashJoin
├── output columns: [t1.a (#0), t1.b (#1), t2.a (#2), t2.b (#3)]
├── join type: RIGHT OUTER
├── build keys: [t2.a (#2)]
├── probe keys: [t1.a (#0)]
├── keys is null equal: [false]
├── filters: []
├── estimated rows: 4.00
├── TableScan(Build)
│   ├── table: default.default.t2
│   ├── output columns: [a (#2), b (#3)]
│   ├── read rows: 3
│   ├── read size: < 1 KiB
│   ├── partitions total: 1
│   ├── partitions scanned: 1
│   ├── pruning stats: [segments: <range pruning: 1 to 1>, blocks: <range pruning: 1 to 1>]
│   ├── push downs: [filters: [is_true(t2.b (#3) > 0)], limit: NONE]
│   └── estimated rows: 3.00
└── TableScan(Probe)
    ├── table: default.default.t1
    ├── output columns: [a (#0), b (#1)]
    ├── read rows: 4
    ├── read size: < 1 KiB
    ├── partitions total: 1
    ├── partitions scanned: 1
    ├── pruning stats: [segments: <range pruning: 1 to 1>, blocks: <range pruning: 1 to 1>]
    ├── push downs: [filters: [], limit: NONE]
    └── estimated rows: 4.00

# convert full outer join to inner join, can propagate t1.a > 0
query T
explain select * from t1 full outer join t2 on t1.a = t2.a where t1.a > 0 and t2.b > 0;
----
HashJoin
├── output columns: [t1.a (#0), t1.b (#1), t2.b (#3), t2.a (#2)]
├── join type: INNER
├── build keys: [t2.a (#2)]
├── probe keys: [t1.a (#0)]
├── keys is null equal: [false]
├── filters: []
├── estimated rows: 4.00
├── TableScan(Build)
│   ├── table: default.default.t2
│   ├── output columns: [a (#2), b (#3)]
│   ├── read rows: 3
│   ├── read size: < 1 KiB
│   ├── partitions total: 1
│   ├── partitions scanned: 1
│   ├── pruning stats: [segments: <range pruning: 1 to 1>, blocks: <range pruning: 1 to 1>]
│   ├── push downs: [filters: [and_filters(t2.a (#2) > 0, t2.b (#3) > 0)], limit: NONE]
│   └── estimated rows: 3.00
└── TableScan(Probe)
    ├── table: default.default.t1
    ├── output columns: [a (#0), b (#1)]
    ├── read rows: 4
    ├── read size: < 1 KiB
    ├── partitions total: 1
    ├── partitions scanned: 1
    ├── pruning stats: [segments: <range pruning: 1 to 1>, blocks: <range pruning: 1 to 1>]
    ├── push downs: [filters: [is_true(t1.a (#0) > 0)], limit: NONE]
    └── estimated rows: 4.00

# convert full outer join to inner join, can propagate t2.a > 0
query T
explain select * from t1 full outer join t2 on t1.a = t2.a where t2.a > 0 and t1.b > 0;
----
HashJoin
├── output columns: [t1.a (#0), t1.b (#1), t2.b (#3), t2.a (#2)]
├── join type: INNER
├── build keys: [t2.a (#2)]
├── probe keys: [t1.a (#0)]
├── keys is null equal: [false]
├── filters: []
├── estimated rows: 4.00
├── TableScan(Build)
│   ├── table: default.default.t2
│   ├── output columns: [a (#2), b (#3)]
│   ├── read rows: 3
│   ├── read size: < 1 KiB
│   ├── partitions total: 1
│   ├── partitions scanned: 1
│   ├── pruning stats: [segments: <range pruning: 1 to 1>, blocks: <range pruning: 1 to 1>]
│   ├── push downs: [filters: [is_true(t2.a (#2) > 0)], limit: NONE]
│   └── estimated rows: 3.00
└── TableScan(Probe)
    ├── table: default.default.t1
    ├── output columns: [a (#0), b (#1)]
    ├── read rows: 4
    ├── read size: < 1 KiB
    ├── partitions total: 1
    ├── partitions scanned: 1
    ├── pruning stats: [segments: <range pruning: 1 to 1>, blocks: <range pruning: 1 to 1>]
    ├── push downs: [filters: [and_filters(t1.a (#0) > 0, t1.b (#1) > 0)], limit: NONE]
    └── estimated rows: 4.00

# full outer join, can not push down
query T
explain select * from t1 full outer join t2 on t1.a = t2.a and t2.a > 0;
----
HashJoin
├── output columns: [t1.a (#0), t1.b (#1), t2.a (#2), t2.b (#3)]
├── join type: FULL OUTER
├── build keys: [t2.a (#2)]
├── probe keys: [t1.a (#0)]
├── keys is null equal: [false]
├── filters: [t2.a (#2) > 0]
├── estimated rows: 4.00
├── TableScan(Build)
│   ├── table: default.default.t2
│   ├── output columns: [a (#2), b (#3)]
│   ├── read rows: 3
│   ├── read size: < 1 KiB
│   ├── partitions total: 1
│   ├── partitions scanned: 1
│   ├── pruning stats: [segments: <range pruning: 1 to 1>, blocks: <range pruning: 1 to 1>]
│   ├── push downs: [filters: [], limit: NONE]
│   └── estimated rows: 3.00
└── TableScan(Probe)
    ├── table: default.default.t1
    ├── output columns: [a (#0), b (#1)]
    ├── read rows: 4
    ├── read size: < 1 KiB
    ├── partitions total: 1
    ├── partitions scanned: 1
    ├── pruning stats: [segments: <range pruning: 1 to 1>, blocks: <range pruning: 1 to 1>]
    ├── push downs: [filters: [], limit: NONE]
    └── estimated rows: 4.00

statement ok
drop table if exists t1;

statement ok
drop table if exists t2;
