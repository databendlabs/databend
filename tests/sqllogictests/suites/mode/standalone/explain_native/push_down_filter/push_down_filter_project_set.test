# push down filter ProjectSet
statement ok
drop table if exists products;

statement ok
create table products(name varchar, details variant);

statement ok
insert into products(name, details) values ('Laptop', '{"brand": "Dell", "colors": ["Black", "Silver"], "price": 1200, "features": {"ram": "16GB", "storage": "512GB"}}'), ('Smartphone', '{"brand": "Apple", "colors": ["White", "Black"], "price": 999, "features": {"ram": "4GB", "storage": "128GB"}}'), ('Headphones', '{"brand": "Sony", "colors": ["Black", "Blue", "Red"], "price": 150, "features": {"battery": "20h", "bluetooth": "5.0"}}');

query T
explain select name, json_path_query(details, '$.features.*') as all_features, json_path_query_first(details, '$.features.*') as first_feature from products where name = 'Laptop' and first_feature = '16GB' and all_features = '512GB';
----
EvalScalar
├── output columns: [products.name (#0), all_features (#3), first_feature (#4)]
├── expressions: [get(1)(json_path_query(products.details (#1), '$.features.*') (#2)), json_path_query_first(products.details (#1), '$.features.*')]
├── estimated rows: 0.36
└── Filter
    ├── output columns: [products.name (#0), products.details (#1), json_path_query(products.details (#1), '$.features.*') (#2)]
    ├── filters: [is_true(get(1)(json_path_query(products.details (#1), '$.features.*') (#2)) = '"512GB"')]
    ├── estimated rows: 0.36
    └── ProjectSet
        ├── output columns: [products.name (#0), products.details (#1), json_path_query(products.details (#1), '$.features.*') (#2)]
        ├── estimated rows: 1.80
        ├── set returning functions: json_path_query(products.details (#1), '$.features.*')
        └── TableScan
            ├── table: default.default.products
            ├── output columns: [name (#0), details (#1)]
            ├── read rows: 3
            ├── read size: < 1 KiB
            ├── partitions total: 1
            ├── partitions scanned: 1
            ├── pruning stats: [segments: <range pruning: 1 to 1>, blocks: <range pruning: 1 to 1, bloom pruning: 1 to 1>]
            ├── push downs: [filters: [and_filters(products.name (#0) = 'Laptop', json_path_query_first(products.details (#1), '$.features.*') = '"16GB"')], limit: NONE]
            └── estimated rows: 0.60

query T
select name, json_path_query(details, '$.features.*') as all_features, json_path_query_first(details, '$.features.*') as first_feature from products where name = 'Laptop' and first_feature = '16GB' and all_features = '512GB';
----
Laptop "512GB" "16GB"

query T
explain select name, json_path_query(details, '$.features.*') as all_features, json_path_query_first(details, '$.features.*') as first_feature from products where name = 'Laptop' and first_feature = '16GB';
----
EvalScalar
├── output columns: [products.name (#0), all_features (#3), first_feature (#4)]
├── expressions: [get(1)(json_path_query(products.details (#1), '$.features.*') (#2)), json_path_query_first(products.details (#1), '$.features.*')]
├── estimated rows: 1.80
└── ProjectSet
    ├── output columns: [products.name (#0), products.details (#1), json_path_query(products.details (#1), '$.features.*') (#2)]
    ├── estimated rows: 1.80
    ├── set returning functions: json_path_query(products.details (#1), '$.features.*')
    └── TableScan
        ├── table: default.default.products
        ├── output columns: [name (#0), details (#1)]
        ├── read rows: 3
        ├── read size: < 1 KiB
        ├── partitions total: 1
        ├── partitions scanned: 1
        ├── pruning stats: [segments: <range pruning: 1 to 1>, blocks: <range pruning: 1 to 1, bloom pruning: 1 to 1>]
        ├── push downs: [filters: [and_filters(products.name (#0) = 'Laptop', json_path_query_first(products.details (#1), '$.features.*') = '"16GB"')], limit: NONE]
        └── estimated rows: 0.60

query T
select name, json_path_query(details, '$.features.*') as all_features, json_path_query_first(details, '$.features.*') as first_feature from products where name = 'Laptop' and first_feature = '16GB';
----
Laptop "16GB" "16GB"
Laptop "512GB" "16GB"

statement ok
drop table if exists products;
