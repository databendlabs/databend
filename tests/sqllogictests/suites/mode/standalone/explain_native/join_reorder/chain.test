statement ok
drop database if exists join_reorder

statement ok
create database join_reorder

statement ok
use join_reorder

statement ok
drop table if exists t

statement ok
settings (ddl_column_type_nullable=0) create table t as select number as a from numbers(1)

statement ok
drop table if exists t1

statement ok
settings (ddl_column_type_nullable=0) create table t1 as select number as a from numbers(10)

statement ok
drop table if exists t2

statement ok
settings (ddl_column_type_nullable=0) create table t2 as select number as a from numbers(100)

query T
explain select * from t, t1, t2 where t.a = t1.a and t1.a = t2.a
----
HashJoin
├── output columns: [t2.a (#2), t1.a (#1), t.a (#0)]
├── join type: INNER
├── build keys: [t.a (#0)]
├── probe keys: [t2.a (#2)]
├── keys is null equal: [false]
├── filters: []
├── estimated rows: 1.00
├── HashJoin(Build)
│   ├── output columns: [t1.a (#1), t.a (#0)]
│   ├── join type: INNER
│   ├── build keys: [t.a (#0)]
│   ├── probe keys: [t1.a (#1)]
│   ├── keys is null equal: [false]
│   ├── filters: []
│   ├── estimated rows: 1.00
│   ├── TableScan(Build)
│   │   ├── table: default.join_reorder.t
│   │   ├── output columns: [a (#0)]
│   │   ├── read rows: 1
│   │   ├── read size: < 1 KiB
│   │   ├── partitions total: 1
│   │   ├── partitions scanned: 1
│   │   ├── pruning stats: [segments: <range pruning: 1 to 1>, blocks: <range pruning: 1 to 1>]
│   │   ├── push downs: [filters: [], limit: NONE]
│   │   └── estimated rows: 1.00
│   └── TableScan(Probe)
│       ├── table: default.join_reorder.t1
│       ├── output columns: [a (#1)]
│       ├── read rows: 10
│       ├── read size: < 1 KiB
│       ├── partitions total: 1
│       ├── partitions scanned: 1
│       ├── pruning stats: [segments: <range pruning: 1 to 1>, blocks: <range pruning: 1 to 1>]
│       ├── push downs: [filters: [], limit: NONE]
│       └── estimated rows: 10.00
└── TableScan(Probe)
    ├── table: default.join_reorder.t2
    ├── output columns: [a (#2)]
    ├── read rows: 100
    ├── read size: < 1 KiB
    ├── partitions total: 1
    ├── partitions scanned: 1
    ├── pruning stats: [segments: <range pruning: 1 to 1>, blocks: <range pruning: 1 to 1>]
    ├── push downs: [filters: [], limit: NONE]
    └── estimated rows: 100.00

query T
explain select * from t, t2, t1 where t.a = t1.a and t1.a = t2.a
----
HashJoin
├── output columns: [t1.a (#2), t2.a (#1), t.a (#0)]
├── join type: INNER
├── build keys: [t.a (#0)]
├── probe keys: [t1.a (#2)]
├── keys is null equal: [false]
├── filters: []
├── estimated rows: 1.00
├── HashJoin(Build)
│   ├── output columns: [t2.a (#1), t.a (#0)]
│   ├── join type: INNER
│   ├── build keys: [t.a (#0)]
│   ├── probe keys: [t2.a (#1)]
│   ├── keys is null equal: [false]
│   ├── filters: []
│   ├── estimated rows: 1.00
│   ├── TableScan(Build)
│   │   ├── table: default.join_reorder.t
│   │   ├── output columns: [a (#0)]
│   │   ├── read rows: 1
│   │   ├── read size: < 1 KiB
│   │   ├── partitions total: 1
│   │   ├── partitions scanned: 1
│   │   ├── pruning stats: [segments: <range pruning: 1 to 1>, blocks: <range pruning: 1 to 1>]
│   │   ├── push downs: [filters: [], limit: NONE]
│   │   └── estimated rows: 1.00
│   └── TableScan(Probe)
│       ├── table: default.join_reorder.t2
│       ├── output columns: [a (#1)]
│       ├── read rows: 100
│       ├── read size: < 1 KiB
│       ├── partitions total: 1
│       ├── partitions scanned: 1
│       ├── pruning stats: [segments: <range pruning: 1 to 1>, blocks: <range pruning: 1 to 1>]
│       ├── push downs: [filters: [], limit: NONE]
│       └── estimated rows: 100.00
└── TableScan(Probe)
    ├── table: default.join_reorder.t1
    ├── output columns: [a (#2)]
    ├── read rows: 10
    ├── read size: < 1 KiB
    ├── partitions total: 1
    ├── partitions scanned: 1
    ├── pruning stats: [segments: <range pruning: 1 to 1>, blocks: <range pruning: 1 to 1>]
    ├── push downs: [filters: [], limit: NONE]
    └── estimated rows: 10.00

query T
explain select * from t1, t, t2 where t.a = t1.a and t1.a = t2.a
----
HashJoin
├── output columns: [t1.a (#0), t.a (#1), t2.a (#2)]
├── join type: INNER
├── build keys: [t2.a (#2)]
├── probe keys: [t1.a (#0)]
├── keys is null equal: [false]
├── filters: []
├── estimated rows: 1.00
├── HashJoin(Build)
│   ├── output columns: [t2.a (#2), t.a (#1)]
│   ├── join type: INNER
│   ├── build keys: [t.a (#1)]
│   ├── probe keys: [t2.a (#2)]
│   ├── keys is null equal: [false]
│   ├── filters: []
│   ├── estimated rows: 1.00
│   ├── TableScan(Build)
│   │   ├── table: default.join_reorder.t
│   │   ├── output columns: [a (#1)]
│   │   ├── read rows: 1
│   │   ├── read size: < 1 KiB
│   │   ├── partitions total: 1
│   │   ├── partitions scanned: 1
│   │   ├── pruning stats: [segments: <range pruning: 1 to 1>, blocks: <range pruning: 1 to 1>]
│   │   ├── push downs: [filters: [], limit: NONE]
│   │   └── estimated rows: 1.00
│   └── TableScan(Probe)
│       ├── table: default.join_reorder.t2
│       ├── output columns: [a (#2)]
│       ├── read rows: 100
│       ├── read size: < 1 KiB
│       ├── partitions total: 1
│       ├── partitions scanned: 1
│       ├── pruning stats: [segments: <range pruning: 1 to 1>, blocks: <range pruning: 1 to 1>]
│       ├── push downs: [filters: [], limit: NONE]
│       └── estimated rows: 100.00
└── TableScan(Probe)
    ├── table: default.join_reorder.t1
    ├── output columns: [a (#0)]
    ├── read rows: 10
    ├── read size: < 1 KiB
    ├── partitions total: 1
    ├── partitions scanned: 1
    ├── pruning stats: [segments: <range pruning: 1 to 1>, blocks: <range pruning: 1 to 1>]
    ├── push downs: [filters: [], limit: NONE]
    └── estimated rows: 10.00

query T
explain select * from t1, t2, t where t.a = t1.a and t1.a = t2.a
----
HashJoin
├── output columns: [t1.a (#0), t2.a (#1), t.a (#2)]
├── join type: INNER
├── build keys: [t.a (#2)]
├── probe keys: [t1.a (#0)]
├── keys is null equal: [false]
├── filters: []
├── estimated rows: 1.00
├── HashJoin(Build)
│   ├── output columns: [t2.a (#1), t.a (#2)]
│   ├── join type: INNER
│   ├── build keys: [t.a (#2)]
│   ├── probe keys: [t2.a (#1)]
│   ├── keys is null equal: [false]
│   ├── filters: []
│   ├── estimated rows: 1.00
│   ├── TableScan(Build)
│   │   ├── table: default.join_reorder.t
│   │   ├── output columns: [a (#2)]
│   │   ├── read rows: 1
│   │   ├── read size: < 1 KiB
│   │   ├── partitions total: 1
│   │   ├── partitions scanned: 1
│   │   ├── pruning stats: [segments: <range pruning: 1 to 1>, blocks: <range pruning: 1 to 1>]
│   │   ├── push downs: [filters: [], limit: NONE]
│   │   └── estimated rows: 1.00
│   └── TableScan(Probe)
│       ├── table: default.join_reorder.t2
│       ├── output columns: [a (#1)]
│       ├── read rows: 100
│       ├── read size: < 1 KiB
│       ├── partitions total: 1
│       ├── partitions scanned: 1
│       ├── pruning stats: [segments: <range pruning: 1 to 1>, blocks: <range pruning: 1 to 1>]
│       ├── push downs: [filters: [], limit: NONE]
│       └── estimated rows: 100.00
└── TableScan(Probe)
    ├── table: default.join_reorder.t1
    ├── output columns: [a (#0)]
    ├── read rows: 10
    ├── read size: < 1 KiB
    ├── partitions total: 1
    ├── partitions scanned: 1
    ├── pruning stats: [segments: <range pruning: 1 to 1>, blocks: <range pruning: 1 to 1>]
    ├── push downs: [filters: [], limit: NONE]
    └── estimated rows: 10.00

query T
explain select * from t2, t1, t where t.a = t1.a and t1.a = t2.a
----
HashJoin
├── output columns: [t2.a (#0), t1.a (#1), t.a (#2)]
├── join type: INNER
├── build keys: [t.a (#2)]
├── probe keys: [t2.a (#0)]
├── keys is null equal: [false]
├── filters: []
├── estimated rows: 1.00
├── HashJoin(Build)
│   ├── output columns: [t1.a (#1), t.a (#2)]
│   ├── join type: INNER
│   ├── build keys: [t.a (#2)]
│   ├── probe keys: [t1.a (#1)]
│   ├── keys is null equal: [false]
│   ├── filters: []
│   ├── estimated rows: 1.00
│   ├── TableScan(Build)
│   │   ├── table: default.join_reorder.t
│   │   ├── output columns: [a (#2)]
│   │   ├── read rows: 1
│   │   ├── read size: < 1 KiB
│   │   ├── partitions total: 1
│   │   ├── partitions scanned: 1
│   │   ├── pruning stats: [segments: <range pruning: 1 to 1>, blocks: <range pruning: 1 to 1>]
│   │   ├── push downs: [filters: [], limit: NONE]
│   │   └── estimated rows: 1.00
│   └── TableScan(Probe)
│       ├── table: default.join_reorder.t1
│       ├── output columns: [a (#1)]
│       ├── read rows: 10
│       ├── read size: < 1 KiB
│       ├── partitions total: 1
│       ├── partitions scanned: 1
│       ├── pruning stats: [segments: <range pruning: 1 to 1>, blocks: <range pruning: 1 to 1>]
│       ├── push downs: [filters: [], limit: NONE]
│       └── estimated rows: 10.00
└── TableScan(Probe)
    ├── table: default.join_reorder.t2
    ├── output columns: [a (#0)]
    ├── read rows: 100
    ├── read size: < 1 KiB
    ├── partitions total: 1
    ├── partitions scanned: 1
    ├── pruning stats: [segments: <range pruning: 1 to 1>, blocks: <range pruning: 1 to 1>]
    ├── push downs: [filters: [], limit: NONE]
    └── estimated rows: 100.00

query T
explain select * from t2, t, t1 where t.a = t1.a and t1.a = t2.a
----
HashJoin
├── output columns: [t2.a (#0), t.a (#1), t1.a (#2)]
├── join type: INNER
├── build keys: [t1.a (#2)]
├── probe keys: [t2.a (#0)]
├── keys is null equal: [false]
├── filters: []
├── estimated rows: 1.00
├── HashJoin(Build)
│   ├── output columns: [t1.a (#2), t.a (#1)]
│   ├── join type: INNER
│   ├── build keys: [t.a (#1)]
│   ├── probe keys: [t1.a (#2)]
│   ├── keys is null equal: [false]
│   ├── filters: []
│   ├── estimated rows: 1.00
│   ├── TableScan(Build)
│   │   ├── table: default.join_reorder.t
│   │   ├── output columns: [a (#1)]
│   │   ├── read rows: 1
│   │   ├── read size: < 1 KiB
│   │   ├── partitions total: 1
│   │   ├── partitions scanned: 1
│   │   ├── pruning stats: [segments: <range pruning: 1 to 1>, blocks: <range pruning: 1 to 1>]
│   │   ├── push downs: [filters: [], limit: NONE]
│   │   └── estimated rows: 1.00
│   └── TableScan(Probe)
│       ├── table: default.join_reorder.t1
│       ├── output columns: [a (#2)]
│       ├── read rows: 10
│       ├── read size: < 1 KiB
│       ├── partitions total: 1
│       ├── partitions scanned: 1
│       ├── pruning stats: [segments: <range pruning: 1 to 1>, blocks: <range pruning: 1 to 1>]
│       ├── push downs: [filters: [], limit: NONE]
│       └── estimated rows: 10.00
└── TableScan(Probe)
    ├── table: default.join_reorder.t2
    ├── output columns: [a (#0)]
    ├── read rows: 100
    ├── read size: < 1 KiB
    ├── partitions total: 1
    ├── partitions scanned: 1
    ├── pruning stats: [segments: <range pruning: 1 to 1>, blocks: <range pruning: 1 to 1>]
    ├── push downs: [filters: [], limit: NONE]
    └── estimated rows: 100.00

query T
explain select * from t left join t1 on t1.a = t.a
----
HashJoin
├── output columns: [a (#2), t.a (#0)]
├── join type: RIGHT OUTER
├── build keys: [CAST(t.a (#0) AS UInt64 NULL)]
├── probe keys: [t1.a (#2)]
├── keys is null equal: [false]
├── filters: []
├── estimated rows: 10.00
├── TableScan(Build)
│   ├── table: default.join_reorder.t
│   ├── output columns: [a (#0)]
│   ├── read rows: 1
│   ├── read size: < 1 KiB
│   ├── partitions total: 1
│   ├── partitions scanned: 1
│   ├── pruning stats: [segments: <range pruning: 1 to 1>, blocks: <range pruning: 1 to 1>]
│   ├── push downs: [filters: [], limit: NONE]
│   └── estimated rows: 1.00
└── EvalScalar(Probe)
    ├── output columns: [a (#2)]
    ├── expressions: [CAST(t1.a (#1) AS UInt64 NULL)]
    ├── estimated rows: 10.00
    └── TableScan
        ├── table: default.join_reorder.t1
        ├── output columns: [a (#1)]
        ├── read rows: 10
        ├── read size: < 1 KiB
        ├── partitions total: 1
        ├── partitions scanned: 1
        ├── pruning stats: [segments: <range pruning: 1 to 1>, blocks: <range pruning: 1 to 1>]
        ├── push downs: [filters: [], limit: NONE]
        └── estimated rows: 10.00

query T
explain select * from t right join t1 on t1.a = t.a
----
HashJoin
├── output columns: [t1.a (#1), a (#2)]
├── join type: LEFT OUTER
├── build keys: [t.a (#2)]
├── probe keys: [CAST(t1.a (#1) AS UInt64 NULL)]
├── keys is null equal: [false]
├── filters: []
├── estimated rows: 10.00
├── EvalScalar(Build)
│   ├── output columns: [a (#2)]
│   ├── expressions: [CAST(t.a (#0) AS UInt64 NULL)]
│   ├── estimated rows: 1.00
│   └── TableScan
│       ├── table: default.join_reorder.t
│       ├── output columns: [a (#0)]
│       ├── read rows: 1
│       ├── read size: < 1 KiB
│       ├── partitions total: 1
│       ├── partitions scanned: 1
│       ├── pruning stats: [segments: <range pruning: 1 to 1>, blocks: <range pruning: 1 to 1>]
│       ├── push downs: [filters: [], limit: NONE]
│       └── estimated rows: 1.00
└── TableScan(Probe)
    ├── table: default.join_reorder.t1
    ├── output columns: [a (#1)]
    ├── read rows: 10
    ├── read size: < 1 KiB
    ├── partitions total: 1
    ├── partitions scanned: 1
    ├── pruning stats: [segments: <range pruning: 1 to 1>, blocks: <range pruning: 1 to 1>]
    ├── push downs: [filters: [], limit: NONE]
    └── estimated rows: 10.00

query T
explain select * from t left semi join t1 on t1.a = t.a
----
HashJoin
├── output columns: [t.a (#0)]
├── join type: RIGHT SEMI
├── build keys: [t.a (#0)]
├── probe keys: [t1.a (#1)]
├── keys is null equal: [false]
├── filters: []
├── estimated rows: 1.00
├── TableScan(Build)
│   ├── table: default.join_reorder.t
│   ├── output columns: [a (#0)]
│   ├── read rows: 1
│   ├── read size: < 1 KiB
│   ├── partitions total: 1
│   ├── partitions scanned: 1
│   ├── pruning stats: [segments: <range pruning: 1 to 1>, blocks: <range pruning: 1 to 1>]
│   ├── push downs: [filters: [], limit: NONE]
│   └── estimated rows: 1.00
└── TableScan(Probe)
    ├── table: default.join_reorder.t1
    ├── output columns: [a (#1)]
    ├── read rows: 10
    ├── read size: < 1 KiB
    ├── partitions total: 1
    ├── partitions scanned: 1
    ├── pruning stats: [segments: <range pruning: 1 to 1>, blocks: <range pruning: 1 to 1>]
    ├── push downs: [filters: [], limit: NONE]
    └── estimated rows: 10.00

query T
explain select * from t right semi join t1 on t1.a = t.a
----
HashJoin
├── output columns: [t1.a (#1)]
├── join type: LEFT SEMI
├── build keys: [t.a (#0)]
├── probe keys: [t1.a (#1)]
├── keys is null equal: [false]
├── filters: []
├── estimated rows: 1.00
├── TableScan(Build)
│   ├── table: default.join_reorder.t
│   ├── output columns: [a (#0)]
│   ├── read rows: 1
│   ├── read size: < 1 KiB
│   ├── partitions total: 1
│   ├── partitions scanned: 1
│   ├── pruning stats: [segments: <range pruning: 1 to 1>, blocks: <range pruning: 1 to 1>]
│   ├── push downs: [filters: [], limit: NONE]
│   └── estimated rows: 1.00
└── TableScan(Probe)
    ├── table: default.join_reorder.t1
    ├── output columns: [a (#1)]
    ├── read rows: 10
    ├── read size: < 1 KiB
    ├── partitions total: 1
    ├── partitions scanned: 1
    ├── pruning stats: [segments: <range pruning: 1 to 1>, blocks: <range pruning: 1 to 1>]
    ├── push downs: [filters: [], limit: NONE]
    └── estimated rows: 10.00

query T
explain select * from t left anti join t1 on t1.a = t.a
----
HashJoin
├── output columns: [t.a (#0)]
├── join type: RIGHT ANTI
├── build keys: [t.a (#0)]
├── probe keys: [t1.a (#1)]
├── keys is null equal: [false]
├── filters: []
├── estimated rows: 1.00
├── TableScan(Build)
│   ├── table: default.join_reorder.t
│   ├── output columns: [a (#0)]
│   ├── read rows: 1
│   ├── read size: < 1 KiB
│   ├── partitions total: 1
│   ├── partitions scanned: 1
│   ├── pruning stats: [segments: <range pruning: 1 to 1>, blocks: <range pruning: 1 to 1>]
│   ├── push downs: [filters: [], limit: NONE]
│   └── estimated rows: 1.00
└── TableScan(Probe)
    ├── table: default.join_reorder.t1
    ├── output columns: [a (#1)]
    ├── read rows: 10
    ├── read size: < 1 KiB
    ├── partitions total: 1
    ├── partitions scanned: 1
    ├── pruning stats: [segments: <range pruning: 1 to 1>, blocks: <range pruning: 1 to 1>]
    ├── push downs: [filters: [], limit: NONE]
    └── estimated rows: 10.00

query T
explain select * from t right anti join t1 on t1.a = t.a
----
HashJoin
├── output columns: [t1.a (#1)]
├── join type: LEFT ANTI
├── build keys: [t.a (#0)]
├── probe keys: [t1.a (#1)]
├── keys is null equal: [false]
├── filters: []
├── estimated rows: 10.00
├── TableScan(Build)
│   ├── table: default.join_reorder.t
│   ├── output columns: [a (#0)]
│   ├── read rows: 1
│   ├── read size: < 1 KiB
│   ├── partitions total: 1
│   ├── partitions scanned: 1
│   ├── pruning stats: [segments: <range pruning: 1 to 1>, blocks: <range pruning: 1 to 1>]
│   ├── push downs: [filters: [], limit: NONE]
│   └── estimated rows: 1.00
└── TableScan(Probe)
    ├── table: default.join_reorder.t1
    ├── output columns: [a (#1)]
    ├── read rows: 10
    ├── read size: < 1 KiB
    ├── partitions total: 1
    ├── partitions scanned: 1
    ├── pruning stats: [segments: <range pruning: 1 to 1>, blocks: <range pruning: 1 to 1>]
    ├── push downs: [filters: [], limit: NONE]
    └── estimated rows: 10.00

query T
explain join select * from t right anti join t1 on t1.a = t.a
----
HashJoin: LEFT ANTI
├── Build
│   └── Scan: default.join_reorder.t (#0) (read rows: 1)
└── Probe
    └── Scan: default.join_reorder.t1 (#1) (read rows: 10)

statement ok
drop database join_reorder
