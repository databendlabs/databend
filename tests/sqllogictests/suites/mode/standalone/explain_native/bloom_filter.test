# This case depends on explain(standalone mode), thus we put it here
statement ok
drop table if exists bloom_test_t;

statement ok
create table bloom_test_t(c1 int, c2 int)

# create 2 data blocks, min/max values of columns are of the same

statement ok
insert into  bloom_test_t values(1,1), (5,6), (10,10)

statement ok
insert into  bloom_test_t values(1,1), (7,8), (10,10)

# range index is not effective in this query, bloom filter will be used, one block should be pruned
query T
explain select * from bloom_test_t where c1 = 5
----
TableScan
├── table: default.default.bloom_test_t
├── output columns: [c1 (#0), c2 (#1)]
├── read rows: 3
├── read size: < 1 KiB
├── partitions total: 2
├── partitions scanned: 1
├── pruning stats: [segments: <range pruning: 2 to 2>, blocks: <range pruning: 2 to 2, bloom pruning: 2 to 1>]
├── push downs: [filters: [is_true(bloom_test_t.c1 (#0) = 5)], limit: NONE]
└── estimated rows: 1.00

query T
select * from bloom_test_t where c1 = 5
----
5 6

# for issue which addressed in PR #9706 (https://github.com/datafuselabs/databend/pull/9706)
#
# if cached filters are populated incorrectly by using the wrong cache key:
# - instead of the correct one ${block_id}-${column_id}
# - but ${block_id} incorrectly
# the cached filter that populated by the previous query
# `select * from bloom_test_t where c1 = 5`
# i.e. the bloom filter of block 1, column c1, will be used in bloom pruning of
# ALL the columns of block number 1

# recall that
# a) the data of first block is
#  `create table bloom_test_t(c1 int, c2 int)`
#  `insert into  bloom_test_t values(1,1), (5,6), (10,10)`
# b) range index is not effective in the later test cases
# c) if filter cache is populated incorrectly (as described in PR #9706)
#    bloom filter of block 1, column c1 will be used for all the columns (of block 1)
# let's check it out

# 1. filter using another column (c2), of the same block, where there is one row matched

# 1.1 check that filtering on column c2 does work as expected
query T
select * from bloom_test_t where c2 = 6
----
5 6

# 1.2 check that if incorrect filtering is applied, an empty result set will be returned
query T
select count(*) from bloom_test_t where c1 = 6
----
0

# 2. filtering on column c2, of the same block, where there is no row matched
# 2.1 check that an empty result set returned
query T
select count(*) from bloom_test_t where c2 = 5
----
0

# 2.2 check that if incorrect filtering is applied, a non-empty result set will be returned
query T
select count(*) from bloom_test_t where c1 = 5
----
1

# for issue which addressed in PR #10022 (https://github.com/datafuselabs/databend/pull/10022)
statement ok
alter table bloom_test_t drop column c2

statement ok
alter table bloom_test_t add column c2 int

statement ok
insert into  bloom_test_t values(2,2), (4,4)

query T
explain select * from bloom_test_t where c2=0;
----
TableScan
├── table: default.default.bloom_test_t
├── output columns: [c1 (#0), c2 (#1)]
├── read rows: 0
├── read size: 0
├── partitions total: 3
├── partitions scanned: 0
├── pruning stats: [segments: <range pruning: 3 to 2>, blocks: <range pruning: 2 to 0>]
├── push downs: [filters: [is_true(bloom_test_t.c2 (#1) = 0)], limit: NONE]
└── estimated rows: 0.00

query T
explain select * from bloom_test_t where c2=3;
----
TableScan
├── table: default.default.bloom_test_t
├── output columns: [c1 (#0), c2 (#1)]
├── read rows: 0
├── read size: 0
├── partitions total: 3
├── partitions scanned: 0
├── pruning stats: [segments: <range pruning: 3 to 3>, blocks: <range pruning: 3 to 1, bloom pruning: 1 to 0>]
├── push downs: [filters: [is_true(bloom_test_t.c2 (#1) = 3)], limit: NONE]
└── estimated rows: 4.00

statement ok
drop table bloom_test_t

statement ok
drop table if exists bloom_test_nullable_t

statement ok
create table bloom_test_nullable_t(c1 int null, c2 int null);

statement ok
insert into  bloom_test_nullable_t values(1,1), (5,6), (10,10)

statement ok
insert into  bloom_test_nullable_t values(1,1), (7,8), (10,10)

query T
explain select * from bloom_test_nullable_t where c1 = 5 and c2 > 1;
----
TableScan
├── table: default.default.bloom_test_nullable_t
├── output columns: [c1 (#0), c2 (#1)]
├── read rows: 3
├── read size: < 1 KiB
├── partitions total: 2
├── partitions scanned: 1
├── pruning stats: [segments: <range pruning: 2 to 2>, blocks: <range pruning: 2 to 2, bloom pruning: 2 to 1>]
├── push downs: [filters: [and_filters(bloom_test_nullable_t.c1 (#0) = 5, bloom_test_nullable_t.c2 (#1) > 1)], limit: NONE]
└── estimated rows: 1.00

# fix https://github.com/datafuselabs/databend/issues/15570
# fix https://github.com/datafuselabs/databend/issues/15572

statement ok
drop table if exists bloom_test_nullable_t2

statement ok
create table bloom_test_nullable_t2(c0 bool null, c1 int null, c2 varchar null)

statement ok
insert into bloom_test_nullable_t2 values(false, 1, 'a'), (true, 5, null)

query T
explain select * from bloom_test_nullable_t2 where ((c2) in ('1') is null);
----
TableScan
├── table: default.default.bloom_test_nullable_t2
├── output columns: [c0 (#0), c1 (#1), c2 (#2)]
├── read rows: 2
├── read size: < 1 KiB
├── partitions total: 1
├── partitions scanned: 1
├── pruning stats: [segments: <range pruning: 1 to 1>, blocks: <range pruning: 1 to 1, bloom pruning: 1 to 1>]
├── push downs: [filters: [NOT is_not_null(bloom_test_nullable_t2.c2 (#2) = '1')], limit: NONE]
└── estimated rows: 1.60

query T
explain select * from bloom_test_nullable_t2 where (not (not c0))
----
TableScan
├── table: default.default.bloom_test_nullable_t2
├── output columns: [c0 (#0), c1 (#1), c2 (#2)]
├── read rows: 2
├── read size: < 1 KiB
├── partitions total: 1
├── partitions scanned: 1
├── pruning stats: [segments: <range pruning: 1 to 1>, blocks: <range pruning: 1 to 1>]
├── push downs: [filters: [is_true(NOT NOT bloom_test_nullable_t2.c0 (#0))], limit: NONE]
└── estimated rows: 2.00
