query T
explain select * from numbers(1)
----
TableScan
├── table: default.system.numbers
├── output columns: [number (#0)]
├── read rows: 1
├── read size: < 1 KiB
├── partitions total: 1
├── partitions scanned: 1
├── push downs: [filters: [], limit: NONE]
└── estimated rows: 1.00

query T
explain select * from (select * from numbers(1)) as t1 where number = 1
----
Filter
├── output columns: [numbers.number (#0)]
├── filters: [t1.number (#0) = 1]
├── estimated rows: 0.00
└── TableScan
    ├── table: default.system.numbers
    ├── output columns: [number (#0)]
    ├── read rows: 1
    ├── read size: < 1 KiB
    ├── partitions total: 1
    ├── partitions scanned: 1
    ├── push downs: [filters: [numbers.number (#0) = 1], limit: NONE]
    └── estimated rows: 1.00

query T
explain select * from (select number as a, number + 1 as b from numbers(1)) as t1 where a = 1 and b = 1
----
EvalScalar
├── output columns: [numbers.number (#0), b (#1)]
├── expressions: [numbers.number (#0) + 1]
├── estimated rows: 0.00
└── Filter
    ├── output columns: [numbers.number (#0)]
    ├── filters: [numbers.number (#0) = 1, numbers.number (#0) + 1 = 1]
    ├── estimated rows: 0.00
    └── TableScan
        ├── table: default.system.numbers
        ├── output columns: [number (#0)]
        ├── read rows: 1
        ├── read size: < 1 KiB
        ├── partitions total: 1
        ├── partitions scanned: 1
        ├── push downs: [filters: [and_filters(numbers.number (#0) = 1, numbers.number (#0) + 1 = 1)], limit: NONE]
        └── estimated rows: 1.00

query T
explain select * from (select number as a, number + 1 as b from numbers(1)) as t1 where a = 1
----
EvalScalar
├── output columns: [numbers.number (#0), b (#1)]
├── expressions: [numbers.number (#0) + 1]
├── estimated rows: 0.00
└── Filter
    ├── output columns: [numbers.number (#0)]
    ├── filters: [numbers.number (#0) = 1]
    ├── estimated rows: 0.00
    └── TableScan
        ├── table: default.system.numbers
        ├── output columns: [number (#0)]
        ├── read rows: 1
        ├── read size: < 1 KiB
        ├── partitions total: 1
        ├── partitions scanned: 1
        ├── push downs: [filters: [numbers.number (#0) = 1], limit: NONE]
        └── estimated rows: 1.00

query T
explain select * from numbers(1) where number = pow(1, 1 + 1)
----
Filter
├── output columns: [numbers.number (#0)]
├── filters: [CAST(numbers.number (#0) AS Float64) = 1]
├── estimated rows: 0.00
└── TableScan
    ├── table: default.system.numbers
    ├── output columns: [number (#0)]
    ├── read rows: 1
    ├── read size: < 1 KiB
    ├── partitions total: 1
    ├── partitions scanned: 1
    ├── push downs: [filters: [CAST(numbers.number (#0) AS Float64) = 1], limit: NONE]
    └── estimated rows: 1.00

query T
explain select * from numbers(1) where TRUE and 1 = 1
----
TableScan
├── table: default.system.numbers
├── output columns: [number (#0)]
├── read rows: 1
├── read size: < 1 KiB
├── partitions total: 1
├── partitions scanned: 1
├── push downs: [filters: [], limit: NONE]
└── estimated rows: 1.00

query T
explain select * from numbers(1) where number = 0 and false
----
EmptyResultScan

query T
explain select * from numbers(1) where number = 0 and null
----
EmptyResultScan

query T
explain select * from numbers(1) where null
----
EmptyResultScan

query T
explain select a from (select number as a, number as b from numbers(1))
----
TableScan
├── table: default.system.numbers
├── output columns: [number (#0)]
├── read rows: 1
├── read size: < 1 KiB
├── partitions total: 1
├── partitions scanned: 1
├── push downs: [filters: [], limit: NONE]
└── estimated rows: 1.00

query T
explain select a from (select number as a, number+1 as b from numbers(1))
----
TableScan
├── table: default.system.numbers
├── output columns: [number (#0)]
├── read rows: 1
├── read size: < 1 KiB
├── partitions total: 1
├── partitions scanned: 1
├── push downs: [filters: [], limit: NONE]
└── estimated rows: 1.00

query T
explain select * from (select * from numbers(100)  where  number> 33 ) where 1=2;
----
EmptyResultScan

statement ok
drop table if exists t_json

statement ok
create table t_json (a int null, v json null)

statement ok
insert into t_json values(1, parse_json('{"a":[1,2,3],"b":{"c":10}}'))

query T
explain select a, v['b'] from t_json
----
EvalScalar
├── output columns: [t_json.a (#0), v['b'] (#2)]
├── expressions: [get_by_keypath(t_json.v (#1), '{"b"}')]
├── estimated rows: 1.00
└── TableScan
    ├── table: default.default.t_json
    ├── output columns: [a (#0), v (#1)]
    ├── read rows: 1
    ├── read size: < 1 KiB
    ├── partitions total: 1
    ├── partitions scanned: 1
    ├── pruning stats: [segments: <range pruning: 1 to 1>, blocks: <range pruning: 1 to 1>]
    ├── push downs: [filters: [], limit: NONE]
    └── estimated rows: 1.00

query T
explain select a, v['a'][0] from t_json
----
EvalScalar
├── output columns: [t_json.a (#0), v['a'][0] (#2)]
├── expressions: [get_by_keypath(t_json.v (#1), '{"a",0}')]
├── estimated rows: 1.00
└── TableScan
    ├── table: default.default.t_json
    ├── output columns: [a (#0), v (#1)]
    ├── read rows: 1
    ├── read size: < 1 KiB
    ├── partitions total: 1
    ├── partitions scanned: 1
    ├── pruning stats: [segments: <range pruning: 1 to 1>, blocks: <range pruning: 1 to 1>]
    ├── push downs: [filters: [], limit: NONE]
    └── estimated rows: 1.00

statement ok
drop table t_json
