# Please start the UDF Server first before running this test:
#   python3 tests/udf/udf_server.py
#

statement ok
DROP FUNCTION IF EXISTS add_signed;

statement ok
DROP FUNCTION IF EXISTS add_unsigned;

statement ok
DROP FUNCTION IF EXISTS add_float;

statement ok
DROP FUNCTION IF EXISTS binary_reverse;

statement ok
DROP FUNCTION IF EXISTS bool_select;

statement ok
DROP FUNCTION IF EXISTS gcd;

statement ok
DROP FUNCTION IF EXISTS gcd_prefix;

statement ok
DROP FUNCTION IF EXISTS gcd_error;

statement ok
DROP FUNCTION IF EXISTS decimal_div;

statement ok
DROP FUNCTION IF EXISTS hex_to_dec;

statement ok
DROP FUNCTION IF EXISTS add_days_py;

statement ok
DROP FUNCTION IF EXISTS add_hours_py;

statement ok
DROP FUNCTION IF EXISTS array_access;

statement ok
DROP FUNCTION IF EXISTS array_index_of;

statement ok
DROP FUNCTION IF EXISTS json_access;

statement ok
DROP FUNCTION IF EXISTS json_concat;

statement ok
DROP FUNCTION IF EXISTS tuple_access;

statement ok
DROP FUNCTION IF EXISTS return_all;

statement ok
DROP FUNCTION IF EXISTS return_all_arrays;

statement ok
DROP FUNCTION IF EXISTS return_all_non_nullable;

statement ok
DROP FUNCTION IF EXISTS wait;

statement ok
DROP FUNCTION IF EXISTS wait_concurrent;

statement ok
DROP FUNCTION IF EXISTS map_access;

statement ok
DROP FUNCTION IF EXISTS split_and_join;

statement ok
CREATE OR REPLACE FUNCTION success_check_headers () RETURNS VARCHAR LANGUAGE python HANDLER = 'check_headers' HEADERS = ('X-Authorization' = '123') ADDRESS = 'http://0.0.0.0:8815';

statement ok
CREATE OR REPLACE FUNCTION fail_check_headers () RETURNS VARCHAR LANGUAGE python HANDLER = 'check_headers' HEADERS = ('X-Authorization' = '321') ADDRESS = 'http://0.0.0.0:8815';

statement ok
CREATE OR REPLACE FUNCTION add_signed (TINYINT, SMALLINT, INT, BIGINT) RETURNS BIGINT LANGUAGE python HANDLER = 'add_signed' ADDRESS = 'http://0.0.0.0:8815'

statement ok
CREATE OR REPLACE FUNCTION add_unsigned (TINYINT UNSIGNED, SMALLINT UNSIGNED, INT UNSIGNED, BIGINT UNSIGNED) RETURNS BIGINT UNSIGNED LANGUAGE python HANDLER = 'add_unsigned' ADDRESS = 'http://0.0.0.0:8815';

statement ok
CREATE OR REPLACE FUNCTION add_float (FLOAT, DOUBLE) RETURNS DOUBLE LANGUAGE python HANDLER = 'add_float' ADDRESS = 'http://0.0.0.0:8815';

statement ok
CREATE OR REPLACE FUNCTION binary_reverse (BINARY) RETURNS BINARY LANGUAGE python HANDLER = 'binary_reverse' ADDRESS = 'http://0.0.0.0:8815';

statement ok
CREATE OR REPLACE FUNCTION bool_select (BOOLEAN, BIGINT, BIGINT) RETURNS BIGINT LANGUAGE python HANDLER = 'bool_select' ADDRESS = 'http://0.0.0.0:8815';

statement ok
CREATE OR REPLACE FUNCTION gcd_prefix (INT, INT) RETURNS INT LANGUAGE python HANDLER = 'gcd' ADDRESS = 'http://0.0.0.0:8815/ab/cc/d';

statement ok
CREATE OR REPLACE FUNCTION gcd (INT, INT) RETURNS INT LANGUAGE python HANDLER = 'gcd' ADDRESS = 'http://0.0.0.0:8815';

statement ok
CREATE OR REPLACE FUNCTION gcd_error (INT, INT) RETURNS INT LANGUAGE python HANDLER = 'gcd_error' ADDRESS = 'http://0.0.0.0:8815';

statement ok
CREATE OR REPLACE FUNCTION split_and_join (VARCHAR, VARCHAR, VARCHAR) RETURNS VARCHAR LANGUAGE python HANDLER = 'split_and_join' ADDRESS = 'http://0.0.0.0:8815';

statement ok
CREATE OR REPLACE FUNCTION decimal_div (DECIMAL(36, 18), DECIMAL(36, 18)) RETURNS DECIMAL(72, 28) LANGUAGE python HANDLER = 'decimal_div' ADDRESS = 'http://0.0.0.0:8815';

statement ok
CREATE OR REPLACE FUNCTION hex_to_dec (VARCHAR) RETURNS DECIMAL(36, 18) LANGUAGE python HANDLER = 'hex_to_dec' ADDRESS = 'http://0.0.0.0:8815';

statement ok
CREATE OR REPLACE FUNCTION add_days_py (DATE, INT) RETURNS DATE LANGUAGE python HANDLER = 'add_days_py' ADDRESS = 'http://0.0.0.0:8815';

statement ok
CREATE OR REPLACE FUNCTION add_hours_py (TIMESTAMP, INT) RETURNS TIMESTAMP LANGUAGE python HANDLER = 'add_hours_py' ADDRESS = 'http://0.0.0.0:8815';

statement ok
CREATE OR REPLACE FUNCTION array_access (ARRAY(VARCHAR), INT) RETURNS VARCHAR LANGUAGE python HANDLER = 'array_access' ADDRESS = 'http://0.0.0.0:8815';

statement ok
CREATE OR REPLACE FUNCTION array_index_of (ARRAY(BIGINT NULL), BIGINT) RETURNS INT NOT NULL LANGUAGE python HANDLER = 'array_index_of' ADDRESS = 'http://0.0.0.0:8815';

statement ok
CREATE OR REPLACE FUNCTION map_access (MAP(VARCHAR, VARCHAR), VARCHAR) RETURNS VARCHAR LANGUAGE python HANDLER = 'map_access' ADDRESS = 'http://0.0.0.0:8815';

statement ok
CREATE OR REPLACE FUNCTION json_access (VARIANT, VARCHAR) RETURNS VARIANT LANGUAGE python HANDLER = 'json_access' ADDRESS = 'http://0.0.0.0:8815';

statement ok
CREATE OR REPLACE FUNCTION json_concat (ARRAY(VARIANT)) RETURNS VARIANT LANGUAGE python HANDLER = 'json_concat' ADDRESS = 'http://0.0.0.0:8815';

statement ok
CREATE OR REPLACE FUNCTION tuple_access (TUPLE(ARRAY(VARIANT NULL), INT, VARCHAR), INT, INT) RETURNS TUPLE(VARIANT NULL, VARIANT NULL) LANGUAGE python HANDLER = 'tuple_access' ADDRESS = 'http://0.0.0.0:8815';

statement ok
CREATE OR REPLACE FUNCTION return_all (BOOLEAN, TINYINT, SMALLINT, INT, BIGINT, TINYINT UNSIGNED, SMALLINT UNSIGNED, INT UNSIGNED, BIGINT UNSIGNED, FLOAT, DOUBLE, DATE, TIMESTAMP, VARCHAR, VARIANT) RETURNS TUPLE(BOOLEAN NULL, TINYINT NULL, SMALLINT NULL, INT NULL, BIGINT NULL, TINYINT UNSIGNED NULL, SMALLINT UNSIGNED NULL, INT UNSIGNED NULL, BIGINT UNSIGNED NULL, FLOAT NULL, DOUBLE NULL, DATE NULL, TIMESTAMP NULL, VARCHAR NULL, VARIANT NULL) LANGUAGE python HANDLER = 'return_all' ADDRESS = 'http://0.0.0.0:8815';

statement ok
CREATE OR REPLACE FUNCTION return_all_arrays (ARRAY(BOOLEAN), ARRAY(TINYINT), ARRAY(SMALLINT), ARRAY(INT), ARRAY(BIGINT), ARRAY(TINYINT UNSIGNED), ARRAY(SMALLINT UNSIGNED), ARRAY(INT UNSIGNED), ARRAY(BIGINT UNSIGNED), ARRAY(FLOAT), ARRAY(DOUBLE), ARRAY(DATE), ARRAY(TIMESTAMP), ARRAY(VARCHAR), ARRAY(VARIANT)) RETURNS TUPLE(ARRAY(BOOLEAN), ARRAY(TINYINT), ARRAY(SMALLINT), ARRAY(INT), ARRAY(BIGINT), ARRAY(TINYINT UNSIGNED), ARRAY(SMALLINT UNSIGNED), ARRAY(INT UNSIGNED), ARRAY(BIGINT UNSIGNED), ARRAY(FLOAT), ARRAY(DOUBLE), ARRAY(DATE), ARRAY(TIMESTAMP), ARRAY(VARCHAR), ARRAY(VARIANT)) LANGUAGE python HANDLER = 'return_all_arrays' ADDRESS = 'http://0.0.0.0:8815';

statement ok
CREATE OR REPLACE FUNCTION return_all_non_nullable (BOOLEAN NOT NULL, TINYINT NOT NULL, SMALLINT NOT NULL, INT NOT NULL, BIGINT NOT NULL, TINYINT UNSIGNED NOT NULL, SMALLINT UNSIGNED NOT NULL, INT UNSIGNED NOT NULL, BIGINT UNSIGNED NOT NULL, FLOAT NOT NULL, DOUBLE NOT NULL, DATE NOT NULL, TIMESTAMP NOT NULL, VARCHAR NOT NULL, VARIANT NOT NULL) RETURNS TUPLE(BOOLEAN, TINYINT, SMALLINT, INT, BIGINT, TINYINT UNSIGNED, SMALLINT UNSIGNED, INT UNSIGNED, BIGINT UNSIGNED, FLOAT, DOUBLE, DATE, TIMESTAMP, VARCHAR, VARIANT) LANGUAGE python HANDLER = 'return_all_non_nullable' ADDRESS = 'http://0.0.0.0:8815';

statement ok
CREATE OR REPLACE FUNCTION wait (INT) RETURNS INT LANGUAGE python HANDLER = 'wait' ADDRESS = 'http://0.0.0.0:8815';

statement ok
CREATE OR REPLACE FUNCTION wait_concurrent (INT) RETURNS INT LANGUAGE python HANDLER = 'wait_concurrent' ADDRESS = 'http://0.0.0.0:8815';

statement ok
CREATE OR REPLACE FUNCTION builtin_echo (string) RETURNS string LANGUAGE python HANDLER = 'builtin_echo' ADDRESS = 'http://0.0.0.0:8815';

## scalar values test
query II
select add_signed(-1, 2, -3, 4), add_signed(-1, -3, 4, -5);
----
2 -5

query II
select add_unsigned(1, 2, 3, 4), add_unsigned(2, 3, 4, 5);
----
10 14

query F
select add_float(1.5, 2.5);
----
4.0

query T
select binary_reverse('abc');
----
636261

query II
select bool_select(true, 1, 2), bool_select(false, 1, 2);
----
1 2

query I
select gcd(unnest([4, 5, NULL, 8, 12, NULL]), unnest([12, 2, 3, NULL, 18, NULL]));
----
4
1
NULL
NULL
6
NULL

query I
SELECT gcd(a,b) d, gcd_prefix(a, b) from (select number + 1 a, a * 2  b from numbers(3) where number in (select * from numbers(300))) order by d;
----
1 1
2 2
3 3

query I
SELECT sum(gcd_error(a,b)) from (select number + 1 a, a * 2  b from numbers(3000))
----
4501500


statement ok
create or replace table gcd_target(id int);

statement ok
insert into gcd_target select gcd(number + 1, number  * 3 + 3) from numbers(3)

query T
select * from gcd_target order by id
----
1
2
3

statement ok
replace into gcd_target on(id) select gcd(number + 1, number  * 3 + 3) from numbers(3)

query T
select * from gcd_target order by id
----
1
2
3

statement ok
drop table gcd_target


query TT
select split_and_join('1; 3; 5; 7; 9', '; ', ':');
----
1:3:5:7:9

query I
select hex_to_dec('0000000000da7134f0e');
----
58637635342.000000000000000000

query T
select builtin_echo('abc');
----
abc

query T
select * from udf_echo('http://0.0.0.0:8815', 'abc')
----
abc

query F
select decimal_div(1, 7);
----
0.1428571428571428571428571429

query TT
select to_date(18875), add_days_py(to_date(18875), 2);
----
2021-09-05 2021-09-07

query TT
select to_datetime(1630833797), add_hours_py(to_datetime(1630833797), 2);
----
2021-09-05 09:23:17.000000 2021-09-05 11:23:17.000000

query TTT
select array_access(['hello','world','rust'], 0), array_access(['hello','world','rust'], 1), array_access(['hello','world','rust'], 4);
----
NULL hello NULL

query IIII
select array_index_of(NULL, 1), array_index_of([3, 5, 7], 5), array_index_of([4, 6], 3), array_index_of([2, 3, NULL], NULL);
----
0 2 0 3

query TT
select map_access({'ip': '192.168.1.1', 'url': 'example.com/home'}, 'ip'), map_access({'ip': '192.168.1.2', 'url': 'example.com/about'}, 'ip');
----
192.168.1.1 192.168.1.2

query T
select json_access(parse_json('{"customer_id": 123, "order_id": 1001, "items": [{"name": "Shoes", "price": 59.99}, {"name": "T-shirt", "price": 19.99}]}'), 'items');
----
[{"name":"Shoes","price":59.99},{"name":"T-shirt","price":19.99}]

query T
select json_concat([parse_json('{"age": 30, "isPremium": "false", "lastActive": "2023-03-15"}'), parse_json('{"age": 25, "isPremium": "true", "lastActive": "2023-04-10"}')]);
----
[{"age":30,"isPremium":"false","lastActive":"2023-03-15"},{"age":25,"isPremium":"true","lastActive":"2023-04-10"}]

query T
select tuple_access(([NULL, parse_json('{"color":"red", "fontSize":16, "theme":"dark"}')], 2, 'foo'), 0, 1);
----
(NULL,'[null,{"color":"red","fontSize":16,"theme":"dark"}]')

query T
select return_all(true, NULL, NULL, 3, 4, NULL, 6, 7, 8, NULL, 10.2, NULL, to_datetime(1630833797), 'foo', NULL);
----
(1,NULL,NULL,3,4,NULL,6,7,8,NULL,10.2,NULL,'2021-09-05 09:23:17.000000','foo',NULL)

query T
select return_all_non_nullable(true, -1, 2, 3, 4, 5, 6, 7, 8, 9.1, 10.2, to_date(18866), to_datetime(1630833797), 'foo', parse_json('{"foo": 30, "bar": "false"}'));
----
(1,-1,2,3,4,5,6,7,8,9.1,10.2,'2021-08-27','2021-09-05 09:23:17.000000','foo','{"bar":"false","foo":30}')

query T
select return_all_arrays([true], [-1, -2], [2,64,67], [3,1234], [4,2341], [5,10], [6,1231], [7,1234], [8,63435], [9.1,231.123], [10.2,6547.789], [to_date(18866)], [to_datetime(1630833797)], ['foo'], [parse_json('{"foo": 30, "bar": "false"}')]);
----
([1],[-1,-2],[2,64,67],[3,1234],[4,2341],[5,10],[6,1231],[7,1234],[8,63435],[9.1,231.123],[10.2,6547.789],['2021-08-27'],['2021-09-05 09:23:17.000000'],['foo'],['{"bar":"false","foo":30}'])

## table test

statement ok
create or replace table decimal(value decimal(36, 18));

statement ok
insert into decimal values(0.152587668674722117), (0.017820781941443176);

query F
select decimal_div(value, 3.3) from decimal;
----
0.0462386874771885203030303030
0.0054002369519524775757575758

statement ok
DROP TABLE decimal;

statement ok
CREATE or replace TABLE test_dt (date DATE, ts TIMESTAMP);

statement ok
INSERT INTO test_dt VALUES ('2022-04-07', '2022-04-07 01:01:01.123456'), ('2022-04-08', '2022-04-08 01:01:01');

query TT
select add_days_py(date, 2), add_hours_py(ts, 2) from test_dt;
----
2022-04-09 2022-04-07 03:01:01.123456
2022-04-10 2022-04-08 03:01:01.000000

statement ok
DROP TABLE test_dt;

statement ok
CREATE or replace TABLE array_table(col1 ARRAY(VARCHAR), col2 ARRAY(INT64) NULL, col3 INT);

statement ok
INSERT INTO array_table VALUES (['hello world', 'foo', 'bar'], [1, 2, 3, 4], 1), (['databend', 'sql', 'olap'], [5, 6, 1, 3], 2), (['aaaa', 'bbbb', 'cccc'], NULL, 3);

query
select array_access(col1, col3), array_access(col1, 2), array_access(col1, 0) from array_table;
----
hello world foo NULL
sql sql NULL
cccc bbbb NULL

query
select array_index_of(col2, col3), array_index_of(col2, 2), array_index_of(col2, NULL) from array_table;
----
1 2 0
0 0 0
0 0 0

statement ok
DROP TABLE array_table;

statement ok
CREATE or replace TABLE web_traffic_data(id INT64, traffic_info MAP(STRING, STRING));

statement ok
INSERT INTO web_traffic_data VALUES(1, {'ip': '192.168.1.1', 'url': 'example.com/home'}),
    (2, {'ip': '192.168.1.2', 'url': 'example.com/about'}),
    (3, {'ip': '192.168.1.1', 'url': 'example.com/contact'});

query
SELECT map_access(traffic_info, 'ip') as ip_address, COUNT(*) as visits FROM web_traffic_data GROUP BY map_access(traffic_info, 'ip') ORDER BY map_access(traffic_info, 'ip');
----
192.168.1.1 2
192.168.1.2 1

query T
select traffic_info from web_traffic_data where map_access(traffic_info, 'ip') = '192.168.1.2'
----
{'ip':'192.168.1.2','url':'example.com/about'}

query IT
select max(id), map_access(traffic_info, 'ip') from web_traffic_data group by map_access(traffic_info, 'ip') order by map_access(traffic_info, 'ip')
----
3 192.168.1.1
2 192.168.1.2

statement ok
CREATE or replace TABLE customer_orders(id INT64, order_data VARIANT);

statement ok
INSERT INTO customer_orders VALUES(1, parse_json('{"customer_id": 123, "order_id": 1001, "items": [{"name": "Shoes", "price": 59.99}, {"name": "T-shirt", "price": 19.99}]}')),
                                  (2, parse_json('{"customer_id": 456, "order_id": 1002, "items": [{"name": "Backpack", "price": 79.99}, {"name": "Socks", "price": 4.99}]}')),
                                  (3, parse_json('{"customer_id": 123, "order_id": 1003, "items": [{"name": "Shoes", "price": 59.99}, {"name": "Socks", "price": 4.99}]}'));

query
select json_access(order_data, 'customer_id')::INT64, json_access(order_data, 'order_id'), json_access(order_data, 'items') from customer_orders;
----
123 1001 [{"name":"Shoes","price":59.99},{"name":"T-shirt","price":19.99}]
456 1002 [{"name":"Backpack","price":79.99},{"name":"Socks","price":4.99}]
123 1003 [{"name":"Shoes","price":59.99},{"name":"Socks","price":4.99}]

statement ok
DROP TABLE customer_orders;

statement ok
create or replace table test_wait(col int);

statement ok
insert into test_wait select * from numbers(10);

query I
select wait(col) from test_wait;
----
0
1
2
3
4
5
6
7
8
9

query I
select wait_concurrent(col) from test_wait;
----
0
1
2
3
4
5
6
7
8
9

query T
select success_check_headers();
----
success

statement error
select fail_check_headers();

statement ok
DROP TABLE test_wait;

statement ok
DROP FUNCTION add_signed;

statement ok
DROP FUNCTION add_unsigned;

statement ok
DROP FUNCTION add_float;

statement ok
DROP FUNCTION bool_select;

statement ok
DROP FUNCTION gcd;

statement ok
DROP FUNCTION decimal_div;

statement ok
DROP FUNCTION hex_to_dec;

statement ok
DROP FUNCTION add_days_py;

statement ok
DROP FUNCTION add_hours_py;

statement ok
DROP FUNCTION array_access;

statement ok
DROP FUNCTION array_index_of;

statement ok
DROP FUNCTION json_access;

statement ok
DROP FUNCTION json_concat;

statement ok
DROP FUNCTION tuple_access;

statement ok
DROP FUNCTION return_all;

statement ok
DROP FUNCTION return_all_arrays;

statement ok
DROP FUNCTION return_all_non_nullable;

statement ok
DROP FUNCTION wait;

statement ok
DROP FUNCTION wait_concurrent;

statement error 1065
update web_traffic_data set id = 2 where map_access(traffic_info, 'ip') = '192.168.1.2'

statement error 1065
delete from web_traffic_data where map_access(traffic_info, 'ip') = '192.168.1.2'

statement ok
DROP FUNCTION map_access;

statement ok
DROP TABLE web_traffic_data;

## test merge into
statement ok
create or replace table target_udf(a string,b string,c string);

statement ok
create or replace table source_udf(a2 string,b2 string,c2 string);

statement error 1065
merge into target_udf using source_udf on target_udf.a = source_udf.a2 when not matched then insert (a) values(split_and_join(source_udf.a2, '; ', ':'));

statement ok
DROP FUNCTION split_and_join;

### enable udf for copy into table
statement ok
drop stage if exists udf_stage;

statement ok
create stage udf_stage FILE_FORMAT = (TYPE = CSV);

statement ok
copy into @udf_stage from (select 'aaaa');

statement ok
copy into @udf_stage from (select 'bbbbb');

statement ok
CREATE OR REPLACE FUNCTION url_len (VARCHAR) RETURNS BIGINT LANGUAGE python HANDLER = 'url_len' ADDRESS = 'http://0.0.0.0:8815';

statement ok
create or replace table _tmp_table(field1 int);

statement ok
COPY INTO _tmp_table FROM (SELECT url_len($1) as field1 FROM @udf_stage);

query T
select * from _tmp_table order by field1;
----
4
5


statement ok
remove @udf_stage;

statement ok
drop FUNCTION url_len;

statement ok
select sleep(2);

query I
select metric, max(value::Int > 0) from system.metrics where metric in ('external_batch_rows_count', 'external_requests_total') group by metric order by metric;
----
external_batch_rows_count 1
external_requests_total 1

query I
select sum((value::Int)::Int) from system.metrics where metric = 'external_running_requests_total';
----
0
