## Copyright 2023 Databend Cloud
##
## Licensed under the Elastic License, Version 2.0 (the "License");
## you may not use this file except in compliance with the License.
## You may obtain a copy of the License at
##
##     https://www.elastic.co/licensing/elastic-license
##
## Unless required by applicable law or agreed to in writing, software
## distributed under the License is distributed on an "AS IS" BASIS,
## WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
## See the License for the specific language governing permissions and
## limitations under the License.

statement ok
set global enable_experimental_row_access_policy = 1;

statement ok
set global enable_planner_cache = 0;

statement ok
drop row access policy if exists rap1;

statement ok
drop row access policy if exists p1;

statement error 2004
create or replace row access policy rap_it as (empl_id varchar) returns boolean -> empl_id in (select * from t);

statement ok
create or replace row access policy rap_it as (empl_id varchar) returns boolean ->
  case
      when 'it_admin' = current_role() then true
      else false
  end;

statement ok
create row access policy IF NOT EXISTS rap_it as (empl_id varchar) returns boolean ->
  case
      when 'it_admin' = current_role() then true
      else false
  end;

statement ok
create or replace row access policy rap_it as (empl_id string null) returns boolean ->
  case
      when 'account_admin' = current_role() then false
      else true
  end;

statement error 1005
CREATE OR REPLACE row access policy IF NOT EXISTS rap2 AS (val STRING) RETURNS STRING ->
  case
      when 'it_admin' = current_role() then true
      else false
  end;

statement ok
desc row access policy rap1;

statement ok
create or replace table t(id int, empl_id string);

statement error 1114
alter table t ADD ROW ACCESS POLICY rap_it ON (id);

statement ok
insert into t values(1,'x');

query T
select id from t;
----
1

statement ok
create or replace table t_1(id int, cc string);

statement ok
insert into t_1 values(1,'account_admin'),(2,'x');

query T
select id from t_1 order by id;
----
1
2

statement ok
create or replace row access policy rap_it1 as (empl_id string null) returns boolean ->
  case
      when empl_id = current_role() then false
      else true
  end;

statement ok
alter table t_1 ADD ROW ACCESS POLICY rap_it1 ON (cc);

## t_1 apply row access policy rpa_it1(means if current role == empl_id value account_admin will return false)
query T
select id from t_1;
----
2

statement error
alter table t_1 drop column cc;

statement ok
alter table t_1 drop column id;

statement ok
alter table t ADD ROW ACCESS POLICY rap_it ON (empl_id);

## t apply row access policy rpa_it(means if current role == account_admin will return false)
query T
select id from t;
----

statement ok
create or replace table t1(id int, empl_id string);

statement ok
insert into t1 values(100,'x');

query T
select id from t1;
----
100

query T
select id from t1 union select id from t;
----
100

statement error 1132
alter table t ADD ROW ACCESS POLICY rap_it ON (empl_id);

statement error 1114
alter table t ADD ROW ACCESS POLICY rap_it ON (id);

statement error 1131
ALTER TABLE t drop row access policy p1;

statement ok
create row access policy IF NOT EXISTS p1 as (empl_id varchar) returns boolean ->
  case
      when 'it_admin' = current_role() then true
      else false
  end;

statement error 1132
ALTER TABLE t drop row access policy p1;

statement ok
ALTER TABLE t drop row access policy rap_it;

statement ok
ALTER TABLE t drop all row access policies;

query T
select id from t;
----
1

query T
select id from t1;
----
100

query T
select id from (select id from t1 union select id from t) order by id;
----
1
100

statement ok
drop row access policy if exists rap1;

statement ok
drop row access policy if exists rap3;

statement ok
drop row access policy if exists p1;

statement ok
drop row access policy if exists rap_it1;

statement ok
drop table if exists t_1;

statement ok
drop MASKING POLICY if exists mask

#CREATE MASKING POLICY mask AS (val STRING,num int) RETURNS INT -> CASE WHEN current_role() IN ('ANALYST') THEN 100 ELSE 200 END comment = 'this is a masking policy'
statement error 1121
CREATE MASKING POLICY mask AS (val STRING) RETURNS INT -> CASE WHEN current_role() IN ('ANALYST') THEN 100 ELSE 200 END comment = 'this is a masking policy'

#CREATE MASKING POLICY mask AS (val STRING,num int) RETURNS STRING -> CASE WHEN current_role() IN ('ANALYST') THEN VAL ELSE '*********'END comment = 'this is a masking policy'
statement ok
CREATE MASKING POLICY mask AS (val STRING) RETURNS STRING -> CASE WHEN current_role() IN ('ANALYST') THEN VAL ELSE '*********'END comment = 'this is a masking policy'

statement error 1005
CREATE OR REPLACE MASKING POLICY IF NOT EXISTS mask AS (val STRING) RETURNS STRING -> CASE WHEN current_role() IN ('ANALYST') THEN VAL ELSE '*********'END comment = 'this is a replace masking policy'

statement ok
CREATE OR REPLACE MASKING POLICY mask AS (val STRING) RETURNS STRING -> CASE WHEN current_role() IN ('ANALYST') THEN VAL ELSE '*********'END comment = 'this is a replace masking policy'

statement ok
drop MASKING POLICY if exists mask


statement ok
drop role if exists non_exists_role;

statement ok
drop MASKING POLICY if exists mask

#CREATE MASKING POLICY mask AS (val STRING,num int) RETURNS INT -> CASE WHEN current_role() IN ('non_exists_role') THEN 100 ELSE 200 END comment = 'this is a masking policy'
statement error 1121
CREATE MASKING POLICY mask AS (val STRING) RETURNS INT -> CASE WHEN current_role() IN ('non_exists_role') THEN 100 ELSE 200 END comment = 'this is a masking policy'

#CREATE MASKING POLICY mask AS (val STRING,num int) RETURNS STRING -> CASE WHEN current_role() IN ('non_exists_role') THEN VAL ELSE '*********'END comment = 'this is a masking policy'
statement ok
CREATE MASKING POLICY mask AS (val STRING) RETURNS STRING -> CASE WHEN current_role() IN ('non_exists_role') THEN VAL ELSE '*********'END comment = 'this is a masking policy'

statement error 1005
CREATE OR REPLACE MASKING POLICY IF NOT EXISTS mask AS (val STRING) RETURNS STRING -> CASE WHEN current_role() IN ('non_exists_role') THEN VAL ELSE '*********'END comment = 'this is a replace masking policy'

statement ok
CREATE OR REPLACE MASKING POLICY mask AS (val STRING) RETURNS STRING -> CASE WHEN current_role() IN ('non_exists_role') THEN VAL ELSE '*********'END comment = 'this is a replace masking policy'

statement ok
drop MASKING POLICY if exists mask

statement ok
drop table if exists data_mask_test;

statement ok
drop MASKING POLICY if exists maska;

statement ok
drop MASKING POLICY if exists maskb;

statement ok
drop MASKING POLICY if exists maskc;

statement ok
create or replace table data_mask_test(a int not null, b string not null, c string not null);

statement ok
insert into table data_mask_test(a,b,c) values(1, 'abc','xyz');

query T
select * from data_mask_test;
----
1 abc xyz

statement ok
CREATE MASKING POLICY maska AS (val int) RETURNS int -> CASE WHEN current_role() IN ('non_exists_role') THEN VAL ELSE 200 END comment = 'this is a masking policy';

statement ok
CREATE MASKING POLICY maskb AS (val STRING) RETURNS STRING -> CASE WHEN current_role() IN ('non_exists_role') THEN VAL ELSE '*********'END comment = 'this is a masking policy';

statement ok
CREATE MASKING POLICY maskc AS (val int) RETURNS int -> CASE WHEN current_role() IN ('non_exists_role') THEN VAL ELSE 111 END comment = 'this is a masking policy';

statement ok
alter table data_mask_test modify column b set masking policy maskb;

query T
select * from data_mask_test;
----
1 ********* xyz

statement ok
alter table data_mask_test modify column a set masking policy maska;

query T
select * from data_mask_test;
----
200 ********* xyz

statement ok
alter table data_mask_test modify column a unset masking policy;

query T
select * from data_mask_test;
----
1 ********* xyz

statement ok
alter table data_mask_test modify column a set masking policy maska;

query T
select * from data_mask_test;
----
200 ********* xyz

statement ok
alter table data_mask_test modify column a unset masking policy;

statement ok
alter table data_mask_test modify column b unset masking policy;

statement ok
drop MASKING POLICY if exists maska;

statement ok
drop MASKING POLICY if exists maskb;

statement ok
drop MASKING POLICY if exists maskc;

statement ok
drop table if exists data_mask_test;

statement ok
unset global enable_experimental_row_access_policy;
