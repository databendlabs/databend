## Copyright 2023 Databend Cloud
##
## Licensed under the Elastic License, Version 2.0 (the "License");
## you may not use this file except in compliance with the License.
## You may obtain a copy of the License at
##
##     https://www.elastic.co/licensing/elastic-license
##
## Unless required by applicable law or agreed to in writing, software
## distributed under the License is distributed on an "AS IS" BASIS,
## WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
## See the License for the specific language governing permissions and
## limitations under the License.

statement ok
drop database if exists test_gram_index

statement ok
create database test_gram_index

statement ok
use test_gram_index

statement ok
CREATE TABLE t1 (id int, content string, NGRAM INDEX idx1 (content) gram_size = 5 bloom_size = 1048576)

statement ok
INSERT INTO t1 VALUES
(1, 'The quick brown fox jumps over the lazy dog'),
(2, 'A picture is worth a thousand words'),
(3, 'The early bird catches the worm'),
(4, 'Actions speak louder than words');

query TII
select name, index_size, bloom_index_size, ngram_index_size from system.tables where name='t1' and database='test_gram_index';
----
t1 1049482 1049482 1048617

query III
select row_count, bloom_filter_size, ngram_index_size from fuse_block('test_gram_index', 't1')
----
4 1049482 1048617

query IIIII
select block_count, row_count, index_size, bloom_index_size, ngram_index_size from fuse_segment('test_gram_index', 't1');
----
1 4 1049482 1049482 1048617

query IIIII
select block_count, row_count, index_size, bloom_index_size, ngram_index_size from fuse_snapshot('test_gram_index', 't1');
----
1 4 1049482 1049482 1048617

statement ok
CREATE TABLE t2 (id int, content string, name string)

statement error
CREATE NGRAM INDEX idx2 ON t2(content) gram_size = 0

statement error
CREATE NGRAM INDEX idx2 ON t2(content) bloom_size = 0

statement error
CREATE NGRAM INDEX idx2 ON t2(content) bloom_size = 511

statement error
CREATE NGRAM INDEX idx2 ON t2(content) bloom_size = 10485761

statement ok
CREATE NGRAM INDEX idx2 ON t2(content) gram_size = 5 bloom_size = 1048576

query T
select name, type, original, definition from system.indexes where type = 'NGRAM';
----
idx1 NGRAM (empty) t1(content)bloom_size='1048576' gram_size='5'
idx2 NGRAM (empty) t2(content)bloom_size='1048576' gram_size='5'

statement error
CREATE INVERTED INDEX idx1 ON t1(content)

statement ok
DROP NGRAM INDEX idx2 ON t2

query T
select name, type, original, definition from system.indexes where type = 'NGRAM';
----
idx1 NGRAM (empty) t1(content)bloom_size='1048576' gram_size='5'

query T
show create table t1;
----
t1 CREATE TABLE t1 (     id INT NULL,     content VARCHAR NULL,     SYNC NGRAM INDEX idx1 (content) bloom_size = '1048576', gram_size = '5'   ) ENGINE=FUSE

statement ok
CREATE OR REPLACE TABLE t3 (id int, content1 string, content2 string)

statement ok
INSERT INTO t3 VALUES
(1, 'The quick brown fox jumps over the lazy dog', 'Time flies like an arrow; fruit flies like a banana'),
(2, 'A picture is worth a thousand words', 'Beauty is in the eye of the beholder');

statement ok
INSERT INTO t3 VALUES
(3, 'The early bird catches the worm', 'When life gives you lemons, make lemonade'),
(4, 'Actions speak louder than words', 'Put all your eggs in one basket');

query II
select block_size, bloom_filter_size, ngram_index_size from fuse_block('test_gram_index', 't3');
----
193 867 NULL
224 867 NULL

statement ok
CREATE NGRAM INDEX idx1 ON t3(content1, content2) gram_size = 5 bloom_size = 1048576

statement ok
REFRESH NGRAM INDEX idx1 ON t3

query III
select block_size, bloom_filter_size, ngram_index_size from fuse_block('test_gram_index', 't3');
----
193 2098525 2097234
224 2098525 2097234

query ITT
SELECT * FROM t3 WHERE content1 like '%speak%'
----
4 Actions speak louder than words Put all your eggs in one basket

query T
EXPLAIN SELECT * FROM t3 WHERE content1 like '%speak%'
----
Filter
├── output columns: [t3.id (#0), t3.content1 (#1), t3.content2 (#2)]
├── filters: [is_true(like(t3.content1 (#1), '%speak%'))]
├── estimated rows: 0.25
└── TableScan
    ├── table: default.test_gram_index.t3
    ├── output columns: [id (#0), content1 (#1), content2 (#2)]
    ├── read rows: 2
    ├── read size: < 1 KiB
    ├── partitions total: 2
    ├── partitions scanned: 1
    ├── pruning stats: [segments: <range pruning: 2 to 2>, blocks: <range pruning: 2 to 2, bloom pruning: 2 to 1>]
    ├── push downs: [filters: [is_true(like(t3.content1 (#1), '%speak%'))], limit: NONE]
    └── estimated rows: 4.00

query ITT
SELECT * FROM t3 WHERE content2 like '%arrow%'
----
1 The quick brown fox jumps over the lazy dog Time flies like an arrow; fruit flies like a banana

query T
EXPLAIN SELECT * FROM t3 WHERE content2 like '%arrow%'
----
Filter
├── output columns: [t3.id (#0), t3.content1 (#1), t3.content2 (#2)]
├── filters: [is_true(like(t3.content2 (#2), '%arrow%'))]
├── estimated rows: 0.25
└── TableScan
    ├── table: default.test_gram_index.t3
    ├── output columns: [id (#0), content1 (#1), content2 (#2)]
    ├── read rows: 2
    ├── read size: < 1 KiB
    ├── partitions total: 2
    ├── partitions scanned: 1
    ├── pruning stats: [segments: <range pruning: 2 to 2>, blocks: <range pruning: 2 to 2, bloom pruning: 2 to 1>]
    ├── push downs: [filters: [is_true(like(t3.content2 (#2), '%arrow%'))], limit: NONE]
    └── estimated rows: 4.00

statement ok
use default

statement ok
drop database test_gram_index


