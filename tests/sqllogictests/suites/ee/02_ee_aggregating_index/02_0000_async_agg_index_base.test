## Copyright 2023 Databend Cloud
##
## Licensed under the Elastic License, Version 2.0 (the "License");
## you may not use this file except in compliance with the License.
## You may obtain a copy of the License at
##
##     https://www.elastic.co/licensing/elastic-license
##
## Unless required by applicable law or agreed to in writing, software
## distributed under the License is distributed on an "AS IS" BASIS,
## WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
## See the License for the specific language governing permissions and
## limitations under the License.

statement ok
drop database if exists test_index

statement ok
create database test_index

statement ok
use test_index

statement ok
DROP AGGREGATING INDEX IF EXISTS testi;

statement ok
CREATE TABLE t (a int, b int, c int)

statement ok
INSERT INTO t VALUES (1,1,4), (1,2,1), (1,2,4), (2,2,5)

# query: eval-scan, index: eval-scan

statement error 1601
CREATE ASYNC AGGREGATING INDEX testi AS select c + 1 from t

# eval-filter-scan, index: eval-scan

statement error 1601
CREATE ASYNC AGGREGATING INDEX testi AS select a, b from t

# query: eval-agg-eval-scan, index: eval-scan
# No available case for index scan.

# query: eval-agg-eval-filter-scan, index: eval-scan
# No available case for index scan.

# query: eval-scan, index: eval-filter-scan
# No available case for index scan.

# query: eval-filter-scan, index: eval-filter-scan

statement ok
CREATE ASYNC AGGREGATING INDEX testi AS select a, b from t where b > 1

statement ok
REFRESH AGGREGATING INDEX testi

query T
select a, b from t where b > 2
----

statement ok
DROP AGGREGATING INDEX testi

# query: eval-agg-eval-scan, index: eval-filter-scan
statement error 1601
CREATE ASYNC AGGREGATING INDEX testi AS select a + 1, b from t

# query: eval-agg-eval-filter-scan, index: eval-filter-scan
statement ok
CREATE ASYNC AGGREGATING INDEX testi AS select a + 1, b from t where b > 1

statement ok
REFRESH AGGREGATING INDEX testi

query I
select sum(a + 1) as s from t where b > 1 group by b order by s
----
7

query I
select sum(a + 1) as s from t where b > 1 order by s
----
7

statement ok
DROP AGGREGATING INDEX testi

# query: eval-scan, index: eval-agg-eval-scan
# No available case for index scan.

# query: eval-filter-scan, index: eval-agg-eval-scan
# No available case for index scan.

# query: eval-agg-eval-scan, index: eval-agg-eval-scan

statement ok
CREATE ASYNC AGGREGATING INDEX testi AS select sum(a), b from t group by b

statement ok
REFRESH AGGREGATING INDEX testi

query I
select sum(a) + 1 as s from t group by b order by s
----
2
5

statement ok
DROP AGGREGATING INDEX testi

# query: eval-agg-eval-filter-scan, index: eval-agg-eval-scan

statement ok
CREATE ASYNC AGGREGATING INDEX testi AS select sum(a), b from t group by b

statement ok
REFRESH AGGREGATING INDEX testi

query I
select sum(a) + 1 from t where b > 1 group by b
----
5

statement ok
DROP AGGREGATING INDEX testi

# query: eval-scan, index: eval-agg-eval-filter-scan
# No available case for index scan.

# query: eval-filter-scan, index: eval-agg-eval-filter-scan
# No available case for index scan.

# query: eval-agg-eval-scan, index: eval-agg-eval-filter-scan
# No available case for index scan.

# query: eval-agg-eval-filter-scan, index: eval-agg-eval-filter-scan

statement ok
CREATE ASYNC AGGREGATING INDEX testi AS select b, sum(a) from t where c > 1 group by b

statement ok
REFRESH AGGREGATING INDEX testi

query I
select sum(a) + 1 as s from t where c > 1 group by b order by s
----
2
4

statement ok
DROP AGGREGATING INDEX testi

statement ok
DROP TABLE t

statement ok
CREATE TABLE t (a int, b int, c int)

statement ok
INSERT INTO t VALUES (1,1,4), (1,2,1), (1,2,4), (2,2,5)

statement ok
INSERT INTO t VALUES (1,1,6), (1,2,7), (1,2,8), (2,2,9)

# query: eval-agg-eval-scan, index: eval-agg-eval-scan

statement ok
CREATE ASYNC AGGREGATING INDEX testi AS select sum(a), b from t group by b

# partial refresh
statement ok
REFRESH AGGREGATING INDEX testi LIMIT 1

query I
select sum(a) + 1 as s from t group by b order by s
----
3
9

statement ok
DROP AGGREGATING INDEX testi

statement ok
DROP TABLE t

# force using spill

statement ok
SET force_aggregate_data_spill = 1;

statement ok
CREATE TABLE t (a int, b int, c int)

statement ok
INSERT INTO t VALUES (1,1,4), (1,2,1), (1,2,4), (2,2,5), (1,3,3)

# query: eval-agg-eval-scan, index: eval-agg-eval-scan

statement ok
CREATE ASYNC AGGREGATING INDEX testi AS select b, sum(a) from t where c > 1 group by b

# partial refresh
statement ok
REFRESH AGGREGATING INDEX testi

query II
SELECT b, SUM(a) from t WHERE c > 1 GROUP BY b ORDER BY b
----
1 1
2 3
3 1

statement ok
DROP AGGREGATING INDEX testi

statement ok
DROP TABLE t

# multiple agg functions
statement ok
CREATE TABLE t (a int, b int, c int)

statement ok
INSERT INTO t VALUES (1,1,4), (1,2,1), (1,2,4), (2,2,5), (1,3,3)

# query: eval-agg-eval-scan, index: eval-agg-eval-scan

statement ok
CREATE ASYNC AGGREGATING INDEX testi AS select b, sum(a), max(c) from t where c > 1 group by b

statement ok
REFRESH AGGREGATING INDEX testi

query II
SELECT b, SUM(a), MAX(c) from t WHERE c > 1 GROUP BY b ORDER BY b
----
1 1 4
2 3 5
3 1 3

statement ok
DROP AGGREGATING INDEX testi

statement ok
DROP TABLE t

# scalar and agg func
statement ok
CREATE TABLE t (a int, b int, c int)

statement ok
INSERT INTO t VALUES (1,1,4), (1,2,1), (1,-1,4), (2,2,5), (1,3,3)

# query: eval-agg-eval-scan, index: eval-agg-eval-scan

statement ok
CREATE ASYNC AGGREGATING INDEX testi AS select abs(b) as bs, sum(a) from t where c > 1 group by bs

statement ok
UPDATE t SET c = 3 where b = -1

statement ok
REFRESH AGGREGATING INDEX testi

query TI rowsort
SELECT ABS(b) as bs, SUM(a) from t WHERE c > 1 GROUP BY bs
----
1 2
2 2
3 1

statement ok
DROP AGGREGATING INDEX testi

statement ok
DROP TABLE t

statement ok
CREATE TABLE t(id int, user_id int, event_name varchar)

statement ok
INSERT INTO t (id, user_id, event_name)
VALUES (1, 1, 'Login'),
       (2, 2, 'Login'),
       (3, 3, 'Login'),
       (4, 1, 'Logout'),
       (5, 2, 'Logout'),
       (6, 4, 'Login'),
       (7, 1, 'Login');

statement ok
CREATE ASYNC AGGREGATING INDEX testi AS select approx_count_distinct(user_id) from t

statement ok
REFRESH AGGREGATING INDEX testi

query I
SELECT approx_count_distinct(user_id) from t
----
4

statement ok
DROP AGGREGATING INDEX testi

statement ok
DROP TABLE t

statement ok
CREATE TABLE t(id int, user_id int, event_name varchar)

statement ok
INSERT INTO t (id, user_id, event_name)
VALUES (1, 1, 'Login'),
       (2, 2, 'Login'),
       (3, 3, 'Login'),
       (4, 1, 'Logout'),
       (5, 2, 'Logout'),
       (6, 4, 'Login'),
       (7, 1, 'Login'),
       (8, 2, 'Login');

statement ok
CREATE ASYNC AGGREGATING INDEX testi AS select event_name, user_id, max(user_id), avg(id) from t group by event_name, user_id

statement ok
REFRESH AGGREGATING INDEX testi

# ensure we rewrite query by agg index
query T
explain select event_name, user_id, max(user_id), avg(id) from t group by event_name, user_id
----
EvalScalar
├── output columns: [max(user_id) (#3), t.event_name (#2), t.user_id (#1), sum(id) / if(count(id) = 0, 1, count(id)) (#6)]
├── expressions: [sum(id) (#4) / CAST(if(CAST(count(id) (#5) = 0 AS Boolean NULL), 1, count(id) (#5)) AS UInt64 NULL)]
├── estimated rows: 8.00
└── AggregateFinal
    ├── output columns: [max(user_id) (#3), sum(id) (#4), count(id) (#5), t.event_name (#2), t.user_id (#1)]
    ├── group by: [event_name, user_id]
    ├── aggregate functions: [max(user_id), sum(id), count(id)]
    ├── estimated rows: 8.00
    └── AggregatePartial
        ├── group by: [event_name, user_id]
        ├── aggregate functions: [max(user_id), sum(id), count(id)]
        ├── estimated rows: 8.00
        └── TableScan
            ├── table: default.test_index.t
            ├── output columns: [id (#0), user_id (#1), event_name (#2)]
            ├── read rows: 8
            ├── read size: < 1 KiB
            ├── partitions total: 1
            ├── partitions scanned: 1
            ├── pruning stats: [segments: <range pruning: 1 to 1>, blocks: <range pruning: 1 to 1>]
            ├── push downs: [filters: [], limit: NONE]
            ├── aggregating index: [SELECT event_name, user_id, COUNT(), COUNT(id), MAX(user_id), SUM(id) FROM test_index.t GROUP BY event_name, user_id]
            ├── rewritten query: [selection: [index_col_0 (#0), index_col_1 (#1), index_col_4 (#4), index_col_5 (#5), index_col_3 (#3)]]
            └── estimated rows: 8.00

query TII rowsort
select event_name, user_id, max(user_id), avg(id) from t group by event_name, user_id
----
Login 1 1 4.0
Login 2 2 5.0
Login 3 3 3.0
Login 4 4 6.0
Logout 1 1 4.0
Logout 2 2 5.0

# ensure we rewrite query by agg index
query T
explain select event_name, user_id, max(user_id), avg(id) from t where user_id > 1 group by event_name, user_id
----
EvalScalar
├── output columns: [max(user_id) (#3), t.event_name (#2), t.user_id (#1), sum(id) / if(count(id) = 0, 1, count(id)) (#6)]
├── expressions: [sum(id) (#4) / CAST(if(CAST(count(id) (#5) = 0 AS Boolean NULL), 1, count(id) (#5)) AS UInt64 NULL)]
├── estimated rows: 6.00
└── AggregateFinal
    ├── output columns: [max(user_id) (#3), sum(id) (#4), count(id) (#5), t.event_name (#2), t.user_id (#1)]
    ├── group by: [event_name, user_id]
    ├── aggregate functions: [max(user_id), sum(id), count(id)]
    ├── estimated rows: 6.00
    └── AggregatePartial
        ├── group by: [event_name, user_id]
        ├── aggregate functions: [max(user_id), sum(id), count(id)]
        ├── estimated rows: 6.00
        └── Filter
            ├── output columns: [t.id (#0), t.user_id (#1), t.event_name (#2)]
            ├── filters: [is_true(t.user_id (#1) > 1)]
            ├── estimated rows: 6.00
            └── TableScan
                ├── table: default.test_index.t
                ├── output columns: [id (#0), user_id (#1), event_name (#2)]
                ├── read rows: 8
                ├── read size: < 1 KiB
                ├── partitions total: 1
                ├── partitions scanned: 1
                ├── pruning stats: [segments: <range pruning: 1 to 1>, blocks: <range pruning: 1 to 1>]
                ├── push downs: [filters: [is_true(t.user_id (#1) > 1)], limit: NONE]
                ├── aggregating index: [SELECT event_name, user_id, COUNT(), COUNT(id), MAX(user_id), SUM(id) FROM test_index.t GROUP BY event_name, user_id]
                ├── rewritten query: [selection: [index_col_0 (#0), index_col_1 (#1), index_col_4 (#4), index_col_5 (#5), index_col_3 (#3)], filter: is_true(index_col_0 (#0) > CAST(1 AS Int32 NULL))]
                └── estimated rows: 8.00

query TII rowsort
select event_name, user_id, max(user_id), avg(id) from t where user_id > 1 group by event_name, user_id
----
Login 2 2 5.0
Login 3 3 3.0
Login 4 4 6.0
Logout 2 2 5.0

# ensure we rewrite query by agg index
query T
explain select event_name, user_id, max(user_id), avg(id) from t where user_id > 1 group by event_name, user_id order by event_name, user_id desc
----
Sort
├── output columns: [max(user_id) (#3), t.event_name (#2), t.user_id (#1), sum(id) / if(count(id) = 0, 1, count(id)) (#6)]
├── sort keys: [event_name ASC NULLS LAST, user_id DESC NULLS LAST]
├── estimated rows: 6.00
└── EvalScalar
    ├── output columns: [max(user_id) (#3), t.event_name (#2), t.user_id (#1), sum(id) / if(count(id) = 0, 1, count(id)) (#6)]
    ├── expressions: [sum(id) (#4) / CAST(if(CAST(count(id) (#5) = 0 AS Boolean NULL), 1, count(id) (#5)) AS UInt64 NULL)]
    ├── estimated rows: 6.00
    └── AggregateFinal
        ├── output columns: [max(user_id) (#3), sum(id) (#4), count(id) (#5), t.event_name (#2), t.user_id (#1)]
        ├── group by: [event_name, user_id]
        ├── aggregate functions: [max(user_id), sum(id), count(id)]
        ├── estimated rows: 6.00
        └── AggregatePartial
            ├── group by: [event_name, user_id]
            ├── aggregate functions: [max(user_id), sum(id), count(id)]
            ├── estimated rows: 6.00
            └── Filter
                ├── output columns: [t.id (#0), t.user_id (#1), t.event_name (#2)]
                ├── filters: [is_true(t.user_id (#1) > 1)]
                ├── estimated rows: 6.00
                └── TableScan
                    ├── table: default.test_index.t
                    ├── output columns: [id (#0), user_id (#1), event_name (#2)]
                    ├── read rows: 8
                    ├── read size: < 1 KiB
                    ├── partitions total: 1
                    ├── partitions scanned: 1
                    ├── pruning stats: [segments: <range pruning: 1 to 1>, blocks: <range pruning: 1 to 1>]
                    ├── push downs: [filters: [is_true(t.user_id (#1) > 1)], limit: NONE]
                    ├── aggregating index: [SELECT event_name, user_id, COUNT(), COUNT(id), MAX(user_id), SUM(id) FROM test_index.t GROUP BY event_name, user_id]
                    ├── rewritten query: [selection: [index_col_0 (#0), index_col_1 (#1), index_col_4 (#4), index_col_5 (#5), index_col_3 (#3)], filter: is_true(index_col_0 (#0) > CAST(1 AS Int32 NULL))]
                    └── estimated rows: 8.00

query TII
select event_name, user_id, max(user_id), avg(id) from t where user_id > 1 group by event_name, user_id order by event_name, user_id desc
----
Login 4 4 6.0
Login 3 3 3.0
Login 2 2 5.0
Logout 2 2 5.0

statement ok
DROP AGGREGATING INDEX testi

statement ok
DROP TABLE t

statement ok
use default

statement ok
drop database test_index

statement ok
unset force_aggregate_data_spill;
