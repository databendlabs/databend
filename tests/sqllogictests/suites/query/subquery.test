statement ok
use default

statement ok
DROP TABLE IF EXISTS c

statement ok
DROP TABLE IF EXISTS o


query error 1065
SELECT * FROM (SELECT 1 AS x) AS ss1 LEFT OUTER JOIN (SELECT 2 DIV 228 AS y) AS ss2 ON TRUE, LATERAL (SELECT ss2.y AS z LIMIT 1) AS ss3

statement ok
CREATE TABLE c (c_id INT NULL, bill VARCHAR NULL)

statement ok
CREATE TABLE o (o_id INT NULL, c_id INT NULL, ship VARCHAR NULL)

statement ok
INSERT INTO c VALUES
    (1, 'CA'),
    (2, 'TX'),
    (3, 'MA'),
    (4, 'TX'),
    (5, NULL),
    (6, 'FL')

statement ok
INSERT INTO o VALUES
    (10, 1, 'CA'), (20, 1, 'CA'), (30, 1, 'CA'),
    (40, 2, 'CA'), (50, 2, 'TX'), (60, 2, NULL),
    (70, 4, 'WY'), (80, 4, NULL),
    (90, 6, 'WA')

# Subquery in WHERE clause

query IT
SELECT * FROM c WHERE EXISTS(SELECT * FROM o WHERE o.c_id=c.c_id) ORDER BY c_id
----
1  CA
2  TX
4  TX
6  FL

query IT
SELECT * FROM c, o WHERE c.c_id = o.c_id AND (EXISTS(SELECT * FROM o WHERE o.c_id=c.c_id) OR EXISTS(SELECT * FROM o where o.ship = c.bill)) ORDER BY c.c_id
----
1  CA   10 1  CA
1  CA   20 1  CA
1  CA   30 1  CA
2  TX   40 2  CA
2  TX   50 2  TX
2  TX   60 2  NULL
4  TX   70 4  WY
4  TX   80 4  NULL
6  FL   90 6  WA

query IT
SELECT * FROM c WHERE NOT EXISTS(SELECT * FROM o WHERE o.c_id=c.c_id) ORDER BY c_id
----
3  MA
5  NULL

query IT
SELECT *
FROM c
WHERE
    EXISTS(SELECT * FROM o WHERE o.c_id=c.c_id)
    OR NOT EXISTS(SELECT * FROM o WHERE o.c_id=c.c_id)
ORDER BY c_id
----
1  CA
2  TX
3  MA
4  TX
5  NULL
6  FL

query IT
SELECT * FROM c WHERE EXISTS(SELECT * FROM o WHERE o.c_id=c.c_id AND c.bill='TX') ORDER BY c_id
----
2  TX
4  TX

query IT
SELECT * FROM c WHERE c.bill IN (SELECT o.ship FROM o WHERE o.c_id=c.c_id) and c.bill > 'MA'
----
2 TX

query IT
SELECT * FROM c WHERE 'WY' IN (SELECT ship FROM o WHERE o.c_id=c.c_id)
----
4  TX

query IT
SELECT *
FROM c
WHERE
    'WY' IN (SELECT ship FROM o WHERE o.c_id=c.c_id)
    OR 'WA' IN (SELECT ship FROM o WHERE o.c_id=c.c_id)
ORDER BY c_id
----
4  TX
6  FL

query IT
SELECT *
FROM c
WHERE
    'CA' IN (SELECT ship FROM o WHERE o.c_id=c.c_id)
    AND 'TX' NOT IN (SELECT ship FROM o WHERE o.c_id=c.c_id)
----
1  CA

query IT
SELECT * FROM c WHERE bill IN (SELECT ship FROM o WHERE o.c_id=c.c_id) ORDER BY c_id
----
1  CA
2  TX


query IT
SELECT * FROM c WHERE bill = ALL(SELECT ship FROM o WHERE o.c_id=c.c_id) ORDER BY c_id
----
1  CA
3  MA
5  NULL


query IT
SELECT * FROM c WHERE bill < ANY(SELECT ship FROM o WHERE o.c_id=c.c_id) ORDER BY c_id
----
4  TX
6  FL


query IT
SELECT * FROM c WHERE (bill < ANY(SELECT ship FROM o WHERE o.c_id=c.c_id)) IS NULL
----
2  TX


query IT
SELECT * FROM c WHERE (bill < ANY(SELECT ship FROM o WHERE o.c_id=c.c_id)) IS NOT NULL ORDER BY c_id
----
1  CA
3  MA
4  TX
5  NULL
6  FL


query IT
SELECT * FROM c WHERE bill > ANY(SELECT ship FROM o WHERE o.c_id=c.c_id)
----
2  TX


query IT
SELECT * FROM c WHERE (bill > ANY(SELECT ship FROM o WHERE o.c_id=c.c_id)) IS NULL
----
4  TX


query IT
SELECT * FROM c WHERE (bill > ANY(SELECT ship FROM o WHERE o.c_id=c.c_id)) IS NOT NULL ORDER BY c_id
----
1  CA
2  TX
3  MA
5  NULL
6  FL


query IT
SELECT * FROM c WHERE bill = ANY(SELECT ship FROM o) ORDER BY c_id
----
1  CA
2  TX
4  TX


query IT
SELECT * FROM c WHERE bill = ANY(SELECT ship FROM o) OR bill IS NULL ORDER BY c_id
----
1  CA
2  TX
4  TX
5  NULL


query IT
SELECT *
FROM c
WHERE
    bill = ALL(SELECT ship FROM o WHERE o.c_id=c.c_id)
    OR EXISTS(SELECT * FROM o WHERE o.c_id=c.c_id AND ship='WY')
ORDER BY c_id
----
1  CA
3  MA
4  TX
5  NULL


query IT
SELECT *
FROM c
WHERE
    bill = ALL(SELECT ship FROM o WHERE o.c_id=c.c_id)
    AND EXISTS(SELECT * FROM o WHERE o.c_id=c.c_id)
----
1  CA


query IT
SELECT * FROM c WHERE bill NOT IN (SELECT ship FROM o WHERE o.c_id=c.c_id) ORDER BY c_id
----
3  MA
5  NULL
6  FL


query IT
SELECT * FROM c WHERE bill NOT IN (SELECT ship FROM o WHERE o.c_id=c.c_id AND ship IS NOT NULL) ORDER BY c_id
----
3  MA
4  TX
5  NULL
6  FL


query IT
SELECT * FROM c WHERE bill NOT IN (SELECT ship FROM o WHERE o.c_id=c.c_id AND ship IS NULL) ORDER BY c_id
----
1  CA
3  MA
5  NULL
6  FL


query IT
SELECT * FROM c WHERE (SELECT count(*) FROM o WHERE o.c_id=c.c_id) > 1 ORDER BY c_id
----
1  CA
2  TX
4  TX


query ??
SELECT * FROM c WHERE (SELECT count(ship) FROM o WHERE o.c_id=c.c_id) > 1 ORDER BY c_id
----
1 CA
2 TX


query ??
SELECT *
FROM c
WHERE
    (SELECT count(*) FROM o WHERE o.c_id=c.c_id) > 1
    AND (SELECT max(ship) FROM o WHERE o.c_id=c.c_id) = 'CA'
ORDER BY c_id
----
1 CA


query IT
SELECT c_id, bill
FROM c AS c2
WHERE EXISTS
(
    SELECT *
    FROM (SELECT c_id, coalesce(ship, bill) AS state FROM o WHERE c_id=c2.c_id) AS o
    WHERE state=bill
)
ORDER BY c_id
----
1  CA
2  TX
4  TX


statement ok
SELECT *
FROM c
WHERE (SELECT o_id FROM o WHERE o.c_id=c.c_id AND ship='WY')=4


query IT
SELECT * FROM c WHERE c_id=(SELECT c_id FROM o WHERE ship='WA' AND bill='FL')
----
6  FL


# Subquery in SELECT clause


query IT
SELECT c_id, EXISTS(SELECT * FROM o WHERE o.c_id=c.c_id) FROM c ORDER BY c_id
----
1  1
2  1
3  0
4  1
5  0
6  1


query IT
SELECT c_id, NOT EXISTS(SELECT * FROM o WHERE o.c_id=c.c_id) FROM c ORDER BY c_id
----
1  0
2  0
3  1
4  0
5  1
6  0


query IT
SELECT
    c_id,
    EXISTS(SELECT * FROM o WHERE o.c_id=c.c_id)
    OR NOT EXISTS(SELECT * FROM o WHERE o.c_id=c.c_id)
FROM c
ORDER BY c_id
----
1  1
2  1
3  1
4  1
5  1
6  1


query IT
SELECT c_id, EXISTS(SELECT * FROM o WHERE o.c_id=c.c_id AND c.bill='TX') FROM c ORDER BY c_id
----
1  0
2  1
3  0
4  1
5  0
6  0


query IT
SELECT c_id, 'WY' IN (SELECT ship FROM o WHERE o.c_id=c.c_id) FROM c ORDER BY c_id
----
1  0
2  NULL
3  0
4  1
5  0
6  0


query IT
SELECT
    c_id,
    'CA' IN (SELECT ship FROM o WHERE o.c_id=c.c_id)
    AND 'TX' NOT IN (SELECT ship FROM o WHERE o.c_id=c.c_id)
FROM c
ORDER BY c_id
----
1  1
2  0
3  0
4  NULL
5  0
6  0


query IT
SELECT c_id, bill = ALL(SELECT ship FROM o WHERE o.c_id=c.c_id) FROM c ORDER BY c_id
----
1  1
2  0
3  1
4  0
5  1
6  0


query IT
SELECT c_id, bill NOT IN (SELECT ship FROM o WHERE o.c_id=c.c_id) FROM c ORDER BY c_id
----
1  0
2  0
3  1
4  NULL
5  1
6  1


query IT
SELECT c_id, bill NOT IN (SELECT ship FROM o WHERE o.c_id=c.c_id AND ship IS NOT NULL)
FROM c
ORDER BY c_id
----
1  0
2  0
3  1
4  1
5  1
6  1


query IT
SELECT c_id, bill NOT IN (SELECT ship FROM o WHERE o.c_id=c.c_id AND ship IS NULL)
FROM c
ORDER BY c_id
----
1  1
2  NULL
3  1
4  NULL
5  1
6  1


query IT
SELECT c_id, bill < ANY(SELECT ship FROM o WHERE o.c_id=c.c_id) FROM c ORDER BY c_id
----
1  0
2  NULL
3  0
4  1
5  0
6  1


query IT
SELECT c_id, (bill < ANY(SELECT ship FROM o WHERE o.c_id=c.c_id)) IS NULL FROM c ORDER BY c_id
----
1  0
2  1
3  0
4  0
5  0
6  0


query IT
SELECT c_id, (bill < ANY(SELECT ship FROM o WHERE o.c_id=c.c_id)) IS NOT NULL FROM c ORDER BY c_id
----
1  1
2  0
3  1
4  1
5  1
6  1


query IT
SELECT c_id, bill > ANY(SELECT ship FROM o WHERE o.c_id=c.c_id) FROM c ORDER BY c_id
----
1  0
2  1
3  0
4  NULL
5  0
6  0


query IT
SELECT c_id, (bill > ANY(SELECT ship FROM o WHERE o.c_id=c.c_id)) IS NULL FROM c ORDER BY c_id
----
1  0
2  0
3  0
4  1
5  0
6  0


query IT
SELECT c_id, (bill > ANY(SELECT ship FROM o WHERE o.c_id=c.c_id)) IS NOT NULL FROM c ORDER BY c_id
----
1  1
2  1
3  1
4  0
5  1
6  1


query IT
SELECT c_id, bill = ANY(SELECT ship FROM o WHERE ship IS NOT NULL) FROM c ORDER BY c_id
----
1  1
2  1
3  0
4  1
5  NULL
6  0


query IT
SELECT
    c_id,
    bill = ALL(SELECT ship FROM o WHERE o.c_id=c.c_id)
    OR EXISTS(SELECT * FROM o WHERE o.c_id=c.c_id AND ship='WY')
FROM c
ORDER BY c_id
----
1  1
2  0
3  1
4  1
5  1
6  0


query IT
SELECT
    c_id,
    bill = ALL(SELECT ship FROM o WHERE o.c_id=c.c_id)
    AND EXISTS(SELECT * FROM o WHERE o.c_id=c.c_id)
FROM c
ORDER BY c_id
----
1  1
2  0
3  0
4  0
5  0
6  0


query IIT
SELECT
    c.c_id,
    o.o_id,
    (
        SELECT max(CASE WHEN c2.bill > o2.ship THEN c2.bill ELSE o2.ship END)
        FROM c AS c2, o AS o2
        WHERE c2.c_id=o2.c_id AND c2.c_id=c.c_id
    )
FROM c
LEFT JOIN o
ON c.c_id=o.c_id
ORDER BY c.c_id, o.o_id
----
1 10 CA
1 20 CA
1 30 CA
2 40 TX
2 50 TX
2 60 TX
3 NULL NULL
4 70 WY
4 80 WY
5 NULL NULL
6 90 WA


query II
SELECT
    c_id,
    (SELECT count(*) FROM o WHERE o.c_id=c.c_id)
FROM c
ORDER BY c_id
----
1 3
2 3
3 0
4 2
5 0
6 1


query I
SELECT max((SELECT count(*) FROM o WHERE o.c_id=c.c_id)) FROM c
----
3


query IT
SELECT
    c.c_id,
    (SELECT ship FROM o WHERE o.c_id=c.c_id ORDER BY ship LIMIT 1) IS NOT NULL
FROM c
ORDER BY c.c_id
----
1  1
2  0
3  0
4  0
5  0
6  0

query I
select * from numbers(5) where exists(select * from numbers(1)) order by number
----
0
1
2
3
4


statement ok
drop table o


statement ok
drop table c

query I
select * from (SELECT number AS a FROM numbers(10)) x where exists (select 1::UInt64 b) ORDER BY a
----
0
1
2
3
4
5
6
7
8
9

query I
select (select count() from numbers(10)) + (select count() from numbers(10))
----
20

query T
select 1 < ANY(SELECT NULL)
----
NULL

query I
select 1 < ANY(SELECT 1.0)
----
0

query I
select number from numbers(10) where number in (select unnest([1,2,3]))
----
1
2
3

statement ok
drop table if exists t1

statement ok
create table t1 (a int, b int);

statement ok
insert into t1 values(1, 2);

statement ok
drop table if exists t2

statement ok
create table t2 (a int, b int);

statement ok
insert into t2 values(1, 1);

query T
select * from t2 where t2.b < ANY(select NULL from t1 where t1.a = t1.a)
----

statement ok
drop table if exists t3

statement ok
create table t3(a int, b int);

statement ok
insert into t3 values(1, 2), (3, 4), (6, 5);

query T
SELECT  *, (SELECT SUM(a) FROM t3 WHERE b IN (SELECT b FROM t1 WHERE a = t2.a )) FROM t2 WHERE  b IN (SELECT b FROM t3 WHERE a > 1);
----

query II
SELECT * FROM t3 WHERE EXISTS (SELECT 1);
----
1 2
3 4
6 5

query II
SELECT * FROM t3 WHERE NOT EXISTS (SELECT 1);
----

query II
SELECT * FROM t3 WHERE a = (SELECT 1);
----
1 2

query II
SELECT * FROM t3 WHERE a > (SELECT 1);
----
3 4
6 5

query II
SELECT * FROM t3 WHERE a IN (SELECT * FROM unnest([]));
----

query II
SELECT * FROM t3 WHERE a IN (SELECT * FROM unnest([1,2,null]));
----
1 2

query II
SELECT * FROM t3 WHERE a IN (SELECT * FROM unnest([1,2,3,4,5,6]));
----
1 2
3 4
6 5

query II
SELECT * FROM t3 WHERE a IN (SELECT * FROM unnest(split('1,2,3,4,5,6', ',')));
----
1 2
3 4
6 5

# https://github.com/datafuselabs/databend/issues/16099
statement ok
drop table if exists t4

statement ok
create table t4(id int, name string, payload json);

statement ok
insert into t4 values(1, 'test', '{"test":11,"test2":22}'),(2, 'test', '{"test":31,"test2":42}');

query ITT
SELECT * FROM t4 WHERE payload:test IN (SELECT payload:test FROM t4 where name = 'test');
----
1 test {"test":11,"test2":22}
2 test {"test":31,"test2":42}

query ITT
SELECT * FROM t4 WHERE payload:test IN (SELECT payload:test2 FROM t4 where name = 'test');
----


statement ok
drop table t1

statement ok
drop table t2

statement ok
drop table t3

statement ok
drop table t4

# https://github.com/datafuselabs/databend/pull/14353
statement ok
CREATE TABLE property_records (
  owner_id VARCHAR NULL,
  property_id VARCHAR NULL
) ;

statement ok
CREATE TABLE mortgage_records (
  property_id VARCHAR NULL
) ;

statement ok
CREATE TABLE transaction_history (
  owner_id VARCHAR NULL,
  property_id VARCHAR NULL
) ;

query I
SELECT
  (
    SELECT
      IF(COUNT(0) = 0, '0', '1')
    FROM
      property_records pr
    WHERE
      th.property_id = pr.property_id
      AND th.owner_id = pr.owner_id
  ) AS ownership_status,
  (
    SELECT
      IF(COUNT(0) = 0, '0', '1')
    FROM
      mortgage_records mr
    WHERE
      th.property_id = mr.property_id
  ) AS mortgage_status
FROM
  transaction_history th
----

statement ok
drop table property_records;

statement ok
drop table mortgage_records;

statement ok
drop table transaction_history;

statement ok
drop table if exists t1;

statement ok
create table t1(a int);

statement ok
insert into t1 values(1), (2), (3);

query error 1001.*Scalar subquery can't return more than one row
select (select sum(a) from t1 where t1.a >= t2.a group by t1.a) from t1 as t2;

statement ok
drop table t1;

statement ok
drop table if exists t;

statement ok
create table t (i int);

statement ok
insert into t values(1), (2), (3), (null);

query T
select i, exists(select * from t where i > 10) from t;
----
1 0
2 0
3 0
NULL 0

statement ok
drop table if exists t;

statement ok
drop table if exists push_log;

statement ok
drop table if exists merge_log;

statement ok
CREATE TABLE `push_log` (
  `name` VARCHAR NULL,
  `data_count` INT NULL,
  `created_at` TIMESTAMP NULL
) ENGINE = FUSE;

statement ok
CREATE TABLE `merge_log` (
  `name` VARCHAR NULL,
  `file_date` VARCHAR NULL,
  `inserted_count` INT NULL,
  `modified_count` INT NULL,
  `created_at` TIMESTAMP NULL
) ENGINE = FUSE;

query
SELECT
  (SELECT MAX(created_at)
   FROM merge_log
   WHERE s.name=name
   AND created_at >= s.push_time
   AND created_at < s.push_time + 1) max_merge_time
FROM (
  SELECT
    name,
    DATE_FORMAT(created_at,'%Y-%m-%d') create_date,
    STR_TO_DATE(DATE_FORMAT(created_at,'%Y-%m-%d'),'%Y-%m-%d') push_time
  FROM push_log
) s;
----

statement ok
drop table push_log;

statement ok
drop table merge_log;

# The test indicates that we need to eliminate the duplicated rows in outer table when flattening the subquery.
# Or there'll result in a wrong result due to more datas generated.
statement ok
create or replace table test_group (
  input_date date,
  value decimal(10,2)
);

statement ok
insert into test_group values ('2024-01-01', 100),('2024-01-01', 200),('2024-01-02', 400),('2024-01-02', 800);

query TI
select input_date, sum(value),
(select sum(value)
	    from test_group b
	    where b.input_date >= DATE_TRUNC(YEAR, input_date)
	      and b.input_date <= a.input_date) as total
from test_group a
group by input_date order by input_date;
----
2024-01-01 300.00 300.00
2024-01-02 1200.00 1500.00

statement ok
drop table test_group;

# https://github.com/databendlabs/databend/issues/17476
statement ok
DROP TABLE IF EXISTS t1;

statement ok
DROP TABLE IF EXISTS t2;

statement ok
CREATE TABLE t1 (i1 INT);

statement ok
CREATE TABLE t2 (i1 INT);

statement ok
insert into t1 values (0);

statement ok
insert into t2 values (0);

query I
SELECT 1 FROM t1
WHERE t1.i1 = (
  SELECT t1.i1
    FROM t2 UNION
  SELECT dt1.i1
    FROM (t1 AS dt1)
);
----
1
