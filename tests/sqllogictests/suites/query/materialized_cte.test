# two materialized ctes and select one column
query I
with t1 as materialized (select number as a from numbers(10)), t2 as materialized (select number as b from numbers(20)) select t1.a from t1 join t2 on t1.a = t2.b;
----
0
1
2
3
4
5
6
7
8
9

# two materialized ctes and select all columns
query I
with t1 as materialized (select number as a from numbers(10)), t2 as materialized (select number as b from numbers(20)) select * from t1 join t2 on t1.a = t2.b;
----
0 0
1 1
2 2
3 3
4 4
5 5
6 6
7 7
8 8
9 9

# only one materialized
query I
with t1 as materialized (select number as a from numbers(10)) select t1.a from t1;
----
0
1
2
3
4
5
6
7
8
9

# one materialized and one not
query I
with t1 as materialized (select number as a from numbers(10)), t2 as (select number as b from numbers(20)) select t1.a from t1 join t2 on t1.a = t2.b;
----
0
1
2
3
4
5
6
7
8
9

# one cte uses a materialized cte
query I
with t1 as materialized (select number as a from numbers(10)), t2 as (select a as b from t1) select t1.a from t1 join t2 on t1.a = t2.b;
----
0
1
2
3
4
5
6
7
8
9

query I
with t1 as materialized (select number as a from numbers(10)) select t2.a from t1 as t2 where t2.a in (select * from t1 as t3 where t2.a = t3.a);
----
0
1
2
3
4
5
6
7
8
9


# union with materialized cte
query I
with t1 as materialized (select number as a from numbers(10)), t2 as materialized (select number as b from numbers(20)) select * from t1 union select * from t2 order by a;
----
0
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19

# intersect with materialized cte
query I
with t1 as materialized (select number as a from numbers(10)), t2 as materialized (select number as b from numbers(20)) select * from t1 intersect select * from t2 order by a;
----
0
1
2
3
4
5
6
7
8
9

# except with materialized cte
query I
with t1 as materialized (select number as a from numbers(10)), t2 as materialized (select number as b from numbers(20)) select * from t1 except select * from t2 order by a;
----

# one materialized cte uses a materialized cte
query I
with t1 as materialized (select number as a from numbers(10)), t2 as materialized (select a as b from t1) select t1.a from t1 join t2 on t1.a = t2.b;
----
0
1
2
3
4
5
6
7
8
9

query II
with t1 as materialized (select number as a from numbers(10)), t2 as materialized (select number as b from numbers(20)), t3 as (select b as c from t2) select * from t1 join t3 on t1.a = t3.c;
----
0 0
1 1
2 2
3 3
4 4
5 5
6 6
7 7
8 8
9 9

query I
with t1 as materialized (select number as a from numbers(10)), t2 as materialized (select a as b from t1) select b from t2;
----
0
1
2
3
4
5
6
7
8
9

query I
with t1 as materialized (select number as a from numbers(10)), t2 as materialized (select t1.a as b from (select t1.a from t1, t1 as t11), t1 as t111) select * from t2 order by t2.b limit 10;
----
0
0
0
0
0
0
0
0
0
0

statement ok
drop table if exists test all

statement ok
create table test (a int, b string);

statement ok
insert into test values (1, 'a'), (2, 'b');

# main query doesn't use materialized cte, but materialized cte is defined
query TT rowsort
WITH tq9v2(cHAx0) AS materialized (SELECT a AS cHAx0 FROM test) SELECT b from test;
----
a
b

# merge into use materialized cte.
statement ok
drop table if exists target_table;

statement ok
create table target_table(a int, b string);

statement ok
insert into target_table values(1, 's');

query TT
merge into target_table using(with t1 AS materialized (SELECT a, b from test), t2 as materialized (select number, 'a' from numbers(2)) 
select * from t1 union select * from t2) as source_table on target_table.a = source_table.a when matched then update * when not matched then insert *;
----
2 1

query IT
select a, b from target_table order by a;
----
0 a
1 a
2 b

statement ok
drop table target_table all;

statement ok
drop table test
