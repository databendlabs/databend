statement ok
CREATE DATABASE IF NOT EXISTS test_named_window_basic

statement ok
USE test_named_window_basic

statement ok
DROP TABLE IF EXISTS empsalary

statement ok
DROP TABLE IF EXISTS t1

statement ok
CREATE TABLE empsalary (depname string, empno bigint, salary int, enroll_date date)

statement ok
INSERT INTO empsalary VALUES ('develop', 10, 5200, '2007-08-01'), ('sales', 1, 5000, '2006-10-01'), ('personnel', 5, 3500, '2007-12-10'), ('sales', 4, 4800, '2007-08-08'), ('personnel', 2, 3900, '2006-12-23'), ('develop', 7, 4200, '2008-01-01'), ('develop', 9, 4500, '2008-01-01'), ('sales', 3, 4800, '2007-08-01'), ('develop', 8, 6000, '2006-10-01'), ('develop', 11, 5200, '2007-08-15')

statement ok
CREATE TABLE t1(a int)

statement ok
INSERT INTO t1 VALUES (1),(1),(1),(3),(3),(5),(5)

# named window
query TIIR
SELECT depname, empno, salary, sum(salary) OVER w FROM empsalary WINDOW w AS (PARTITION BY depname ORDER BY empno) ORDER BY depname, empno
----
develop 7 4200 4200
develop 8 6000 10200
develop 9 4500 14700
develop 10 5200 19900
develop 11 5200 25100
personnel 2 3900 3900
personnel 5 3500 7400
sales 1 5000 5000
sales 3 4800 9800
sales 4 4800 14600

# sum
query R
SELECT sum(salary) OVER w ss FROM empsalary WINDOW w AS (PARTITION BY depname ORDER BY salary) ORDER BY depname, ss
----
4200
8700
19100
19100
25100
3500
7400
9600
9600
14600

# row_number
query II
SELECT row_number() OVER w1 rn1, dense_rank() OVER w2 rn2 FROM empsalary WINDOW w1 AS (PARTITION BY depname ORDER BY salary), w2 AS (PARTITION BY depname ORDER BY salary DESC) ORDER BY depname, rn1
----
1 4
2 3
3 2
4 2
5 1
1 2
2 1
1 2
2 2
3 1

# row_number with inherited window
# binder will reorder this query by evaluate rn2 in previouse of rn1, so the result maybe different cause w1 did not have order by to keep stable results.
# here we are using rank instead of row_number
query II
SELECT rank() OVER w1 rn1, dense_rank() OVER w2 rn2 FROM empsalary WINDOW w1 AS (PARTITION BY depname), w2 AS (w1 ORDER BY salary DESC) ORDER BY depname, rn1
----
1 1
1 2
1 2
1 3
1 4
1 1
1 2
1 1
1 2
1 2

# sum with inherited window
query IIII
select a, sum(a) over w, sum(a) over w1, sum(a) over w2 from t1 window w as (partition by a), w2 as (w1 rows current row), w1 as (w order by a) order by a
----
1 3 3 1
1 3 3 1
1 3 3 1
3 6 6 3
3 6 6 3
5 10 10 5
5 10 10 5

# rank_dense
query TII
SELECT depname, salary, dense_rank() OVER w FROM empsalary WINDOW w AS (PARTITION BY depname ORDER BY salary) order by depname, salary
----
develop 4200 1
develop 4500 2
develop 5200 3
develop 5200 3
develop 6000 4
personnel 3500 1
personnel 3900 2
sales 4800 1
sales 4800 1
sales 5000 2

# rank
query TII
SELECT depname, salary, rank() OVER w FROM empsalary WINDOW w AS (PARTITION BY depname ORDER BY salary) order by depname, salary
----
develop 4200 1
develop 4500 2
develop 5200 3
develop 5200 3
develop 6000 5
personnel 3500 1
personnel 3900 2
sales 4800 1
sales 4800 1
sales 5000 3


# row_number
query I
SELECT row_number() OVER w rn FROM empsalary WINDOW w AS (PARTITION BY depname ORDER BY salary) ORDER BY depname, rn
----
1
2
3
4
5
1
2
1
2
3

# rank_dense
query TII
SELECT depname, salary, dense_rank() OVER w FROM empsalary WINDOW w AS (PARTITION BY depname ORDER BY salary) order by depname, salary
----
develop 4200 1
develop 4500 2
develop	5200 3
develop	5200 3
develop 6000 4
personnel 3500 1
personnel 3900 2
sales 4800 1
sales 4800 1
sales 5000 2

# rank
query TII
SELECT depname, salary, rank() OVER w FROM empsalary WINDOW w AS (PARTITION BY depname ORDER BY salary) order by depname, salary
----
develop 4200 1
develop 4500 2
develop 5200 3
develop 5200 3
develop 6000 5
personnel 3500 1
personnel 3900 2
sales 4800 1
sales 4800 1
sales 5000 3

# percent_rank
query TII
SELECT depname, salary, percent_rank() OVER w FROM empsalary WINDOW w AS (PARTITION BY depname ORDER BY salary) order by depname, salary
----
develop 4200 0.0
develop 4500 0.25
develop 5200 0.5
develop 5200 0.5
develop 6000 1.0
personnel 3500 0.0
personnel 3900 1.0
sales 4800 0.0
sales 4800 0.0
sales 5000 1.0

# percent_rank
query TII
SELECT depname, salary, percent_rank() OVER w FROM empsalary WINDOW w AS (ORDER BY salary) order by salary
----
personnel 3500 0.0
personnel 3900 0.1111111111111111
develop 4200 0.2222222222222222
develop 4500 0.3333333333333333
sales 4800 0.4444444444444444
sales 4800 0.4444444444444444
sales 5000 0.6666666666666666
develop 5200 0.7777777777777778
develop 5200 0.7777777777777778
develop 6000 1.0

# min/max/avg
query TIIR
SELECT depname, min(salary) OVER w m1, max(salary) OVER w m2, AVG(salary) OVER w m3 FROM empsalary WINDOW w AS (PARTITION BY depname ORDER BY salary, empno) ORDER BY depname, empno
----
develop 4200 4200 4200.0
develop 4200 6000 5020.0
develop 4200 4500 4350.0
develop 4200 5200 4633.333333333333
develop 4200 5200 4775.0
personnel 3500 3900 3700.0
personnel 3500 3500 3500.0
sales 4800 5000 4866.666666666667
sales 4800 4800 4800.0
sales 4800 4800 4800.0


# stddev_pop
query TR
SELECT depname, STDDEV_POP(salary) OVER w s FROM empsalary WINDOW w AS (PARTITION BY depname ORDER BY salary, empno) ORDER BY depname, empno
----
develop 0.0
develop 627.375485654325
develop 150.0
develop 418.9935029992179
develop 438.03538669838093
personnel 200.0
personnel 0.0
sales 94.28090415820623
sales 0.0
sales 0.0

# covar_pop
query TR
SELECT depname, COVAR_POP(salary, empno) OVER w c FROM empsalary WINDOW w AS (PARTITION BY depname ORDER BY salary, empno) ORDER BY depname, empno
----
develop 0.0
develop 240.00000000000017
develop 150.0
develop 477.777777777778
develop 606.2500000000002
personnel -300.0
personnel 0.0
sales -111.11111111111086
sales 0.0
sales 0.0

# aggregate functions in window clause
query TII
select depname, sum(sum(salary)) over w, sum(salary) from empsalary group by depname WINDOW w AS (partition by 1 order by sum(salary));
----
personnel 7400 7400
sales 22000 14600
develop 47100 25100

query TI
select depname, sum(sum(salary)) over w from empsalary group by depname WINDOW w AS (partition by 1 order by sum(salary));
----
personnel 7400
sales 22000
develop 47100

query III
select grouping(salary), grouping(depname), sum(grouping(salary)) over w from empsalary group by rollup (depname, salary) 
	WINDOW w AS (partition by grouping(salary) + grouping(depname) order by grouping(depname) desc) order by 1,2,3;
----
0 0 0
0 0 0
0 0 0
0 0 0
0 0 0
0 0 0
0 0 0
0 0 0
1 0 3
1 0 3
1 0 3
1 1 1

# Winodw func in subquery
query I
SELECT * FROM (SELECT row_number() OVER w rn FROM empsalary WINDOW w AS (PARTITION BY depname ORDER BY salary) ORDER BY depname, rn)
----
1
2
3
4
5
1
2
1
2
3

# Window func in order by
query II
SELECT a, sum(a) OVER w FROM t1 WINDOW w AS (PARTITION BY a) ORDER BY count() OVER w DESC, a
----
1 3
1 3
1 3
3 6
3 6
5 10
5 10

statement error 1065
SELECT sum(a) OVER w FROM t1 WINDOW w AS (ORDER BY unnest([1,2,3]))

statement error 1065
SELECT sum(a) OVER w FROM t1 WINDOW w AS (PARTITION BY (sum(a) OVER()))

statement ok
DROP DATABASE test_named_window_basic
