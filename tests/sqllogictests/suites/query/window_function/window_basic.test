statement ok
CREATE DATABASE IF NOT EXISTS test_window_basic


statement error 1065
SELECT last_value(number)  OVER (ORDER BY number ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED PRECEDING) FROM numbers(1);

statement error 1065
SELECT last_value(number)  OVER (ORDER BY number RANGE BETWEEN UNBOUNDED FOLLOWING AND UNBOUNDED FOLLOWING) FROM numbers(1);

statement ok
USE test_window_basic

statement ok
DROP TABLE IF EXISTS empsalary

statement ok
DROP TABLE IF EXISTS empsalary2

statement ok
CREATE TABLE empsalary (depname string, empno bigint, salary int, enroll_date date)

statement ok
INSERT INTO empsalary VALUES ('develop', 10, 5200, '2007-08-01'), ('sales', 1, 5000, '2006-10-01'), ('personnel', 5, 3500, '2007-12-10'), ('sales', 4, 4800, '2007-08-08'), ('personnel', 2, 3900, '2006-12-23'), ('develop', 7, 4200, '2008-01-01'), ('develop', 9, 4500, '2008-01-01'), ('sales', 3, 4800, '2007-08-01'), ('develop', 8, 6000, '2006-10-01'), ('develop', 11, 5200, '2007-08-15')

statement ok
CREATE TABLE `empsalary2` ( `depname` VARCHAR null,  `empno` BIGINT null, `salary` INT null, `enroll_date` DATE null)

statement ok
INSERT INTO empsalary2 SELECT * FROM empsalary

# basic example from postgres' window.sql
query TIIR
SELECT depname, empno, salary, sum(salary) OVER (PARTITION BY depname ORDER BY empno) FROM empsalary ORDER BY depname, empno
----
develop 7 4200 4200
develop 8 6000 10200
develop 9 4500 14700
develop 10 5200 19900
develop 11 5200 25100
personnel 2 3900 3900
personnel 5 3500 7400
sales 1 5000 5000
sales 3 4800 9800
sales 4 4800 14600


# sum
query R
SELECT sum(salary) OVER (PARTITION BY depname ORDER BY salary) ss FROM empsalary ORDER BY depname, ss
----
4200
8700
19100
19100
25100
3500
7400
9600
9600
14600

# row_number
query I
SELECT row_number() OVER (PARTITION BY depname ORDER BY salary) rn FROM empsalary ORDER BY depname, rn
----
1
2
3
4
5
1
2
1
2
3

statement error
select number %3 a, number %4 b, row_number() over(order by number % 11) from range(1, 10) t(number)  group by a,b;

statement ok
select number %3 a, number %4 b, row_number() over(partition by number % 3 order by number % 4) from range(1, 10) t(number)  group by a,b;

statement ok
select number %3 a, number %4 b, row_number() over(partition by b order by a) from range(1, 10) t(number)  group by a,b;

statement ok
select number %3 a, number %4 b, row_number() over(partition by b order by a % 2) from range(1, 10) t(number)  group by a,b;

statement ok
select number %3 a, number %4 b, row_number() over(partition by b % 2 order by a) from range(1, 10) t(number)  group by a,b;

statement ok
select number %3 a, decode(number %4, 0, 1, 0) b, row_number() over(partition by b % 2 order by decode(number %4, 0, 1, 0)) from range(1, 10) t(number)  group by a,b;

# rank_dense
query TII
SELECT depname, salary, dense_rank() OVER (PARTITION BY depname ORDER BY salary) FROM empsalary order by depname, salary
----
develop 4200 1
develop 4500 2
develop 5200 3
develop 5200 3
develop 6000 4
personnel 3500 1
personnel 3900 2
sales 4800 1
sales 4800 1
sales 5000 2

# rank
query TII
SELECT depname, salary, rank() OVER (PARTITION BY depname ORDER BY salary) FROM empsalary order by depname, salary
----
develop 4200 1
develop 4500 2
develop 5200 3
develop 5200 3
develop 6000 5
personnel 3500 1
personnel 3900 2
sales 4800 1
sales 4800 1
sales 5000 3

# percent_rank
query TII
SELECT depname, salary, percent_rank() OVER (PARTITION BY depname ORDER BY salary) FROM empsalary order by depname, salary
----
develop 4200 0.0
develop 4500 0.25
develop 5200 0.5
develop 5200 0.5
develop 6000 1.0
personnel 3500 0.0
personnel 3900 1.0
sales 4800 0.0
sales 4800 0.0
sales 5000 1.0

# lag ignore default value
query II
SELECT salary, lag(salary, 2) OVER (ORDER BY enroll_date) FROM empsalary
----
5000 NULL
6000 NULL
3900 5000
5200 6000
4800 3900
4800 5200
5200 4800
3500 4800
4200 5200
4500 3500

# lag with negative offset and ignore default value
query II
SELECT salary, lag(salary, -2) OVER (ORDER BY enroll_date) FROM empsalary
----
5000 3900
6000 5200
3900 4800
5200 4800
4800 5200
4800 3500
5200 4200
3500 4500
4200 NULL
4500 NULL

# lag with constant default value
query II
SELECT salary, lag(salary, 2, 888) OVER (ORDER BY enroll_date) FROM empsalary
----
5000 888
6000 888
3900 5000
5200 6000
4800 3900
4800 5200
5200 4800
3500 4800
4200 5200
4500 3500

# lag with column default value
query II
SELECT salary, lag(salary, 2, salary) OVER (ORDER BY enroll_date) FROM empsalary
----
5000 5000
6000 6000
3900 5000
5200 6000
4800 3900
4800 5200
5200 4800
3500 4800
4200 5200
4500 3500

# lead ignore default value
query II
SELECT salary, lead(salary, 2) OVER (ORDER BY enroll_date) FROM empsalary
----
5000 3900
6000 5200
3900 4800
5200 4800
4800 5200
4800 3500
5200 4200
3500 4500
4200 NULL
4500 NULL

# lag with negative offset and ignore default value
query II
SELECT salary, lead(salary, -2) OVER (ORDER BY enroll_date) FROM empsalary
----
5000 NULL
6000 NULL
3900 5000
5200 6000
4800 3900
4800 5200
5200 4800
3500 4800
4200 5200
4500 3500

# lead with constant default value
query II
SELECT salary, lead(salary, 2, 888) OVER (ORDER BY enroll_date) FROM empsalary
----
5000 3900
6000 5200
3900 4800
5200 4800
4800 5200
4800 3500
5200 4200
3500 4500
4200 888
4500 888

# lead with column default value
query II
SELECT salary, lead(salary, 2, salary) OVER (ORDER BY enroll_date) FROM empsalary
----
5000 3900
6000 5200
3900 4800
5200 4800
4800 5200
4800 3500
5200 4200
3500 4500
4200 4200
4500 4500

# lead with nullable column
query II
SELECT salary, lead(salary, 2) OVER (ORDER BY enroll_date) c FROM empsalary2 ORDER BY salary desc
----
6000 5200
5200 4800
5200 4200
5000 3900
4800 5200
4800 3500
4500 NULL
4200 NULL
3900 4800
3500 4500

# first_value
query TII
SELECT enroll_date, salary, first_value(salary) OVER (ORDER BY enroll_date) FROM empsalary
----
2006-10-01 5000 5000
2006-10-01 6000 5000
2006-12-23 3900 5000
2007-08-01 5200 5000
2007-08-01 4800 5000
2007-08-08 4800 5000
2007-08-15 5200 5000
2007-12-10 3500 5000
2008-01-01 4200 5000
2008-01-01 4500 5000

query TII rowsort
SELECT depname, salary, first_value(salary) OVER (PARTITION BY depname ORDER BY enroll_date) FROM empsalary
----
develop 4200 6000
develop 4500 6000
develop 5200 6000
develop 5200 6000
develop 6000 6000
personnel 3500 3900
personnel 3900 3900
sales 4800 5000
sales 4800 5000
sales 5000 5000

query TII rowsort
SELECT depname, salary, first_value(salary) OVER (PARTITION BY depname ORDER BY salary) FROM empsalary
----
develop 4200 4200
develop 4500 4200
develop 5200 4200
develop 5200 4200
develop 6000 4200
personnel 3500 3500
personnel 3900 3500
sales 4800 4800
sales 4800 4800
sales 5000 4800

query II
SELECT empno, first_value(empno) OVER (PARTITION BY depname ORDER BY empno) fv FROM empsalary order by 1,2
----
1 1
2 2
3 1
4 1
5 2
7 7
8 7
9 7
10 7
11 7

# first with nullable column
query II
SELECT empno, first(empno) OVER (PARTITION BY depname ORDER BY empno) fv FROM empsalary2 order by 1,2
----
1 1
2 2
3 1
4 1
5 2
7 7
8 7
9 7
10 7
11 7

# last_value
query TII
SELECT enroll_date, salary, last_value(salary) OVER (ORDER BY enroll_date) FROM empsalary
----
2006-10-01 5000 6000
2006-10-01 6000 6000
2006-12-23 3900 3900
2007-08-01 5200 4800
2007-08-01 4800 4800
2007-08-08 4800 4800
2007-08-15 5200 5200
2007-12-10 3500 3500
2008-01-01 4200 4500
2008-01-01 4500 4500

query TII
SELECT depname, salary, last_value(salary) OVER (PARTITION BY depname ORDER BY enroll_date) FROM empsalary order by 1,2,3;
----
develop 4200 4500
develop 4500 4500
develop 5200 5200
develop 5200 5200
develop 6000 6000
personnel 3500 3500
personnel 3900 3900
sales 4800 4800
sales 4800 4800
sales 5000 5000

query TII
SELECT depname, salary, last_value(salary) OVER (PARTITION BY depname ORDER BY salary) FROM empsalary order by 1,2,3;
----
develop 4200 4200
develop 4500 4500
develop 5200 5200
develop 5200 5200
develop 6000 6000
personnel 3500 3500
personnel 3900 3900
sales 4800 4800
sales 4800 4800
sales 5000 5000

query TII
SELECT depname, empno,
  last_value(empno) OVER (
    PARTITION BY depname ORDER BY empno ASC
    ROWS BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING
  ) fv
FROM empsalary order by 1,2,3;
----
develop 7 11
develop 8 11
develop 9 11
develop 10 11
develop 11 11
personnel 2 5
personnel 5 5
sales 1 4
sales 3 4
sales 4 4

# last with nullable column
query TII
SELECT depname, empno,
  last(empno) OVER (
    PARTITION BY depname ORDER BY empno ASC
    ROWS BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING
  ) fv
FROM empsalary2 order by 1,2,3;
----
develop 7 11
develop 8 11
develop 9 11
develop 10 11
develop 11 11
personnel 2 5
personnel 5 5
sales 1 4
sales 3 4
sales 4 4

# nth_value
query III
SELECT depname, empno,
	nth_value(empno, 2) OVER (
		PARTITION BY depname ORDER BY empno ASC
		ROWS BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING
		) fv
FROM empsalary
ORDER BY 1, 2
----
develop	7	8
develop	8	9
develop	9	10
develop	10	11
develop	11	NULL
personnel	2	5
personnel	5	NULL
sales	1	3
sales	3	4
sales	4	NULL

query III
SELECT depname, empno,
	nth_value(NULL, 2) OVER (
		PARTITION BY depname ORDER BY empno ASC
		ROWS BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING
		) fv
FROM empsalary
ORDER BY 1, 2
----
develop	7	NULL
develop	8	NULL
develop	9	NULL
develop	10	NULL
develop	11	NULL
personnel	2	NULL
personnel	5	NULL
sales	1	NULL
sales	3	NULL
sales	4	NULL

# Where the first parameter is a constant
query III
SELECT depname, empno,
	nth_value(-1, 2) OVER (
		PARTITION BY depname ORDER BY empno ASC
		ROWS BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING
		) fv
FROM empsalary
ORDER BY 1, 2
----
develop	7	-1
develop	8	-1
develop	9	-1
develop	10	-1
develop	11	NULL
personnel	2	-1
personnel	5	NULL
sales	1	-1
sales	3	-1
sales	4	NULL

statement ok
DROP VIEW IF EXISTS empno_nulls

statement ok
CREATE VIEW empno_nulls AS
SELECT depname, case empno % 2 when 1 then empno else NULL end as empno, salary, enroll_date
FROM empsalary

query III
SELECT depname, empno,
	nth_value(empno, 2) OVER (
		PARTITION BY depname ORDER BY empno ASC NULLS FIRST
		ROWS BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING
		) fv
FROM empno_nulls
ORDER BY 1, 2 NULLS FIRST
----
develop	NULL	NULL
develop	NULL	7
develop	7	9
develop	9	11
develop	11	NULL
personnel	NULL	5
personnel	5	NULL
sales	NULL	1
sales	1	3
sales	3	NULL

statement error
SELECT depname, empno,
	nth_value(empno) OVER (
		PARTITION BY depname ORDER BY empno ASC
		ROWS BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING
		) fv
FROM empsalary

statement error
SELECT depname, empno,
	nth_value(empno, 2, 3) OVER (
		PARTITION BY depname ORDER BY empno ASC
		ROWS BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING
		) fv
FROM empsalary

# ntile
query TII
SELECT depname, salary, ntile(3) OVER (PARTITION BY depname ORDER BY salary) AS rank_group FROM empsalary order by 1,2,3;
----
develop 4200 1
develop 4500 1
develop 5200 2
develop 5200 2
develop 6000 3
personnel 3500 1
personnel 3900 2
sales 4800 1
sales 4800 2
sales 5000 3

statement error
SELECT depname, salary, ntile() OVER (PARTITION BY depname ORDER BY salary) AS rank_group FROM empsalary

statement error
SELECT depname, salary, ntile(0) OVER (PARTITION BY depname ORDER BY salary) AS rank_group FROM empsalary

# min/max/avg
query TIIR
SELECT depname, min(salary) OVER (PARTITION BY depname ORDER BY salary, empno) m1, max(salary) OVER (PARTITION BY depname ORDER BY salary, empno) m2, AVG(salary) OVER (PARTITION BY depname ORDER BY salary, empno) m3 FROM empsalary ORDER BY depname, empno
----
develop 4200 4200 4200.0
develop 4200 6000 5020.0
develop 4200 4500 4350.0
develop 4200 5200 4633.333333333333
develop 4200 5200 4775.0
personnel 3500 3900 3700.0
personnel 3500 3500 3500.0
sales 4800 5000 4866.666666666667
sales 4800 4800 4800.0
sales 4800 4800 4800.0


# stddev_pop
query TR
SELECT depname, STDDEV_POP(salary) OVER (PARTITION BY depname ORDER BY salary, empno) s FROM empsalary ORDER BY depname, empno
----
develop 0.0
develop 627.375485654325
develop 150.0
develop 418.9935029992179
develop 438.03538669838093
personnel 200.0
personnel 0.0
sales 94.28090415820623
sales 0.0
sales 0.0

# covar_pop
query TR
SELECT depname, COVAR_POP(salary, empno) OVER (PARTITION BY depname ORDER BY salary, empno) c FROM empsalary ORDER BY depname, empno
----
develop 0.0
develop 240.00000000000017
develop 150.0
develop 477.777777777778
develop 606.2500000000002
personnel -300.0
personnel 0.0
sales -111.11111111111086
sales 0.0
sales 0.0

# aggregate functions in window clause
query TII rowsort
select depname, sum(sum(salary)) over (partition by 1 order by sum(salary)), sum(salary) from empsalary group by depname order by 1,2;
----
develop 47100 25100
personnel 7400 7400
sales 22000 14600

query TI rowsort
select depname, sum(sum(salary)) over (partition by 1 order by sum(salary)) from empsalary group by depname order by 1,2;
----
develop 47100
personnel 7400
sales 22000

query III rowsort
select grouping(salary), grouping(depname), sum(grouping(salary)) over (partition by grouping(salary) + grouping(depname) order by grouping(depname) desc) from empsalary group by rollup (depname, salary) order by 1,2,3;
----
0 0 0
0 0 0
0 0 0
0 0 0
0 0 0
0 0 0
0 0 0
0 0 0
1 0 3
1 0 3
1 0 3
1 1 1

query TII
SELECT depname, empno, quantile_cont(salary) OVER (PARTITION BY depname ORDER BY empno) FROM empsalary ORDER BY depname, empno
----
develop 7 4200.0
develop 8 5100.0
develop 9 4500.0
develop 10 4850.0
develop 11 5200.0
personnel 2 3900.0
personnel 5 3700.0
sales 1 5000.0
sales 3 4900.0
sales 4 4800.0

query TII
SELECT depname, empno, quantile_cont(0.8)(salary) OVER (PARTITION BY depname ORDER BY empno) FROM empsalary ORDER BY depname, empno
----
develop 7 4200.0
develop 8 5640.0
develop 9 5400.0
develop 10 5520.0
develop 11 5360.0
personnel 2 3900.0
personnel 5 3820.0
sales 1 5000.0
sales 3 4960.0
sales 4 4920.0

# Window func in subquery
query I
SELECT * FROM (SELECT row_number() OVER (PARTITION BY depname ORDER BY salary) rn FROM empsalary ORDER BY depname, rn) order by 1;
----
1
1
1
2
2
2
3
3
4
5

# Window func in order by
query II
SELECT salary, sum(salary) OVER (PARTITION BY depname) FROM empsalary ORDER BY count() OVER (PARTITION BY depname ORDER BY salary) DESC, 1,2;
----
6000 25100
5200 25100
5200 25100
5000 14600
3900 7400
4500 25100
4800 14600
4800 14600
3500 7400
4200 25100

# diff windows
query TIIII
SELECT depname, empno, salary, sum(salary) OVER (PARTITION BY depname ORDER BY empno), sum(salary) OVER (PARTITION BY empno ORDER BY depname) FROM empsalary ORDER BY depname, empno
----
develop 7 4200 4200 4200
develop 8 6000 10200 6000
develop 9 4500 14700 4500
develop 10 5200 19900 5200
develop 11 5200 25100 5200
personnel 2 3900 3900 3900
personnel 5 3500 7400 3500
sales 1 5000 5000 5000
sales 3 4800 9800 4800
sales 4 4800 14600 4800

# window with where
query TIII
SELECT depname, empno, salary, RANK() OVER (PARTITION BY depname ORDER BY empno) FROM empsalary WHERE enroll_date BETWEEN '2006-10-01' AND '2007-12-10' order by 1,2,3,4;
----
develop 8 6000 1
develop 10 5200 2
develop 11 5200 3
personnel 2 3900 1
personnel 5 3500 2
sales 1 5000 1
sales 3 4800 2
sales 4 4800 3

statement error 1065
select max(sum(salary) over(ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW)) from empsalary

statement error 1065
select to_date('2022-02-02') over(order by (to_date('2017-12-04') - to_date('2017-02-02')))

statement error 1065
select last_value(last_value(salary) over ()) over () from empsalary

statement error 1065
select sum(sum(salary) over()) over() from empsalary

statement error 1065
select sum(salary) over(order by unnest([1,2,3])) from empsalary

statement error 1065
select sum(salary) over(order by (sum(salary) over())) from empsalary

statement ok
DROP TABLE IF EXISTS Test

statement ok
CREATE TABLE Test (k int, v int)

statement ok
INSERT INTO Test SELECT generate_series AS k, generate_series AS v FROM generate_series(1, 2)

# push down filter in window function
query II
SELECT k, v FROM (SELECT *, rank() OVER (PARTITION BY k ORDER BY v DESC) AS rank FROM ((SELECT k, v FROM Test) UNION ALL (SELECT k, v FROM Test) ) t1 ) t2 WHERE rank = 1 AND k = 2
----
2 2
2 2

# cannot push down filter in window function
query II
SELECT k, v FROM (SELECT *, rank() OVER (PARTITION BY v ORDER BY v DESC) AS rank FROM ((SELECT k, v FROM Test) UNION ALL (SELECT k, v FROM Test) ) t1 ) t2 WHERE rank = 1 AND k = 2
----
2 2
2 2

statement ok
drop table if exists t

statement ok
create table t(a int)

statement ok
insert into t values (1),(2),(3),(4),(5)

query II
select max(a) OVER (partition by a) FROM t qualify max(a) OVER (partition by a) > 3 order by 1
----
4
5

## example from: https://community.snowflake.com/s/article/Pushdown-or-Not-Pushdown
statement ok
DROP TABLE IF EXISTS tbpush

statement ok
create table tbpush(b int);

statement ok
insert into tbpush values (1),(2);

statement ok
DROP view IF EXISTS vwpush

statement ok
create view vwpush (b, rnum) as select b, row_number() over (order by b) from tbpush

query II
select b, row_number() over (order by b) from tbpush where b > 1;
----
2 1

query II
select * from vwpush where b > 1;
----
2 2

query II
select * from (select b, row_number() over (order by b) from tbpush) where b > 1;
----
2 2

# multiple blocks
statement ok
DROP TABLE IF EXISTS customers;

statement ok
CREATE TABLE customers (
    customer_id INT UNSIGNED NOT NULL,
    customer_name VARCHAR NOT NULL,
    segment VARCHAR NOT NULL,
    create_timestamp DATE NOT NULL,
    active BOOLEAN NOT NULL
) row_per_block=100;

statement ok
INSERT INTO customers (customer_id, customer_name, segment, create_timestamp, active)
SELECT
    number,
    CONCAT('Customer ', number::String),
    CASE
        WHEN number % 3 = 0 THEN 'small'
        WHEN number % 3 = 1 THEN 'medium'
        ELSE 'large'
    END,
    to_date('2022-01-02'),
    number % 2 = 0
FROM numbers(100000);


query II
select c.customer_id, RANK() OVER (PARTITION BY c.segment ORDER BY c.customer_id DESC) AS rank_in_segment from customers c order by c.segment, rank_in_segment, c.customer_id limit 10;
----
99998 1
99995 2
99992 3
99989 4
99986 5
99983 6
99980 7
99977 8
99974 9
99971 10

query II
with results_rollup AS
  (
         select sum(number) gross_margin, 2 as lochierarchy   from numbers(1000000) group by number % 4
   )
SELECT gross_margin, rank() OVER (PARTITION BY lochierarchy
                    ORDER BY gross_margin ASC) AS rank_within_parent
FROM results_rollup order by 1,2;
----
124999500000 1
124999750000 2
125000000000 3
125000250000 4

query II
with results_rollup AS
  (
         select sum(number) gross_margin, 2 as lochierarchy   from numbers(1000000)
   )
SELECT gross_margin, rank() OVER (PARTITION BY lochierarchy
                    ORDER BY gross_margin ASC) AS rank_within_parent
FROM results_rollup order by 1,2;
----
499999500000 1

query TTII
WITH sales AS (
	SELECT col0 AS sale_id, col1 AS product_name, col2 AS sale_amount
  	FROM (
  		VALUES
    	(1, 'Product A', 1000),
      	(2, 'Product A', 1500),
      	(3, 'Product A', 2000),
      	(4, 'Product B', 500),
      	(5, 'Product B', 800),
      	(6, 'Product B', 1200)
     )
)
SELECT
	product_name, sale_amount
    , LEAD(sale_amount) OVER (PARTITION BY product_name ORDER BY sale_id) AS next_sale_amount
FROM sales ORDER BY product_name, sale_amount, next_sale_amount
LIMIT 100
----
Product A 1000 1500
Product A 1500 2000
Product A 2000 NULL
Product B 500 800
Product B 800 1200
Product B 1200 NULL

statement ok
DROP DATABASE test_window_basic;
