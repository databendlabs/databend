statement ok
CREATE DATABASE IF NOT EXISTS test_window_partition_spill

statement ok
USE test_window_partition_spill

statement ok
SET force_window_data_spill = 1;

statement ok
set window_partition_spilling_to_disk_bytes_limit = 1024 * 1024 * 1024;

statement ok
set enable_dio = 1;

query T
SELECT SUM(number + a + b)
FROM (
    SELECT
        number,
        LEAD(number, 1, 0) OVER (PARTITION BY number % 16 ORDER BY number + 1) AS a,
        LEAD(number, 2, 0) OVER (PARTITION BY number % 16 ORDER BY number + 1) AS b
    FROM numbers(500000)
);
----
374999249384

query I
SELECT SUM(a + b + c)
FROM (
    SELECT
        number,
        LEAD(number, 1, 0) OVER (PARTITION BY number % 8 ORDER BY number + 2) a,
        LEAD(number, 2, 0) OVER (PARTITION BY number % 8 ORDER BY number + 2) b,
        LEAD(number, 3, 0) OVER (PARTITION BY number % 8 ORDER BY number + 2) c
    FROM numbers(100000)
);
----
14999849576

statement ok
set enable_dio = 0;

query T
SELECT SUM(number + a + b)
FROM (
    SELECT
        number,
        LEAD(number, 1, 0) OVER (PARTITION BY number % 16 ORDER BY number + 1) AS a,
        LEAD(number, 2, 0) OVER (PARTITION BY number % 16 ORDER BY number + 1) AS b
    FROM numbers(500000)
);
----
374999249384

query I
SELECT SUM(a + b + c)
FROM (
    SELECT
        number,
        LEAD(number, 1, 0) OVER (PARTITION BY number % 8 ORDER BY number + 2) a,
        LEAD(number, 2, 0) OVER (PARTITION BY number % 8 ORDER BY number + 2) b,
        LEAD(number, 3, 0) OVER (PARTITION BY number % 8 ORDER BY number + 2) c
    FROM numbers(100000)
);
----
14999849576

statement ok
unset enable_dio;

statement ok
DROP TABLE IF EXISTS customers;

statement ok
CREATE TABLE customers (
    customer_id INT UNSIGNED NOT NULL,
    customer_name VARCHAR NOT NULL,
    segment VARCHAR NOT NULL,
    create_timestamp DATE NOT NULL,
    active BOOLEAN NOT NULL
) row_per_block=100;

statement ok
INSERT INTO customers (customer_id, customer_name, segment, create_timestamp, active)
SELECT
    number,
    CONCAT('Customer ', number::String),
    CASE
        WHEN number % 3 = 0 THEN 'small'
        WHEN number % 3 = 1 THEN 'medium'
        ELSE 'large'
    END,
    to_date('2022-01-02'),
    number % 2 = 0
FROM numbers(100000);

query II
SELECT
    c.customer_id,
    RANK() OVER (PARTITION BY c.segment ORDER BY c.customer_id DESC) AS rank_in_segment
FROM
    customers c
ORDER BY
    c.segment,
    rank_in_segment,
    c.customer_id
LIMIT 10;
----
99998 1
99995 2
99992 3
99989 4
99986 5
99983 6
99980 7
99977 8
99974 9
99971 10

query II
SELECT
    c.customer_id,
    DENSE_RANK() OVER (PARTITION BY c.segment ORDER BY c.customer_id ASC) AS percent_rank_in_segment
FROM
    customers c
ORDER BY
    c.segment, percent_rank_in_segment, c.customer_id
LIMIT 10;
----
2 1
5 2
8 3
11 4
14 5
17 6
20 7
23 8
26 9
29 10

query II
SELECT
    c.customer_id,
    COUNT(*) OVER (PARTITION BY c.segment ORDER BY c.customer_id) AS cumulative_count_in_segment
FROM
    customers c
ORDER BY
    c.customer_id, cumulative_count_in_segment
LIMIT 10;
----
0 1
1 1
2 1
3 2
4 2
5 2
6 3
7 3
8 3
9 4

query III
SELECT
    customer_id,
    customer_id + LEAD(customer_id, 1, 0) OVER (PARTITION BY segment ORDER BY customer_id) AS next_customer_id_sum,
    customer_id + LEAD(customer_id, 2, 0) OVER (PARTITION BY segment ORDER BY customer_id) AS second_next_customer_id_sum
FROM
    customers
ORDER BY
    segment, customer_id
LIMIT 10;
----
2 7 10
5 13 16
8 19 22
11 25 28
14 31 34
17 37 40
20 43 46
23 49 52
26 55 58
29 61 64

statement ok
DROP DATABASE test_window_partition_spill;

statement ok
unset force_window_data_spill;
