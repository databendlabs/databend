statement ok
CREATE OR REPLACE TABLE monthly_sales(empid INT, amount INT, month TEXT);

statement ok
INSERT INTO monthly_sales VALUES
    (1, 10000, 'JAN'),
    (1, 400, 'JAN'),
    (2, 4500, 'JAN'),
    (2, 35000, 'JAN'),
    (1, 5000, 'FEB'),
    (1, 3000, 'FEB'),
    (2, 200, 'FEB'),
    (2, 90500, 'FEB'),
    (1, 6000, 'MAR'),
    (1, 5000, 'MAR'),
    (2, 2500, 'MAR'),
    (2, 9500, 'MAR'),
    (1, 8000, 'APR'),
    (1, 10000, 'APR'),
    (2, 800, 'APR'),
    (2, 4500, 'APR');

query IIIII
SELECT empid,jan,feb,mar,apr FROM (
    SELECT *
        FROM monthly_sales
            PIVOT(SUM(amount) FOR MONTH IN ('JAN', 'FEB', 'MAR', 'APR'))
        ORDER BY EMPID
);
----
1	10400	8000	11000	18000
2	39500	90700	12000	5300

query IRRRR
SELECT empid,jan,feb,mar,apr FROM (
    SELECT *
        FROM monthly_sales
            PIVOT(AVG(amount) FOR MONTH IN ('JAN', 'FEB', 'MAR', 'APR'))
        ORDER BY EMPID
);
----
1	5200.0	4000.0	5500.0	9000.0
2	19750.0	45350.0	6000.0	2650.0

query IIIII
SELECT EMPID,
    SUM_IF(AMOUNT,MONTH = 'JAN') AS JAN,
    SUM_IF(AMOUNT,MONTH = 'FEB') AS FEB,
    SUM_IF(AMOUNT,MONTH = 'MAR') AS MAR,
    SUM_IF(AMOUNT,MONTH = 'APR') AS APR
    FROM monthly_sales
    GROUP BY EMPID
    ORDER BY EMPID;
----
1	10400	8000	11000	18000
2	39500	90700	12000	5300

query IIIII
SELECT empid,jan,feb,mar,apr FROM (
    SELECT *
        FROM (SELECT * FROM monthly_sales)
            PIVOT(SUM(amount) FOR MONTH IN ('JAN', 'FEB', 'MAR', 'APR'))
        ORDER BY EMPID
);
----
1	10400	8000	11000	18000
2	39500	90700	12000	5300

query IIIII
SELECT empid,jan,feb,mar,apr FROM (
    SELECT *
        FROM monthly_sales
            PIVOT(SUM(amount) FOR MONTH IN (SELECT DISTINCT month FROM monthly_sales))
        ORDER BY EMPID
);
----
1	10400	8000	11000	18000
2	39500	90700	12000	5300

query IIIII
SELECT empid,jan,feb,mar,apr FROM (
    SELECT *
        FROM (SELECT * FROM monthly_sales)
            PIVOT(SUM(amount) FOR MONTH IN (SELECT DISTINCT month FROM monthly_sales))
        ORDER BY EMPID
);
----
1	10400	8000	11000	18000
2	39500	90700	12000	5300

statement error 1065
SELECT empid,jan,feb,mar,apr FROM (
    SELECT *
        FROM monthly_sales
            PIVOT(SUM(amount) FOR MONTH IN (SELECT DISTINCT month, month FROM monthly_sales))
        ORDER BY EMPID
);

statement error 1065
SELECT empid,jan,feb,mar,apr FROM (
    SELECT *
        FROM monthly_sales
            PIVOT(SUM(amount) FOR MONTH IN (SELECT DISTINCT empid FROM monthly_sales))
        ORDER BY EMPID
);

statement ok
CREATE OR REPLACE TABLE test_table ("DATA_TIME" timestamp, "METRIC_CODE" string, "VALUE" decimal(16,4));

statement ok
insert into test_table values ('2024-09-30 14:09:36.000', '0101', 3.5128);

query TR
SELECT * FROM test_table PIVOT(avg("VALUE") FOR "METRIC_CODE" IN ('0101'));
----
2024-09-30 14:09:36.000000	3.5128

# Test cases for CTE PIVOT bug fix
statement ok
CREATE OR REPLACE TABLE test_tag_list (
    material_name VARCHAR,
    max_cost_source_url VARCHAR,
    set_category VARCHAR,
    customize_creative_start_date DATE,
    customize_creative_end_date DATE,
    tag_category VARCHAR,
    tag_list ARRAY(STRING),
    created_at TIMESTAMP,
    updated_at TIMESTAMP
);

statement ok
INSERT INTO test_tag_list VALUES
    ('material1', 'url1', 'cat1', '2024-01-01', '2024-01-31', 'character', ['hero', 'villain'], '2024-01-01 00:00:00', '2024-01-01 00:00:00'),
    ('material1', 'url1', 'cat1', '2024-01-01', '2024-01-31', 'scene', ['outdoor', 'city'], '2024-01-01 00:00:00', '2024-01-01 00:00:00'),
    ('material2', 'url2', 'cat2', '2024-02-01', '2024-02-28', 'character', ['monster'], '2024-02-01 00:00:00', '2024-02-01 00:00:00'),
    ('material2', 'url2', 'cat2', '2024-02-01', '2024-02-28', 'theme', ['action'], '2024-02-01 00:00:00', '2024-02-01 00:00:00');

# Test CTE with max_cost_source_url column - this was the original failing case
query T?T
WITH cte_0 AS (
    SELECT
        max_cost_source_url,
        tag_category,
        tag_list
    FROM test_tag_list
)
SELECT * FROM cte_0 PIVOT (
    MAX(tag_list) FOR tag_category IN ('character', 'scene', 'theme')
)
ORDER BY max_cost_source_url;
----
url1 ['hero','villain'] ['outdoor','city'] NULL
url2 ['monster'] NULL ['action']

# Test CTE with material_name column - this was working case
query T?T
WITH cte_0 AS (
    SELECT
        material_name,
        tag_category,
        tag_list
    FROM test_tag_list
)
SELECT * FROM cte_0 PIVOT (
    MAX(tag_list) FOR tag_category IN ('character', 'scene', 'theme')
)
ORDER BY material_name;
----
material1 ['hero','villain'] ['outdoor','city'] NULL
material2 ['monster'] NULL ['action']

# Test materialized CTE (create table) - this was working case
statement ok
CREATE OR REPLACE TABLE cte_0_materialized AS
SELECT
    max_cost_source_url,
    tag_category,
    tag_list
FROM test_tag_list;

query T?T
SELECT * FROM cte_0_materialized PIVOT (
    MAX(tag_list) FOR tag_category IN ('character', 'scene', 'theme')
)
ORDER BY max_cost_source_url;
----
url1 ['hero','villain'] ['outdoor','city'] NULL
url2 ['monster'] NULL ['action']

# Test multiple levels of CTE nesting
query T?T
WITH cte_level1 AS (
    SELECT
        max_cost_source_url,
        tag_category,
        tag_list
    FROM test_tag_list
),
cte_level2 AS (
    SELECT * FROM cte_level1
)
SELECT * FROM cte_level2 PIVOT (
    MAX(tag_list) FOR tag_category IN ('character', 'scene', 'theme')
)
ORDER BY max_cost_source_url;
----
url1 ['hero','villain'] ['outdoor','city'] NULL
url2 ['monster'] NULL ['action']

statement ok
drop table monthly_sales;

statement ok
drop table test_table;

statement ok
drop table test_tag_list;

statement ok
drop table cte_0_materialized;
