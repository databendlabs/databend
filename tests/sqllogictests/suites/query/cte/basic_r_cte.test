control sortmode rowsort

statement ok
create or replace database db;

statement ok
use db;

query I
WITH RECURSIVE recursive_cte AS (SELECT 1 AS n UNION ALL SELECT n + 1 FROM recursive_cte WHERE n < 10)
SELECT n FROM recursive_cte;
----
1
10
2
3
4
5
6
7
8
9

query I
WITH RECURSIVE recursive_cte AS (SELECT to_uint16(1) AS n UNION ALL SELECT to_uint8(n + 1) FROM recursive_cte WHERE n < 10)
SELECT n FROM recursive_cte;
----
1
10
2
3
4
5
6
7
8
9

query I
WITH RECURSIVE recursive_cte AS (SELECT to_uint16(1) AS n UNION ALL SELECT to_uint8(n + 1) FROM recursive_cte WHERE n < 10)
SELECT n FROM recursive_cte;
----
1
10
2
3
4
5
6
7
8
9

# cte used in multiple places
onlyif todo
query I
WITH RECURSIVE t AS
(
	SELECT 1 AS x
UNION ALL
	SELECT t1.x + t2.x + t3.x AS x
	FROM t t1, t t2, t t3
	WHERE t1.x < 100
)
SELECT * FROM t ORDER BY 1;
----


query I
WITH RECURSIVE recursive_cte AS (SELECT 1 AS n UNION ALL SELECT n + 1 FROM recursive_cte WHERE n < 1000)
SELECT count() FROM recursive_cte ORDER BY 1 NULLS LAST;
----
1000

statement ok
create or replace table nk_example_table as
SELECT * FROM (
VALUES
(1, 'new loan' ,10000, 0.1),
(2, 'new loan' ,500 , 0.2),
(3, 'add interest' ,0 , 0.15)
) AS t (id, action, amount, interest);

query ITI??
with recursive recur(id, action, amount, interest, total_bal) as
(select id,
action,
amount,
interest,
cast(amount as double) as total_bal
from nk_example_table
where id = 1
union all
select b.id,
b.action,
b.amount,
b.interest,
cast((a.total_bal * (1+b.interest))+b.amount as double)
from recur a, nk_example_table b where a.id+1 = b.id
)
select * from recur;
----
1 new loan 10000 0.10 10000.0
2 new loan 500 0.20 12500.0
3 add interest 0 0.15 14374.999999999998

# alias columns name
query I
with recursive recur(a, b, c, d, e) as
(select id,
action,
amount,
interest,
cast(amount as double) as total_bal
from nk_example_table
where id = 1
union all
select b.id,
b.action,
b.amount,
b.interest,
cast((r.e * (1+b.interest))+b.amount as double)
from recur r, nk_example_table b where r.a+1 = b.id
)
select * from recur;
----
1 new loan 10000 0.10 10000.0
2 new loan 500 0.20 12500.0
3 add interest 0 0.15 14374.999999999998

statement ok
drop table nk_example_table;

# recursive cte used by multiple times in main query
query II
with recursive t as (select 1 as x union all select x+1 from t where x < 3) select * from t a1, t a2;
----
1 1
1 2
1 3
2 1
2 2
2 3
3 1
3 2
3 3

query I
with recursive t as (select 1 as x union all select x+1 from t where x < 3) select min(a1.x) from t a1, t a2;
----
1


# recursive cte scan used by multiple times in recursive part of recursive cte
query I
with recursive t as (select 1 as x union all select m.x+f.x from t as m, t as f where m.x < 3) select * from t;
----
1
2
4

# recursive cte with normal cte
statement ok
create or replace table t1(a int);

statement ok
insert into t1 values (0), (1), (2), (3), (4), (5), (6), (7), (8), (9);

query II
WITH RECURSIVE t(n) as (
  select 1
  union all
  select n+1 from t where n<10
),
cte1 as (
  select a from t1
)
select n, cte1.a  from t join cte1 where t.n=cte1.a;
----
1 1
2 2
3 3
4 4
5 5
6 6
7 7
8 8
9 9


query II
WITH RECURSIVE cte1 as (
  select  a  from t1
),
t(n) as (
  select 1
  union all
  select n+1 from t where n<10
)
select n, cte1.a  from t join cte1 where t.n=cte1.a;
----
1 1
2 2
3 3
4 4
5 5
6 6
7 7
8 8
9 9


query I
WITH RECURSIVE cte1 as (
  select  a  from t1
)
select cte1.a  from cte1;
----
0
1
2
3
4
5
6
7
8
9


statement ok
create table train(
train_id varchar(8) not null ,
departure_station varchar(32) not null,
arrival_station varchar(32) not null,
seat_count int not null
);

statement ok
create table passenger(
passenger_id varchar(16) not null,
departure_station varchar(32) not null,
arrival_station varchar(32) not null
);

statement ok
create table city(city varchar(32));

statement ok
insert into city
with t as (select 1 n union select 2 union select 3 union select 4 union select 5)
,t1 as(select row_number()over() rn from t ,t t2,t t3)
select concat('城市',rn::varchar) city from t1 where rn<=5;

statement ok
insert into train
select concat('G',row_number()over()::varchar),c1.city,c2.city, n from city c1, city c2, (select 600 n union select 800 union select 1200 union select 1600) a ;

statement ok
insert into passenger
select concat('P',substr((100000000+row_number()over())::varchar,2)),c1.city,c2.city from city c1, city c2 ,city c3, city c4, city c5,
city c6, (select 1 n union select 2 union select 3 union select 4) c7,(select 1 n union select 2) c8;


query III
with
t0 as (
select
        train_id,
        seat_count,
        sum(seat_count) over (
        partition by departure_station, arrival_station order by train_id
      ) ::int sum_sid
from
        train
)
select
    sum(case when n=1 then sum_sid+1 else 0  end::int),
    sum(sum_sid),
    sum(seat_count)
from
        t0,(select 1 n union all select 2);
----
236700 473200 210000

statement ok
use default;

statement ok
drop database db;
