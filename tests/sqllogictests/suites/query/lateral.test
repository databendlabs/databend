statement ok
drop database if exists test_lateral

statement ok
create database test_lateral

statement ok
use test_lateral

statement ok
create table t(a int)

statement ok
insert into t values(1),(2),(3)

statement ok
create table t1(a int)

statement ok
insert into t1 values(1),(2),(3)

query II
select * from t, lateral(select * from t1 where t1.a = t.a) t2 limit 20
----
1 1
2 2
3 3

query II
select * from t, lateral(select * from t1 where t1.a != t.a) t2 order by t.a, t2.a limit 20
----
1 2
1 3
2 1
2 3
3 1
3 2

query II
select * from t left join lateral(select * from t1 where t1.a = t.a) t2 on t.a = t2.a
----
1 1
2 2
3 3

query II
select * from t, lateral(select a) t1
----
1 1
2 2
3 3

query II
select * from t, lateral(select unnest([a, a+1, a+2]) as b) t1 order by a, b
----
1 1
1 2
1 3
2 2
2 3
2 4
3 3
3 4
3 5


statement ok
CREATE TABLE user_activities(user_id int, activities variant)

statement ok
INSERT INTO user_activities (user_id, activities) VALUES
    (1, parse_json('["reading", "swimming", "cycling"]')),
    (2, parse_json('["painting", "running"]')),
    (3, parse_json('["cooking", "climbing", "writing"]'))

query IT
SELECT u.user_id, f.value::STRING AS activity FROM
    user_activities u,
    LATERAL FLATTEN(input => u.activities) f limit 20
----
1 reading
1 swimming
1 cycling
2 painting
2 running
3 cooking
3 climbing
3 writing

query I
SELECT COUNT(f.value) AS total_activities
FROM user_activities u, LATERAL FLATTEN(input => u.activities) f
----
8

query I
SELECT AVG(activity_count) AS avg_activities_per_user
FROM (
  SELECT u.user_id, COUNT(f.value) AS activity_count
  FROM user_activities u, LATERAL FLATTEN(input => u.activities) f
  GROUP BY u.user_id
) subquery
----
2.6666666666666665

query I
SELECT MAX(activity_count) AS max_activities
FROM (
  SELECT u.user_id, COUNT(f.value) AS activity_count
  FROM user_activities u, LATERAL FLATTEN(input => u.activities) f
  GROUP BY u.user_id
) subquery
----
3

query TI
SELECT f.value::string AS activity, COUNT(DISTINCT u.user_id) AS user_count
FROM user_activities u, LATERAL FLATTEN(input => u.activities) f
GROUP BY f.value ORDER BY activity
----
climbing 1
cooking 1
cycling 1
painting 1
reading 1
running 1
swimming 1
writing 1

statement ok
CREATE TABLE persons(id int, c variant)

statement ok
INSERT INTO persons (id, c) VALUES
    (12712555, '{"name":{"first":"John","last":"Smith"},"contact":[{"business":[{"type":"phone","content":"555-1234"},{"type":"email","content":"j.smith@company.com"}]}]}'),
    (98127771, '{"name":{"first":"Jane","last":"Doe"},"contact":[{"business":[{"type":"phone","content":"555-1236"},{"type":"email","content":"j.doe@company.com"}]}]}')

query ITTT
SELECT id AS "ID", f.value AS "Contact", f1.value:type AS "Type", f1.value:content AS "Details" FROM
    persons p,
    LATERAL FLATTEN(input => p.c, path => 'contact') f,
    LATERAL FLATTEN(input => f.value:business) f1
----
12712555 {"business":[{"content":"555-1234","type":"phone"},{"content":"j.smith@company.com","type":"email"}]} "phone" "555-1234"
12712555 {"business":[{"content":"555-1234","type":"phone"},{"content":"j.smith@company.com","type":"email"}]} "email" "j.smith@company.com"
98127771 {"business":[{"content":"555-1236","type":"phone"},{"content":"j.doe@company.com","type":"email"}]} "phone" "555-1236"
98127771 {"business":[{"content":"555-1236","type":"phone"},{"content":"j.doe@company.com","type":"email"}]} "email" "j.doe@company.com"

query II
SELECT p.id, COUNT(DISTINCT f1.value:type) AS contact_type_count
FROM persons p
, LATERAL FLATTEN(input => p.c:contact) f
, LATERAL FLATTEN(input => f.value:business) f1
GROUP BY p.id ORDER BY p.id
----
12712555 2
98127771 2

query IT
SELECT u.user_id, f.value from
    user_activities u,
    LATERAL unnest(u.activities) f
----
1 "reading"
1 "swimming"
1 "cycling"
2 "painting"
2 "running"
3 "cooking"
3 "climbing"
3 "writing"

statement ok
drop table if exists t1;

statement ok
drop table if exists t2;

statement ok
create table t1(a int, b int, c int);

statement ok
create table t2(a int, b int, c int);

statement ok
insert into t1 values (1, 10, 11), (10, 20, 111), (2, 20, 200);

statement ok
insert into t2 values (1, 10, 22), (2222, 10, 22), (3, 20, 222);

query I
select t1.a, t1.b from t1 join lateral (values(t1.b)) as v1 ("c1") on t1.b = v1.c1 order by t1.a, t1.b;
----
1 10
2 20
10 20

query I
select t1.a, t1.b from t1 join lateral (values(t1.b), (t1.c)) as v1 ("c1") on t1.b = v1.c1 order by t1.a, t1.b;
----
1 10
2 20
10 20

query T
select t1.a, v1.c1, v1.c2 from t1 left join lateral (values('t1_b', t1.b), ('t1_c', t1.c)) as v1 ("c1", "c2") on t1.a = v1.c2 order by t1.a, v1.c1, v1.c2;
----
1 NULL NULL
2 NULL NULL
10 NULL NULL

query T
select t1.a, v1.c1, v1.c2 from t1 left join lateral (values('t1_b', t1.b), ('t1_c', t1.c)) as v1 ("c1", "c2") on t1.a = v1.c2 left join lateral (values('t1_b', t1.b), ('t1_c', t1.c)) as v2 ("c1", "c2") on t1.a = v2.c2 order by t1.a, v1.c1, v1.c2;
----
1 NULL NULL
2 NULL NULL
10 NULL NULL

statement ok
drop table if exists rates;

statement ok
create table rates(origin varchar, dest varchar, distance int, "r2023" decimal(38,10), "r2022" decimal(38,10), "r2021" decimal(38,10));

statement ok
insert into rates values ('a', 'b', 500, 2023.12, 2022.23, 2021.34), ('a', 'c', 500, 2023.11, null, null);

query T
WITH source AS(
	SELECT origin,
		dest,
		distance,
		"r2023",
		"r2022",
		"r2021"
	FROM "rates"
)
SELECT r.origin, r.dest, r.rates, r.values
FROM (
	SELECT source.origin,
		source.dest,
		v.rates,
		v.values
	FROM source
	JOIN LATERAL (
		VALUES
			(source."distance", 'distance'),
			(source."r2023", 'r2023'),
			(source."r2022", 'r2022'),
			(source."r2021", 'r2021')
	) AS v ("values", "rates") ON true
) AS r order by r.origin, r.dest, r.rates, r.values;
----
a b distance 500.0000000000
a b r2021 2021.3400000000
a b r2022 2022.2300000000
a b r2023 2023.1200000000
a c distance 500.0000000000
a c r2021 NULL
a c r2022 NULL
a c r2023 2023.1100000000

# futher nulls
statement ok
insert into rates values ('a', 'd', 400, null, null, null);

statement ok
insert into rates values ('a', 'e', null, null, null, null);

query T
WITH source AS(
  SELECT
    origin,
    dest,
    distance,
    "r2023",
    "r2022",
    "r2021"
  FROM
    "rates"
)
SELECT
  r.origin,
  r.dest,
  r.rates,
  r.values
FROM
  (
    SELECT
      source.origin,
      source.dest,
      v.rates,
      v.values
    FROM
      source
      JOIN LATERAL (
        VALUES
          (source."distance", 'distance'),
          (source."r2023", 'r2023'),
          (source."r2022", 'r2022'),
          (source."r2021", 'r2021')
      ) AS v ("values", "rates") ON TRUE
  ) AS r order by r.origin, r.dest, r.rates, r.values;
  ----
----
a b distance 500.0000000000
a b r2021 2021.3400000000
a b r2022 2022.2300000000
a b r2023 2023.1200000000
a c distance 500.0000000000
a c r2021 NULL
a c r2022 NULL
a c r2023 2023.1100000000
a d distance 400.0000000000
a d r2021 NULL
a d r2022 NULL
a d r2023 NULL
a e distance NULL
a e r2021 NULL
a e r2022 NULL
a e r2023 NULL

statement ok
drop database test_lateral
