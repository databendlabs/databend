control sortmode rowsort

query T
select 'Hello, world!'
----
Hello, world!

statement ok
drop database if exists db

statement ok
create database db

statement ok
create table db.t(a int)

statement ok
insert into db.t values(1),(2)

onlyif http
statement error 1005
from db.t, db.t2;

onlyif http
query I
from db.t
----
1
2

onlyif http
query I
select db.t.a from db.t
----
1
2

statement ok
select t1.a from `db`.``.`t` as t1

onlyif http
query I
select t1.a from db.t as t1
----
1
2

onlyif http
statement error 1065
select db.t1.a from db.t as t1

statement ok
drop database if exists db

statement ok
drop table if exists t

statement ok
create table t(a int);

statement ok
insert into t values(1);

query I
select catalog,database,name,number_of_blocks,number_of_segments from system.tables where name = 't';
----
default default t 1 1

statement error 1065
select * from (values(1, 'one'), (2, 'two', 3))

statement error 1065
select * from (values(1, 'one'), (2, ['two','three']))

statement error 1065
select * from (values(1, 'one'), (2, 'two')) t(a,b,c)

query IT rowsort
select * from (values(1, 'one'), (2, 'two'), (3, 'three')) as t(a, b)
----
1 one
2 two
3 three

query IT
select col0, col1 from (values(1, 'one'), (null, 'two'), (3, null))
----
1 one
3 NULL
NULL two

query I
select 1 from (values('a'),('b'),('c'))
----
1
1
1

query I
from (values('a'),('b'),('c')) select 1
----
1
1
1

query IT
from range(1,3) t(a) select t.a;
----
1
2

query IT rowsort
select col0, col1 from (values(1, 'one'), (null, 'two'), (3 + 2, null))
----
1 one
5 NULL
NULL two

query IT rowsort
values (1, 'one'), (2, 'two'), (3, 'three')
----
1 one
2 two
3 three

query IT
values (1, 'one'), (2, 'two'), (3, 'three') order by col0 desc limit 2
----
2 two
3 three

statement error 1005
select * from numbers(2) limit 0,1,dummy;

statement error 1005
select * from numbers(2) limit 0,1 offset 2;

query I
select * from numbers(2) offset 0;
----
0
1

statement ok
create table dc_user_in_log(center String, id String, uid int, tid String, create_time String);

statement ok
insert into dc_user_in_log values('wx49', '0', 0, '0', '2019-01-01 00:00:00');

# Inlist exprs are tuple, will be converted to `contain` function
# fix: https://github.com/datafuselabs/databend/pull/12647#issue-1875143894
query TTITT
select `center`,`id`,`uid`,`tid`,`create_time` from dc_user_in_log where (center,uid) in (('wx49',0),('wx49',1),('wx49',2),('wx49',3),('wx49',4),('wx49',5),('wx49',6),('wx49',7),('wx49',8),('wx49',9),('wx49',10),('wx49',11),('wx49',12),('wx49',13),('wx49',14),('wx49',15),('wx49',16),('wx49',17),('wx49',18),('wx49',19),('wx49',20),('wx49',21),('wx49',22),('wx49',23),('wx49',24),('wx49',25),('wx49',26),('wx49',27),('wx49',28),('wx49',29),('wx49',30),('wx49',31),('wx49',32),('wx49',33),('wx49',34),('wx49',35),('wx49',36),('wx49',37),('wx49',38),('wx49',39),('wx49',40),('wx49',41),('wx49',42),('wx49',43),('wx49',44),('wx49',45),('wx49',46),('wx49',47),('wx49',48),('wx49',49),('wx49',50),('wx49',51),('wx49',52),('wx49',53),('wx49',54),('wx49',55),('wx49',56),('wx49',57),('wx49',58),('wx49',59),('wx49',60),('wx49',61),('wx49',62),('wx49',63),('wx49',64),('wx49',65),('wx49',66),('wx49',67),('wx49',68),('wx49',69),('wx49',70),('wx49',71),('wx49',72),('wx49',73),('wx49',74),('wx49',75),('wx49',76),('wx49',77),('wx49',78),('wx49',79),('wx49',80),('wx49',81),('wx49',82),('wx49',83),('wx49',84),('wx49',85),('wx49',86),('wx49',87),('wx49',88),('wx49',89),('wx49',90),('wx49',91),('wx49',92),('wx49',93),('wx49',94),('wx49',95),('wx49',96),('wx49',97),('wx49',98),('wx49',99),('wx49',100),('wx49',101),('wx49',102),('wx49',103),('wx49',104),('wx49',105),('wx49',106),('wx49',107),('wx49',108),('wx49',109),('wx49',110),('wx49',111),('wx49',112),('wx49',113),('wx49',114),('wx49',115),('wx49',116),('wx49',117),('wx49',118),('wx49',119),('wx49',120),('wx49',121),('wx49',122),('wx49',123),('wx49',124),('wx49',125),('wx49',126),('wx49',127),('wx49',128),('wx49',129),('wx49',130),('wx49',131),('wx49',132),('wx49',133),('wx49',134),('wx49',135),('wx49',136),('wx49',137),('wx49',138),('wx49',139),('wx49',140),('wx49',141),('wx49',142),('wx49',143),('wx49',144),('wx49',145),('wx49',146),('wx49',147),('wx49',148),('wx49',149),('wx49',150),('wx49',151),('wx49',152),('wx49',153),('wx49',154),('wx49',155),('wx49',156),('wx49',157),('wx49',158),('wx49',159),('wx49',160),('wx49',161),('wx49',162),('wx49',163),('wx49',164),('wx49',165),('wx49',166),('wx49',167),('wx49',168),('wx49',169),('wx49',170),('wx49',171),('wx49',172),('wx49',173),('wx49',174),('wx49',175),('wx49',176),('wx49',177),('wx49',178),('wx49',179),('wx49',180),('wx49',181),('wx49',182),('wx49',183),('wx49',184),('wx49',185),('wx49',186),('wx49',187),('wx49',188),('wx49',189),('wx49',190),('wx49',191),('wx49',192),('wx49',193),('wx49',194),('wx49',195),('wx49',196),('wx49',197),('wx49',198),('wx49',199),('wx49',200),('wx49',201),('wx49',202),('wx49',203),('wx49',204),('wx49',205),('wx49',206),('wx49',207),('wx49',208),('wx49',209),('wx49',210),('wx49',211),('wx49',212),('wx49',213),('wx49',214),('wx49',215),('wx49',216),('wx49',217),('wx49',218),('wx49',219),('wx49',220),('wx49',221),('wx49',222),('wx49',223),('wx49',224),('wx49',225),('wx49',226),('wx49',227),('wx49',228),('wx49',229),('wx49',230),('wx49',231),('wx49',232),('wx49',233),('wx49',234),('wx49',235),('wx49',236),('wx49',237),('wx49',238),('wx49',239),('wx49',240),('wx49',241),('wx49',242),('wx49',243),('wx49',244),('wx49',245),('wx49',246),('wx49',247),('wx49',248),('wx49',249),('wx49',250),('wx49',251),('wx49',252),('wx49',253),('wx49',254),('wx49',255),('wx49',256),('wx49',257),('wx49',258),('wx49',259),('wx49',260),('wx49',261),('wx49',262),('wx49',263),('wx49',264),('wx49',265),('wx49',266),('wx49',267),('wx49',268),('wx49',269),('wx49',270),('wx49',271),('wx49',272),('wx49',273),('wx49',274),('wx49',275),('wx49',276),('wx49',277),('wx49',278),('wx49',279),('wx49',280),('wx49',281),('wx49',282),('wx49',283),('wx49',284),('wx49',285),('wx49',286),('wx49',287),('wx49',288),('wx49',289),('wx49',290),('wx49',291),('wx49',292),('wx49',293),('wx49',294),('wx49',295),('wx49',296),('wx49',297),('wx49',298),('wx49',299),('wx49',300),('wx49',301),('wx49',302),('wx49',303),('wx49',304),('wx49',305),('wx49',306),('wx49',307),('wx49',308),('wx49',309),('wx49',310),('wx49',311),('wx49',312),('wx49',313),('wx49',314),('wx49',315),('wx49',316),('wx49',317),('wx49',318),('wx49',319),('wx49',320),('wx49',321),('wx49',322),('wx49',323),('wx49',324),('wx49',325),('wx49',326),('wx49',327),('wx49',328),('wx49',329),('wx49',330),('wx49',331),('wx49',332),('wx49',333),('wx49',334),('wx49',335),('wx49',336),('wx49',337),('wx49',338),('wx49',339),('wx49',340),('wx49',341),('wx49',342),('wx49',343),('wx49',344),('wx49',345),('wx49',346),('wx49',347),('wx49',348),('wx49',349),('wx49',350),('wx49',351),('wx49',352),('wx49',353),('wx49',354),('wx49',355),('wx49',356),('wx49',357),('wx49',358),('wx49',359),('wx49',360),('wx49',361),('wx49',362),('wx49',363),('wx49',364),('wx49',365),('wx49',366),('wx49',367),('wx49',368),('wx49',369),('wx49',370),('wx49',371),('wx49',372),('wx49',373),('wx49',374),('wx49',375),('wx49',376),('wx49',377),('wx49',378),('wx49',379),('wx49',380),('wx49',381),('wx49',382),('wx49',383),('wx49',384),('wx49',385),('wx49',386),('wx49',387),('wx49',388),('wx49',389),('wx49',390),('wx49',391),('wx49',392),('wx49',393),('wx49',394),('wx49',395),('wx49',396),('wx49',397),('wx49',398),('wx49',399),('wx49',400),('wx49',401),('wx49',402),('wx49',403),('wx49',404),('wx49',405),('wx49',406),('wx49',407),('wx49',408),('wx49',409),('wx49',410),('wx49',411),('wx49',412),('wx49',413),('wx49',414),('wx49',415),('wx49',416),('wx49',417),('wx49',418),('wx49',419),('wx49',420),('wx49',421),('wx49',422),('wx49',423),('wx49',424),('wx49',425),('wx49',426),('wx49',427));
----
wx49 0 0 0 2019-01-01 00:00:00

statement ok
drop table dc_user_in_log;

# fix: https://github.com/datafuselabs/databend/issues/12795
statement ok
drop table if exists tt1;

statement ok
drop table if exists tt2;

statement ok
create table tt1 (a int, b string);

statement ok
insert into tt1 values (1, 'abc'), (2, 'def');

statement ok
create table tt2 (a int, b string);

statement ok
insert into tt2 values (1, 'abc'), (2, 'def');

query T
SELECT * FROM tt1 RIGHT ANTI JOIN tt2 ON is_not_null(char_length(tt1.b));
----

statement ok
drop table if exists t1;

statement ok
create table t1(a int, b int);

statement ok
insert into t1 values(1, 2), (2, 3), (3, 4);

query II
select * from t1 where a not in
----

query T
select * from t1 where a in (0, 1, 1, 2, 2, 3, 4, 4, 5, 6, 6, 7, 8, 9, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1300) order by a;
----
1 2
2 3
3 4

statement ok
set inlist_to_join_threshold = 1;

query II
select * from t1 where a in (1, 2) order by a;
----
1 2
2 3

# fix: https://github.com/datafuselabs/databend/issues/16143
statement ok
drop table if exists t2;

statement ok
create table t2 (id int, payload variant);

statement ok
insert into t2 values (1, '{"test":10,"test2":"ab"}'), (2, '{"test":20,"test2":"cd"}');

query IT
select * from t2 where payload:test in (10, 11)
----
1 {"test":10,"test2":"ab"}

query IT
select * from t2 where payload:test2 in ('ab', 'cd')
----
1 {"test":10,"test2":"ab"}
2 {"test":20,"test2":"cd"}

query IT
select * from t2 where payload:test in (select 20)
----
2 {"test":20,"test2":"cd"}

statement ok
drop table t1;

statement ok
drop table t2;

statement ok
unset inlist_to_join_threshold
