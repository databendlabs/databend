statement ok
drop table if exists t1;

statement ok
create or replace table t1 (a int);

# right join with empty build side
query II
select * from (select * from numbers(100)) n right join t1 on n.number = t1.a;
----

# inner join with empty build side
query II
select * from (select * from numbers(100)) n join t1 on n.number = t1.a;
----

# right semi with empty build side
query II
select * from (select * from numbers(100)) n right semi join t1 on n.number = t1.a;
----

# right anti with empty build side
query II
select * from (select * from numbers(100)) n right anti join t1 on n.number = t1.a;
----

# left semi with empty build side
query II
select * from (select * from numbers(100)) n left semi join t1 on n.number = t1.a;
----

# left anti join with empty build side
query I
select * from (select * from numbers(10)) n left anti join t1 on n.number = t1.a order by number;
----
0
1
2
3
4
5
6
7
8
9


# left join with empty build side
query II
select * from (select * from numbers(10)) n left join t1 on n.number = t1.a order by n.number;
----
0 NULL
1 NULL
2 NULL
3 NULL
4 NULL
5 NULL
6 NULL
7 NULL
8 NULL
9 NULL

# full join with empty build side
query II
select * from (select * from numbers(10)) n full join t1 on n.number = t1.a order by n.number;
----
0 NULL
1 NULL
2 NULL
3 NULL
4 NULL
5 NULL
6 NULL
7 NULL
8 NULL
9 NULL

statement ok
drop table t1;

statement ok
create or replace table t1(a int, b int)

statement ok
insert into t1 values(1, 2), (2, 4), (3, 6), (4, 8), (5, 10)

statement ok
create or replace table t2(a int, b int)

statement ok
insert into t2 values(1, 2), (1, 4), (1, 6), (1, 8), (1, 10);

# test probe to build
statement ok
insert into t1 values(2, 2);

statement ok
insert into t2 values(2, 6), (2, 8);

query I
select t1.a, t2.b, t1.b from t1 inner join t2 on t1.a = t2.a order by t1.a, t2.b, t1.b;
----
1 2 2
1 4 2
1 6 2
1 8 2
1 10 2
2 6 2
2 6 4
2 8 2
2 8 4

statement ok
select  a.number, b.number from numbers(1000000) a inner join
 (select number from numbers(1000000)) b on a.number = b.number and [a.number, 4] = [b.number, 3]

# test probe to build with other condition
statement ok
drop table if exists t1;

statement ok
drop table if exists t2;

statement ok
create or replace table t1 (id int, val bigint unsigned default 0);

statement ok
create or replace table t2 (id int, val bigint unsigned default 0);

statement ok
insert into t1 values(1, 1696549154011), (2, 1696549154013);

statement ok
insert into t2 values(1, 1697650260000), (3, 1696549154009), (2, 1696549154010), (2, 1696549154013);

query I
select t1.id from t1 left join t2 on t1.id = t2.id where t1.val >= t2.val;
----
2
2

query I
select t1.id, t1.val from t1 left join t2 on t1.id = t2.id and t1.val = t2.val where t1.val >= t2.val;
----
2 1696549154013

statement ok
drop table t1;

statement ok
drop table t2;

statement ok
create or replace table t(id int);

statement ok
insert into t values(1), (2);

statement ok
create or replace table t1(id int, col1 varchar);

statement ok
insert into t1 values(1, 'c'), (3, 'd');

query I rowsort
SELECT * FROM t JOIN t1, t as t2 JOIN t1 as t3;
----
1 1 c 1 1 c
1 1 c 1 3 d
1 1 c 2 1 c
1 1 c 2 3 d
1 3 d 1 1 c
1 3 d 1 3 d
1 3 d 2 1 c
1 3 d 2 3 d
2 1 c 1 1 c
2 1 c 1 3 d
2 1 c 2 1 c
2 1 c 2 3 d
2 3 d 1 1 c
2 3 d 1 3 d
2 3 d 2 1 c
2 3 d 2 3 d

statement error 1065
SELECT * FROM t JOIN t1 on t.id = max(t1.id)

statement error 1065
SELECT * FROM t JOIN t1 on last(t1.id) over(partition by 10)

statement ok
drop table t;

statement ok
drop table t1;

statement ok
drop table if exists t1;

statement ok
drop table if exists t2;

statement ok
create or replace table t1(a int, b int);

statement ok
insert into t1 values(1, 1),(2, 2),(3, 3);

statement ok
create or replace table t2(a int, b int);

statement ok
insert into t2 values(1, 1),(2, 2);

statement error 1065
SELECT t1.a FROM t1 RIGHT ANTI JOIN t2 ON t1.a = t2.a;
---

statement error 1065
SELECT t1.a FROM t1 RIGHT SEMI JOIN t2 ON t1.a = t2.a;
---

statement error 1065
SELECT t2.a FROM t1 LEFT ANTI JOIN t2 ON t1.a = t2.a;
---

statement error 1065
SELECT t2.a FROM t1 LEFT SEMI JOIN t2 ON t1.a = t2.a;
---

statement ok
drop table if exists t1;

statement ok
drop table if exists t2;

statement ok
create or replace table t1(a int, b int, c int, d int);

statement ok
insert into t1 values(1, 2, 3, 4);

statement ok
create or replace table t2(a int, b int, c int, d int);

statement ok
insert into t2 values(1, 2, 3, 4);

statement error 1065
SELECT tt1.d FROM t1 RIGHT SEMI JOIN t2 USING(b);

statement ok
drop table if exists t;

statement ok
create or replace table t(a int);

statement ok
insert into t values(1),(2),(3);

query ITI
select * from (select a, 'A' as name from t) t1 full outer join (select number from numbers(5)) t2 on t1.a = t2.number where t1.name is not null order by a;
----
1 A 1
2 A 2
3 A 3

query ITI
select * from (select number from numbers(5)) t2 full outer join (select a, 'A' as name from t) t1 on t1.a = t2.number where t1.name is not null order by a;
----
1 1 A
2 2 A
3 3 A

statement ok
select * from (select number from numbers(5)) t2 full outer join (select a, 'A' as name from t) t1 on t1.a = t2.number and 123;

statement error
select * from (select number from numbers(5)) t2 full outer join (select a, 'A' as name from t) t1 on t1.a = t2.number and 11981933213501947393::DATE;

statement ok
drop table if exists t;

statement ok
with v2 as (SELECT 'xx' || cast(number as string) AS invoice_nr FROM numbers(135) group by invoice_nr order by invoice_nr) select v2.invoice_nr from v2 where EXISTS (SELECT cast(number as string) AS invoice_nr FROM numbers(800) where v2.invoice_nr = cast(number as string)) ignore_result;