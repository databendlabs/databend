statement ok
set max_threads = 1;

statement ok
set max_block_size = 1;

query I
select unnest([]);
----

query I
select unnest([[]]);
----

query I
select unnest([[], null]);
----

query I
select unnest([null]);
----

query I
select unnest([[null]]);
----

query I
select unnest([]::array(int));
----

query I
select unnest(null);
----

query I
select unnest([1,2,3]);
----
1
2
3

query I
select unnest([1,2,3]) + 1;
----
2
3
4

query II
select unnest([1,2,3]), number from numbers(1);
----
1 0
2 0
3 0

query III
select unnest([1,2,3]), unnest([1,2,3]) + 1, number from numbers(2);
----
1 2 0
2 3 0
3 4 0
1 2 1
2 3 1
3 4 1

query II
select unnest([1,2,3]), number, unnest([1,2,3]) + number from numbers(2);
----
1 0 1
2 0 2
3 0 3
1 1 2
2 1 3
3 1 4

statement ok
DROP DATABASE IF EXISTS db_02_0062;

statement ok
CREATE DATABASE IF NOT EXISTS db_02_0062;

statement ok
USE db_02_0062;

statement ok
create table t (a array(int));

statement ok
insert into t values ([1,2]), ([3,4,5]);

query I
select unnest(a) from t;
----
1
2
3
4
5

query IT
select unnest(a), a from t;
----
1 [1,2]
2 [1,2]
3 [3,4,5]
4 [3,4,5]
5 [3,4,5]

query II
select unnest([1,2,3]), unnest([3,4,5]);
----
1 3
2 4
3 5

query I
select unnest([1,2,3]) + unnest([3,4,5]);
----
4
6
8

query IT
select unnest([1,2,3]), unnest([3]);
----
1 3
2 NULL
3 NULL

query T
select unnest([1,2,3]) + unnest([3]);
----
4
NULL
NULL

statement ok
set max_block_size = 2;

query IIT
select unnest([1,2,3]), number, unnest([3]) from numbers(2);
----
1 0 3
2 0 NULL
3 0 NULL
1 1 3
2 1 NULL
3 1 NULL

query ITT
select unnest(a), a, unnest([1,2,3]) from t;
----
1 [1,2] 1
2 [1,2] 2
NULL [1,2] 3
3 [3,4,5] 1
4 [3,4,5] 2
5 [3,4,5] 3

statement ok
create or replace table t (a array(int));

statement ok
insert into t values ([1,2])

statement ok
insert into t values ([3,4,5])

query I
select unnest(a) as ua from t order by ua;
----
1
2
3
4
5

query IT
select unnest(a) as ua, a from t order by ua;
----
1 [1,2]
2 [1,2]
3 [3,4,5]
4 [3,4,5]
5 [3,4,5]

query ITI
select unnest(a) + 1 as ua, a from t order by ua;
----
2 [1,2]
3 [1,2]
4 [3,4,5]
5 [3,4,5]
6 [3,4,5]

statement ok
drop table t;

# Unnest deeply nested arrays.

query I
select unnest([[1,2], [3,4,5]]);
----
1
2
3
4
5

query I
select unnest([[[1,2], [3,4]], [[5,6], [7,8,9]]]);
----
1
2
3
4
5
6
7
8
9

query II
select unnest([[1,2], [3,4,5]]), number from numbers(2);
----
1 0
2 0
3 0
4 0
5 0
1 1
2 1
3 1
4 1
5 1

statement ok
create table t (a array(array(int))) ENGINE=Memory;

statement ok
insert into t values([[1,2], [3,4]]), ([[5,6], [7,8,9]]);

query I
select unnest(a) from t;
----
1
2
3
4
5
6
7
8
9

query I
select 1 + unnest(a) from t;
----
2
3
4
5
6
7
8
9
10

query IT
select unnest(a), a from t;
----
1 [[1,2],[3,4]]
2 [[1,2],[3,4]]
3 [[1,2],[3,4]]
4 [[1,2],[3,4]]
5 [[5,6],[7,8,9]]
6 [[5,6],[7,8,9]]
7 [[5,6],[7,8,9]]
8 [[5,6],[7,8,9]]
9 [[5,6],[7,8,9]]

statement ok
drop table t;

statement ok
create table t (a array(int) null);

statement ok
insert into t values ([1,2]), (null), ([3,4,5]);

query I
select unnest(a) from t;
----
1
2
3
4
5

query II
select unnest(a), unnest(null) from t;
----
1 NULL
2 NULL
3 NULL
4 NULL
5 NULL


query II
select unnest(a), unnest([]) from t;
----
1 NULL
2 NULL
3 NULL
4 NULL
5 NULL

query I
select unnest([[1, 2, null], null, [3, null, 4]])
----
1
2
NULL
3
NULL
4

statement ok
create table t2 (a array(int null), b array(int null))

query I
select unnest(a) from t2
----

statement ok
insert into t2 values ([1, 2, null], [3]), ([4, null], [5])

query I
select unnest(a) from t2
----
1
2
NULL
4
NULL

query I
select unnest(b) from t2
----
3
5

query II
select unnest(a), unnest(b) from t2
----
1 3
2 NULL
NULL NULL
4 5
NULL NULL

query IIII
select unnest(a), unnest(b), a, b from t2
----
1 3 [1,2,NULL] [3]
2 NULL [1,2,NULL] [3]
NULL NULL [1,2,NULL] [3]
4 5 [4,NULL] [5]
NULL NULL [4,NULL] [5]

statement ok
create table t3 (a int, b array(int) null, c array(int) null)

statement ok
insert into t3 values (1, [1, 2], [10, 11]), (2, [5, 6, 7], null), (3, null, [20, 21])

query III
select a, unnest(b), unnest(c) from t3
----
1 1 10
1 2 11
2 5 NULL
2 6 NULL
2 7 NULL
3 NULL 20
3 NULL 21

statement ok
drop table t;

statement ok
drop table t2;

statement ok
drop table t3;

statement ok
drop table if exists fold_count;

statement ok
create table fold_count(id array(int), c1 string);

statement ok
insert into fold_count values([1,2,3,4], 'x')

query T
select concat(c,'y') as b from (select concat(c::String, c1)  as c from (select unnest(id) as c, c1 from fold_count));
----
1xy
2xy
3xy
4xy

query I
select count(b) from (select concat(c,'y') as b from (select concat(c::String, c1)  as c from (select unnest(id) as c, c1 from fold_count)));
----
4

query I
select count() from (select unnest(id), c1 from fold_count)
----
4

statement ok
DROP DATABASE db_02_0062;

# Test table function

query I
select * from unnest([])
----

query I
select * from unnest(null)
----

query I
select * from unnest([1,2,3]);
----
1
2
3

query I
select * from unnest([[1,2], [3,4,5]]);
----
1
2
3
4
5

query I
select * from unnest([[[1,2], [3,4]], [[5,6], [7,8,9]]]);
----
1
2
3
4
5
6
7
8
9

query T
select unnest(parse_json('[1,2,"a",[3,4]]'))
----
1
2
"a"
[3,4]

query T
select unnest(parse_json('"a"'))
----

query T
select unnest([parse_json('{"tag":1, "val":10}'), parse_json('{"tag":12, "val":20, "foo":"bar"}')])
----
{"tag":1,"val":10}
{"foo":"bar","tag":12,"val":20}

query T
select unnest([[parse_json('[1,2,3]'), parse_json('false')],[parse_json('{"k":"v"}')]]);
----
[1,2,3]
false
{"k":"v"}

query T
select unnest(max([11,12]))
----
11
12

query T
select max(unnest([11,12]))
----
12

query T
SELECT distinct unnest(split(coalesce(NULL, 'a,b'), ',')) AS c1
----
a
b

statement error 1065
select unnest(first_value('aa') OVER (PARTITION BY 'bb'))

statement error 1065
select * from numbers(10) where unnest([1,2,3])::BOOLEAN;

statement error 1065
select * from numbers(10) having unnest([1,2,3])::BOOLEAN;

statement ok
set max_block_size = 65535;

statement ok
set max_threads = 16;
