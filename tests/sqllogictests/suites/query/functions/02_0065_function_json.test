query T
SELECT json_strip_nulls(parse_json('null'))
----
null

query T
SELECT json_strip_nulls(parse_json('true'))
----
true

query T
SELECT json_strip_nulls(parse_json('[1,2,3,null]'))
----
[1,2,3,null]

query T
SELECT json_strip_nulls(parse_json('{"a":1,"b":null,"c":{"a":1,"b":null},"d":[{"a":1,"b":null},{"a":2,"b":3}]}'))
----
{"a":1,"c":{"a":1},"d":[{"a":1},{"a":2,"b":3}]}

query T
SELECT json_typeof(parse_json(NULL))
----
NULL

query T
SELECT json_typeof(parse_json('null'))
----
NULL_VALUE

query T
SELECT json_typeof(parse_json('true'))
----
BOOLEAN

query T
SELECT json_typeof(parse_json('"test"'))
----
STRING

query TTT
SELECT json_typeof(parse_json('112')), json_typeof(parse_json('-1.12')), json_typeof(parse_json('1.12e10'))
----
INTEGER DECIMAL DOUBLE

query T
SELECT json_typeof(parse_json('[1,2,3]'))
----
ARRAY

query T
SELECT json_typeof(parse_json('{"a":1,"b":2}'))
----
OBJECT

query T
SELECT array_construct()
----
[]

query T
SELECT array_construct(true, 1, 'str', [1,2], {'k':'v'}, null)
----
[true,1,"str",[1,2],{"k":"v"},null]

query T
SELECT json_array(true, 1, 'str', [1,2], {'k':'v'}, null)
----
[true,1,"str",[1,2],{"k":"v"},null]

query T
SELECT object_construct()
----
{}

query T
SELECT object_construct('k1', 1, 'k2', 'str', 'k3', [1,2], 'k4', {'k':'v'}, 'k5', null)
----
{"k1":1,"k2":"str","k3":[1,2],"k4":{"k":"v"}}

query T
SELECT json_object('k1', 1, 'k2', 'str', 'k3', [1,2], 'k4', {'k':'v'}, 'k5', null)
----
{"k1":1,"k2":"str","k3":[1,2],"k4":{"k":"v"}}

statement error 1006
SELECT object_construct('k1', 1, 'k2', 'str', 'k3')

query T
SELECT try_object_construct('k1', 1, 'k2', 'str', 'k3', [1,2], 'k4', {'k':'v'}, 'k5', null)
----
{"k1":1,"k2":"str","k3":[1,2],"k4":{"k":"v"}}

query T
SELECT try_object_construct('k1', 1, 'k2', 'str', 'k3')
----
NULL

query T
SELECT object_construct_keep_null()
----
{}

query T
SELECT object_construct_keep_null('k1', 1, 'k2', 'str', 'k3', [1,2], 'k4', {'k':'v'}, 'k5', null)
----
{"k1":1,"k2":"str","k3":[1,2],"k4":{"k":"v"},"k5":null}

query T
SELECT json_object_keep_null('k1', 1, 'k2', 'str', 'k3', [1,2], 'k4', {'k':'v'}, 'k5', null)
----
{"k1":1,"k2":"str","k3":[1,2],"k4":{"k":"v"},"k5":null}

statement error 1006
SELECT object_construct_keep_null('k1', 1, 'k2', 'str', 'k3')

query T
SELECT try_object_construct_keep_null('k1', 1, 'k2', 'str', 'k3', [1,2], 'k4', {'k':'v'}, 'k5', null)
----
{"k1":1,"k2":"str","k3":[1,2],"k4":{"k":"v"},"k5":null}

query T
SELECT try_object_construct_keep_null('k1', 1, 'k2', 'str', 'k3')
----
NULL

statement ok
DROP TABLE IF EXISTS t1

statement ok
CREATE TABLE t1(id Int, tag String NULL)

statement ok
INSERT INTO t1(id, tag) VALUES(1, 'a'), (2, 'b'), (3, 'c'), (4, 'null'), (5, NULL)

query T
SELECT array_construct(id, tag) FROM t1
----
[1,"a"]
[2,"b"]
[3,"c"]
[4,"null"]
[5,null]

query T
SELECT object_construct('id', id, 'tag', tag) FROM t1
----
{"id":1,"tag":"a"}
{"id":2,"tag":"b"}
{"id":3,"tag":"c"}
{"id":4,"tag":"null"}
{"id":5}

query T
SELECT object_construct_keep_null('id', id, 'tag', tag) FROM t1
----
{"id":1,"tag":"a"}
{"id":2,"tag":"b"}
{"id":3,"tag":"c"}
{"id":4,"tag":"null"}
{"id":5,"tag":null}

statement ok
DROP TABLE IF EXISTS t1

query T
SELECT json_path_exists(NULL, '$.a')
----
NULL

query T
SELECT json_path_exists(parse_json('{"a": 1, "b": 2}'), NULL)
----
NULL

query T
SELECT json_path_exists(parse_json('{"a": 1, "b": 2}'), '$.a')
----
1

query T
SELECT json_path_exists(parse_json('{"a": 1, "b": 2}'), '$.c')
----
0

query T
SELECT json_path_exists(parse_json('{"a": 1, "b": 2}'), '$.a ? (@ == 1)')
----
1

query T
SELECT json_path_exists(parse_json('{"a": 1, "b": 2}'), '$.a ? (@ > 1)')
----
0

query T
SELECT json_path_exists(parse_json('{"a": 1, "b": [1,2,3]}'), '$.b[0]')
----
1

query T
SELECT json_path_exists(parse_json('{"a": 1, "b": [1,2,3]}'), '$.b[3]')
----
0

query T
SELECT json_path_exists(parse_json('{"a": 1, "b": [1,2,3]}'), '$.b[1 to last] ? (@ >=2 && @ <=3)')
----
1

query T
SELECT NULL @? '$.a'
----
NULL

query T
SELECT parse_json('{"a": 1, "b": 2}') @? NULL
----
NULL

query T
SELECT parse_json('{"a": 1, "b": 2}') @? '$.a'
----
1

query T
SELECT parse_json('{"a": 1, "b": 2}') @? '$.c'
----
0

query T
SELECT parse_json('{"a": 1, "b": 2}') @? '$.a ? (@ == 1)'
----
1

query T
SELECT parse_json('{"a": 1, "b": 2}') @? '$.a ? (@ > 1)'
----
0

query T
SELECT parse_json('{"a": 1, "b": [1,2,3]}') @? '$.b[0]'
----
1

query T
SELECT parse_json('{"a": 1, "b": [1,2,3]}') @? '$.b[3]'
----
0

query T
SELECT parse_json('{"a": 1, "b": [1,2,3]}') @? '$.b[1 to last] ? (@ >=2 && @ <=3)'
----
1

query T
SELECT json_path_match(parse_json('{"a":1,"b":2}'), '$.a == 1')
----
1

query T
SELECT json_path_match(parse_json('{"a":1,"b":2}'), '$.a > 1')
----
0

query T
SELECT json_path_match(parse_json('{"a":1,"b":2}'), '$.c > 0')
----
0

query T
SELECT json_path_match(parse_json('{"a":1,"b":2}'), '$.b < 2')
----
0

query T
SELECT json_path_match(parse_json('{"a":1,"b":[1,2,3]}'), '$.b[0] == 1')
----
1

query T
SELECT json_path_match(parse_json('{"a":1,"b":[1,2,3]}'), '$.b[0] > 1')
----
0

query T
SELECT json_path_match(parse_json('{"a":1,"b":[1,2,3]}'), '$.b[3] == 0')
----
0

query T
SELECT json_path_match(parse_json('{"a":1,"b":[1,2,3]}'), '$.b[1 to last] >= 2')
----
1

query T
SELECT json_path_match(parse_json('{"a":1,"b":[1,2,3]}'), '$.b[1 to last] == 2 || $.b[1 to last] == 3')
----
1

query T
SELECT parse_json('{"a":1,"b":2}') @@ '$.a == 1'
----
1

query T
SELECT parse_json('{"a":1,"b":2}') @@ '$.a > 1'
----
0

query T
SELECT parse_json('{"a":1,"b":2}') @@ '$.c > 0'
----
0

query T
SELECT parse_json('{"a":1,"b":2}') @@ '$.b < 2'
----
0

query T
SELECT parse_json('{"a":1,"b":[1,2,3]}') @@ '$.b[0] == 1'
----
1

query T
SELECT parse_json('{"a":1,"b":[1,2,3]}') @@ '$.b[0] > 1'
----
0

query T
SELECT parse_json('{"a":1,"b":[1,2,3]}') @@ '$.b[3] == 0'
----
0

query T
SELECT parse_json('{"a":1,"b":[1,2,3]}') @@ '$.b[1 to last] >= 2'
----
1

query T
SELECT parse_json('{"a":1,"b":[1,2,3]}') @@ '$.b[1 to last] == 2 || $.b[1 to last] == 3'
----
1

query T
SELECT json_each(NULL)
----

query T
SELECT json_each(parse_json('null'))
----

query T
SELECT json_each(parse_json('true'))
----

query T
SELECT json_each(parse_json('[1, 2, 3]'))
----

query T
SELECT json_each(parse_json('{}'))
----

query T
SELECT json_each(parse_json('{"a": 1, "b": [1,2,3], "c": true, "d": {"k1": 1, "k2": 2}}'))
----
('a','1')
('b','[1,2,3]')
('c','true')
('d','{"k1":1,"k2":2}')

query TT
SELECT parse_json('{"k1": "v1", "k2": "v2"}') config, json_each(config)
----
{"k1":"v1","k2":"v2"} ('k1','"v1"')
{"k1":"v1","k2":"v2"} ('k2','"v2"')

query TT
SELECT * FROM json_each(parse_json('{"a": 1, "b": [1,2,3], "c": true, "d": {"k1": 1, "k2": 2}}'))
----
a 1
b [1,2,3]
c true
d {"k1":1,"k2":2}

statement error 1065
SELECT * FROM json_each(parse_json('{"a": true}')) WHERE json_each(parse_json('{"a": true}'))

statement error 1065
SELECT * FROM json_each(parse_json('{"a": true}')) HAVING json_each(parse_json('{"a": true}'))

query T
SELECT json_array_elements(NULL)
----

query T
SELECT json_array_elements(parse_json('null'))
----

query T
SELECT json_array_elements(parse_json('true'))
----

query T
SELECT json_array_elements(parse_json('[]'))
----

query T
SELECT json_array_elements(parse_json('[1, 2, 3]'))
----
1
2
3

query TT
SELECT parse_json('{"k": [1, 2, 3]}') config, json_array_elements(config:k)
----
{"k":[1,2,3]} 1
{"k":[1,2,3]} 2
{"k":[1,2,3]} 3

query T
SELECT json_array_elements(parse_json('{"a": 1, "b": [1,2,3], "c": true, "d": {"k1": 1, "k2": 2}}'))
----

query T
SELECT json_array_elements(parse_json('[1, [1,2,3], true, {"k1": 1, "k2": 2}]'))
----
1
[1,2,3]
true
{"k1":1,"k2":2}

query T
SELECT * FROM json_array_elements(parse_json('[1, [1,2,3], true, {"k1": 1, "k2": 2}]'))
----
1
[1,2,3]
true
{"k1":1,"k2":2}

statement error 1065
SELECT * FROM json_array_elements(parse_json('[true]')) WHERE json_array_elements(parse_json('[true]'))

statement error 1065
SELECT * FROM json_array_elements(parse_json('[true]')) HAVING json_array_elements(parse_json('[true]'))

query T
select parse_json('["1","2","3"]') ? NULL
----
NULL

query T
select parse_json('"string"') ? '1'
----
0

query T
select parse_json('["1","2","3"]') ? '1'
----
1

query T
select parse_json('{"a":1,"b":2,"c":3}') ? 'b'
----
1

query T
select parse_json('["1","2","3"]') ? '4'
----
0

query T
select parse_json('{"a":1,"b":2,"c":3}') ? 'd'
----
0

query T
select parse_json('["1","2","3"]') ?| NULL
----
NULL

query T
select parse_json('"string"') ?| ['1','2']
----
0

query T
select parse_json('["1","2","3"]') ?| ['1','4']
----
1

query T
select parse_json('{"a":1,"b":2,"c":3}') ?| ['b','e']
----
1

query T
select parse_json('["1","2","3"]') ?| ['4','5']
----
0

query T
select parse_json('{"a":1,"b":2,"c":3}') ?| ['d','e']
----
0

query T
select parse_json('["1","2","3"]') ?& NULL
----
NULL

query T
select parse_json('"string"') ?& ['1','2']
----
0

query T
select parse_json('["1","2","3"]') ?& ['1','3']
----
1

query T
select parse_json('{"a":1,"b":2,"c":3}') ?& ['b','c']
----
1

query T
select parse_json('["1","2","3"]') ?& ['3','5']
----
0

query T
select parse_json('{"a":1,"b":2,"c":3}') ?& ['c','d']
----
0


statement ok
DROP TABLE IF EXISTS t2

statement ok
CREATE TABLE t2(id Int, v Variant NULL);


statement ok
INSERT INTO t2(id, v) VALUES (1, parse_json('true')), (2, parse_json('{"a":1,"b":2,"c":3}')), (3, '["b","c","e"]'), (4, NULL)


query T
select id, v ? 'a' from t2 order by id
----
1 0
2 1
3 0
4 NULL

query T
select id, v ?| ['a','d'] from t2 order by id
----
1 0
2 1
3 0
4 NULL

query T
select id, v ?& ['a','c'] from t2 order by id
----
1 0
2 1
3 0
4 NULL


query T
select id, v @? '$.b' from t2 order by id
----
1 0
2 1
3 0
4 NULL

query T
select id, v @@ '$[*] == "b"' from t2 order by id
----
1 NULL
2 NULL
3 1
4 NULL

statement ok
DROP TABLE IF EXISTS t2

query T
select NULL @> NULL;
----
NULL

query T
select parse_json('[1,2,3]') @> NULL;
----
NULL

query T
select NULL @> parse_json('1');
----
NULL

query T
select parse_json('true') @> parse_json('true');
----
1

query T
select parse_json('true') @> parse_json('false');
----
0

query T
select parse_json('"asd"') @> parse_json('"asd"');
----
1

query T
select parse_json('"asd"') @> parse_json('"asdd"');
----
0

query T
select parse_json('[1,2,3]') @> parse_json('1');
----
1

query T
select parse_json('[1,2,3]') @> parse_json('4');
----
0

query T
select parse_json('[1,2,3,4]') @> parse_json('[2,1,3]');
----
1

query T
select parse_json('[1,2,3,4]') @> parse_json('[2,1,1]');
----
1

query T
select parse_json('[1,2,[1,3]]') @> parse_json('[1,3]');
----
0

query T
select parse_json('[1,2,[1,3]]') @> parse_json('[[1,3]]');
----
1

query T
select parse_json('[1,2,[1,3]]') @> parse_json('[[[1,3]]]');
----
0

query T
select parse_json('[{"a":1}]') @> parse_json('{"a":1}');
----
0

query T
select parse_json('[{"a":1},{"b":2}]') @> parse_json('[{"a":1}]');
----
1

query T
select parse_json('{"a":1,"b":2}') @> parse_json('{"a":1}');
----
1

query T
select parse_json('{"a":1,"b":2}') @> parse_json('{"a":2}');
----
0

query T
select parse_json('{"z":2,"b":{"a":1}}') @> parse_json('{"a":1}');
----
0


query T
select parse_json('{"a":{"c":100,"d":200},"b":2}') @> parse_json('{"a":{}}');
----
1

query T
select NULL <@ NULL;
----
NULL

query T
select NULL <@ parse_json('[1,2,3]');
----
NULL

query T
select parse_json('1') <@ NULL;
----
NULL

query T
select parse_json('true') <@ parse_json('true');
----
1

query T
select parse_json('true') <@ parse_json('false');
----
0

query T
select parse_json('"asd"') <@ parse_json('"asd"');
----
1

query T
select parse_json('"asd"') <@ parse_json('"asdd"');
----
0

query T
select parse_json('1') <@ parse_json('[1,2,3]');
----
1

query T
select parse_json('4') <@ parse_json('[1,2,3]');
----
0

query T
select parse_json('[2,1,3]') <@ parse_json('[1,2,3,4]');
----
1

query T
select parse_json('[2,1,1]') <@ parse_json('[1,2,3,4]');
----
1

query T
select parse_json('[1,3]') <@ parse_json('[1,2,[1,3]]');
----
0

query T
select parse_json('[[1,3]]') <@ parse_json('[1,2,[1,3]]');
----
1

query T
select parse_json('[[[1,3]]]') <@ parse_json('[1,2,[1,3]]');
----
0

query T
select parse_json('{"a":1}') <@ parse_json('[{"a":1}]');
----
0

query T
select parse_json('[{"a":1}]') <@ parse_json('[{"a":1},{"b":2}]');
----
1

query T
select parse_json('{"a":1}') <@ parse_json('{"a":1,"b":2}');
----
1

query T
select parse_json('{"a":2}') <@ parse_json('{"a":1,"b":2}');
----
0

query T
select parse_json('{"a":1}') <@ parse_json('{"z":2,"b":{"a":1}}');
----
0

query T
select parse_json('{"a":{}}') <@ parse_json('{"a":{"c":100,"d":200},"b":2}');
----
1

query T
select parse_json('[1,2,3]') || NULL;
----
NULL

query T
select parse_json('[1,2,3]') || parse_json('10');
----
[1,2,3,10]

query T
select parse_json('"asd"') || parse_json('[1,2,3]');
----
["asd",1,2,3]

query T
select parse_json('[1,{"a":1,"b":2,"c":[1,2,3]},3]') || parse_json('"asd"');
----
[1,{"a":1,"b":2,"c":[1,2,3]},3,"asd"]

query T
select parse_json('[1,{"a":1,"b":2,"c":[1,2,3]},3]') || parse_json('[10,20,30]');
----
[1,{"a":1,"b":2,"c":[1,2,3]},3,10,20,30]

query T
select parse_json('[1,[1,2,3],3]') || parse_json('[[10,20,30]]');
----
[1,[1,2,3],3,[10,20,30]]

query T
select parse_json('{"a":1,"b":2}') || parse_json('true');
----
[{"a":1,"b":2},true]

query T
select parse_json('[1,2,3]') || parse_json('{"a":1,"b":2}');
----
[1,2,3,{"a":1,"b":2}]

query T
select parse_json('{"a":1,"b":2}') || parse_json('[1,2,3]');
----
[{"a":1,"b":2},1,2,3]

query T
select parse_json('{"a":1,"b":2}') || parse_json('{"c":3,"d":4}');
----
{"a":1,"b":2,"c":3,"d":4}

query T
select parse_json('{"a":1,"b":2,"d":10}') || parse_json('{"a":3,"b":4}');
----
{"a":3,"b":4,"d":10}

query T
select parse_json('[1,2,3]') - NULL;
----
NULL

query T
select parse_json('[1,2,3]') - '1';
----
[1,2,3]

query T
select parse_json('["1","2","3"]') - '0';
----
["1","2","3"]

query T
select parse_json('["1","2","3"]') - '1';
----
["2","3"]

query T
select parse_json('["1","2","3",{"a":1,"b":2}]') - '1';
----
["2","3",{"a":1,"b":2}]

query T
select parse_json('{"a":1,"b":2}') - 'c';
----
{"a":1,"b":2}

query T
select parse_json('{"a":1,"b":2}') - 'a';
----
{"b":2}

query T
select parse_json('{"b":2}') - 'b';
----
{}

query T
select parse_json('[1,2,3]') - 0;
----
[2,3]

query T
select parse_json('[1,2,3]') - 1;
----
[1,3]

query T
select parse_json('[1,2,3]') - 2;
----
[1,2]

query T
select parse_json('[1,2,3]') - -1;
----
[1,2]

query T
select parse_json('[1,2,3]') - -2;
----
[1,3]

query T
select parse_json('[1,2,3]') - -3;
----
[2,3]

query T
select parse_json('[1,2,3]') - -4;
----
[1,2,3]

query T
select parse_json('[1,2,{"a":[1,2,3],"b":[40,50,60]}]') - 2;
----
[1,2]


query T
select parse_json('[1,2,3]') #- NULL
----
NULL

query T
select parse_json('[1,2,3]') #- '{}'
----
[1,2,3]

query T
select parse_json('[1,2,3]') #- '{0}'
----
[2,3]

query T
select parse_json('[1,2,3]') #- '{-1}'
----
[1,2]

query T
select parse_json('[1,2,3]') #- '{3}'
----
[1,2,3]

query T
select parse_json('{"a":1,"b":[1,2,3]}') #- '{b}'
----
{"a":1}

query T
select parse_json('{"a":1,"b":[1,2,3]}') #- '{c}'
----
{"a":1,"b":[1,2,3]}

query T
select parse_json('{"a":1,"b":[1,2,3]}') #- '{b,2}'
----
{"a":1,"b":[1,2]}

query T
select parse_json('{"a":1,"b":[1,2,3]}') #- '{b,-2}'
----
{"a":1,"b":[1,3]}

query T
select parse_json('{"a":1,"b":[{"c":1,"d":10},2,3]}') #- '{b,0,d}'
----
{"a":1,"b":[{"c":1},2,3]}

statement ok
DROP TABLE IF EXISTS t3

statement ok
CREATE TABLE t3(id Int, v Variant NULL, s String NULL);

statement ok
INSERT INTO t3(id, v, s) VALUES (1, parse_json('[1,2,3]'), '{0}'), (2, parse_json('{"a":1,"b":2,"c":3}'), '{b}'), (3, '[1,{"a":[1,2,3]},3]', '{1,a,-1}'), (4, NULL, NULL)

query T
select id, v #- s from t3 order by id
----
1 [2,3]
2 {"a":1,"c":3}
3 [1,{"a":[1,2]},3]
4 NULL

statement ok
DROP TABLE IF EXISTS t3

# Basic jq usage tests
query T
SELECT * FROM jq('.[] | .', object_construct('k1', 'v1', 'k2', 'v2')) ORDER BY 1
----
"v1"
"v2"

query T
SELECT * FROM jq($$[.[] | .]$$, object_construct('k1', 'v1', 'k2', 'v2'))
----
["v1","v2"]

# Test with array input
query T
SELECT * FROM jq('.[]', array_construct(1, 2, 3))
----
1
2
3

# Test with nested objects
query T
SELECT * FROM jq('.a.b', object_construct('a', object_construct('b', 'nested_value')))
----
"nested_value"

# Test with array of objects
query T
SELECT * FROM jq('.[].name', array_construct(object_construct('name', 'Alice'), object_construct('name', 'Bob')))
----
"Alice"
"Bob"

# Test with filtering
query T
SELECT * FROM jq('.[] | select(.age > 30)', array_construct(object_construct('name', 'Alice', 'age', 25), object_construct('name', 'Bob', 'age', 35)))
----
{"age":35,"name":"Bob"}

# Test with multiple outputs per input element
query T
SELECT * FROM jq('.[] | .name, .age', array_construct(object_construct('name', 'Alice', 'age', 25), object_construct('name', 'Bob', 'age', 35)))
----
"Alice"
25
"Bob"
35

# Test with NULL input
query T
SELECT * FROM jq('.', NULL)
----

# Test with empty object
query T
SELECT * FROM jq('.', object_construct())
----
{}

# Test with empty array
query T
SELECT * FROM jq('.[]', array_construct())
----

# Test with invalid jq expression
statement error
SELECT * FROM jq('invalid_expression', object_construct('k', 'v'))

# Test with complex transformations
query T
SELECT * FROM jq('{min: min, max: max, sum: add, length: length}', array_construct(1, 2, 3, 4, 5))
----
{"length":5,"max":5,"min":1,"sum":15}

# Test with string manipulation
query T
SELECT * FROM jq('.[] | ascii_upcase', array_construct('hello', 'world'))
----
"HELLO"
"WORLD"

# Test with numeric operations
query T
SELECT * FROM jq('.[] * 2', array_construct(1, 2, 3))
----
2
4
6

# Test with object construction
query T
SELECT * FROM jq('{new_key: .key}', object_construct('key', 'value'))
----
{"new_key":"value"}

# Test with array construction
query T
SELECT * FROM jq('[.[] | . * 2]', array_construct(1, 2, 3))
----
[2,4,6]

# Test with conditional logic
query T
SELECT * FROM jq('.[] | if . == 0 then "zero" elif . == 1 then "one" else "many" end', array_construct(0, 1, 2))
----
"zero"
"one"
"many"

# Test with table and set returning functionality
statement ok
CREATE TABLE test_data (id INT, json_data JSON);

statement ok
INSERT INTO test_data VALUES
    (1, '{"name": "Alice", "scores": [85, 90, 78]}'),
    (2, '{"name": "Bob", "scores": [92, 88, 95]}'),
    (3, '{"name": "Charlie", "scores": [76, 80, 82]}');

query IT
SELECT
    id,
    jq('to_entries[] | {key: .key, value: (.value | tostring)}', json_data) AS jq
FROM
    test_data
ORDER BY jq:key;
----
1 {"key":"name","value":"Alice"}
2 {"key":"name","value":"Bob"}
3 {"key":"name","value":"Charlie"}
1 {"key":"scores","value":"[85,90,78]"}
2 {"key":"scores","value":"[92,88,95]"}
3 {"key":"scores","value":"[76,80,82]"}

statement error 1065
SELECT * FROM test_data WHERE jq('.scores | min', json_data) > 85

statement error 1065
SELECT * FROM test_data HAVING jq('.scores | min', json_data) > 85

statement ok
DROP TABLE test_data;

statement ok
CREATE OR REPLACE TABLE t4(id Int, v1 Variant, v2 Variant);

statement ok
INSERT INTO t4(id, v1, v2) VALUES
    (1, '[1,2,2,3,3,null]', '[2,3,3]'),
    (2, '["A","B","B","B","C"]', '["B","B","D"]'),
    (3, '[[1,2],{"k":[3,4]}]', '[[1,3],{"k":[3]}]'),
    (4, '[[1,2],{"k":[3,4]},[5]]', '[[1,2],{"k":[3,4]},[5,6]]'),
    (5, '1', '1'),
    (6, '1', 'true'),
    (7, '{"k":[1,2]}', '{"k":[1,2]}'),
    (8, '{"k":[1,2]}', '{"k":[3]}')


query T
SELECT array_insert('[0,1,2,3]'::variant, 2, '"hello"'::variant)
----
[0,1,"hello",2,3]

query T
SELECT array_insert('[0,1,2,3]'::variant, 7, '"hello"'::variant)
----
[0,1,2,3,"hello"]

query T
SELECT array_insert('[0,1,2,3]'::variant, -1, '"hello"'::variant)
----
[0,1,2,"hello",3]

query T
SELECT array_insert('["A","A","B",null,null]'::variant, 0, '[1,2,3]'::variant)
----
[[1,2,3],"A","A","B",null,null]

query T
SELECT json_array_insert('"A"'::variant, 0, '[1,2,3]'::variant)
----
[[1,2,3],"A"]

query ITT
SELECT id, array_insert(v1, 0, '100'::variant), array_insert(v2, 2, '[10,11]'::variant) from t4
----
1 [100,1,2,2,3,3,null] [2,3,[10,11],3]
2 [100,"A","B","B","B","C"] ["B","B",[10,11],"D"]
3 [100,[1,2],{"k":[3,4]}] [[1,3],{"k":[3]},[10,11]]
4 [100,[1,2],{"k":[3,4]},[5]] [[1,2],{"k":[3,4]},[10,11],[5,6]]
5 [100,1] [1,[10,11]]
6 [100,1] [true,[10,11]]
7 [100,{"k":[1,2]}] [{"k":[1,2]},[10,11]]
8 [100,{"k":[1,2]}] [{"k":[3]},[10,11]]

query T
SELECT array_distinct('["A","A","B",null,null]'::variant)
----
["A","B",null]

query T
SELECT array_distinct('[1,1,2,3,3,1,2,null,null]'::variant)
----
[1,2,3,null]

query T
SELECT array_distinct('[[1,2],[1,2],[3,4,3,3],{"k":"v"},{"k":"v"}]'::variant)
----
[[1,2],[3,4,3,3],{"k":"v"}]

query T
SELECT array_distinct('true'::variant)
----
[true]

query T
SELECT json_array_distinct('{"kk":[1,2]}'::variant)
----
[{"kk":[1,2]}]

query ITT
SELECT id, array_distinct(v1), array_distinct(v2) from t4
----
1 [1,2,3,null] [2,3]
2 ["A","B","C"] ["B","D"]
3 [[1,2],{"k":[3,4]}] [[1,3],{"k":[3]}]
4 [[1,2],{"k":[3,4]},[5]] [[1,2],{"k":[3,4]},[5,6]]
5 [1] [1]
6 [1] [true]
7 [{"k":[1,2]}] [{"k":[1,2]}]
8 [{"k":[1,2]}] [{"k":[3]}]

query T
SELECT array_intersection('["A","B"]'::variant, '["B","C"]'::variant)
----
["B"]

query T
SELECT array_intersection('["A","B","C"]'::variant, '["B","C"]'::variant)
----
["B","C"]

query T
SELECT array_intersection('["A","B","B","B","C"]'::variant, '["B","B"]'::variant)
----
["B","B"]

query T
SELECT array_intersection('[1,2]'::variant, '[3,4]'::variant)
----
[]

query T
SELECT array_intersection('[null,102,null]'::variant, '[null,null,103]'::variant)
----
[null,null]

query T
SELECT array_intersection('[{"a":1,"b":2},1,2]'::variant, '[{"a":1,"b":2},3,4]'::variant)
----
[{"a":1,"b":2}]

query T
SELECT array_intersection('[{"a":1,"b":2},1,2]'::variant, '[{"b":2,"c":3},3,4]'::variant)
----
[]

query T
SELECT array_intersection('[{"a":1,"b":2,"c":3}]'::variant, '[{"c":3,"b":2,"a":1}]'::variant);
----
[{"a":1,"b":2,"c":3}]

query T
SELECT array_intersection('true'::variant, '[true,false]'::variant)
----
[true]

query T
SELECT array_intersection('true'::variant, 'false'::variant)
----
[]

query T
SELECT json_array_intersection('[{"k":"v"}, 1]'::variant, '{"k":"v"}'::variant)
----
[{"k":"v"}]

query IT
SELECT id, array_intersection(v1, v2) from t4
----
1 [2,3,3]
2 ["B","B"]
3 []
4 [[1,2],{"k":[3,4]}]
5 [1]
6 []
7 [{"k":[1,2]}]
8 []

query T
SELECT array_except('["A","B"]'::variant, '["B","C"]'::variant);
----
["A"]

query T
SELECT array_except('["A","B","C"]'::variant, '["B","C"]'::variant);
----
["A"]

query T
SELECT array_except('["A","B","B","B","C"]'::variant, '["B"]'::variant);
----
["A","B","B","C"]

query T
SELECT array_except('["A",null,null]'::variant, '["B",null]'::variant);
----
["A",null]

query T
SELECT array_except('[{"a":1,"b":2},1]'::variant, '[{"a":1,"b":2},3]'::variant);
----
[1]

query T
SELECT array_except('true'::variant, '[true,false]'::variant)
----
[]

query T
SELECT array_except('true'::variant, 'false'::variant)
----
[true]

query T
SELECT json_array_except('[{"k":"v"}, 1]'::variant, '{"k":"v"}'::variant)
----
[1]

query IT
SELECT id, array_except(v1, v2) from t4
----
1 [1,2,null]
2 ["A","B","C"]
3 [[1,2],{"k":[3,4]}]
4 [[5]]
5 []
6 [1]
7 []
8 [{"k":[1,2]}]

query B
SELECT array_overlap('["hello","aloha"]'::variant, '["hello","hi","hey"]'::variant);
----
1

query B
SELECT array_overlap('["hello","aloha"]'::variant, '["hola","bonjour","ciao"]'::variant);
----
0

query B
SELECT array_overlap('[{"a":1,"b":2},1,2]'::variant, '[{"b":2,"c":3},3,4]'::variant);
----
0

query B
SELECT array_overlap('[{"a":1,"b":2},1,2]'::variant, '[{"a":1,"b":2},3,4]'::variant);
----
1

query B
SELECT array_overlap('[1,2,null]'::variant, '[3,null,5]'::variant);
----
1

query B
SELECT array_overlap('true'::variant, '[true,false]'::variant)
----
1

query B
SELECT array_overlap('true'::variant, 'false'::variant)
----
0

query B
SELECT json_array_overlap('[{"k":"v"}, 1]'::variant, '{"k":"v"}'::variant)
----
1

query IB
SELECT id, array_overlap(v1, v2) from t4
----
1 1
2 1
3 0
4 1
5 1
6 0
7 1
8 0

statement ok
DROP TABLE IF EXISTS t4


statement ok
CREATE OR REPLACE TABLE t5(id Int, v1 Variant)

statement ok
INSERT INTO t5(id, v1) VALUES
    (1, '{"k1":"v1","k2":"v2"}'),
    (2, '{"a":[1,2,3],"c":{"c1":"v1","c2":"v2"},"m":true}'),
    (3, '{"a":1,"h":2,"m":3,"n":4}')

query T
SELECT object_insert('{"a":1,"b":2,"d":4}'::variant, 'c', 3)
----
{"a":1,"b":2,"c":3,"d":4}

query T
SELECT object_insert('{"a":1,"b":2,"d":4}'::variant, 'x', 10)
----
{"a":1,"b":2,"d":4,"x":10}

query T
SELECT object_insert('{"a":1,"b":2,"d":4}'::variant, 'A', 10)
----
{"A":10,"a":1,"b":2,"d":4}

statement error 1006
SELECT object_insert('{"a":1,"b":2,"d":4}'::variant, 'a', 10)

statement error 1006
SELECT object_insert('1234'::variant, 'a', 10)

statement error 1006
SELECT object_insert('{"city":"San Mateo","state":"CA"}'::variant, 'city', 'San Jose', false)

query T
SELECT object_insert('{"city":"San Mateo","state":"CA"}'::variant, 'city', 'San Jose', true)
----
{"city":"San Jose","state":"CA"}

query T
SELECT object_insert('{"city":"San Mateo","state":"CA"}'::variant, 'zip_code', 94402::DOUBLE, false)
----
{"city":"San Mateo","state":"CA","zip_code":94402.0}

query T
SELECT object_insert('{"city":"San Mateo","state":"CA"}'::variant, 'zip_code', null)
----
{"city":"San Mateo","state":"CA"}

query T
SELECT object_insert('{"city":"San Mateo","state":"CA"}'::variant, 'zip_code', 'null'::variant)
----
{"city":"San Mateo","state":"CA","zip_code":null}

query T
SELECT object_insert('{"city":"San Mateo","state":"CA"}'::variant, to_date('2020-01-01'), 100)
----
{"2020-01-01":100,"city":"San Mateo","state":"CA"}

query T
SELECT json_object_insert('{"a":1}'::variant, 'a', null, true), json_object_insert('{"a":1}'::variant, 'a', null, false)
----
{} {"a":1}

query IT
SELECT id, object_insert(v1, 'b', '100'::variant) from t5
----
1 {"b":100,"k1":"v1","k2":"v2"}
2 {"a":[1,2,3],"b":100,"c":{"c1":"v1","c2":"v2"},"m":true}
3 {"a":1,"b":100,"h":2,"m":3,"n":4}

query T
SELECT object_delete('{"a":1,"b":2,"d":4}'::variant, 'a', 'c')
----
{"b":2,"d":4}

query T
SELECT object_delete('{"a":1,"b":2,"d":4}'::variant, 'b', 'b', null, 'd')
----
{"a":1}

query T
SELECT json_object_delete('{"a":1,"b":2,"d":4}'::variant, 'A', 'B')
----
{"a":1,"b":2,"d":4}

statement error 1006
SELECT object_delete('1234'::variant, 'a')

query IT
SELECT id, object_delete(v1, 'a', 'k1') from t5
----
1 {"k2":"v2"}
2 {"c":{"c1":"v1","c2":"v2"},"m":true}
3 {"h":2,"m":3,"n":4}

query T
SELECT object_pick('{"a":1,"b":2,"d":4}'::variant, 'a', 'c')
----
{"a":1}

query T
SELECT object_pick('{"a":1,"b":2,"d":4}'::variant, 'b', 'b', null, 'd')
----
{"b":2,"d":4}

query T
SELECT json_object_pick('{"a":1,"b":2,"d":4}'::variant, 'A', 'B')
----
{}

statement error 1006
SELECT object_pick('1234'::variant, 'a')

query IT
SELECT id, object_pick(v1, 'a', 'k1') from t5
----
1 {"k1":"v1"}
2 {"a":[1,2,3]}
3 {"a":1}

statement ok
DROP TABLE IF EXISTS t5

statement ok
CREATE OR REPLACE TABLE t6 (id INT, data VARIANT);

statement ok
INSERT INTO t6 VALUES
(1, '{"name": "Alice", "age": 30, "address": null}'),
(2, '{"name": "Bob", "age": null, "address": {"city": "New York", "zip": null}}'),
(3, '{"name": "Charlie", "age": 25, "address": {"city": "San Francisco", "zip": "94107"}}');

query II
SELECT id, data:address, data:address:zip, STRIP_NULL_VALUE(data:address), STRIP_NULL_VALUE(data:address:zip) FROM t6;
----
1 null NULL NULL NULL
2 {"city":"New York","zip":null} null {"city":"New York","zip":null} NULL
3 {"city":"San Francisco","zip":"94107"} "94107" {"city":"San Francisco","zip":"94107"} "94107"


statement ok
DROP TABLE IF EXISTS t6

query T
SELECT array_append(parse_json('[1,2,3]'), 4)
----
[1,2,3,4]

query T
SELECT array_append(parse_json('[1, "a", true]'), null)
----
[1,"a",true,null]

query T
SELECT array_append(parse_json('true'), 1)
----
[true,1]

query T
SELECT array_compact(parse_json('[1, null, 2, null, 3]'))
----
[1,2,3]

query T
SELECT array_compact(parse_json('[null, null, null]'))
----
[]

statement error 1006
SELECT array_compact(parse_json('11'))

query B
SELECT array_contains(parse_json('[1,2,3]'), 2)
----
1

query B
SELECT array_contains(parse_json('[1,2,3]'), 4)
----
0

query BB
SELECT array_contains(parse_json('1'), 1), array_contains(parse_json('1'), 4)
----
1 0

query T
SELECT array_flatten(parse_json('[[1,2],[3,4]]'))
----
[1,2,3,4]

query T
SELECT array_flatten(parse_json('[[1,[2,3]],[4]]'))
----
[1,[2,3],4]

statement error 1006
SELECT array_flatten(parse_json('[1, 2, 3]'))

query I
SELECT array_indexof(parse_json('[1,2,3]'), 2)
----
1

query I
SELECT array_indexof(parse_json('[1,2,3]'), 4)
----
NULL

query I
SELECT array_indexof(parse_json('[1,2,2,3]'), 2)
----
1

query T
SELECT array_prepend(0, parse_json('[1,2,3]'))
----
[0,1,2,3]

query T
SELECT array_prepend('a', parse_json('[]'))
----
["a"]

query T
SELECT array_remove(parse_json('[1,2,3,2]'), 2)
----
[1,3]

query T
SELECT array_remove(parse_json('[1,2,3]'), 4)
----
[1,2,3]

query TT
SELECT array_remove(parse_json('"a"'), 'a'), array_remove(parse_json('"a"'), 'b')
----
[] ["a"]

query T
SELECT array_remove_first(parse_json('[1,2,3,2]'))
----
[2,3,2]

query T
SELECT array_remove_first(parse_json('1'))
----
[]

query T
SELECT array_remove_last(parse_json('[1,2,3,2]'))
----
[1,2,3]

query T
SELECT array_remove_last(parse_json('1'))
----
[]

query T
SELECT array_reverse(parse_json('[1,2,3]'))
----
[3,2,1]

query T
SELECT array_reverse(parse_json('"a"'))
----
["a"]

query T
SELECT array_slice(parse_json('[1,2,3,4,5]'), 1, 3)
----
[2,3]

query T
SELECT array_slice(parse_json('[1,2,3,4,5]'), -2, -1)
----
[4]

query I
SELECT array_unique(parse_json('[1,2,2,3,1]'))
----
3

query I
SELECT array_unique(parse_json('["a", "b", "a", null, "c"]'))
----
4

