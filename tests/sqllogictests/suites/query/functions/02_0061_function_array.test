query T
select range(10, 20)
----
[10,11,12,13,14,15,16,17,18,19]

query T
select range(10, 20, 2)
----
[10,12,14,16,18]

query T
select range(-1, -20, -3)
----
[-1,-4,-7,-10,-13,-16,-19]

statement error
select range(10, 5000000011)

statement ok
DROP DATABASE IF EXISTS array_func_test

statement ok
CREATE DATABASE IF NOT EXISTS array_func_test

statement ok
USE array_func_test

statement ok
DROP TABLE IF EXISTS t

statement ok
create table t(index int default 10, col1 Array(Int Null) not null, col2 Array(String) not null, col3 Array(Date) not null, col4 Array(Timestamp) not null, col5 Array(Array(Int null)) not null)

statement ok
insert into t(col1, col2, col3, col4, col5) values([1,2,3,3],['x','x','y','z'], ['2022-02-02'], ['2023-01-01 02:00:01'], [[1,2],[],[null]])

query IIII
select length(col1), length(col2), length(col3), length(col4) from t
----
4 4 1 1

query II
select array_length(col1), array_length(col2) from t
----
4 4

query II
select array_size(col3), array_size(col4) from t
----
1 1

query ITT
select get(col1, index - 7), get(col2, index - 8), get(col3, index - 9) from t
----
3 x 2022-02-02

query TTTTT
select slice(col1, index - 9), slice(col1, -3), slice(col1, 2, 3), slice(col2, 2), slice(col2, 3, 3) from t
----
[1,2,3,3] [2,3,3] [2,3] ['x','y','z'] ['y']

query BBB
select contains(col1, 3), contains(col2, 'x'), contains(col3, '2021-01-01') from t
----
1 1 0

query T
select array_concat(col1::Array(VARIANT), col5::Array(VARIANT)) from t
----
['1','2','3','3','[1,2]','[]','[null]']

query T
select array_concat(col4, col3) from t;
----
['2023-01-01 02:00:01.000000','2022-02-02 00:00:00.000000']

query IIIIII
select array_indexof(col1, 2), array_indexof(col1,2), array_indexof(col2,'x'), array_indexof(col3,'2022-02-02'::DATE), array_indexof(col4,'2023-01-01 02:00:02'::TIMESTAMP), array_indexof(col5,[NULL]) from t
----
2 2 1 1 0 3

query I
select array_indexof([1,2,null,2,null], null)
----
3

query TTT
select array_remove_first(col1), array_remove_first(col2), array_remove_first(col3) from t
----
[2,3,3] ['x','y','z'] []

query TTT
select array_remove_last(col1), array_remove_last(col2), array_remove_last(col3) from t
----
[1,2,3] ['x','x','y'] []

query TTT
select array_prepend(0, col1), array_prepend('a', col2), array_prepend('2022-01-01'::DATE, col3) from t
----
[0,1,2,3,3] ['a','x','x','y','z'] ['2022-01-01','2022-02-02']

query TTT
select array_append(col1, 4), array_append(col2, 'z'), array_append(col3, '2022-03-03'::DATE) from t
----
[1,2,3,3,4] ['x','x','y','z','z'] ['2022-02-02','2022-03-03']

query III
select array_unique(col1), array_unique(col2), array_unique(col3) from t
----
3 3 1

query TTT
select array_distinct(col1), array_distinct(col2), array_distinct(col3) from t
----
[1,2,3] ['x','y','z'] ['2022-02-02']

query T
select array_distinct([array_distinct([NULL, NULL])])
----
[[]]

query T
select array_distinct(array_distinct([NULL, NULL]))
----
[]

query T
select array_distinct([null, null, 1, 1])
----
[1]

query I
select array_sum(col1) from t
----
9

query T
select array_avg(col1) from t
----
2.25

query III
select array_count(col1), array_count(col2), array_count(col3) from t
----
4 4 1

query ITT
select array_max(col1), array_max(col2), array_max(col3) from t
----
3 z 2022-02-02

query ITT
select array_min(col1), array_min(col2), array_min(col3) from t
----
1 x 2022-02-02

query ITT
select array_any(col1), array_any(col2), array_any(col3) from t
----
1 x 2022-02-02

query F
select array_stddev_samp(col1) from t
----
0.9574271077563381

query FFF
select array_stddev_pop(col1), array_stddev(col1), array_std(col1) from t
----
0.82915619758885 0.9574271077563381 0.82915619758885

query F
select array_median(col1) from t
----
2.5

query II
select array_approx_count_distinct(col1), array_approx_count_distinct(col2) from t
----
3 3

query F
select array_kurtosis(col1) from t
----
-1.2892561983471085

query F
select array_skewness(col1) from t
----
-0.8545630383279711

query III
select array_aggregate(col1, 'max'), array_aggregate(col1, 'min'), array_aggregate(col1, 'sum') from t
----
3 1 9

query III
select array_aggregate(col1, 'max'), array_aggregate(col1, 'min'), array_aggregate(col1, 'sum') from t
----
3 1 9

query TTTTTTTT
select array_sort(col1),array_sort(col2),array_sort(col3),array_sort(col4),array_sort(col5), array_sort([NULL, NULL, NULL]), array_sort([[], [], []]), array_sort([{}, {}, {}]) from t
----
[1,2,3,3] ['x','x','y','z'] ['2022-02-02'] ['2023-01-01 02:00:01.000000'] [[],[NULL],[1,2]] [NULL,NULL,NULL] [[],[],[]] [{},{},{}]

query TTTTT
select array_sort(col1, 'asc', 'NULLS FIRST'),array_sort(col2, 'desc'),array_sort(col3, 'desc', 'nulls last'),array_sort(col4),array_sort(col5, 'DESC', 'NULLS FIRST') from t
----
[1,2,3,3] ['z','y','x','x'] ['2022-02-02'] ['2023-01-01 02:00:01.000000'] [[1,2],[NULL],[]]

statement error 1065
select array_sort(col1, 'asc', 'nulls fir') from t;

statement error 1065
select array_sort(col1, 'asca', 'nulls first') from t;

query T
select array_transform([1, 2, NULL, 3], x -> x + 1)
----
[2,3,NULL,4]

query T
select array_transform(['data', 'a', 'b'], data -> CONCAT(data, 'bend'))
----
['databend','abend','bbend']

query T
select array_apply(array_apply([5, NULL, 6], x -> COALESCE(x, 0) + 1), y -> y + 10)
----
[16,11,17]

query TT
select array_transform(col1, A -> a * 2), array_apply(col2, B -> upper(B)) from t
----
[2,4,6,6] ['X','X','Y','Z']

statement error 1065
select array_transform([1, 2], x -> y + 1)

statement error 1065
select array_transform([1, 2], x -> count(*))

query T
select array_filter([5, -6, NULL, 7], x -> x > 0)
----
[5,7]

query T
select array_filter(['Hello', 'abc World'], x -> x LIKE '%World%');
----
['abc World']

query T
select array_filter(array_filter([2, 4, 3, 1, 20, 10, 3, 30], x -> x % 2 = 0), y -> y % 5 = 0)
----
[20,10,30]

query TT
select array_filter(col1, a -> a % 2 = 1), array_filter(col2, b -> b = 'x') from t
----
[1,3,3] ['x','x']

query T
with t as (select [2,3] as y) select array_filter([1,2], el -> not contains(y, el)) from t
----
[1]

statement error 1065
select array_filter([1, 2], x -> x + 1)

query TT
select array_flatten( [ [1,2], [3,4] ] ), array_to_string(['open', 'ai', null], ' love ');
----
[1,2,3,4]	open love ai

query T
select col1 from t where get(array_transform(col1, x -> x + 1), 1) = 2
----
[1,2,3,3]

query T
select array_reduce([],(x,y)->x+y), array_reduce([null],(x,y)->x+y), array_reduce(null,(x,y)->x+y);
----
[] NULL NULL

query TT
select array_reduce([1,2,3],(x,y)->x+y-1), array_reduce([3,4,5],(x,y)->x-y)
----
4 -6

query T
select array_reduce([1, 2,null], (x,y) -> x + y)
----
NULL

query T
select array_reduce([1.21312,2.21332,3.2213],(x,y)->(x+y))
----
6.64774

query T
select array_reduce(['hello', 'world'], (x,y) -> x || y)
----
helloworld

query T
select array_reduce(col1,(x,y)->x+y+1) from t
----
12

statement ok
DROP TABLE IF EXISTS t1

statement ok
create table t1(col1 Array(Int Null) not null, col2 Array(Float Null) not null, col3 Array(Decimal (10,5)Null) not null, col4 Array(String Null) not null)

statement ok
insert into t1 values([1,2,3], [3.1, 5.42, 6.25], [1.1231, 4.131, 6.56], ['hello', 'world', '2024'])

query TTTT
select array_reduce(col1,(x,y)->x+y), array_reduce(col2,(x,y)->x-y), array_reduce(col3,(x,y)->x+y), array_reduce(col4,(x,y)->x||y) from t1
----
6 -8.570000171661377 11.81410 helloworld2024


query IIII
select length(col1), length(col2), length(col3), length(col4) from t
----
4 4 1 1

query IIII
select array_size(col1), array_size(col2), array_length(col3), array_length(col4) from t1
----
3 3 3 3

statement ok
DROP TABLE IF EXISTS t2

statement ok
create table t2(col1 Array(Int Null) Null, col2 Array(String Null) Null, col3 Array(Array(String Null) NOT NULL) Null)

statement ok
insert into t2 values([1,2,3], ['a','b','c'], [['k1','k2'],['k3']]), (null, null, null), ([5,6,null], ['x',null,'y'], [['k4'],['k5']])

query TT
select array_concat(col1, [10,11]), array_concat(['x','y'], col2) from t2
----
[1,2,3,10,11] ['x','y','a','b','c']
NULL NULL
[5,6,NULL,10,11] ['x','y','x',NULL,'y']

query T
select array_flatten(col3) from t2
----
['k1','k2','k3']
NULL
['k4','k5']

query TT
select array_prepend(0, col1), array_prepend('v', col2) from t2
----
[0,1,2,3] ['v','a','b','c']
[0] ['v']
[0,5,6,NULL] ['v','x',NULL,'y']

query TT
select array_append(col1, 10), array_append(col2, 'z') from t2
----
[1,2,3,10] ['a','b','c','z']
[10] ['z']
[5,6,NULL,10] ['x',NULL,'y','z']

statement ok
DROP TABLE IF EXISTS t3

statement ok
create table t3(col1 Array(Int Null) Null, col2 Int Null)

statement ok
insert into t3 values([1,2,3], 2),([4,5], null),(null, 4),([7,8], 5)

query TT
select array_transform(col1, a -> a + col2), array_filter(col1, a -> a = col2), array_reduce(col1, (x, y) -> col2 + x + y) from t3;
----
[3,4,5] [2] 10
[NULL,NULL] [] NULL
NULL NULL NULL
[12,13] [] 20

## json array functions

query T
select json_array_transform(['data', 'a', 'b']::Variant, data -> CONCAT(data::String, 'bend') );
----
["databend","abend","bbend"]

query TT
select json_array_transform(try_cast(col1 as Variant), a -> a::Int + col2), json_array_filter(try_cast(col1 as Variant), a -> a::Int = col2) from t3;
----
[3,4,5] [2]
[null,null] []
NULL NULL
[12,13] []

query TT
select array_transform(try_cast(col1 as Variant), a -> a::Int + col2), array_filter(try_cast(col1 as Variant), a -> a::Int = col2) from t3;
----
[3,4,5] [2]
[null,null] []
NULL NULL
[12,13] []

query TT
select json_array_reduce([1,2,3,4]::Variant, (x, y) -> 3 + x + y), json_array_transform(parse_json('"aa"'), data -> CONCAT(data::String, 'bend'));
----
19 []

query TT
select array_reduce([1,2,3,4]::Variant, (x, y) -> 3 + x + y), array_transform(parse_json('"aa"'), data -> CONCAT(data::String, 'bend'));
----
19 []

statement ok
create or replace table t4(col1 Variant Null)

statement ok
insert into t4 values('[3,2,1,1]'),('[4,5,null,true]'),(null),('[7,"c","d"]')

query TTTT
select array_count(col1), array_max(col1), array_min(col1), array_approx_count_distinct(col1) from t4;
----
4 3 1 3
4 null true 4
NULL NULL NULL NULL
3 "d" 7 3

query TTTTT
select array_sort(col1), array_unique(col1), array_remove_first(col1), array_remove_last(col1), array_distinct(col1) from t4;
----
[1,1,2,3] 3 [2,1,1] [3,2,1] [3,2,1]
[true,4,5,null] 4 [5,null,true] [4,5,null] [4,5,null,true]
NULL NULL NULL NULL NULL
[7,"c","d"] 3 ["c","d"] [7,"c"] [7,"c","d"]

query T
SELECT arrays_zip(1, 'a', null);
----
[(1,'a',NULL)]

query T
SELECT arrays_zip([1,2,3], ['a','b','c'], 10);
----
[(1,'a',10),(2,'b',10),(3,'c',10)]

statement error 1006
SELECT arrays_zip([1,2,3], ['a','b'], 10);

query T
SELECT arrays_zip(col1, col2) FROM t3;
----
[(1,2),(2,2),(3,2)]
[(4,NULL),(5,NULL)]
[(NULL,4)]
[(7,5),(8,5)]

#issue 17400

statement ok
CREATE OR REPLACE TABLE u (id VARCHAR NULL);

statement ok
INSERT INTO u VALUES(1),(2);

statement ok
CREATE OR REPLACE TABLE c (
  id VARCHAR NULL,
  what_fuck BOOLEAN NOT NULL,
  payload VARIANT NULL
);

statement ok
INSERT INTO c VALUES(1, true, '[1,2]'),(1, false, '[3,4]'),(2, true, '123');

query IT
SELECT ids.id, array_filter(array_agg(px.payload), x -> x is not null) AS px_payload
  FROM u ids LEFT JOIN c px ON px.id = ids.id
  GROUP BY ids.id ORDER BY ids.id;
----
1 ['[1,2]','[3,4]']
2 ['123']

query T
SELECT array_compact([1, NULL, 2, NULL, 3])
----
[1,2,3]

query T
SELECT array_compact([NULL, NULL, NULL])
----
[]

query T
SELECT array_intersection([1, 2, 3], [2, 4])
----
[2]

query T
SELECT array_intersection([1, 2, 3, 3, 3, null], [1, 2, 3, null])
----
[1,2,3,NULL]

query T
SELECT array_except([1, 2, 3], [2, 4])
----
[1,3]

query T
SELECT array_except([1, 2, 3, 3, 3, null, null], [null, 1, 2, 3])
----
[3,3,NULL]

query B
SELECT array_overlap([1, 2, 3], [2, 4, 5])
----
1

query B
SELECT array_overlap([1, 2, 3], [4, 5, 6])
----
0

query B
SELECT array_overlap([NULL, 1, 2], [NULL])
----
1

query T
SELECT array_remove([1, 2, 3, 2], 2)
----
[1,3]

query T
SELECT array_remove([1, 2, 3], 4)
----
[1,2,3]

query T
SELECT array_remove(['a', 'b', 'a', null], 'a')
----
['b',NULL]

query T
SELECT array_remove([NULL, 1, 2, NULL], NULL)
----
[1,2]

query T
SELECT array_reverse([1, 2, 3])
----
[3,2,1]

query T
SELECT array_reverse(['a', 'b', 'c', null])
----
[NULL,'c','b','a']


statement ok
USE default

statement ok
DROP DATABASE array_func_test

