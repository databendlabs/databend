query I
SELECT sum(number) from numbers_mt(10000)
----
49995000

query I
SELECT min(number) from numbers_mt(10000)
----
0

query I
SELECT max(number) from numbers_mt(10000)
----
9999

query F
SELECT avg(number) from numbers_mt(10000)
----
4999.5

query I
SELECT count(number) from numbers_mt(10000)
----
10000

query F
SELECT sum(number)/count(number) from numbers_mt(10000)
----
4999.5

query I
SELECT arg_min(number, number) from numbers_mt(10000)
----
0

query I
SELECT arg_min(a, b) from (select number + 5 as a, number - 5 as b from numbers_mt(10000))
----
5

query I
SELECT arg_min(b, a) from (select number + 5 as a, number - 5 as b from numbers_mt(10000))
----
-5

query I
SELECT arg_max(number, number) from numbers_mt(10000)
----
9999

query I
SELECT arg_max(a, b) from (select number + 5 as a, number - 5 as b from numbers_mt(10000))
----
10004

query I
SELECT arg_max(b, a) from (select number + 5 as a, number - 5 as b from numbers_mt(10000))
----
9994

query I
SELECT arg_max(a, b) from (select number + 5 as a, cast(number as varchar(255)) as b from numbers_mt(10000))
----
10004

query T
SELECT arg_max(b, a) from (select number + 5 as a, cast(number as varchar(255)) as b from numbers_mt(10000))
----
9999

query I
select count(distinct number, number + 1 , number + 3 ) from ( select number % 100 as number from numbers(100000))
----
100

query I
select count(distinct 3) from numbers(10000)
----
1

query B
select uniq(number, number + 1 , number + 3 )  =  count(distinct number, number + 1 , number + 3 ) from ( select number % 100 as number from numbers(100000))
----
1

query B
select uniq(number::Float64)  = 100 from ( select number % 100 as number from numbers(100000))
----
1

query B
SELECT std(number) between  2886.751 and 2886.752 from numbers_mt(10000)
----
1

query B
SELECT stddev_pop(number) between  2886.751 and 2886.752 from numbers_mt(10000)
----
1


query F
SELECT covar_samp(number, number) from (select * from numbers_mt(5) order by number asc)
----
2.5

query F
SELECT covar_pop(number, number) from (select * from numbers_mt(5) order by number asc)
----
2.0

statement ok
DROP DATABASE IF EXISTS db1

statement ok
CREATE DATABASE db1

statement ok
USE db1

statement ok
CREATE TABLE IF NOT EXISTS t1(id Int null, var Variant null) Engine = Fuse

statement ok
INSERT INTO t1 SELECT 1, parse_json('{"k":"v"}')

statement ok
INSERT INTO t1 SELECT 2, parse_json('"abcd"')

query TT
SELECT max(var), min(var) FROM t1
----
{"k":"v"} "abcd"

query II
SELECT arg_max(id, var), arg_min(id, var) FROM (SELECT id, var FROM t1)
----
1 2

statement ok
INSERT INTO t1 SELECT 3, parse_json('[1,2,3]')

statement ok
INSERT INTO t1 SELECT 4, parse_json('10')


query II
SELECT arg_max(id, var), arg_min(id, var) FROM (SELECT id, var FROM t1)
----
3 4

statement ok
INSERT INTO t1 SELECT 5, parse_json('null')

statement ok
INSERT INTO t1 SELECT 6, parse_json('true')

query TT
SELECT max(var), min(var) FROM t1
----
null true

query II
SELECT arg_max(id, var), arg_min(id, var) FROM (SELECT id, var FROM t1)
----
5 6

statement ok
CREATE TABLE IF NOT EXISTS t2(id Int null, arr Array(Int32)) Engine = Fuse

statement ok
INSERT INTO t2 VALUES(1, [1,2,3])

statement ok
INSERT INTO t2 VALUES(2, [1,2,4])

statement ok
INSERT INTO t2 VALUES(3, [3,4,5])

query TT
SELECT max(arr), min(arr) FROM t2
----
[3,4,5] [1,2,3]

query II
SELECT arg_max(id, arr), arg_min(id, arr) FROM (SELECT id, arr FROM t2)
----
3 1

query IIFI
select number % 3,   sum(number), avg(number),  count() from numbers(100) group by number % 3  order by number % 3
----
0 1683 49.5 34
1 1617 49.0 33
2 1650 50.0 33

query I
SELECT median(number) from numbers_mt(10000)
----
4999.5

query I
SELECT median_tdigest(number) from numbers_mt(10000)
----
4999.5

query I
SELECT quantile_cont(0.6)(number) from numbers_mt(10000)
----
5999.4

query F
SELECT quantile_cont(0)(number) from numbers_mt(10000)
----
0.0

query F
SELECT quantile_cont(1)(number) from numbers_mt(10000)
----
9999.0

query T
SELECT quantile_cont(0, 0.5, 0.6, 1)(number) from numbers_mt(10000);
----
[0.0,4999.5,5999.4,9999.0]

query T
SELECT quantile_cont(0, 0.5, 0.6, 1)(number::decimal(10,2)) from numbers_mt(10000);
----
[0.00,4999.00,5999.00,9999.00]

statement error 1010
SELECT quantile_cont(5)(number) from numbers_mt(10000)

query T
SELECT quantile_disc(0, 0.5, 0.6, 1)(number) from numbers_mt(10000);
----
[0,4999,5999,9999]

query T
SELECT quantile_disc(0, 0.5, 0.6, 1)(number::decimal(10,2)) from numbers_mt(10000);
----
[0.00,4999.00,5999.00,9999.00]

query F
SELECT quantile_tdigest(0.6)(number) from numbers_mt(10000)
----
5999.5

query T
SELECT quantile_tdigest(0, 0.5, 0.6, 1)(number) from numbers_mt(10000)
----
[0.0,4999.5,5999.5,9999.0]

query F
SELECT quantile_tdigest_weighted(0.6)(number, 1) from numbers_mt(10000)
----
5999.5

query T
SELECT quantile_tdigest_weighted(0, 0.5, 0.6, 1)(number, 1) from numbers_mt(10000)
----
[0.0,4999.5,5999.5,9999.0]

query T
SELECT list(number) from numbers_mt(10)
----
[0,1,2,3,4,5,6,7,8,9]

query TT
SELECT array_sort(list(id), 'asc'), array_sort(list(var), 'asc') FROM t1;
----
[1,2,3,4,5,6] ['true','10','"abcd"','{"k":"v"}','[1,2,3]','null']

query TT
SELECT array_sort(list(id), 'asc'), array_sort(list(arr), 'asc') FROM t2;
----
[1,2,3] [[1,2,3],[1,2,4],[3,4,5]]

query I
select kurtosis(10) from numbers(5)
----
0.0

statement ok
create table aggr(k int, v int, v2 int null);

statement ok
insert into aggr values
    (1, 10, null),
    (2, 10, 11),
    (2, 10, 15),
    (2, 10, 18),
    (2, 20, 22),
    (2, 20, 25),
    (2, 25, null),
    (2, 30, 35),
    (2, 30, 40),
    (2, 30, 50),
    (2, 30, 51);

query III
select kurtosis(k), kurtosis(v), kurtosis(v2) from aggr;
----
10.99999999999836	-1.9614277138467147	-1.4451196915855287

query I
select  kurtosis(v2) from aggr group by v order by v;
----
0.0
0.0
NULL
-3.9775993237531697

query I
select skewness (10) from numbers(5)
----
0.0

query I
select skewness(number), kurtosis(number) from (select if(number > 5, number::double, 'NAN'::Double) as number from numbers(100));
----
NaN NaN

query I
select skewness(number), kurtosis(number) from (select if(number > 5, number::double, 'INF'::Double) as number from numbers(100));
----
NaN NaN

query III
select skewness(k), skewness(v), skewness(v2) from aggr
----
-3.316624790355393	-0.16344366935199225	0.3654008511025841

query I
select skewness(v2) from aggr group by v order by v
----
-0.4232731602681443
0.0
NULL
-0.3301409513655613

query TTT
select group_array_moving_avg(k), group_array_moving_avg(2)(v) from aggr;
----
[0.09090909090909091,0.2727272727272727,0.45454545454545453,0.6363636363636364,0.8181818181818182,1.0,1.1818181818181819,1.3636363636363635,1.5454545454545454,1.7272727272727273,1.9090909090909092] [5.0,10.0,10.0,10.0,15.0,20.0,22.5,27.5,30.0,30.0,30.0]

statement error 2004
SELECT group_array_moving_sum('x')(-1130932975.87767);

query TTT
select group_array_moving_sum(k), group_array_moving_sum(2)(v) from aggr;
----
[1,3,5,7,9,11,13,15,17,19,21] [10,20,20,20,30,40,45,55,60,60,60]

statement ok
create table t3(s string null, x int null, y int null, z int null, b boolean null, arr Array(Int32));

statement ok
insert into t3 values
    ('abc', 3, 1, 2, true, [1,2,3]),
    ('def', 2, 1, null, false, [4,5,6]),
    (null, 1, 2, 1, null, [7,8,9]),
    ('xyz', 0, 2, 0, true, [10,11,12]);

query T
select string_agg(s) from t3;
----
abcdefxyz

query T
select string_agg(s, '-') from t3;
----
abc-def-xyz

query T
select string_agg(s, '|') from t3;
----
abc|def|xyz

query T
select string_agg(x + 1, '|') from t3;
----
4|3|2|1

query T
select string_agg(b, '|') from t3;
----
true|false|true

statement error
select listagg(arr) from t3;

query T
select listagg(s) from t3;
----
abcdefxyz

query T
select listagg(s, '-') from t3;
----
abc-def-xyz

query T
select listagg(s, '|') from t3;
----
abc|def|xyz

query T
select listagg(s, '|') from t3;
----
abc|def|xyz

query T
select listagg(s, '|') within group (order by s desc) from t3;
----
xyz|def|abc

query T
select listagg(s, '|') within group (order by x desc) from t3;
----
abc|def|xyz

query T
select listagg(s, '|') within group (order by x + 1 desc) from t3;
----
abc|def|xyz

query T
select listagg(s, '|') within group (order by z desc) from t3;
----
abc|xyz|def

query T
select listagg(s, '|') within group (order by z desc nulls first) from t3;
----
def|abc|xyz

query T
select listagg(s, '|') within group (order by z desc nulls last) from t3;
----
abc|xyz|def

query T
select listagg(concat('Hello ', s), '|') within group (order by y + 1 desc, x desc) from t3;
----
Hello xyz|Hello abc|Hello def

query T
select array_agg(x) within group (order by y + 1 desc, x desc) from t3;
----
[1,0,3,2]

query T
select array_agg(x) within group (order by x desc) from t3;
----
[3,2,1,0]

query TT
select array_agg(s), array_agg(null) from t3;
----
['abc','def',NULL,'xyz'] [NULL,NULL,NULL,NULL]

statement ok
create table aggavg(shopid string, goodsid string, avgcostvalue decimal(16, 8), sdate_rn uint64, md string)

statement ok
insert into aggavg values('R010', '149350', 18.66635193, 1, 246), ('R010', '149350', 19.33000000, 1, 246)

statement ok
create table aggavg1 as select t.goodsid, t.md, avg(t.avgcostvalue) avgcostvalue_1, sum(t.avgcostvalue) ss, count(t.avgcostvalue) cnt from aggavg t where t.sdate_rn = 1 group by t.goodsid, t.md

query TTFFF
select * from aggavg1
----
149350 246 18.998175965000 37.99635193 2

statement ok
DROP TABLE aggr

statement ok
DROP TABLE IF EXISTS d

statement ok
create table d(a decimal(10, 2), b string, c int, d variant, e array(string))

statement ok
insert into d values
    (20, 'abc', null, '{"k":"v"}', ['a','b']),
    (10, 'de', 100, 'null', []),
    (4.23, null, 200, '"uvw"', ['x','y']),
    (5.99, 'xyz', 300, '[1,2,3]', ['z'])


query F
select stddev_samp(a) from d;
----
7.055988000745655

query F
select stddev_samp(a) from d where b = 'abc';
----
NULL

query TTTTT
select json_array_agg(a), json_array_agg(b), json_array_agg(c), json_array_agg(d), json_array_agg(e), json_array_agg('a') from d
----
[20.0,10.0,4.23,5.99] ["abc","de","xyz"] [100,200,300] [{"k":"v"},null,"uvw",[1,2,3]] [["a","b"],[],["x","y"],["z"]] ["a","a","a","a"]

query TTTTT
select json_object_agg(b, a), json_object_agg(b, c), json_object_agg(b, d), json_object_agg(b, e), json_object_agg(b, 'a') from d
----
{"abc":20.0,"de":10.0,"xyz":5.99} {"de":100,"xyz":300} {"abc":{"k":"v"},"de":null,"xyz":[1,2,3]} {"abc":["a","b"],"de":[],"xyz":["z"]} {"abc":"a","de":"a","xyz":"a"}

query TTTTT
select array_agg(a), array_agg(b), array_agg(c), array_agg(d), array_agg(e), array_agg('a') from d
----
[20.00,10.00,4.23,5.99] ['abc','de',NULL,'xyz'] [NULL,100,200,300] ['{"k":"v"}','null','"uvw"','[1,2,3]'] [['a','b'],[],['x','y'],['z']] ['a','a','a','a']

statement ok
DROP TABLE d

statement ok
create or replace table aggr(k int, v decimal(10,2));

query I
select mode(v) from aggr;
----
NULL

statement ok
insert into aggr (k, v) values
    (1, 10),
    (1, 10),
    (1, 10),
    (2, 20),
    (2, 20),
    (2, 21),
    (3, null);

query I
select mode(v) from aggr;
----
10.00

query II
select k, mode(v) from aggr group by k order by k;
----
1 10.00
2 20.00
3 NULL

statement ok
DROP TABLE aggr

statement ok
DROP DATABASE db1
