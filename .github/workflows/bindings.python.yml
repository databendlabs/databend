name: Bindings Python

on:
  workflow_dispatch:
    inputs:
      version:
        description: Version to build (optional, leave empty for development build)
        required: false
        type: string
        default: ""
      build_type:
        description: Build type
        required: false
        type: choice
        default: "development"
        options:
          - "development"
          - "release"
  workflow_call:
    inputs:
      version:
        description: Version to release
        required: true
        type: string

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}-${{ github.event_name }}
  cancel-in-progress: true

permissions:
  id-token: write
  pull-requests: write
  contents: read
  packages: write

jobs:
  # Get version info
  get-version:
    if: always()
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      is_release: ${{ steps.version.outputs.is_release }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Determine version
        id: version
        shell: bash
        run: |
          if [[ -n "${{ inputs.version }}" ]]; then
            # Use provided version
            VERSION="${{ inputs.version }}"
            echo "Using provided version: $VERSION"
          elif [[ "${{ inputs.build_type }}" == "release" ]]; then
            # Get latest tag for release build
            VERSION=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.1.0")
            echo "Using latest tag: $VERSION"
          else
            # Development build
            VERSION=""
            echo "Development build - no version"
          fi
          
          IS_RELEASE=$([[ "${{ inputs.build_type }}" == "release" || -n "${{ inputs.version }}" ]] && echo "true" || echo "false")
          
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "is_release=$IS_RELEASE" >> $GITHUB_OUTPUT
          echo "Final version: $VERSION, is_release: $IS_RELEASE"

  test:
    # Run tests on workflow dispatches
    if: github.event_name == 'workflow_dispatch'
    needs: [get-version]
    runs-on:
      - self-hosted
      - X64
      - Linux
      - 4c16g
      - aws
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - uses: ./.github/actions/build_bindings_python
        with:
          target: x86_64-unknown-linux-gnu
          version: ${{ needs.get-version.outputs.is_release == 'true' && needs.get-version.outputs.version || '' }}

  linux:
    # Run for release builds (workflow_call with version OR workflow_dispatch with release type)
    if: (github.event_name == 'workflow_call' && inputs.version) || (github.event_name == 'workflow_dispatch' && needs.get-version.outputs.is_release == 'true')
    needs: [get-version]
    runs-on:
      - self-hosted
      - "${{ matrix.runner }}"
      - Linux
      - 4c16g
      - aws
    strategy:
      matrix:
        include:
          - { arch: x86_64, runner: X64 }
          # - { arch: aarch64, runner: ARM64 }
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - uses: ./.github/actions/build_bindings_python
        with:
          target: ${{ matrix.arch }}-unknown-linux-gnu
          version: ${{ github.event_name == 'workflow_call' && inputs.version || needs.get-version.outputs.version }}
      - name: upload
        uses: actions/upload-artifact@v4
        with:
          name: python-linux-${{ matrix.arch }}
          path: src/bendpy/dist/*.whl

  # macos:
  #   if: (github.event_name == 'workflow_call' && inputs.version) || (github.event_name == 'workflow_dispatch' && needs.get-version.outputs.is_release == 'true')
  #   needs: [get-version]
  #   runs-on: macos-latest
  #   strategy:
  #     matrix:
  #       arch:
  #         - aarch64
  #   steps:
  #     - uses: actions/checkout@v4
  #       with:
  #         fetch-depth: 0
  #     - uses: ./.github/actions/build_bindings_python
  #       with:
  #         target: ${{ matrix.arch }}-apple-darwin
  #         version: ${{ github.event_name == 'workflow_call' && inputs.version || needs.get-version.outputs.version }}
  #     - name: upload
  #       uses: actions/upload-artifact@v4
  #       with:
  #         name: python-macos-${{ matrix.arch }}
  #         path: src/bendpy/dist/*.whl

  publish:
    if: (github.event_name == 'workflow_call' && inputs.version) || (github.event_name == 'workflow_dispatch' && needs.get-version.outputs.is_release == 'true')
    name: Publish
    needs: [get-version, linux]
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      pull-requests: write
      contents: read
      packages: write
    steps:
      - uses: actions/checkout@v4
      - uses: actions/download-artifact@v4
        with:
          pattern: python-*
          merge-multiple: true
          path: src/bendpy/dist

      - name: Publish to PyPI
        timeout-minutes: 10
        run: |
          pip install twine
          twine upload --skip-existing --verbose src/bendpy/dist/*.whl
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
