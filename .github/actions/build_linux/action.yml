name: "Build Linux"
description: "Build with profile"
inputs:
  sha:
    description: "Git commit sha"
    required: true
  target:
    description: ""
    required: true
  upload:
    description: "Upload artifact"
    required: false
    default: "true"
  artifacts:
    description: "Artifacts to build"
    required: false
    default: "sqllogictests,meta,query"
  features:
    description: "Features to build"
    required: false
    default: "default"
  category:
    description: "Category to upload"
    required: false
    default: "default"
runs:
  using: "composite"
  steps:
    - name: Setup Build Tool
      uses: ./.github/actions/setup_build_tool
      with:
        target: ${{ inputs.target }}
        bypass_env_vars: RUSTFLAGS,RUST_LOG,DATABEND_ENTERPRISE_LICENSE_PUBLIC_KEY

    - name: Cross setup
      if: startsWith(inputs.target, 'aarch64-')
      shell: bash
      run: |
        echo "JEMALLOC_SYS_WITH_LG_PAGE=16" >> $GITHUB_ENV

    - name: Set Build Flags
      shell: bash
      run: |
        case ${{ inputs.target }} in
          x86_64-unknown-linux-gnu)
            flags="-C target-feature=+sse4.2"
            ;;
          x86_64-unknown-linux-musl)
            flags="-C target-feature=+sse4.2"
            ;;
          aarch64-unknown-linux-gnu)
            flags=""
            ;;
          aarch64-unknown-linux-musl)
            flags=""
            ;;
          *)
            flags=""
            ;;
        esac
        if [[ ! -z "${flags}" ]]; then
          echo "RUSTFLAGS=${flags}" >> $GITHUB_ENV
        fi
        target=${{ inputs.target }}
        echo "BUILD_ARCH=${target/-unknown-linux-*}" >> $GITHUB_ENV

    - name: Build Release
      if: inputs.artifacts == 'all'
      shell: bash
      run: |
        artifacts="meta,metactl,metabench,query,sqllogictests,bendsave"
        binaries=""
        for artifact in ${artifacts//,/ }; do
          binaries="${binaries} --bin databend-$artifact"
        done
        cargo -Zgitoxide=fetch -Zgit=shallow-index,shallow-deps build --target ${{ inputs.target }} --features ${{ inputs.features }} --profile ${{ env.BUILD_PROFILE }} ${binaries}
        ls -lh ./target/${{ inputs.target }}/${{ env.BUILD_PROFILE }}/databend-*

    - name: Build Release for specific artifacts
      if: inputs.artifacts != 'all'
      shell: bash
      run: |
        artifacts="${{ inputs.artifacts }}"
        for artifact in ${artifacts//,/ }; do
          echo "==> building databend-$artifact ..."
          cargo -Zgitoxide=fetch -Zgit=shallow-index,shallow-deps build --target ${{ inputs.target }} --features ${{ inputs.features }} --profile ${{ env.BUILD_PROFILE }} --bin databend-$artifact
          ls -lh ./target/${{ inputs.target }}/${{ env.BUILD_PROFILE }}/databend-$artifact
        done

    - name: Check Binary Info
      shell: bash
      run: |
        readelf -p .comment ./target/${{ inputs.target }}/${{ env.BUILD_PROFILE }}/databend-query || true
        ldd ./target/${{ inputs.target }}/${{ env.BUILD_PROFILE }}/databend-query || true

    - name: Spilt Binary Symbols
      shell: bash
      run: |
        objcopy --only-keep-debug ./target/${{ inputs.target }}/${{ env.BUILD_PROFILE }}/databend-query ./target/${{ inputs.target }}/${{ env.BUILD_PROFILE }}/databend-query.debug
        chmod 0644 ./target/${{ inputs.target }}/${{ env.BUILD_PROFILE }}/databend-query.debug
        strip --strip-debug --remove-section=.comment --remove-section=.note ./target/${{ inputs.target }}/${{ env.BUILD_PROFILE }}/databend-query
        pushd ./target/${{ inputs.target }}/${{ env.BUILD_PROFILE }} && objcopy --add-gnu-debuglink databend-query.debug databend-query && popd

    # - name: Compress Binaries with UPX
    #   if: env.BUILD_PROFILE == 'debug'
    #   uses: crazy-max/ghaction-upx@v2
    #   with:
    #     files: ./target/${{ inputs.target }}/${{ env.BUILD_PROFILE }}/databend-*

    - name: Upload artifact
      if: inputs.upload == 'true'
      uses: ./.github/actions/artifact_upload
      with:
        sha: ${{ inputs.sha }}
        target: ${{ inputs.target }}
        category: ${{ inputs.category }}
