name: "Build Bindings python"
description: "Build with python bindings"
inputs:
  target:
    description: ""
    required: true
  version:
    description: ""
    required: false
runs:
  using: "composite"
  steps:
    - name: Generate version
      working-directory: src/bendpy
      if: inputs.version
      shell: bash
      run: |
        VERSION=`echo ${{ inputs.version }} | grep -Eo '[0-9]+\.[0-9]+\.[0-9]+'`
        echo "building tag and version: git tag: $GIT_TAG version: $VERSION"
        sed "s#version = \"0.1.0\"#version = \"$VERSION\"#g" Cargo.toml > Cargo.toml.bak
        sed "s#version = \"0.1.0\"#version = \"$VERSION\"#g" pyproject.toml > pyproject.toml.bak

        mv Cargo.toml.bak Cargo.toml
        mv pyproject.toml.bak pyproject.toml

        echo "version in Cargo.toml: $(grep 'version' Cargo.toml)"
        echo "version in pyproject.toml: $(grep 'version' pyproject.toml)"

    - name: Get Toolchain
      id: toolchain
      shell: bash
      run: |
        RUST_TOOLCHAIN=$(awk -F'[ ="]+' '$1 == "channel" { print $2 }' rust-toolchain.toml)
        echo "RUST_TOOLCHAIN=${RUST_TOOLCHAIN}" >> $GITHUB_OUTPUT

    - name: Get opts
      id: opts
      shell: bash
      run: |
        if [[ -z "${{ inputs.version }}" ]]; then
          echo "BUILD_ARGS=--strip --out dist" >> $GITHUB_OUTPUT
        else
          echo "BUILD_ARGS=--release --strip --out dist" >> $GITHUB_OUTPUT
        fi

    - name: Cross setup for macOS
      if: endsWith(inputs.target, '-darwin')
      shell: bash
      run: |
        bash ./scripts/setup/dev_setup.sh -yb
        echo "JEMALLOC_SYS_WITH_LG_PAGE=14" >> $GITHUB_ENV
        echo "JEMALLOC_SYS_WITH_MALLOC_CONF=oversize_threshold:0,dirty_decay_ms:5000,muzzy_decay_ms:5000" >> $GITHUB_ENV

    - name: Setup uv
      uses: astral-sh/setup-uv@v5
      with:
        enable-cache: true

    - name: Build wheels
      if: inputs.tag
      uses: PyO3/maturin-action@v1
      with:
        rust-toolchain: ${{ steps.toolchain.outputs.RUST_TOOLCHAIN }}
        working-directory: src/bendpy
        target: ${{ inputs.target }}
        manylinux: "2_28"
        # Keep them in one line due to https://github.com/PyO3/maturin-action/issues/153
        rustup-components: rust-std rustfmt
        args: ${{ steps.opts.outputs.BUILD_ARGS }}
        docker-options: --env RUSTC_WRAPPER=sccache --env SCCACHE_GCS_RW_MODE=READ_WRITE --env SCCACHE_GCS_BUCKET=databend-ci --env SCCACHE_GCS_KEY_PREFIX=cache/sccache/
        before-script-linux: |
          unset RUSTC_WRAPPER
          ../../scripts/setup/dev_setup.sh -yb
          uv venv --python=python3.12
          uv sync --all-groups --all-extras
