name: "Build Bindings python"
description: "Build with python bindings"
inputs:
  target:
    description: ""
    required: true
  version:
    description: ""
    required: false
runs:
  using: "composite"
  steps:
    - name: Generate version
      working-directory: src/bendpy
      if: inputs.version
      shell: bash
      run: |
        # Extract version number or generate test version based on git tag
        if echo "${{ inputs.version }}" | grep -Eq '^[0-9]+\.[0-9]+\.[0-9]+'; then
          VERSION="${{ inputs.version }}"
        else
          # For test builds, use latest tag version with dev suffix
          LATEST_TAG=$(git describe --tags --abbrev=0 | sed 's/^v//')
          # Remove -nightly suffix if present and add dev suffix for test builds
          VERSION=$(echo "$LATEST_TAG" | sed 's/-nightly$//' | sed 's/$/.dev0/')
        fi
        echo "building tag and version: git tag: $GIT_TAG version: $VERSION"
        sed "s#version = \"0.1.0\"#version = \"$VERSION\"#g" Cargo.toml > Cargo.toml.bak
        sed "s#version = \"0.1.0\"#version = \"$VERSION\"#g" pyproject.toml > pyproject.toml.bak

        mv Cargo.toml.bak Cargo.toml
        mv pyproject.toml.bak pyproject.toml

        echo "version in Cargo.toml: $(grep 'version' Cargo.toml)"
        echo "version in pyproject.toml: $(grep 'version' pyproject.toml)"

    - name: Get Toolchain
      id: toolchain
      shell: bash
      run: |
        RUST_TOOLCHAIN=$(awk -F'[ ="]+' '$1 == "channel" { print $2 }' rust-toolchain.toml)
        echo "RUST_TOOLCHAIN=${RUST_TOOLCHAIN}" >> $GITHUB_OUTPUT

    - name: Get opts
      id: opts
      shell: bash
      run: |
        if [[ -z "${{ inputs.version }}" ]]; then
          echo "BUILD_ARGS=--strip --out dist" >> $GITHUB_OUTPUT
        else
          echo "BUILD_ARGS=--release --strip --out dist" >> $GITHUB_OUTPUT
        fi

    - name: Cross setup for macOS
      if: endsWith(inputs.target, '-darwin')
      shell: bash
      run: |
        bash ./scripts/setup/dev_setup.sh -yb
        echo "JEMALLOC_SYS_WITH_LG_PAGE=14" >> $GITHUB_ENV
        echo "JEMALLOC_SYS_WITH_MALLOC_CONF=oversize_threshold:0,dirty_decay_ms:5000,muzzy_decay_ms:5000" >> $GITHUB_ENV

    - name: Setup uv
      uses: astral-sh/setup-uv@v5
      with:
        enable-cache: true

    - name: Build wheels
      if: inputs.version
      uses: PyO3/maturin-action@v1
      with:
        rust-toolchain: ${{ steps.toolchain.outputs.RUST_TOOLCHAIN }}
        working-directory: src/bendpy
        target: ${{ inputs.target }}
        manylinux: "2_28"
        # Keep them in one line due to https://github.com/PyO3/maturin-action/issues/153
        rustup-components: rustfmt
        args: ${{ steps.opts.outputs.BUILD_ARGS }}
        docker-options: --env RUSTC_WRAPPER=sccache --env SCCACHE_GCS_RW_MODE=READ_WRITE --env SCCACHE_GCS_BUCKET=databend-ci --env SCCACHE_GCS_KEY_PREFIX=cache/sccache/ --env MATURIN_NO_AUTO_INSTALL=1
        container-options: --platform linux/amd64
        before-script-linux: |
          unset RUSTC_WRAPPER
          # Add the target for the specified architecture
          rustup target add ${{ inputs.target }}
          # Install cargo-zigbuild manually to avoid musl target issues
          cargo install cargo-zigbuild --target ${{ inputs.target }}
          ../../scripts/setup/dev_setup.sh -yb
          uv venv --python=python3.12
          uv sync --all-groups --all-extras

    - name: Build development wheel and run tests
      if: inputs.version == ''
      shell: bash
      working-directory: src/bendpy
      run: |
        echo "Building development wheel for testing..."
        
        # Setup Rust toolchain
        curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y --default-toolchain ${{ steps.toolchain.outputs.RUST_TOOLCHAIN }}
        source ~/.cargo/env
        rustup component add rustfmt
        
        # Ensure we have a clean environment
        export PATH="$HOME/.local/bin:$PATH"
        export PATH="$HOME/.cargo/bin:$PATH"
        
        echo "Running development build tests..."
        uv tool run maturin develop -E test --quiet
        
        # Run pytest tests
        echo "Executing pytest tests..."
        python -m pytest tests/ -v --tb=short
        
        echo "All Python binding tests passed!"

    - name: Test built wheels
      if: inputs.version != ''
      shell: bash
      working-directory: src/bendpy
      run: |
        echo "Testing built wheels..."
        
        # Install from built wheel for release testing
        uv venv --python python3.12
        source .venv/bin/activate
        uv pip install dist/*.whl
        uv pip install pytest pandas polars pyarrow
        
        # Run pytest tests
        echo "Executing pytest tests..."
        python -m pytest tests/ -v --tb=short
        
        echo "All Python binding tests passed!"
